<?php

use Symfony\Component\Routing\Exception\MethodNotAllowedException;
use Symfony\Component\Routing\Exception\ResourceNotFoundException;
use Symfony\Component\Routing\RequestContext;

/**
 * appProdProjectContainerUrlMatcher.
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appProdProjectContainerUrlMatcher extends Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher
{
    /**
     * Constructor.
     */
    public function __construct(RequestContext $context)
    {
        $this->context = $context;
    }

    public function match($pathinfo)
    {
        $allow = array();
        $pathinfo = rawurldecode($pathinfo);
        $context = $this->context;
        $request = $this->request;

        if (0 === strpos($pathinfo, '/log')) {
            // claro_security_login_check
            if ($pathinfo === '/login_check') {
                return array('_route' => 'claro_security_login_check');
            }

            // claro_security_logout
            if ($pathinfo === '/logout') {
                return array('_route' => 'claro_security_logout');
            }

        }

        if (0 === strpos($pathinfo, '/oauth/v2')) {
            if (0 === strpos($pathinfo, '/oauth/v2/auth')) {
                if (0 === strpos($pathinfo, '/oauth/v2/auth_login')) {
                    // claro_oauth_login
                    if ($pathinfo === '/oauth/v2/auth_login') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\OauthController::oauthLoginAction',  '_route' => 'claro_oauth_login',);
                    }

                    // claro_oauth_login_check
                    if ($pathinfo === '/oauth/v2/auth_login_check') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\OauthController::loginCheckAction',  '_route' => 'claro_oauth_login_check',);
                    }

                }

                // claro_oauth_authorize_form
                if ($pathinfo === '/oauth/v2/auth/form') {
                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\OauthController::authorizeFormAction',  '_route' => 'claro_oauth_authorize_form',);
                }

                // claro_oauth_authorize_submit
                if ($pathinfo === '/oauth/v2/auth/submit') {
                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\OauthController::authorizeSubmitAction',  '_route' => 'claro_oauth_authorize_submit',);
                }

            }

            // claro_oauth_log
            if (0 === strpos($pathinfo, '/oauth/v2/log') && preg_match('#^/oauth/v2/log/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_oauth_log')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\OauthController::logAction',));
            }

        }

        // claroline_get_content_by_id_and_type
        if (0 === strpos($pathinfo, '/content') && preg_match('#^/content/(?P<content>\\d+)(?:/(?P<type>[^/]++)(?:/(?P<father>[^/]++))?)?$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_get_content_by_id_and_type')), array (  'type' => 'home',  'father' => NULL,  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::contentAction',));
        }

        // claro_get_content_by_type
        if (0 === strpos($pathinfo, '/type') && preg_match('#^/type/(?P<type>[^/]++)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_get_content_by_type')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::homeAction',));
        }

        // claro_index
        if (rtrim($pathinfo, '/') === '') {
            if (substr($pathinfo, -1) !== '/') {
                return $this->redirect($pathinfo.'/', 'claro_index');
            }

            return array (  'type' => 'home',  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::homeAction',  '_route' => 'claro_index',);
        }

        // claroline_types_manager
        if ($pathinfo === '/types') {
            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::typesAction',  '_route' => 'claroline_types_manager',);
        }

        // claro_content_publish_type
        if (0 === strpos($pathinfo, '/publish/type') && preg_match('#^/publish/type/(?P<type>[^/]++)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_content_publish_type')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::publishTypeAction',));
        }

        if (0 === strpos($pathinfo, '/rename/type')) {
            // claro_content_rename_type_form
            if (preg_match('#^/rename/type/(?P<type>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_content_rename_type_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::renameContentFormAction',));
            }

            // claro_content_rename_type
            if (preg_match('#^/rename/type/(?P<type>[^/]++)/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_content_rename_type')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::renameContentAction',));
            }

        }

        if (0 === strpos($pathinfo, '/type')) {
            // claro_content_change_template_form
            if (preg_match('#^/type/(?P<type>[^/]++)/change/template/form$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_content_change_template_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::changeTemplateFormAction',));
            }

            // claro_content_change_template
            if (preg_match('#^/type/(?P<type>[^/]++)/change/template$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_content_change_template')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::changeTemplateAction',));
            }

        }

        if (0 === strpos($pathinfo, '/move/content')) {
            // claroline_move_content_form
            if (preg_match('#^/move/content/(?P<currentType>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_move_content_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::moveContentFormAction',));
            }

            // claroline_move_content
            if (preg_match('#^/move/content/(?P<content>[^/]++)/(?P<type>[^/]++)/(?P<page>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_move_content')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::moveContentAction',));
            }

        }

        if (0 === strpos($pathinfo, '/content')) {
            // claroline_content_creator
            if (0 === strpos($pathinfo, '/content/creator') && preg_match('#^/content/creator/(?P<type>[^/]++)(?:/(?P<id>[^/]++)(?:/(?P<father>[^/]++))?)?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_content_creator')), array (  'father' => NULL,  'id' => NULL,  'content' => NULL,  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::creatorAction',));
            }

            // claroline_content_size
            if (0 === strpos($pathinfo, '/content/size') && preg_match('#^/content/size/(?P<id>[^/]++)/(?P<size>[^/]++)/(?P<type>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_content_size')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::sizeAction',));
            }

            // claroline_content_graph
            if ($pathinfo === '/content/graph') {
                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::graphAction',  '_route' => 'claroline_content_graph',);
            }

            // claroline_content_region
            if (0 === strpos($pathinfo, '/content/region') && preg_match('#^/content/region/(?P<content>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_content_region')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::regionAction',));
            }

            // claroline_content_create
            if (0 === strpos($pathinfo, '/content/create') && preg_match('#^/content/create(?:/(?P<type>[^/]++)(?:/(?P<father>[^/]++))?)?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_content_create')), array (  'type' => 'home',  'father' => NULL,  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::createAction',));
            }

            // claroline_content_update
            if (0 === strpos($pathinfo, '/content/update') && preg_match('#^/content/update/(?P<content>[^/]++)(?:/(?P<size>[^/]++)(?:/(?P<type>[^/]++))?)?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_content_update')), array (  'size' => NULL,  'type' => NULL,  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::updateAction',));
            }

            // claroline_content_reorder
            if (0 === strpos($pathinfo, '/content/reorder') && preg_match('#^/content/reorder/(?P<type>[^/]++)/(?P<a>\\d+)(?:/(?P<b>[^/]++)(?:/(?P<father>[^/]++))?)?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_content_reorder')), array (  'b' => NULL,  'father' => NULL,  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::reorderAction',));
            }

            // claroline_content_delete
            if (0 === strpos($pathinfo, '/content/delete') && preg_match('#^/content/delete/(?P<content>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_content_delete')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::deleteAction',));
            }

            // claroline_content_type_exist
            if (0 === strpos($pathinfo, '/content/typeexist') && preg_match('#^/content/typeexist/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_content_type_exist')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::typeExistAction',));
            }

            // claroline_content_createtype
            if (0 === strpos($pathinfo, '/content/createtype') && preg_match('#^/content/createtype/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_content_createtype')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::createTypeAction',));
            }

            // claroline_content_deletetype
            if (0 === strpos($pathinfo, '/content/deletetype') && preg_match('#^/content/deletetype/(?P<type>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_content_deletetype')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::deletetypeAction',));
            }

        }

        // claroline_content_to_region
        if (0 === strpos($pathinfo, '/region') && preg_match('#^/region/(?P<region>[^/]++)/(?P<content>\\d+)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_content_to_region')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::contentToRegionAction',));
        }

        if (0 === strpos($pathinfo, '/c')) {
            // claroline_content_collapse
            if (0 === strpos($pathinfo, '/content/collapse') && preg_match('#^/content/collapse/(?P<content>[^/]++)/(?P<type>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_content_collapse')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::collapseAction',));
            }

            // claroline_can_generate_content
            if ($pathinfo === '/cangeneratecontent') {
                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::canGenerateContentAction',  '_route' => 'claroline_can_generate_content',);
            }

            if (0 === strpos($pathinfo, '/content/menu/s')) {
                // claroline_content_menu_settings
                if (0 === strpos($pathinfo, '/content/menu/settings') && preg_match('#^/content/menu/settings/(?P<content>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_content_menu_settings')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::menuSettingsAction',));
                }

                // claroline_content_menu_save_settings
                if (0 === strpos($pathinfo, '/content/menu/save/settings') && preg_match('#^/content/menu/save/settings/(?P<menu>[^/]++)/(?P<login>[^/]++)/(?P<workspaces>[^/]++)/(?P<locale>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_content_menu_save_settings')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\HomeController::saveMenuSettingsAction',));
                }

            }

        }

        if (0 === strpos($pathinfo, '/locale')) {
            // claroline_locale_select
            if ($pathinfo === '/locale/select') {
                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\LocaleController::selectLangAction',  '_route' => 'claroline_locale_select',);
            }

            // claroline_locale_change
            if (0 === strpos($pathinfo, '/locale/change') && preg_match('#^/locale/change/(?P<locale>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_locale_change')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\LocaleController::changeLocale',));
            }

        }

        if (0 === strpos($pathinfo, '/admin/theme')) {
            if (0 === strpos($pathinfo, '/admin/themes')) {
                // claro_admin_theme_list
                if (rtrim($pathinfo, '/') === '/admin/themes') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claro_admin_theme_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'claro_admin_theme_list');
                    }

                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ThemeController::listAction',  '_route' => 'claro_admin_theme_list',);
                }
                not_claro_admin_theme_list:

                // claro_admin_theme_delete
                if (preg_match('#^/admin/themes/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_claro_admin_theme_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_theme_delete')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ThemeController::deleteAction',));
                }
                not_claro_admin_theme_delete:

                // claro_admin_new_theme
                if ($pathinfo === '/admin/themes/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claro_admin_new_theme;
                    }

                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ThemeController::formAction',  '_route' => 'claro_admin_new_theme',);
                }
                not_claro_admin_new_theme:

                // claro_admin_create_theme
                if ($pathinfo === '/admin/themes/') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_claro_admin_create_theme;
                    }

                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ThemeController::createThemeAction',  '_route' => 'claro_admin_create_theme',);
                }
                not_claro_admin_create_theme:

            }

            // claro_theme_confirm
            if ($pathinfo === '/admin/theme/confirm') {
                return array (  '_controller' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController::templateAction',  'template' => 'ClarolineCoreBundle:Theme:confirm.html.twig',  '_route' => 'claro_theme_confirm',);
            }

        }

        if (0 === strpos($pathinfo, '/content')) {
            // claro_content_typeerror
            if ($pathinfo === '/content/typeerror') {
                return array (  '_controller' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController::templateAction',  'template' => 'ClarolineCoreBundle:Home:typeerror.html.twig',  '_route' => 'claro_content_typeerror',);
            }

            // claro_content_confirm
            if ($pathinfo === '/content/confirm') {
                return array (  '_controller' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController::templateAction',  'template' => 'ClarolineCoreBundle:Home:confirm.html.twig',  '_route' => 'claro_content_confirm',);
            }

            // claro_content_link
            if ($pathinfo === '/content/link') {
                return array (  '_controller' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController::templateAction',  'template' => 'ClarolineCoreBundle:Home:link.html.twig',  '_route' => 'claro_content_link',);
            }

        }

        // claro_security_login
        if ($pathinfo === '/login') {
            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\AuthenticationController::loginAction',  '_route' => 'claro_security_login',);
        }

        // claro_security_forgot_password
        if ($pathinfo === '/reset') {
            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\AuthenticationController::forgotPasswordAction',  '_route' => 'claro_security_forgot_password',);
        }

        // claro_security_send_token
        if ($pathinfo === '/sendmail') {
            if ($this->context->getMethod() != 'POST') {
                $allow[] = 'POST';
                goto not_claro_security_send_token;
            }

            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\AuthenticationController::sendEmailAction',  '_route' => 'claro_security_send_token',);
        }
        not_claro_security_send_token:

        // claro_security_reset_password
        if (0 === strpos($pathinfo, '/newpassword') && preg_match('#^/newpassword/(?P<hash>[^/]++)/?$#s', $pathinfo, $matches)) {
            if (substr($pathinfo, -1) !== '/') {
                return $this->redirect($pathinfo.'/', 'claro_security_reset_password');
            }

            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_security_reset_password')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\AuthenticationController::resetPasswordAction',));
        }

        if (0 === strpos($pathinfo, '/validate')) {
            // claro_security_new_password
            if (0 === strpos($pathinfo, '/validatepassword') && preg_match('#^/validatepassword/(?P<hash>[^/]++)$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_claro_security_new_password;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_security_new_password')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\AuthenticationController::newPasswordAction',));
            }
            not_claro_security_new_password:

            // claro_security_validate_email
            if (0 === strpos($pathinfo, '/validate/email') && preg_match('#^/validate/email/(?P<hash>[^/]++)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_claro_security_validate_email;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_security_validate_email')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\AuthenticationController::validateEmailAction',));
            }
            not_claro_security_validate_email:

        }

        // claro_security_validate_email_send
        if (0 === strpos($pathinfo, '/send/email/validation') && preg_match('#^/send/email/validation/(?P<hash>[^/]++)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_security_validate_email_send')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\AuthenticationController::sendEmailValidationAction',));
        }

        // claro_security_validate_email_hide
        if ($pathinfo === '/hide/email/validation') {
            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\AuthenticationController::hideEmailConformationAction',  '_route' => 'claro_security_validate_email_hide',);
        }

        // claroline_core_authentication_postauthentication
        if (0 === strpos($pathinfo, '/authenticate') && preg_match('#^/authenticate\\.(?P<format>[^/]++)$#s', $pathinfo, $matches)) {
            if ($this->context->getMethod() != 'POST') {
                $allow[] = 'POST';
                goto not_claroline_core_authentication_postauthentication;
            }

            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_core_authentication_postauthentication')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\AuthenticationController::postAuthenticationAction',));
        }
        not_claroline_core_authentication_postauthentication:

        // trigger_auth
        if (0 === strpos($pathinfo, '/trigger-auth') && preg_match('#^/trigger\\-auth/(?P<hash>[^/]++)$#s', $pathinfo, $matches)) {
            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'HEAD'));
                goto not_trigger_auth;
            }

            return $this->mergeDefaults(array_replace($matches, array('_route' => 'trigger_auth')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\AuthenticationController::triggerAuthenticationAction',));
        }
        not_trigger_auth:

        if (0 === strpos($pathinfo, '/log')) {
            // claro_log_view_details
            if (0 === strpos($pathinfo, '/log/view_details') && preg_match('#^/log/view_details/(?P<logId>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_log_view_details')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Log\\LogController::viewDetailsAction',));
            }

            if (0 === strpos($pathinfo, '/log/update_')) {
                // claro_log_update_workspace_widget_config
                if (0 === strpos($pathinfo, '/log/update_workspace_widget_config') && preg_match('#^/log/update_workspace_widget_config/(?P<widgetInstance>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_claro_log_update_workspace_widget_config;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_log_update_workspace_widget_config')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Log\\LogController::updateLogWorkspaceWidgetConfig',));
                }
                not_claro_log_update_workspace_widget_config:

                // claro_log_update_desktop_widget_config
                if (0 === strpos($pathinfo, '/log/update_desktop_widget_config') && preg_match('#^/log/update_desktop_widget_config/(?P<widgetInstance>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_claro_log_update_desktop_widget_config;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_log_update_desktop_widget_config')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Log\\LogController::updateLogDesktopWidgetConfig',));
                }
                not_claro_log_update_desktop_widget_config:

            }

        }

        if (0 === strpos($pathinfo, '/workspaces')) {
            // claro_workspace_logs_show
            if (preg_match('#^/workspaces/(?P<workspaceId>\\d+)/tool/logs$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_logs_show')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Log\\Tool\\WorkspaceController::logListAction',));
            }

            // claro_workspace_logs_show_paginated
            if (preg_match('#^/workspaces/(?P<workspaceId>\\d+)/tool/logs(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_logs_show_paginated')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Log\\Tool\\WorkspaceController::logListAction',));
            }

            // claro_workspace_logs_by_user_show
            if (preg_match('#^/workspaces/(?P<workspaceId>\\d+)/tool/logs/user$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_logs_by_user_show')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Log\\Tool\\WorkspaceController::logByUserAction',));
            }

            // claro_workspace_logs_by_user_show_paginated
            if (preg_match('#^/workspaces/(?P<workspaceId>\\d+)/tool/logs/user(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_logs_by_user_show_paginated')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Log\\Tool\\WorkspaceController::logByUserAction',));
            }

            // claro_workspace_logs_by_user_csv
            if (preg_match('#^/workspaces/(?P<workspaceId>\\d+)/tool/logs/user/csv$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_logs_by_user_csv')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Log\\Tool\\WorkspaceController::logByUserCSVAction',));
            }

        }

        if (0 === strpos($pathinfo, '/profile')) {
            // claro_public_profile_view
            if (preg_match('#^/profile/(?P<publicUrl>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_public_profile_view')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ProfileController::publicProfileAction',));
            }

            // claro_profile_view
            if (0 === strpos($pathinfo, '/profile/show') && preg_match('#^/profile/show/(?P<user>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_profile_view')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ProfileController::viewAction',));
            }

            if (0 === strpos($pathinfo, '/profile/p')) {
                // claro_user_profile_edit
                if (0 === strpos($pathinfo, '/profile/profile/edit') && preg_match('#^/profile/profile/edit(?:/(?P<user>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_user_profile_edit')), array (  'user' => NULL,  '_controller' => 'Claroline\\CoreBundle\\Controller\\ProfileController::editProfileAction',));
                }

                // claro_user_password_edit
                if (0 === strpos($pathinfo, '/profile/password/edit') && preg_match('#^/profile/password/edit/(?P<user>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_user_password_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ProfileController::editPasswordAction',));
                }

                if (0 === strpos($pathinfo, '/profile/publicurl')) {
                    // claro_user_public_url_edit
                    if ($pathinfo === '/profile/publicurl/edit') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ProfileController::editPublicUrlAction',  '_route' => 'claro_user_public_url_edit',);
                    }

                    // claro_user_public_url_check
                    if ($pathinfo === '/profile/publicurl/check') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_user_public_url_check;
                        }

                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ProfileController::checkPublicUrlAction',  '_route' => 'claro_user_public_url_check',);
                    }
                    not_claro_user_public_url_check:

                }

            }

        }

        if (0 === strpos($pathinfo, '/register')) {
            // claro_registration_user_registration_form
            if ($pathinfo === '/register/form') {
                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\RegistrationController::userRegistrationFormAction',  '_route' => 'claro_registration_user_registration_form',);
            }

            // claro_registration_register_user
            if ($pathinfo === '/register/create') {
                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\RegistrationController::registerUserAction',  '_route' => 'claro_registration_register_user',);
            }

            // claro_register_user
            if (0 === strpos($pathinfo, '/register/new/user') && preg_match('#^/register/new/user\\.(?P<format>[^/]++)$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_claro_register_user;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_register_user')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\RegistrationController::postUserRegistrationAction',));
            }
            not_claro_register_user:

            // claro_security_activate_user
            if (0 === strpos($pathinfo, '/register/activate') && preg_match('#^/register/activate/(?P<hash>[^/]++)/?$#s', $pathinfo, $matches)) {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'claro_security_activate_user');
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_security_activate_user')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\RegistrationController::activateUserAction',));
            }

        }

        if (0 === strpos($pathinfo, '/desktop')) {
            // claro_desktop_open_tool
            if (0 === strpos($pathinfo, '/desktop/tool/open') && preg_match('#^/desktop/tool/open/(?P<toolName>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_desktop_open_tool')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\DesktopController::openToolAction',));
            }

            // claro_desktop_open
            if ($pathinfo === '/desktop/open') {
                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\DesktopController::openAction',  '_route' => 'claro_desktop_open',);
            }

        }

        if (0 === strpos($pathinfo, '/tool/home')) {
            if (0 === strpos($pathinfo, '/tool/home/desktop')) {
                // claro_desktop_home_display
                if (0 === strpos($pathinfo, '/tool/home/desktop/home/display/tab') && preg_match('#^/tool/home/desktop/home/display/tab(?:/(?P<tabId>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_desktop_home_display')), array (  'tabId' => -1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\HomeController::desktopHomeDisplayAction',));
                }

                // claro_display_desktop_home_tab
                if (0 === strpos($pathinfo, '/tool/home/desktop/tab') && preg_match('#^/tool/home/desktop/tab/(?P<tabId>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_display_desktop_home_tab')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\HomeController::displayDesktopHomeTabAction',));
                }

            }

            // claro_workspace_home_display
            if (preg_match('#^/tool/home/(?P<workspace>[^/]++)/home/display/tab(?:/(?P<tabId>[^/]++))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_home_display')), array (  'tabId' => -1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\HomeController::workspaceHomeDisplayAction',));
            }

            // claro_widget_instance_content
            if (0 === strpos($pathinfo, '/tool/home/widget/instance') && preg_match('#^/tool/home/widget/instance/(?P<widgetInstance>[^/]++)/content$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_widget_instance_content')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\HomeController::getWidgetInstanceContentAction',));
            }

        }

        if (0 === strpos($pathinfo, '/desktop/tool/properties')) {
            if (0 === strpos($pathinfo, '/desktop/tool/properties/tool')) {
                if (0 === strpos($pathinfo, '/desktop/tool/properties/tools')) {
                    // claro_desktop_parameters_menu
                    if ($pathinfo === '/desktop/tool/properties/tools/parameters/menu') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\DesktopParametersController::desktopParametersMenuAction',  '_route' => 'claro_desktop_parameters_menu',);
                    }

                    // claro_tool_properties
                    if (0 === strpos($pathinfo, '/desktop/tool/properties/tools/type') && preg_match('#^/desktop/tool/properties/tools/type(?:/(?P<type>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_tool_properties')), array (  'type' => 0,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\DesktopParametersController::desktopConfigureToolAction',));
                    }

                    // claro_desktop_tools_roles_edit
                    if (0 === strpos($pathinfo, '/desktop/tool/properties/tools/edit/type') && preg_match('#^/desktop/tool/properties/tools/edit/type(?:/(?P<type>[^/]++))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_desktop_tools_roles_edit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_desktop_tools_roles_edit')), array (  'type' => 0,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\DesktopParametersController::editToolsRolesAction',));
                    }
                    not_claro_desktop_tools_roles_edit:

                }

                // claro_desktop_tool_config
                if (preg_match('#^/desktop/tool/properties/tool/(?P<tool>[^/]++)/config$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_desktop_tool_config')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\DesktopParametersController::openDesktopToolConfig',));
                }

                // claro_desktop_update_ordered_tool_order
                if (0 === strpos($pathinfo, '/desktop/tool/properties/tools/order/update/tool') && preg_match('#^/desktop/tool/properties/tools/order/update/tool/(?P<orderedTool>[^/]++)/type/(?P<type>[^/]++)/next/(?P<nextOrderedToolId>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_desktop_update_ordered_tool_order')), array (  'type' => 0,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\DesktopParametersController::updateDesktopOrderedToolOrderAction',));
                }

            }

            if (0 === strpos($pathinfo, '/desktop/tool/properties/user/options')) {
                // claro_user_options_edit_form
                if ($pathinfo === '/desktop/tool/properties/user/options/edit/form') {
                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\DesktopParametersController::desktopParametersUserOptionsEditFormAction',  '_route' => 'claro_user_options_edit_form',);
                }

                // claro_user_options_edit
                if (preg_match('#^/desktop/tool/properties/user/options/(?P<options>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_user_options_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\DesktopParametersController::desktopParametersUserOptionsEditAction',));
                }

            }

        }

        if (0 === strpos($pathinfo, '/workspace')) {
            if (0 === strpos($pathinfo, '/workspaces')) {
                // claro_workspace_list
                if (0 === strpos($pathinfo, '/workspaces/search') && preg_match('#^/workspaces/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_list')), array (  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::listAction',));
                }

                if (0 === strpos($pathinfo, '/workspaces/user')) {
                    // claro_workspace_by_user
                    if ($pathinfo === '/workspaces/user') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::listWorkspacesByUserAction',  '_route' => 'claro_workspace_by_user',);
                    }

                    // claro_workspace_by_user_picker
                    if ($pathinfo === '/workspaces/user/picker') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::listWorkspacesByUserForPickerAction',  '_route' => 'claro_workspace_by_user_picker',);
                    }

                }

                if (0 === strpos($pathinfo, '/workspaces/displayable/self')) {
                    // claro_list_workspaces_with_self_registration
                    if (0 === strpos($pathinfo, '/workspaces/displayable/selfregistration/search') && preg_match('#^/workspaces/displayable/selfregistration/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_list_workspaces_with_self_registration')), array (  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::listWorkspacesWithSelfRegistrationAction',));
                    }

                    // claro_list_workspaces_with_self_unregistration
                    if (0 === strpos($pathinfo, '/workspaces/displayable/selfunregistration/page') && preg_match('#^/workspaces/displayable/selfunregistration/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_list_workspaces_with_self_unregistration')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::listWorkspacesWithSelfUnregistrationAction',));
                    }

                }

                // claro_workspace_creation_form
                if ($pathinfo === '/workspaces/new/form') {
                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::creationFormAction',  '_route' => 'claro_workspace_creation_form',);
                }

                // claro_workspace_create
                if ($pathinfo === '/workspaces/') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_claro_workspace_create;
                    }

                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::createAction',  '_route' => 'claro_workspace_create',);
                }
                not_claro_workspace_create:

                // claro_workspace_delete
                if (preg_match('#^/workspaces/(?P<workspaceId>(?=.*[1-9].*$)\\d*)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_claro_workspace_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_delete')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::deleteAction',));
                }
                not_claro_workspace_delete:

                // claro_workspace_open_tool
                if (preg_match('#^/workspaces/(?P<workspaceId>[^/]++)/open/tool/(?P<toolName>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_open_tool')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::openToolAction',));
                }

                // claro_workspace_home_tab_widget_list_picker
                if (preg_match('#^/workspaces/(?P<workspaceId>[^/]++)/tab/(?P<homeTabId>[^/]++)/picker$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_home_tab_widget_list_picker')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::listWidgetsForPickerAction',));
                }

                // claro_workspace_home_tab_widget_embed_picker
                if (preg_match('#^/workspaces/(?P<workspaceId>[^/]++)/tab/(?P<homeTabId>[^/]++)/widget/(?P<widgetId>[^/]++)/embed$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_home_tab_widget_embed_picker')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::embedWidgetForPickerAction',));
                }

                // claro_workspace_hometab_embeded_widget
                if (preg_match('#^/workspaces/(?P<workspaceId>[^/]++)/tab/(?P<homeTabId>[^/]++)/widget/(?P<widgetId>[^/]++)/embeded$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_hometab_embeded_widget')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::getEmbededWidgetAction',));
                }

                // claro_workspace_open
                if (preg_match('#^/workspaces/(?P<workspaceId>[^/]++)/open$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_open')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::openAction',));
                }

                // claro_resource_find_role_by_code
                if (0 === strpos($pathinfo, '/workspaces/search/role/code') && preg_match('#^/workspaces/search/role/code/(?P<code>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_find_role_by_code')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::findRoleByWorkspaceCodeAction',));
                }

                // claro_workspace_add_user
                if (preg_match('#^/workspaces/(?P<workspace>[^/]++)/add/user/(?P<user>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_add_user')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::addUserAction',));
                }

                // claro_workspace_add_user_queue
                if (preg_match('#^/workspaces/(?P<workspace>[^/]++)/add/user/(?P<user>[^/]++)/queue$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_add_user_queue')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::addUserQueueAction',));
                }

                // claro_workspace_remove_user_from_queue
                if (preg_match('#^/workspaces/(?P<workspace>[^/]++)/registration/queue/remove$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_remove_user_from_queue')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::removeUserFromQueueAction',));
                }

                if (0 === strpos($pathinfo, '/workspaces/list')) {
                    // claro_workspace_list_pager
                    if (0 === strpos($pathinfo, '/workspaces/list/tag') && preg_match('#^/workspaces/list/tag/(?P<workspaceTagId>[^/]++)/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_list_pager')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::workspaceListByTagPagerAction',));
                    }

                    // claro_workspace_list_with_self_reg_pager
                    if (0 === strpos($pathinfo, '/workspaces/list/self_reg/tag') && preg_match('#^/workspaces/list/self_reg/tag/(?P<workspaceTagId>[^/]++)/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_list_with_self_reg_pager')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::workspaceListWithSelfRegByTagPagerAction',));
                    }

                    // claro_all_workspaces_list_pager
                    if (0 === strpos($pathinfo, '/workspaces/list/workspaces/page') && preg_match('#^/workspaces/list/workspaces/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_all_workspaces_list_pager')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::workspaceCompleteListPagerAction',));
                    }

                    // claro_all_non_personal_workspaces_list_pager
                    if (0 === strpos($pathinfo, '/workspaces/list/non/personal/workspaces/page') && preg_match('#^/workspaces/list/non/personal/workspaces/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_all_non_personal_workspaces_list_pager')), array (  'page' => 1,  'max' => 20,  'seach' => '',  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::nonPersonalWorkspacesListPagerAction',));
                    }

                    // claro_all_personal_workspaces_list_pager
                    if (0 === strpos($pathinfo, '/workspaces/list/personal/workspaces/page') && preg_match('#^/workspaces/list/personal/workspaces/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_all_personal_workspaces_list_pager')), array (  'page' => 1,  'max' => 20,  'seach' => '',  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::personalWorkspacesListPagerAction',));
                    }

                    // claro_all_workspaces_list_with_self_reg_pager
                    if (0 === strpos($pathinfo, '/workspaces/list/workspaces/self_reg/page') && preg_match('#^/workspaces/list/workspaces/self_reg/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_all_workspaces_list_with_self_reg_pager')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::workspaceCompleteListWithSelfRegPagerAction',));
                    }

                }

                // claro_workspace_delete_user
                if (preg_match('#^/workspaces/(?P<workspaceId>(?=.*[1-9].*$)\\d*)/remove/user/(?P<userId>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('DELETE', 'GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('DELETE', 'GET', 'HEAD'));
                        goto not_claro_workspace_delete_user;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_delete_user')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::removeUserAction',));
                }
                not_claro_workspace_delete_user:

                if (0 === strpos($pathinfo, '/workspaces/registration/list')) {
                    // claro_workspace_list_registration_pager
                    if (0 === strpos($pathinfo, '/workspaces/registration/list/tag') && preg_match('#^/workspaces/registration/list/tag/(?P<workspaceTagId>[^/]++)/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_list_registration_pager')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::workspaceListByTagRegistrationPagerAction',));
                    }

                    // claro_all_workspaces_list_registration_pager
                    if (0 === strpos($pathinfo, '/workspaces/registration/list/workspaces/page') && preg_match('#^/workspaces/registration/list/workspaces/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_all_workspaces_list_registration_pager')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::workspaceCompleteListRegistrationPagerAction',));
                    }

                    // claro_all_non_personal_workspaces_list_registration_pager
                    if (0 === strpos($pathinfo, '/workspaces/registration/list/non/personal/workspaces/page') && preg_match('#^/workspaces/registration/list/non/personal/workspaces/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_all_non_personal_workspaces_list_registration_pager')), array (  'page' => 1,  'max' => 20,  'seach' => '',  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::nonPersonalWorkspacesListRegistrationPagerAction',));
                    }

                    // claro_all_personal_workspaces_list_registration_pager
                    if (0 === strpos($pathinfo, '/workspaces/registration/list/personal/workspaces/page') && preg_match('#^/workspaces/registration/list/personal/workspaces/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_all_personal_workspaces_list_registration_pager')), array (  'page' => 1,  'max' => 20,  'seach' => '',  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::personalWorkspacesListRegistrationPagerAction',));
                    }

                    // claro_workspaces_list_registration_pager_search
                    if (0 === strpos($pathinfo, '/workspaces/registration/list/workspaces/search') && preg_match('#^/workspaces/registration/list/workspaces/search/(?P<search>[^/]++)/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspaces_list_registration_pager_search')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::workspaceSearchedListRegistrationPagerAction',));
                    }

                }

                // claro_display_workspace_home_tab
                if (preg_match('#^/workspaces/(?P<workspace>[^/]++)/open/tool/home/tab/(?P<tabId>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_display_workspace_home_tab')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::displayWorkspaceHomeTabAction',));
                }

                // claro_list_visible_workspace_home_tabs_picker
                if (preg_match('#^/workspaces/(?P<workspaceId>[^/]++)/tabs/picker$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_list_visible_workspace_home_tabs_picker')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::listWorkspaceVisibleHomeTabsForPickerAction',));
                }

                // claro_workspace_update_favourite
                if (preg_match('#^/workspaces/(?P<workspaceId>[^/]++)/update/favourite$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_claro_workspace_update_favourite;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_update_favourite')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::updateWorkspaceFavourite',));
                }
                not_claro_workspace_update_favourite:

                // claro_workspace_export
                if (preg_match('#^/workspaces/(?P<workspace>[^/]++)/export$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_export')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::exportAction',));
                }

                if (0 === strpos($pathinfo, '/workspaces/import')) {
                    // claro_workspace_import_form
                    if ($pathinfo === '/workspaces/import/form') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::importFormAction',  '_route' => 'claro_workspace_import_form',);
                    }

                    // claro_workspace_import
                    if ($pathinfo === '/workspaces/import/submit') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::importAction',  '_route' => 'claro_workspace_import',);
                    }

                }

                // claro_all_workspaces_list_pager_for_resource_rights
                if (0 === strpos($pathinfo, '/workspaces/list/all/workspaces/pager/page') && preg_match('#^/workspaces/list/all/workspaces/pager/page/(?P<page>[^/]++)/max/(?P<wsMax>[^/]++)/resource/(?P<resource>[^/]++)/search(?:/(?P<wsSearch>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_all_workspaces_list_pager_for_resource_rights')), array (  'page' => 1,  'wsMax' => 10,  'seach' => '',  'wsSearch' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceController::allWorkspacesListPagerForResourceRightsAction',));
                }

                // claro_admin_workspace_tag_add_children
                if (0 === strpos($pathinfo, '/workspaces/admin/tag/add/children') && preg_match('#^/workspaces/admin/tag/add/children/(?P<tagId>[^/]++)/(?P<childrenString>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_claro_admin_workspace_tag_add_children;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_workspace_tag_add_children')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::addAdminTagChildren',));
                }
                not_claro_admin_workspace_tag_add_children:

                // claro_workspace_tag_add_children
                if (0 === strpos($pathinfo, '/workspaces/tag/add/children') && preg_match('#^/workspaces/tag/add/children/(?P<tagId>[^/]++)/(?P<childrenString>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_claro_workspace_tag_add_children;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_tag_add_children')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::addTagChildren',));
                }
                not_claro_workspace_tag_add_children:

                if (0 === strpos($pathinfo, '/workspaces/admin/tag/create')) {
                    // claro_admin_workspace_tag_create_form
                    if ($pathinfo === '/workspaces/admin/tag/create/form') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::adminWorkspaceTagCreateFormAction',  '_route' => 'claro_admin_workspace_tag_create_form',);
                    }

                    // claro_admin_workspace_tag_create
                    if ($pathinfo === '/workspaces/admin/tag/create') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_admin_workspace_tag_create;
                        }

                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::adminWorkspaceTagCreateAction',  '_route' => 'claro_admin_workspace_tag_create',);
                    }
                    not_claro_admin_workspace_tag_create:

                }

                if (0 === strpos($pathinfo, '/workspaces/tag/create')) {
                    // claro_workspace_tag_create_form
                    if ($pathinfo === '/workspaces/tag/create/form') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::workspaceTagCreateFormAction',  '_route' => 'claro_workspace_tag_create_form',);
                    }

                    // claro_workspace_tag_create
                    if ($pathinfo === '/workspaces/tag/create') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_workspace_tag_create;
                        }

                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::workspaceTagCreateAction',  '_route' => 'claro_workspace_tag_create',);
                    }
                    not_claro_workspace_tag_create:

                }

                if (0 === strpos($pathinfo, '/workspaces/admin/tag')) {
                    // claro_admin_workspace_tag_edit_form
                    if (preg_match('#^/workspaces/admin/tag/(?P<workspaceTagId>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_workspace_tag_edit_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::adminWorkspaceTagEditFormAction',));
                    }

                    // claro_admin_workspace_tag_edit
                    if (preg_match('#^/workspaces/admin/tag/(?P<workspaceTagId>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_admin_workspace_tag_edit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_workspace_tag_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::adminWorkspaceTagEditAction',));
                    }
                    not_claro_admin_workspace_tag_edit:

                }

                if (0 === strpos($pathinfo, '/workspaces/tag')) {
                    // claro_workspace_tag_edit_form
                    if (preg_match('#^/workspaces/tag/(?P<workspaceTagId>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_tag_edit_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::workspaceTagEditFormAction',));
                    }

                    // claro_workspace_tag_edit
                    if (preg_match('#^/workspaces/tag/(?P<workspaceTagId>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_workspace_tag_edit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_tag_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::workspaceTagEditAction',));
                    }
                    not_claro_workspace_tag_edit:

                }

                // claro_admin_workspace_tag_remove_child
                if (0 === strpos($pathinfo, '/workspaces/admin/tag') && preg_match('#^/workspaces/admin/tag/(?P<parentTagId>[^/]++)/remove/child/(?P<childTagId>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_claro_admin_workspace_tag_remove_child;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_workspace_tag_remove_child')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::removeAdminTagHierarchy',));
                }
                not_claro_admin_workspace_tag_remove_child:

                // claro_workspace_tag_remove_child
                if (0 === strpos($pathinfo, '/workspaces/tag') && preg_match('#^/workspaces/tag/(?P<parentTagId>[^/]++)/remove/child/(?P<childTagId>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_claro_workspace_tag_remove_child;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_tag_remove_child')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::removeTagHierarchy',));
                }
                not_claro_workspace_tag_remove_child:

                if (0 === strpos($pathinfo, '/workspaces/admin/tag')) {
                    // claro_admin_workspace_tag_check_children_pager
                    if (preg_match('#^/workspaces/admin/tag/(?P<workspaceTagId>[^/]++)/check/children/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_workspace_tag_check_children_pager')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::checkPotentialAdminWorkspaceTagChildrenPagerAction',));
                    }

                    // claro_admin_workspace_tag_check_children_pager_search
                    if (preg_match('#^/workspaces/admin/tag/(?P<workspaceTagId>[^/]++)/check/children/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_workspace_tag_check_children_pager_search')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::checkPotentialAdminWorkspaceTagChildrenPagerAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/workspaces/tag')) {
                    // claro_workspace_tag_check_children_pager
                    if (preg_match('#^/workspaces/tag/(?P<workspaceTagId>[^/]++)/check/children/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_tag_check_children_pager')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::checkPotentialWorkspaceTagChildrenPagerAction',));
                    }

                    // claro_workspace_tag_check_children_pager_search
                    if (preg_match('#^/workspaces/tag/(?P<workspaceTagId>[^/]++)/check/children/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_tag_check_children_pager_search')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::checkPotentialWorkspaceTagChildrenPagerAction',));
                    }

                }

                // claro_admin_workspace_tag_remove_from_workspace
                if (0 === strpos($pathinfo, '/workspaces/admin/tag') && preg_match('#^/workspaces/admin/tag/(?P<workspaceTagId>[^/]++)/remove/workspace/(?P<workspaceId>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_claro_admin_workspace_tag_remove_from_workspace;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_workspace_tag_remove_from_workspace')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::removeAdminWorkspaceTagFromWorkspace',));
                }
                not_claro_admin_workspace_tag_remove_from_workspace:

                // claro_workspace_tag_remove_from_workspace
                if (0 === strpos($pathinfo, '/workspaces/tag') && preg_match('#^/workspaces/tag/(?P<workspaceTagId>[^/]++)/remove/workspace/(?P<workspaceId>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_claro_workspace_tag_remove_from_workspace;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_tag_remove_from_workspace')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::removeWorkspaceTagFromWorkspace',));
                }
                not_claro_workspace_tag_remove_from_workspace:

                if (0 === strpos($pathinfo, '/workspaces/admin/workspace/tag/manage/page')) {
                    // claro_manage_admin_workspace_tag
                    if (preg_match('#^/workspaces/admin/workspace/tag/manage/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_manage_admin_workspace_tag')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::manageAdminWorkspaceTagAction',));
                    }

                    // claro_manage_admin_workspace_tag_search
                    if (preg_match('#^/workspaces/admin/workspace/tag/manage/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_manage_admin_workspace_tag_search')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::manageAdminWorkspaceTagAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/workspaces/workspace/tag/manage/page')) {
                    // claro_manage_workspace_tag
                    if (preg_match('#^/workspaces/workspace/tag/manage/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_manage_workspace_tag')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::manageWorkspaceTagAction',));
                    }

                    // claro_manage_workspace_tag_search
                    if (preg_match('#^/workspaces/workspace/tag/manage/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_manage_workspace_tag_search')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::manageWorkspaceTagAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/workspaces/associate')) {
                    // claro_associate_admin_workspace_tags_to_workspaces
                    if ($pathinfo === '/workspaces/associate/admin/tags/to/workspaces') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_associate_admin_workspace_tags_to_workspaces;
                        }

                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::associateMultipleAdminTagsToMultipleWorkspacesAction',  '_route' => 'claro_associate_admin_workspace_tags_to_workspaces',);
                    }
                    not_claro_associate_admin_workspace_tags_to_workspaces:

                    // claro_associate_workspace_tags_to_workspaces
                    if ($pathinfo === '/workspaces/associate/tags/to/workspaces') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_associate_workspace_tags_to_workspaces;
                        }

                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::associateMultipleTagsToMultipleWorkspacesAction',  '_route' => 'claro_associate_workspace_tags_to_workspaces',);
                    }
                    not_claro_associate_workspace_tags_to_workspaces:

                }

                if (0 === strpos($pathinfo, '/workspaces/organize')) {
                    // claro_admin_workspace_tag_organize
                    if ($pathinfo === '/workspaces/organize/admin/tags') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::organizeAdminWorkspaceTagAction',  '_route' => 'claro_admin_workspace_tag_organize',);
                    }

                    // claro_workspace_tag_organize
                    if ($pathinfo === '/workspaces/organize/tags') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::organizeWorkspaceTagAction',  '_route' => 'claro_workspace_tag_organize',);
                    }

                }

                // claro_admin_workspace_tag_delete
                if (0 === strpos($pathinfo, '/workspaces/admin/tag') && preg_match('#^/workspaces/admin/tag/(?P<workspaceTagId>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_claro_admin_workspace_tag_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_workspace_tag_delete')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::deleteAdminWorkspaceTag',));
                }
                not_claro_admin_workspace_tag_delete:

                // claro_workspace_tag_delete
                if (0 === strpos($pathinfo, '/workspaces/tag') && preg_match('#^/workspaces/tag/(?P<workspaceTagId>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_claro_workspace_tag_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_tag_delete')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::deleteWorkspaceTag',));
                }
                not_claro_workspace_tag_delete:

                // claro_admin_workspace_tag_link_workspace
                if (0 === strpos($pathinfo, '/workspaces/admin/tag') && preg_match('#^/workspaces/admin/tag/(?P<workspaceTagId>[^/]++)/link/workspace(?:/(?P<workspaceId>[^/]++))?$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_claro_admin_workspace_tag_link_workspace;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_workspace_tag_link_workspace')), array (  'workspaceId' => NULL,  'workspace' => NULL,  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::adminWorkspaceTagLinkWorkspaceAction',));
                }
                not_claro_admin_workspace_tag_link_workspace:

                if (0 === strpos($pathinfo, '/workspaces/workspace')) {
                    // claro_render_public_workspace_list_pager
                    if (preg_match('#^/workspaces/workspace/(?P<linkedWorkspaceId>[^/]++)/public/list/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_render_public_workspace_list_pager')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::renderPublicWorkspaceListPagerAction',));
                    }

                    // claro_render_public_workspace_list_pager_search
                    if (preg_match('#^/workspaces/workspace/(?P<linkedWorkspaceId>[^/]++)/public/list/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_render_public_workspace_list_pager_search')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceTagController::renderPublicWorkspaceListPagerAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/workspaces/tool')) {
                    if (0 === strpos($pathinfo, '/workspaces/tool/properties')) {
                        // claro_workspace_edit_form
                        if (preg_match('#^/workspaces/tool/properties/(?P<workspace>[^/]++)/editform$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_edit_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\WorkspaceParametersController::workspaceEditFormAction',));
                        }

                        // claro_workspace_edit
                        if (preg_match('#^/workspaces/tool/properties/(?P<workspace>[^/]++)/edit$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_claro_workspace_edit;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\WorkspaceParametersController::workspaceEditAction',));
                        }
                        not_claro_workspace_edit:

                        // claro_workspace_tool_config
                        if (preg_match('#^/workspaces/tool/properties/(?P<workspace>[^/]++)/tool/(?P<tool>[^/]++)/config$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_tool_config')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\WorkspaceParametersController::openWorkspaceToolConfig',));
                        }

                        // claro_workspace_subscription_url_generate
                        if (preg_match('#^/workspaces/tool/properties/(?P<workspace>[^/]++)/subscription/url/generate$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_subscription_url_generate')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\WorkspaceParametersController::urlSubscriptionGenerateAction',));
                        }

                        // claro_workspace_subscription_url_generate_anonymous
                        if (preg_match('#^/workspaces/tool/properties/(?P<workspace>[^/]++)/subscription/url/generate/anonymous$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_subscription_url_generate_anonymous')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\WorkspaceParametersController::anonymousSubscriptionAction',));
                        }

                        // claro_workspace_subscription_url_generate_user
                        if (0 === strpos($pathinfo, '/workspaces/tool/properties/user/subscribe/workspace') && preg_match('#^/workspaces/tool/properties/user/subscribe/workspace/(?P<workspace>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_subscription_url_generate_user')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\WorkspaceParametersController::userSubscriptionAction',));
                        }

                        // claro_workspace_tools_roles
                        if (preg_match('#^/workspaces/tool/properties/(?P<workspace>[^/]++)/tools$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_tools_roles')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\WorkspaceToolsParametersController::workspaceToolsRolesAction',));
                        }

                        // claro_workspace_order_tool_edit_form
                        if (preg_match('#^/workspaces/tool/properties/(?P<workspace>[^/]++)/tools/(?P<tool>[^/]++)/editform$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_order_tool_edit_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\WorkspaceToolsParametersController::workspaceOrderToolEditFormAction',));
                        }

                        // claro_workspace_order_tool_edit
                        if (preg_match('#^/workspaces/tool/properties/(?P<workspace>[^/]++)/tools/(?P<workspaceOrderTool>[^/]++)/edit$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_claro_workspace_order_tool_edit;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_order_tool_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\WorkspaceToolsParametersController::workspaceOrderToolEditAction',));
                        }
                        not_claro_workspace_order_tool_edit:

                        // claro_workspace_update_ordered_tool_order
                        if (preg_match('#^/workspaces/tool/properties/(?P<workspace>[^/]++)/tools/order/update/tool/(?P<orderedTool>[^/]++)/with/(?P<otherOrderedTool>[^/]++)/mode/(?P<mode>[^/]++)/type(?:/(?P<type>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_update_ordered_tool_order')), array (  'type' => 0,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\WorkspaceToolsParametersController::updateWorkspaceOrderedToolOrderAction',));
                        }

                        // claro_workspace_inverse_ordered_tool_right
                        if (0 === strpos($pathinfo, '/workspaces/tool/properties/ordered/tool') && preg_match('#^/workspaces/tool/properties/ordered/tool/(?P<orderedTool>[^/]++)/role/(?P<role>[^/]++)/action/(?P<action>[^/]++)/inverse$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_inverse_ordered_tool_right')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\WorkspaceToolsParametersController::inverseWorkspaceOrderedToolRightAction',));
                        }

                        // claro_workspace_display_edit_form
                        if (preg_match('#^/workspaces/tool/properties/(?P<workspace>[^/]++)/display/edit/form$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_display_edit_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\WorkspaceToolsParametersController::workspaceDisplayEditFormAction',));
                        }

                        // claro_workspace_display_edit
                        if (preg_match('#^/workspaces/tool/properties/(?P<workspace>[^/]++)/display/edit$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_display_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\WorkspaceToolsParametersController::workspaceDisplayEditAction',));
                        }

                    }

                    if (0 === strpos($pathinfo, '/workspaces/tools')) {
                        if (0 === strpos($pathinfo, '/workspaces/tools/roles')) {
                            // claro_workspace_roles
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/roles/config$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_roles')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::configureRolePageAction',));
                            }

                            // claro_workspace_role_create_form
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/roles/create/form$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_role_create_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::createRoleFormAction',));
                            }

                            // claro_workspace_role_create
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/roles/create$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'POST') {
                                    $allow[] = 'POST';
                                    goto not_claro_workspace_role_create;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_role_create')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::createRoleAction',));
                            }
                            not_claro_workspace_role_create:

                            // claro_workspace_role_remove
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/role/(?P<role>[^/]++)/remove$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_role_remove')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::removeRoleAction',));
                            }

                            // claro_workspace_role_edit_form
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/role/(?P<role>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_role_edit_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::editRoleFormAction',));
                            }

                            // claro_workspace_role_edit
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/role/(?P<role>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'POST') {
                                    $allow[] = 'POST';
                                    goto not_claro_workspace_role_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_role_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::editRoleAction',));
                            }
                            not_claro_workspace_role_edit:

                            // claro_workspace_remove_role_from_user
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/remove/role/(?P<role>[^/]++)/user/(?P<user>[^/]++)$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('DELETE', 'GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('DELETE', 'GET', 'HEAD'));
                                    goto not_claro_workspace_remove_role_from_user;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_remove_role_from_user')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::removeUserFromRoleAction',));
                            }
                            not_claro_workspace_remove_role_from_user:

                            // claro_workspace_unregistered_user_list
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/users/unregistered/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/order/(?P<order>[^/]++)/direction(?:/(?P<direction>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_unregistered_user_list')), array (  'page' => 1,  'search' => '',  'max' => 50,  'order' => 'id',  'direction' => 'ASC',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::unregisteredUserListAction',));
                            }

                            // claro_workspace_unregistered_user_list_search
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/users/unregistered/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)/max/(?P<max>[^/]++)/order/(?P<order>[^/]++)/direction(?:/(?P<direction>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_unregistered_user_list_search')), array (  'page' => 1,  'max' => 50,  'order' => 'id',  'direction' => 'ASC',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::unregisteredUserListAction',));
                            }

                            // claro_workspace_unregistered_group_list
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/groups/unregistered/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/order/(?P<order>[^/]++)/direction(?:/(?P<direction>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_unregistered_group_list')), array (  'page' => 1,  'search' => '',  'max' => 50,  'order' => 'id',  'direction' => 'ASC',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::unregisteredGroupListAction',));
                            }

                            // claro_workspace_unregistered_group_list_search
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/groups/unregistered/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)/max/(?P<max>[^/]++)/order/(?P<order>[^/]++)/direction(?:/(?P<direction>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_unregistered_group_list_search')), array (  'page' => 1,  'max' => 50,  'order' => 'id',  'direction' => 'ASC',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::unregisteredGroupListAction',));
                            }

                            // claro_workspace_unregistered_users_from_group_list
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/users/unregistered/from/group/(?P<group>[^/]++)/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_unregistered_users_from_group_list')), array (  'page' => 1,  'search' => '',  'max' => 50,  'orderedBy' => 'id',  'order' => 'ASC',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::unregisteredUsersFromGroupListAction',));
                            }

                            // claro_workspace_add_roles_to_users
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/add/role/user$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('PUT', 'GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('PUT', 'GET', 'HEAD'));
                                    goto not_claro_workspace_add_roles_to_users;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_add_roles_to_users')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::addUsersToRolesAction',));
                            }
                            not_claro_workspace_add_roles_to_users:

                            // claro_workspace_remove_role_from_group
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/remove/role/(?P<role>[^/]++)/group/(?P<group>[^/]++)$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('DELETE', 'GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('DELETE', 'GET', 'HEAD'));
                                    goto not_claro_workspace_remove_role_from_group;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_remove_role_from_group')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::removeGroupFromRoleAction',));
                            }
                            not_claro_workspace_remove_role_from_group:

                            // claro_workspace_add_roles_to_groups
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/add/role/group$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_add_roles_to_groups')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::addGroupsToRolesAction',));
                            }

                            // claro_workspace_registered_user_list
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/users/registered/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/order/(?P<order>[^/]++)/direction(?:/(?P<direction>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_registered_user_list')), array (  'page' => 1,  'search' => '',  'max' => 50,  'order' => 'id',  'direction' => 'ASC',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::usersListAction',));
                            }

                            // claro_workspace_registered_user_list_search
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/users/registered/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)/max/(?P<max>[^/]++)/order/(?P<order>[^/]++)/direction(?:/(?P<direction>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_registered_user_list_search')), array (  'page' => 1,  'max' => 50,  'order' => 'id',  'direction' => 'ASC',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::usersListAction',));
                            }

                            // claro_workspace_registered_group_list
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/groups/registered/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/order/(?P<order>[^/]++)/direction(?:/(?P<direction>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_registered_group_list')), array (  'page' => 1,  'search' => '',  'max' => 50,  'order' => 'id',  'direction' => 'ASC',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::groupsListAction',));
                            }

                            // claro_workspace_registered_group_list_search
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/groups/registered/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)/max/(?P<max>[^/]++)/order/(?P<order>[^/]++)/direction(?:/(?P<direction>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_registered_group_list_search')), array (  'page' => 1,  'max' => 50,  'order' => 'id',  'direction' => 'ASC',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::groupsListAction',));
                            }

                            // claro_workspace_users_of_group_search
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/groups/(?P<group>[^/]++)/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)/(?P<max>[^/]++)/order/(?P<order>[^/]++)/direction(?:/(?P<direction>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_users_of_group_search')), array (  'page' => 1,  'max' => 50,  'order' => 'id',  'direction' => 'ASC',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::usersOfGroupAction',));
                            }

                            // claro_workspace_users_of_group
                            if (preg_match('#^/workspaces/tools/roles/(?P<workspace>[^/]++)/groups/(?P<group>[^/]++)/page/(?P<page>[^/]++)/(?P<max>[^/]++)/order/(?P<order>[^/]++)/direction(?:/(?P<direction>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_users_of_group')), array (  'page' => 1,  'max' => 50,  'search' => '',  'order' => 'id',  'direction' => 'ASC',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::usersOfGroupAction',));
                            }

                            // claro_usernames_from_users
                            if ($pathinfo === '/workspaces/tools/roles/users/usernames') {
                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::retrieveUsernamesFromUsersAction',  '_route' => 'claro_usernames_from_users',);
                            }

                            // claro_names_from_groups
                            if ($pathinfo === '/workspaces/tools/roles/groups/names') {
                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::retrieveNamesFromGroupsAction',  '_route' => 'claro_names_from_groups',);
                            }

                            // claro_names_from_workspaces
                            if ($pathinfo === '/workspaces/tools/roles/workspaces/names') {
                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::retrieveNamesFromWorkspacesAction',  '_route' => 'claro_names_from_workspaces',);
                            }

                            if (0 === strpos($pathinfo, '/workspaces/tools/roles/users/pending')) {
                                // claro_users_pending
                                if (preg_match('#^/workspaces/tools/roles/users/pending/(?P<workspace>[^/]++)/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_users_pending')), array (  'page' => 1,  'search' => '',  'max' => 50,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::pendingUsersAction',));
                                }

                                // claro_users_pending_validation
                                if (0 === strpos($pathinfo, '/workspaces/tools/roles/users/pending/validation') && preg_match('#^/workspaces/tools/roles/users/pending/validation/(?P<workspace>[^/]++)/(?P<wksqueue>[^/]++)$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_users_pending_validation')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::pendingUsersValidationAction',));
                                }

                                // claro_users_pending_decline
                                if (0 === strpos($pathinfo, '/workspaces/tools/roles/users/pending/decline') && preg_match('#^/workspaces/tools/roles/users/pending/decline/(?P<workspace>[^/]++)/(?P<wksqueue>[^/]++)$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_users_pending_decline')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::pendingUsersDeclineAction',));
                                }

                            }

                            // claro_workspace_export_users
                            if (0 === strpos($pathinfo, '/workspaces/tools/roles/export/users') && preg_match('#^/workspaces/tools/roles/export/users/(?P<format>[^/]++)/workspace/(?P<workspace>[^/]++)$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_export_users')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::exportUsers',));
                            }

                            if (0 === strpos($pathinfo, '/workspaces/tools/roles/workspace')) {
                                // claro_workspace_users_tool_import_form
                                if (preg_match('#^/workspaces/tools/roles/workspace/(?P<workspace>[^/]++)/users/import/form$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_users_tool_import_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::workspaceUsersToolImportFormAction',));
                                }

                                // claro_workspace_users_tool_import
                                if (preg_match('#^/workspaces/tools/roles/workspace/(?P<workspace>[^/]++)/users/import$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_users_tool_import')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\RolesController::workspaceUsersToolImportAction',));
                                }

                            }

                        }

                        if (0 === strpos($pathinfo, '/workspaces/tools/model')) {
                            if (0 === strpos($pathinfo, '/workspaces/tools/model/workspace')) {
                                // claro_workspace_model_index
                                if (preg_match('#^/workspaces/tools/model/workspace/(?P<workspace>[^/]++)/model/index$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_model_index')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::indexAction',));
                                }

                                // claro_workspace_model_modal_form
                                if (preg_match('#^/workspaces/tools/model/workspace/(?P<workspace>[^/]++)/model/form$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_model_modal_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::showModelModalFormAction',));
                                }

                                // claro_workspace_model_create
                                if (preg_match('#^/workspaces/tools/model/workspace/(?P<workspace>[^/]++)/model/create$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_model_create')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::createModelAction',));
                                }

                            }

                            // claro_model_delete
                            if (preg_match('#^/workspaces/tools/model/(?P<model>[^/]++)/delete$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_model_delete')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::deleteModelAction',));
                            }

                            // claro_workspace_model_rename_form
                            if (preg_match('#^/workspaces/tools/model/(?P<model>[^/]++)/rename/form$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_model_rename_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::renameModelModalFormAction',));
                            }

                            // claro_workspace_model_rename
                            if (preg_match('#^/workspaces/tools/model/(?P<model>[^/]++)/rename$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_model_rename')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::renameModelAction',));
                            }

                            // claro_workspace_model_configure
                            if (preg_match('#^/workspaces/tools/model/(?P<model>[^/]++)/configure$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_model_configure')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::configureModelAction',));
                            }

                            // claro_workspace_model_share_user_list
                            if (0 === strpos($pathinfo, '/workspaces/tools/model/model') && preg_match('#^/workspaces/tools/model/model/(?P<model>[^/]++)/share/index$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_model_share_user_list')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::shareModelUserListAction',));
                            }

                            // ws_share_user_list
                            if (preg_match('#^/workspaces/tools/model/(?P<model>[^/]++)/workspace/share/users/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_ws_share_user_list;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ws_share_user_list')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::userListAction',));
                            }
                            not_ws_share_user_list:

                            // ws_share_user_list_search
                            if (preg_match('#^/workspaces/tools/model/(?P<model>[^/]++)/workspace/share/users/page/(?P<page>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_ws_share_user_list_search;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ws_share_user_list_search')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::userListAction',));
                            }
                            not_ws_share_user_list_search:

                            // ws_share_group_list
                            if (preg_match('#^/workspaces/tools/model/(?P<model>[^/]++)/workspace/share/groups/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_ws_share_group_list;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ws_share_group_list')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::groupListAction',));
                            }
                            not_ws_share_group_list:

                            // ws_share_group_list_search
                            if (preg_match('#^/workspaces/tools/model/(?P<model>[^/]++)/workspace/share/groups/page/(?P<page>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_ws_share_group_list_search;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ws_share_group_list_search')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::groupListAction',));
                            }
                            not_ws_share_group_list_search:

                            // ws_share_users_add
                            if (preg_match('#^/workspaces/tools/model/(?P<model>[^/]++)/share/users/add$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ws_share_users_add')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::shareUsersAction',));
                            }

                            // ws_share_groups_add
                            if (preg_match('#^/workspaces/tools/model/(?P<model>[^/]++)/share/groups/add$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ws_share_groups_add')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::shareGroupsAction',));
                            }

                            // ws_model_remove_group
                            if (preg_match('#^/workspaces/tools/model/(?P<model>[^/]++)/group/(?P<group>[^/]++)/remove$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ws_model_remove_group')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::removeModeGroupAction',));
                            }

                            // ws_model_remove_user
                            if (preg_match('#^/workspaces/tools/model/(?P<model>[^/]++)/user/(?P<user>[^/]++)/remove$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ws_model_remove_user')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::removeModelUserAction',));
                            }

                            // ws_model_resource_copy_add
                            if (preg_match('#^/workspaces/tools/model/(?P<model>[^/]++)/resource/copy/add$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ws_model_resource_copy_add')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::addNodesCopyAction',));
                            }

                            // ws_model_resource_link_add
                            if (preg_match('#^/workspaces/tools/model/(?P<model>[^/]++)/resource/link/add$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ws_model_resource_link_add')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::addNodeLinkAction',));
                            }

                            // ws_model_resource_remove
                            if (0 === strpos($pathinfo, '/workspaces/tools/model/remove/resource') && preg_match('#^/workspaces/tools/model/remove/resource/(?P<resourceModel>[^/]++)$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ws_model_resource_remove')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::removeResourceModelAction',));
                            }

                            // ws_model_homeTabs_list
                            if (preg_match('#^/workspaces/tools/model/(?P<model>[^/]++)/homeTabs/list$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ws_model_homeTabs_list')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::listHomeTabsAction',));
                            }

                            // ws_model_homeTabs_model_link
                            if (preg_match('#^/workspaces/tools/model/(?P<model>[^/]++)/homeTabs/link$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ws_model_homeTabs_model_link')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::linkHomeTabsToModelAction',));
                            }

                            // ws_model_tab_remove
                            if (preg_match('#^/workspaces/tools/model/(?P<model>[^/]++)/homeTab/(?P<homeTab>[^/]++)/unlink$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ws_model_tab_remove')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::unlinkHomeTab',));
                            }

                            // ws_model_roles_translation_keys_retrieve
                            if (0 === strpos($pathinfo, '/workspaces/tools/model/model') && preg_match('#^/workspaces/tools/model/model/(?P<model>[^/]++)/retrieve/roles/translation/keys$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ws_model_roles_translation_keys_retrieve')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ModelController::retrieveRolesTranslationKeysFromWorkspaceModel',));
                            }

                        }

                    }

                }

            }

            if (0 === strpos($pathinfo, '/workspace/analytics')) {
                // claro_workspace_analytics_traffic
                if (preg_match('#^/workspace/analytics/(?P<workspaceId>[^/]++)/traffic$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_analytics_traffic')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceAnalyticsController::showTrafficAction',));
                }

                // claro_workspace_analytics_resources
                if (preg_match('#^/workspace/analytics/(?P<workspaceId>[^/]++)/resources$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_analytics_resources')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceAnalyticsController::showResourcesAction',));
                }

                // claro_workspace_activities_evaluations_show
                if (preg_match('#^/workspace/analytics/(?P<workspaceId>[^/]++)/activities/evaluations$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_activities_evaluations_show')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceAnalyticsController::workspaceActivitiesEvaluationsShowAction',));
                }

                // claro_workspace_activities_past_evaluations_show
                if (preg_match('#^/workspace/analytics/(?P<workspaceId>[^/]++)/activity/parameters/(?P<activityParametersId>[^/]++)/user/(?P<userId>[^/]++)/past/evaluations/show/(?P<displayType>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_activities_past_evaluations_show')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceAnalyticsController::workspaceActivitiesPastEvaluationsShowAction',));
                }

                // claro_workspace_manager_activity_evaluations_show
                if (0 === strpos($pathinfo, '/workspace/analytics/workspace/manager/activity') && preg_match('#^/workspace/analytics/workspace/manager/activity/(?P<activityId>[^/]++)/evaluations/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_manager_activity_evaluations_show')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\WorkspaceAnalyticsController::workspaceManagerActivityEvaluationsShowAction',));
                }

            }

        }

        if (0 === strpos($pathinfo, '/admin')) {
            // claro_admin_index
            if ($pathinfo === '/admin/index') {
                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\AdministrationController::indexAction',  '_route' => 'claro_admin_index',);
            }

            // claro_admin_open_tool
            if (0 === strpos($pathinfo, '/admin/open') && preg_match('#^/admin/open/(?P<toolName>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_open_tool')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\AdministrationController::openAdministrationToolAction',));
            }

            if (0 === strpos($pathinfo, '/admin/desktop')) {
                // claro_admin_desktop_configuration_menu
                if ($pathinfo === '/admin/desktop/configuration/menu') {
                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\DesktopConfigurationController::adminDesktopConfigMenuAction',  '_route' => 'claro_admin_desktop_configuration_menu',);
                }

                // claro_admin_desktop_tools_configuration
                if (0 === strpos($pathinfo, '/admin/desktop/tools/configure/type') && preg_match('#^/admin/desktop/tools/configure/type(?:/(?P<type>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_desktop_tools_configuration')), array (  'type' => 0,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\DesktopConfigurationController::adminDesktopConfigureToolAction',));
                }

            }

            if (0 === strpos($pathinfo, '/admin/ordered/tool')) {
                // claro_admin_ordered_tool_toggle_visibility
                if (preg_match('#^/admin/ordered/tool/(?P<orderedTool>[^/]++)/visibility/toggle$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_ordered_tool_toggle_visibility')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\DesktopConfigurationController::toggleVisibility',));
                }

                // claro_admin_ordered_tool_toggle_lock
                if (preg_match('#^/admin/ordered/tool/(?P<orderedTool>[^/]++)/locke/toggle$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_ordered_tool_toggle_lock')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\DesktopConfigurationController::toggleLock',));
                }

            }

            // claro_admin_desktop_update_ordered_tool_order
            if (0 === strpos($pathinfo, '/admin/tools/order/update/admin/ordered/tool') && preg_match('#^/admin/tools/order/update/admin/ordered/tool/(?P<orderedTool>[^/]++)/type/(?P<type>[^/]++)/next/(?P<nextOrderedToolId>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_desktop_update_ordered_tool_order')), array (  'type' => 0,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\DesktopConfigurationController::updateOrderedToolOrderAction',));
            }

            if (0 === strpos($pathinfo, '/admin/admin/desktop/home')) {
                // claro_admin_desktop_home_lock_management
                if ($pathinfo === '/admin/admin/desktop/home/lock/management') {
                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\DesktopConfigurationController::adminDesktopHomeLockManagementAction',  '_route' => 'claro_admin_desktop_home_lock_management',);
                }

                // claro_admin_desktop_home_lock_change
                if (0 === strpos($pathinfo, '/admin/admin/desktop/home/role') && preg_match('#^/admin/admin/desktop/home/role/(?P<role>[^/]++)/lock/(?P<locked>[^/]++)/change$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_desktop_home_lock_change')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\DesktopConfigurationController::adminDesktopHomeLockChangeAction',));
                }

            }

            // claro_admin_home_tabs_configuration
            if ($pathinfo === '/admin/desktop/hometabs/configuration') {
                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\HomeTabController::adminHomeTabsConfigAction',  '_route' => 'claro_admin_home_tabs_configuration',);
            }

            if (0 === strpos($pathinfo, '/admin/api/admin')) {
                if (0 === strpos($pathinfo, '/admin/api/admin/home/tab')) {
                    // api_get_admin_home_tabs
                    if ($pathinfo === '/admin/api/admin/home/tabs') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\HomeTabController::getAdminHomeTabsAction',  '_route' => 'api_get_admin_home_tabs',);
                    }

                    // api_get_admin_home_tab_creation_form
                    if ($pathinfo === '/admin/api/admin/home/tab/create/form') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\HomeTabController::getAdminHomeTabCreationFormAction',  '_route' => 'api_get_admin_home_tab_creation_form',);
                    }

                    // api_post_admin_home_tab_creation
                    if (0 === strpos($pathinfo, '/admin/api/admin/home/tab/type') && preg_match('#^/admin/api/admin/home/tab/type/(?P<homeTabType>[^/]++)/create$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_admin_home_tab_creation')), array (  'homeTabType' => 'desktop',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\HomeTabController::postAdminHomeTabCreationAction',));
                    }

                    // api_get_admin_home_tab_edition_form
                    if (preg_match('#^/admin/api/admin/home/tab/(?P<homeTabConfig>[^/]++)/type/(?P<homeTabType>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_admin_home_tab_edition_form')), array (  'homeTabType' => 'desktop',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\HomeTabController::getAdminHomeTabEditionFormAction',));
                    }

                    // api_put_admin_home_tab_edition
                    if (preg_match('#^/admin/api/admin/home/tab/(?P<homeTabConfig>[^/]++)/type/(?P<homeTabType>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_admin_home_tab_edition')), array (  'homeTabType' => 'desktop',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\HomeTabController::putAdminHomeTabEditionAction',));
                    }

                    // api_delete_admin_home_tab
                    if (preg_match('#^/admin/api/admin/home/tab/(?P<homeTabConfig>[^/]++)/type/(?P<homeTabType>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_admin_home_tab')), array (  'homeTabType' => 'desktop',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\HomeTabController::deleteAdminHomeTabAction',));
                    }

                }

                // api_post_admin_home_tab_config_reorder
                if (0 === strpos($pathinfo, '/admin/api/admin/type') && preg_match('#^/admin/api/admin/type/(?P<homeTabType>[^/]++)/home/tab/(?P<homeTabConfig>[^/]++)/next/(?P<nextHomeTabConfigId>[^/]++)/reorder$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_api_post_admin_home_tab_config_reorder;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_admin_home_tab_config_reorder')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\HomeTabController::postAdminHomeTabConfigReorderAction',));
                }
                not_api_post_admin_home_tab_config_reorder:

                if (0 === strpos($pathinfo, '/admin/api/admin/home/tab')) {
                    // api_get_admin_widgets_display
                    if (preg_match('#^/admin/api/admin/home/tab/(?P<homeTab>[^/]++)/widgets/display$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_admin_widgets_display')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\HomeTabController::getAdminWidgetsAction',));
                    }

                    // api_get_admin_widget_instance_creation_form
                    if ($pathinfo === '/admin/api/admin/home/tab/widget/create/form') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\HomeTabController::getAdminInstanceCreationFormAction',  '_route' => 'api_get_admin_widget_instance_creation_form',);
                    }

                    // api_post_admin_widget_instance_creation
                    if (preg_match('#^/admin/api/admin/home/tab/(?P<homeTab>[^/]++)/type/(?P<homeTabType>[^/]++)/widget/create$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_admin_widget_instance_creation')), array (  'homeTabType' => 'desktop',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\HomeTabController::postAdminWidgetInstanceCreationAction',));
                    }

                    if (0 === strpos($pathinfo, '/admin/api/admin/home/tab/widget')) {
                        if (0 === strpos($pathinfo, '/admin/api/admin/home/tab/widget/config')) {
                            // api_get_admin_widget_instance_edition_form
                            if (preg_match('#^/admin/api/admin/home/tab/widget/config/(?P<whtc>[^/]++)/display/(?P<wdc>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_admin_widget_instance_edition_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\HomeTabController::getAdminWidgetInstanceEditionFormAction',));
                            }

                            // api_put_admin_widget_instance_edition
                            if (preg_match('#^/admin/api/admin/home/tab/widget/config/(?P<whtc>[^/]++)/display/(?P<wdc>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_admin_widget_instance_edition')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\HomeTabController::putAdminWidgetInstanceEditionAction',));
                            }

                        }

                        // api_delete_admin_widget_home_tab_config
                        if (preg_match('#^/admin/api/admin/home/tab/widget/(?P<widgetHomeTabConfig>[^/]++)/delete$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_admin_widget_home_tab_config')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\HomeTabController::deleteAdminWidgetHomeTabConfigAction',));
                        }

                    }

                }

                // api_put_admin_widget_display_update
                if (0 === strpos($pathinfo, '/admin/api/admin/widget/display') && preg_match('#^/admin/api/admin/widget/display/(?P<datas>[^/]++)/update$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_admin_widget_display_update')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\HomeTabController::putAdminWidgetDisplayUpdateAction',));
                }

            }

            // claro_admin_portal_parameters
            if ($pathinfo === '/admin/portal/parameters') {
                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\PortalConfigurationController::indexAction',  '_route' => 'claro_admin_portal_parameters',);
            }

        }

        if (0 === strpos($pathinfo, '/resource')) {
            // claro_resource_creation_form
            if (0 === strpos($pathinfo, '/resource/form') && preg_match('#^/resource/form/(?P<resourceType>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_creation_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::creationFormAction',));
            }

            // claro_resource_create
            if (0 === strpos($pathinfo, '/resource/create') && preg_match('#^/resource/create/(?P<resourceType>[^/]++)/(?P<parentId>[^/]++)/published(?:/(?P<published>[^/]++))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_create')), array (  'published' => 0,  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::createAction',));
            }

            if (0 === strpos($pathinfo, '/resource/open')) {
                // claro_resource_open
                if (preg_match('#^/resource/open/(?P<resourceType>[^/]++)/(?P<node>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_open')), array (  'resourceType' => NULL,  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::openAction',));
                }

                // claro_resource_open_short
                if (preg_match('#^/resource/open/(?P<node>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_open_short')), array (  'resourceType' => NULL,  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::openAction',));
                }

            }

            // claro_resource_delete
            if ($pathinfo === '/resource/delete') {
                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::deleteAction',  '_route' => 'claro_resource_delete',);
            }

            // claro_resource_publish
            if ($pathinfo === '/resource/publish') {
                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::publishAction',  '_route' => 'claro_resource_publish',);
            }

            // claro_resource_unpublish
            if ($pathinfo === '/resource/unpublish') {
                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::unpublishAction',  '_route' => 'claro_resource_unpublish',);
            }

            // claro_resource_move
            if (0 === strpos($pathinfo, '/resource/move') && preg_match('#^/resource/move/(?P<newParent>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_move')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::moveAction',));
            }

            // claro_resource_action
            if (0 === strpos($pathinfo, '/resource/custom') && preg_match('#^/resource/custom/(?P<action>[^/]++)/(?P<node>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_action')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::customAction',));
            }

            if (0 === strpos($pathinfo, '/resource/log')) {
                // claro_resource_logs
                if (preg_match('#^/resource/log/(?P<node>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_logs')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::logAction',));
                }

                // claro_resource_logs_paginated
                if (preg_match('#^/resource/log/(?P<node>[^/]++)(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_logs_paginated')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::logAction',));
                }

                // claro_resource_logs_by_user
                if (preg_match('#^/resource/log/(?P<node>[^/]++)/user$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_logs_by_user')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::logByUserAction',));
                }

                // claro_resource_logs_by_user_paginated
                if (preg_match('#^/resource/log/(?P<node>[^/]++)/user(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_logs_by_user_paginated')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::logByUserAction',));
                }

                // claro_resource_logs_by_user_csv
                if (preg_match('#^/resource/log/(?P<node>[^/]++)/user/csv$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_logs_by_user_csv')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::logByUserCSVAction',));
                }

            }

            if (0 === strpos($pathinfo, '/resource/d')) {
                // claro_resource_download
                if (0 === strpos($pathinfo, '/resource/download') && preg_match('#^/resource/download(?:/(?P<forceArchive>(true|false|0|1)))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_download')), array (  'forceArchive' => false,  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::downloadAction',));
                }

                // claro_resource_directory
                if (0 === strpos($pathinfo, '/resource/directory') && preg_match('#^/resource/directory(?:/(?P<nodeId>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_directory')), array (  'nodeId' => 0,  'node' => NULL,  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::openDirectoryAction',));
                }

            }

            // claro_resource_copy
            if (0 === strpos($pathinfo, '/resource/copy') && preg_match('#^/resource/copy/(?P<parent>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_copy')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::copyAction',));
            }

            // claro_resource_filter
            if (0 === strpos($pathinfo, '/resource/filter') && preg_match('#^/resource/filter/(?P<nodeId>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_filter')), array (  'node' => NULL,  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::filterAction',));
            }

            if (0 === strpos($pathinfo, '/resource/s')) {
                // claro_resource_create_shortcut
                if (0 === strpos($pathinfo, '/resource/shortcut') && preg_match('#^/resource/shortcut/(?P<parent>[^/]++)/create$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_create_shortcut')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::createShortcutAction',));
                }

                // claro_resource_insert_at
                if (0 === strpos($pathinfo, '/resource/sort') && preg_match('#^/resource/sort/(?P<node>[^/]++)/at/(?P<index>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_insert_at')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::insertAt',));
                }

            }

            // claro_resource_manager_parameters
            if ($pathinfo === '/resource/manager_parameters') {
                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::managerParametersAction',  '_route' => 'claro_resource_manager_parameters',);
            }

            // claro_resource_embed
            if (0 === strpos($pathinfo, '/resource/embed') && preg_match('#^/resource/embed/(?P<node>[^/]++)/(?P<type>[^/]++)/(?P<extension>[^/]++)(?:/(?P<openInNewTab>[^/]++))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_embed')), array (  'openInNewTab' => '0',  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::embedResourceAction',));
            }

            // claro_resource_change_zoom
            if (0 === strpos($pathinfo, '/resource/zoom') && preg_match('#^/resource/zoom/(?P<zoom>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_change_zoom')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::changeZoom',));
            }

            // claro_resource_export
            if ($pathinfo === '/resource/export') {
                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::exportAction',  '_route' => 'claro_resource_export',);
            }

            // claro_resource_import_form
            if (preg_match('#^/resource/(?P<node>[^/]++)/import/form$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_import_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::importFormAction',));
            }

            // claro_resource_import
            if (preg_match('#^/resource/(?P<directory>[^/]++)/import$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_import')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::importAction',));
            }

            // claro_resource_manager_display_mode_register
            if (0 === strpos($pathinfo, '/resource/resource/manager') && preg_match('#^/resource/resource/manager/(?P<index>[^/]++)/display/mode/(?P<displayMode>[^/]++)/register$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_manager_display_mode_register')), array (  'user' => NULL,  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceController::resourceManagerDisplayModeRegisterAction',));
            }

            // claro_resource_icon_list
            if (rtrim($pathinfo, '/') === '/resource_icon') {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_claro_resource_icon_list;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'claro_resource_icon_list');
                }

                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceIconController::indexAction',  '_route' => 'claro_resource_icon_list',);
            }
            not_claro_resource_icon_list:

            if (0 === strpos($pathinfo, '/resource/rename')) {
                // claro_resource_rename_form
                if (0 === strpos($pathinfo, '/resource/rename/form') && preg_match('#^/resource/rename/form/(?P<node>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_rename_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourcePropertiesController::renameFormAction',));
                }

                // claro_resource_rename
                if (preg_match('#^/resource/rename/(?P<node>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_rename')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourcePropertiesController::renameAction',));
                }

            }

            if (0 === strpos($pathinfo, '/resource/properties')) {
                // claro_resource_form_properties
                if (0 === strpos($pathinfo, '/resource/properties/form') && preg_match('#^/resource/properties/form/(?P<node>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_form_properties')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourcePropertiesController::propertiesFormAction',));
                }

                // claro_resource_edit_properties
                if (0 === strpos($pathinfo, '/resource/properties/edit') && preg_match('#^/resource/properties/edit/(?P<node>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_edit_properties')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourcePropertiesController::changePropertiesAction',));
                }

            }

            if (0 === strpos($pathinfo, '/resource/node')) {
                // claro_resource_icon_edit_form
                if (preg_match('#^/resource/node/(?P<node>[^/]++)/icon/edit/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_icon_edit_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourcePropertiesController::iconEditFormAction',));
                }

                // claro_resource_icon_edit
                if (preg_match('#^/resource/node/(?P<node>[^/]++)/icon/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_icon_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourcePropertiesController::iconEditAction',));
                }

            }

            // claro_resource_right_form
            if (preg_match('#^/resource/(?P<node>[^/]++)/rights/form/role(?:/(?P<role>[^/]++))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_right_form')), array (  'role' => NULL,  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceRightsController::rightFormAction',));
            }

            // claro_resource_rights_edit
            if (preg_match('#^/resource/(?P<node>[^/]++)/rights/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_rights_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceRightsController::editPermsAction',));
            }

            // claro_resource_open_perms
            if (0 === strpos($pathinfo, '/resource/perms/open') && preg_match('#^/resource/perms/open/(?P<node>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_open_perms')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceRightsController::openPermsAction',));
            }

            // claro_resource_right_creation_form
            if (preg_match('#^/resource/(?P<node>[^/]++)/role/(?P<role>[^/]++)/right/creation/form$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_right_creation_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceRightsController::rightCreationFormAction',));
            }

            // claro_resource_rights_creation_edit
            if (preg_match('#^/resource/(?P<node>[^/]++)/role/(?P<role>[^/]++)/right/creation/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resource_rights_creation_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceRightsController::editPermsCreationAction',));
            }

            // claro_resources_rights_users_with_rights_form
            if (preg_match('#^/resource/(?P<node>[^/]++)/rights/users/with/rights/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/form/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resources_rights_users_with_rights_form')), array (  'search' => '',  'ordered' => 'firstName',  'order' => 'ASC',  'page' => 1,  'max' => 50,  'orderedBy' => 'firstName',  '_controller' => 'Claroline\\CoreBundle\\Controller\\ResourceRightsController::resourcesRightsUsersWithRightsFormAction',));
            }

            // claro_workspace_resource_rights_creation_form
            if (0 === strpos($pathinfo, '/resource/workspace') && preg_match('#^/resource/workspace/(?P<workspace>[^/]++)/rights/form/role/(?P<role>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_resource_rights_creation_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Tool\\ResourceManagerController::workspaceResourceRightsCreationFormAction',));
            }

        }

        if (0 === strpos($pathinfo, '/text')) {
            // claro_text_edit_form
            if (0 === strpos($pathinfo, '/text/form/edit') && preg_match('#^/text/form/edit/(?P<text>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_text_edit_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\TextController::editFormAction',));
            }

            // claro_text_edit
            if (0 === strpos($pathinfo, '/text/edit') && preg_match('#^/text/edit/(?P<old>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_text_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\TextController::editAction',));
            }

            // claro_text_open
            if (0 === strpos($pathinfo, '/text/open') && preg_match('#^/text/open/(?P<text>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_text_open')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\TextController::openAction',));
            }

        }

        if (0 === strpos($pathinfo, '/widget')) {
            // claro_display_workspaces_widget
            if (0 === strpos($pathinfo, '/widget/workspaces/widget') && preg_match('#^/widget/workspaces/widget/(?P<mode>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_display_workspaces_widget')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Widget\\MyWorkspacesWidgetController::displayMyWorkspacesWidgetAction',));
            }

            if (0 === strpos($pathinfo, '/widget/resources/widget')) {
                // claro_resources_widget
                if (preg_match('#^/widget/resources/widget/(?P<widgetInstance>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resources_widget')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Widget\\ResourcesWidgetController::resourcesWidgetAction',));
                }

                // claro_resources_widget_configure_form
                if (preg_match('#^/widget/resources/widget/(?P<widgetInstance>[^/]++)/configure/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resources_widget_configure_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Widget\\ResourcesWidgetController::resourcesWidgetConfigureFormAction',));
                }

                // claro_resources_widget_configure
                if (0 === strpos($pathinfo, '/widget/resources/widget/configure/config') && preg_match('#^/widget/resources/widget/configure/config/(?P<config>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_resources_widget_configure')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Widget\\ResourcesWidgetController::resourcesWidgetConfigureAction',));
                }

            }

            // claro_simple_text_update_config
            if (0 === strpos($pathinfo, '/widget/simple_text_update/config') && preg_match('#^/widget/simple_text_update/config/(?P<widget>[^/]++)$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_claro_simple_text_update_config;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_simple_text_update_config')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Widget\\SimpleTextController::updateSimpleTextWidgetConfig',));
            }
            not_claro_simple_text_update_config:

        }

        if (0 === strpos($pathinfo, '/mail')) {
            // claro_mail_form
            if (0 === strpos($pathinfo, '/mail/form') && preg_match('#^/mail/form/(?P<userId>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_mail_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\MailController::formAction',));
            }

            // claro_mail_send
            if (0 === strpos($pathinfo, '/mail/send') && preg_match('#^/mail/send/(?P<userId>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_mail_send')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\MailController::sendAction',));
            }

        }

        if (0 === strpos($pathinfo, '/activity')) {
            // claro_activity_edit
            if (0 === strpos($pathinfo, '/activity/edit') && preg_match('#^/activity/edit/(?P<resource>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_activity_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ActivityController::editAction',));
            }

            // claro_activity_add
            if (0 === strpos($pathinfo, '/activity/add') && preg_match('#^/activity/add/(?P<activity>[^/]++)/(?P<resource>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_activity_add')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ActivityController::addAction',));
            }

            if (0 === strpos($pathinfo, '/activity/remove')) {
                // claro_activity_remove_primary_resource
                if (0 === strpos($pathinfo, '/activity/removeprimary') && preg_match('#^/activity/removeprimary/(?P<activity>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_activity_remove_primary_resource')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ActivityController::removePrimaryResourceAction',));
                }

                // claro_activity_remove_resource
                if (preg_match('#^/activity/remove/(?P<activity>[^/]++)/(?P<resource>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_activity_remove_resource')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ActivityController::removeAction',));
                }

            }

            if (0 === strpos($pathinfo, '/activity/activity')) {
                // claro_add_rule_to_activity
                if (0 === strpos($pathinfo, '/activity/activity/add/rule') && preg_match('#^/activity/activity/add/rule/(?P<activityParamsId>[^/]++)/(?P<action>[^/]++)/(?P<occurrence>[^/]++)/(?P<result>[^/]++)/(?P<activeFrom>[^/]++)/(?P<activeUntil>[^/]++)/(?P<resourceNodeId>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_claro_add_rule_to_activity;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_add_rule_to_activity')), array (  'resourceNode' => NULL,  '_controller' => 'Claroline\\CoreBundle\\Controller\\ActivityController::addRuleToActivity',));
                }
                not_claro_add_rule_to_activity:

                // claro_get_rule_actions_from_resource_type
                if (0 === strpos($pathinfo, '/activity/activity/rule/actions/resource/type') && preg_match('#^/activity/activity/rule/actions/resource/type(?:/(?P<resourceTypeName>[^/]++))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claro_get_rule_actions_from_resource_type;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_get_rule_actions_from_resource_type')), array (  'resourceTypeName' => NULL,  '_controller' => 'Claroline\\CoreBundle\\Controller\\ActivityController::getRuleActionsFromResourceType',));
                }
                not_claro_get_rule_actions_from_resource_type:

                // claro_display_activity_evaluation
                if (0 === strpos($pathinfo, '/activity/activity/display/evaluation/parameters') && preg_match('#^/activity/activity/display/evaluation/parameters/(?P<paramsId>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_display_activity_evaluation')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ActivityController::displayActivityEvaluationAction',));
                }

            }

            if (0 === strpos($pathinfo, '/activity/edit/activity')) {
                // claro_activity_evaluation_edit
                if (0 === strpos($pathinfo, '/activity/edit/activity/evaluation') && preg_match('#^/activity/edit/activity/evaluation/(?P<evaluationId>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_activity_evaluation_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ActivityController::editActivityEvaluationAction',));
                }

                // claro_activity_past_evaluation_edit
                if (0 === strpos($pathinfo, '/activity/edit/activity/past/evaluation') && preg_match('#^/activity/edit/activity/past/evaluation/(?P<pastEvaluationId>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_activity_past_evaluation_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ActivityController::editActivityPastEvaluationAction',));
                }

            }

            // claro_activity_remove_resource_confirm
            if ($pathinfo === '/activity/remove') {
                return array (  '_controller' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController::templateAction',  'template' => 'ClarolineCoreBundle:Activity:remove.html.twig',  '_route' => 'claro_activity_remove_resource_confirm',);
            }

        }

        // fos_js_routing_js
        if (0 === strpos($pathinfo, '/js/routing') && preg_match('#^/js/routing(?:\\.(?P<_format>js|json))?$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fos_js_routing_js')), array (  '_controller' => 'fos_js_routing.controller:indexAction',  '_format' => 'js',));
        }

        if (0 === strpos($pathinfo, '/file')) {
            // claro_file_get_media
            if (0 === strpos($pathinfo, '/file/resource/media') && preg_match('#^/file/resource/media/(?P<node>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_file_get_media')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\FileController::streamMediaAction',));
            }

            // claro_file_upload_with_ajax
            if (0 === strpos($pathinfo, '/file/upload') && preg_match('#^/file/upload/(?P<parent>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_file_upload_with_ajax')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\FileController::uploadWithAjaxAction',));
            }

            // claro_file_upload_with_tinymce
            if (0 === strpos($pathinfo, '/file/tinymce/upload') && preg_match('#^/file/tinymce/upload/(?P<parent>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_file_upload_with_tinymce')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\FileController::uploadWithTinyMceAction',));
            }

            if (0 === strpos($pathinfo, '/file/up')) {
                // claro_upload_modal
                if ($pathinfo === '/file/uploadmodal') {
                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\FileController::uploadModalAction',  '_route' => 'claro_upload_modal',);
                }

                if (0 === strpos($pathinfo, '/file/update')) {
                    // update_file_form
                    if (preg_match('#^/file/update/(?P<file>[^/]++)/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'update_file_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\FileController::updateFileFormAction',));
                    }

                    // update_file
                    if (preg_match('#^/file/update/(?P<file>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'update_file')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\FileController::updateFileAction',));
                    }

                }

            }

        }

        if (0 === strpos($pathinfo, '/user')) {
            // claro_user_search_in_workspace
            if (0 === strpos($pathinfo, '/user/searchInWorkspace') && preg_match('#^/user/searchInWorkspace/(?P<workspaceId>\\d+)/(?P<search>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_user_search_in_workspace')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\UserController::userSearchInWorkspaceAction',));
            }

            if (0 === strpos($pathinfo, '/user/user')) {
                // claro_user_picker
                if (0 === strpos($pathinfo, '/user/user/picker/name') && preg_match('#^/user/user/picker/name/(?P<pickerName>[^/]++)/title/(?P<pickerTitle>[^/]++)/mode/(?P<mode>[^/]++)/show/all/(?P<showAllUsers>[^/]++)/filters(?:/(?P<showFilters>[^/]++)(?:/(?P<showId>[^/]++)(?:/(?P<showPicture>[^/]++)(?:/(?P<showUsername>[^/]++)(?:/(?P<showMail>[^/]++)(?:/(?P<showCode>[^/]++)(?:/(?P<showGroups>[^/]++)(?:/(?P<showPlatformRoles>[^/]++)(?:/(?P<attachName>[^/]++))?)?)?)?)?)?)?)?)?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_user_picker')), array (  'mode' => 'single',  'showAllUsers' => 0,  'showFilters' => 1,  'showId' => 0,  'showPicture' => 0,  'showUsername' => 1,  'showMail' => 0,  'showCode' => 0,  'showGroups' => 0,  'showPlatformRoles' => 0,  'attachName' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\UserController::userPickerAction',));
                }

                if (0 === strpos($pathinfo, '/user/users/list/for/user/picker/mode')) {
                    // claro_users_list_for_user_picker
                    if (preg_match('#^/user/users/list/for/user/picker/mode/(?P<mode>[^/]++)/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/show/all(?:/(?P<showAllUsers>[^/]++)(?:/(?P<showId>[^/]++)(?:/(?P<showPicture>[^/]++)(?:/(?P<showUsername>[^/]++)(?:/(?P<showMail>[^/]++)(?:/(?P<showCode>[^/]++)(?:/(?P<showGroups>[^/]++)(?:/(?P<showPlatformRoles>[^/]++)(?:/(?P<attachName>[^/]++))?)?)?)?)?)?)?)?)?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_users_list_for_user_picker')), array (  'page' => 1,  'max' => 50,  'orderedBy' => 'lastName',  'order' => 'ASC',  'search' => '',  'mode' => 'single',  'showAllUsers' => 0,  'showId' => 0,  'showPicture' => 0,  'showUsername' => 1,  'showMail' => 0,  'showCode' => 0,  'showGroups' => 0,  'showPlatformRoles' => 0,  'attachName' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\UserController::usersListForUserPickerAction',));
                    }

                    // claro_searched_users_list_for_user_picker
                    if (preg_match('#^/user/users/list/for/user/picker/mode/(?P<mode>[^/]++)/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search/(?P<search>[^/]++)/show/all(?:/(?P<showAllUsers>[^/]++)(?:/(?P<showId>[^/]++)(?:/(?P<showPicture>[^/]++)(?:/(?P<showUsername>[^/]++)(?:/(?P<showMail>[^/]++)(?:/(?P<showCode>[^/]++)(?:/(?P<showGroups>[^/]++)(?:/(?P<showPlatformRoles>[^/]++)(?:/(?P<attachName>[^/]++))?)?)?)?)?)?)?)?)?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_searched_users_list_for_user_picker')), array (  'page' => 1,  'max' => 50,  'orderedBy' => 'lastName',  'order' => 'ASC',  'search' => '',  'mode' => 'single',  'showAllUsers' => 0,  'showId' => 0,  'showPicture' => 0,  'showUsername' => 1,  'showMail' => 0,  'showCode' => 0,  'showGroups' => 0,  'showPlatformRoles' => 0,  'attachName' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\UserController::usersListForUserPickerAction',));
                    }

                }

            }

            // claro_filters_list_for_user_picker
            if (0 === strpos($pathinfo, '/user/filters/list/type') && preg_match('#^/user/filters/list/type/(?P<filterType>[^/]++)/for/user/picker$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_filters_list_for_user_picker')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\UserController::filtersListForUserPickerAction',));
            }

            // claro_workspace_roles_list_for_user_picker
            if (0 === strpos($pathinfo, '/user/workspace') && preg_match('#^/user/workspace/(?P<workspace>[^/]++)/roles/list/for/user/picker$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_roles_list_for_user_picker')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\UserController::workspaceRolesListForUserPickerAction',));
            }

            if (0 === strpos($pathinfo, '/user/user')) {
                // claro_user_infos_request
                if (preg_match('#^/user/user/(?P<user>[^/]++)/infos/request$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_user_infos_request')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\UserController::userInfosRequestAction',));
                }

                // claro_users_infos_request
                if ($pathinfo === '/user/users/infos/request') {
                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\UserController::usersInfosRequestAction',  '_route' => 'claro_users_infos_request',);
                }

            }

        }

        if (0 === strpos($pathinfo, '/a')) {
            if (0 === strpos($pathinfo, '/admin')) {
                if (0 === strpos($pathinfo, '/admin/parameters')) {
                    // claro_admin_parameters_index
                    if (rtrim($pathinfo, '/') === '/admin/parameters') {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'claro_admin_parameters_index');
                        }

                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::indexAction',  '_route' => 'claro_admin_parameters_index',);
                    }

                    // claro_admin_parameters_general
                    if ($pathinfo === '/admin/parameters/general') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::generalFormAction',  '_route' => 'claro_admin_parameters_general',);
                    }

                    // claro_admin_parameters_appearance
                    if ($pathinfo === '/admin/parameters/appearance') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::appearanceFormAction',  '_route' => 'claro_admin_parameters_appearance',);
                    }

                    if (0 === strpos($pathinfo, '/admin/parameters/mail')) {
                        // claro_admin_parameters_mail_index
                        if ($pathinfo === '/admin/parameters/mail') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::mailIndexAction',  '_route' => 'claro_admin_parameters_mail_index',);
                        }

                        if (0 === strpos($pathinfo, '/admin/parameters/mail/server')) {
                            // claro_admin_parameters_mail_server
                            if ($pathinfo === '/admin/parameters/mail/server') {
                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::mailServerFormAction',  '_route' => 'claro_admin_parameters_mail_server',);
                            }

                            // claro_admin_edit_parameters_mail_server
                            if ($pathinfo === '/admin/parameters/mail/server/submit') {
                                if ($this->context->getMethod() != 'POST') {
                                    $allow[] = 'POST';
                                    goto not_claro_admin_edit_parameters_mail_server;
                                }

                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::submitMailServerAction',  '_route' => 'claro_admin_edit_parameters_mail_server',);
                            }
                            not_claro_admin_edit_parameters_mail_server:

                            // claro_admin_reset_mail_server
                            if ($pathinfo === '/admin/parameters/mail/server/reset') {
                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::resetMailServerAction',  '_route' => 'claro_admin_reset_mail_server',);
                            }

                        }

                        if (0 === strpos($pathinfo, '/admin/parameters/mail/registration')) {
                            // claro_admin_mail_registration
                            if ($pathinfo === '/admin/parameters/mail/registration') {
                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::registrationMailFormAction',  '_route' => 'claro_admin_mail_registration',);
                            }

                            // claro_admin_edit_mail_registration
                            if ($pathinfo === '/admin/parameters/mail/registration/submit') {
                                if ($this->context->getMethod() != 'POST') {
                                    $allow[] = 'POST';
                                    goto not_claro_admin_edit_mail_registration;
                                }

                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::submitRegistrationMailAction',  '_route' => 'claro_admin_edit_mail_registration',);
                            }
                            not_claro_admin_edit_mail_registration:

                        }

                        if (0 === strpos($pathinfo, '/admin/parameters/mail/layout')) {
                            // claro_admin_mail_layout
                            if ($pathinfo === '/admin/parameters/mail/layout') {
                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::mailLayoutFormAction',  '_route' => 'claro_admin_mail_layout',);
                            }

                            // claro_admin_edit_mail_layout
                            if ($pathinfo === '/admin/parameters/mail/layout/submit') {
                                if ($this->context->getMethod() != 'POST') {
                                    $allow[] = 'POST';
                                    goto not_claro_admin_edit_mail_layout;
                                }

                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::submitMailLayoutAction',  '_route' => 'claro_admin_edit_mail_layout',);
                            }
                            not_claro_admin_edit_mail_layout:

                            if (0 === strpos($pathinfo, '/admin/parameters/mail/layout/option')) {
                                // claro_admin_mail_option_form
                                if ($pathinfo === '/admin/parameters/mail/layout/option/form') {
                                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::optionMailFormAction',  '_route' => 'claro_admin_mail_option_form',);
                                }

                                // claro_admin_mail_submit_form
                                if ($pathinfo === '/admin/parameters/mail/layout/option/submit') {
                                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::optionMailSubmitAction',  '_route' => 'claro_admin_mail_submit_form',);
                                }

                            }

                        }

                    }

                    if (0 === strpos($pathinfo, '/admin/parameters/terms')) {
                        // claro_admin_edit_terms_of_service
                        if ($pathinfo === '/admin/parameters/terms') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::termsOfServiceFormAction',  '_route' => 'claro_admin_edit_terms_of_service',);
                        }

                        // claro_admin_edit_terms_of_service_submit
                        if ($pathinfo === '/admin/parameters/terms/submit') {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_claro_admin_edit_terms_of_service_submit;
                            }

                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::submitTermsOfServiceAction',  '_route' => 'claro_admin_edit_terms_of_service_submit',);
                        }
                        not_claro_admin_edit_terms_of_service_submit:

                    }

                    // claro_admin_parameters_indexing
                    if ($pathinfo === '/admin/parameters/indexing') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::indexingFormAction',  '_route' => 'claro_admin_parameters_indexing',);
                    }

                    if (0 === strpos($pathinfo, '/admin/parameters/session')) {
                        // claro_admin_session
                        if ($pathinfo === '/admin/parameters/session') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::sessionFormAction',  '_route' => 'claro_admin_session',);
                        }

                        // claro_admin_session_submit
                        if ($pathinfo === '/admin/parameters/session/submit') {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_claro_admin_session_submit;
                            }

                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::submitSessionAction',  '_route' => 'claro_admin_session_submit',);
                        }
                        not_claro_admin_session_submit:

                    }

                    // claro_admin_parameters_oauth_index
                    if ($pathinfo === '/admin/parameters/oauth') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::oauthIndexAction',  '_route' => 'claro_admin_parameters_oauth_index',);
                    }

                    // claro_admin_delete_logo
                    if (0 === strpos($pathinfo, '/admin/parameters/delete/logo') && preg_match('#^/admin/parameters/delete/logo/(?P<file>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_delete_logo')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::deleteLogoAction',));
                    }

                    if (0 === strpos($pathinfo, '/admin/parameters/maintenance')) {
                        // claro_admin_parameters_maintenance
                        if ($pathinfo === '/admin/parameters/maintenance') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::maintenancePageAction',  '_route' => 'claro_admin_parameters_maintenance',);
                        }

                        // claro_admin_parameters_start_maintenance
                        if ($pathinfo === '/admin/parameters/maintenance/start') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::startMaintenanceAction',  '_route' => 'claro_admin_parameters_start_maintenance',);
                        }

                        // claro_admin_parameters_end_maintenance
                        if ($pathinfo === '/admin/parameters/maintenance/end') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::endMaintenanceAction',  '_route' => 'claro_admin_parameters_end_maintenance',);
                        }

                        if (0 === strpos($pathinfo, '/admin/parameters/maintenance/message/edit')) {
                            // claro_admin_parameters_maintenance_message_edit_form
                            if ($pathinfo === '/admin/parameters/maintenance/message/edit/form') {
                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::maintenanceMessageEditFormAction',  '_route' => 'claro_admin_parameters_maintenance_message_edit_form',);
                            }

                            // claro_admin_parameters_maintenance_message_edit
                            if ($pathinfo === '/admin/parameters/maintenance/message/edit') {
                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::maintenanceMessageEditAction',  '_route' => 'claro_admin_parameters_maintenance_message_edit',);
                            }

                        }

                    }

                    if (0 === strpos($pathinfo, '/admin/parameters/se')) {
                        if (0 === strpos($pathinfo, '/admin/parameters/security/token')) {
                            // claro_admin_security_token_list
                            if (0 === strpos($pathinfo, '/admin/parameters/security/token/order') && preg_match('#^/admin/parameters/security/token/order/(?P<order>[^/]++)/direction(?:/(?P<direction>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_security_token_list')), array (  'order' => 'clientName',  'direction' => 'ASC',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::securityTokenListAction',));
                            }

                            if (0 === strpos($pathinfo, '/admin/parameters/security/token/create')) {
                                // claro_admin_security_token_create_form
                                if ($pathinfo === '/admin/parameters/security/token/create/form') {
                                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::securityTokenCreateFormAction',  '_route' => 'claro_admin_security_token_create_form',);
                                }

                                // claro_admin_security_token_create
                                if ($pathinfo === '/admin/parameters/security/token/create') {
                                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::securityTokenCreateAction',  '_route' => 'claro_admin_security_token_create',);
                                }

                            }

                            // claro_admin_security_token_edit_form
                            if (preg_match('#^/admin/parameters/security/token/(?P<tokenId>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_security_token_edit_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::securityTokenEditFormAction',));
                            }

                            // claro_admin_security_token_edit
                            if (preg_match('#^/admin/parameters/security/token/(?P<tokenId>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_security_token_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::securityTokenEditAction',));
                            }

                            // claro_admin_security_token_delete
                            if (preg_match('#^/admin/parameters/security/token/(?P<tokenId>[^/]++)/delete$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_security_token_delete')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::securityTokenDeleteAction',));
                            }

                        }

                        if (0 === strpos($pathinfo, '/admin/parameters/send/datas')) {
                            if (0 === strpos($pathinfo, '/admin/parameters/send/datas/confirm')) {
                                // claro_admin_send_datas_confirm_form
                                if ($pathinfo === '/admin/parameters/send/datas/confirmation/form') {
                                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::sendDatasConfirmationFormAction',  '_route' => 'claro_admin_send_datas_confirm_form',);
                                }

                                // claro_admin_send_datas_confirm
                                if ($pathinfo === '/admin/parameters/send/datas/confirm') {
                                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::sendDatasConfirmAction',  '_route' => 'claro_admin_send_datas_confirm',);
                                }

                            }

                            // claro_admin_send_datas
                            if (0 === strpos($pathinfo, '/admin/parameters/send/datas/token') && preg_match('#^/admin/parameters/send/datas/token/(?P<token>[^/]++)$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_send_datas')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\ParametersController::sendDatasAction',));
                            }

                        }

                    }

                }

                if (0 === strpos($pathinfo, '/admin/workspaces')) {
                    if (0 === strpos($pathinfo, '/admin/workspaces/page')) {
                        // claro_admin_workspaces_management
                        if (preg_match('#^/admin/workspaces/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/order/(?P<order>[^/]++)/direction/(?P<direction>[^/]++)/type(?:/(?P<type>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_workspaces_management')), array (  'page' => 1,  'search' => '',  'max' => 50,  'order' => 'id',  'direction' => 'ASC',  'type' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspacesController::managementAction',));
                        }

                        // claro_admin_workspaces_management_search
                        if (preg_match('#^/admin/workspaces/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)/max/(?P<max>[^/]++)/order/(?P<order>[^/]++)/direction/(?P<direction>[^/]++)/type(?:/(?P<type>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_workspaces_management_search')), array (  'page' => 1,  'search' => '',  'max' => 50,  'order' => 'id',  'direction' => 'ASC',  'type' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspacesController::managementAction',));
                        }

                    }

                    // claro_admin_workspaces_management_visibility
                    if ($pathinfo === '/admin/workspaces/visibility') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspacesController::toggleWorkspaceVisibilityAction',  '_route' => 'claro_admin_workspaces_management_visibility',);
                    }

                    // claro_admin_workspaces_management_registration
                    if ($pathinfo === '/admin/workspaces/registration') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspacesController::toggleWorkspacePublicRegistrationAction',  '_route' => 'claro_admin_workspaces_management_registration',);
                    }

                    // claro_admin_delete_workspaces
                    if ($pathinfo === '/admin/workspaces/') {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_claro_admin_delete_workspaces;
                        }

                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspacesController::deleteWorkspacesAction',  '_route' => 'claro_admin_delete_workspaces',);
                    }
                    not_claro_admin_delete_workspaces:

                    if (0 === strpos($pathinfo, '/admin/workspaces/import')) {
                        // claro_admin_workspace_import_form
                        if ($pathinfo === '/admin/workspaces/import/form') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspacesController::importWorkspaceFormAction',  '_route' => 'claro_admin_workspace_import_form',);
                        }

                        // claro_admin_workspace_import
                        if ($pathinfo === '/admin/workspaces/import') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspacesController::importWorkspaceAction',  '_route' => 'claro_admin_workspace_import',);
                        }

                    }

                }

                if (0 === strpos($pathinfo, '/admin/roles')) {
                    // claro_admin_roles_index
                    if ($pathinfo === '/admin/roles/index') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\RolesController::indexAction',  '_route' => 'claro_admin_roles_index',);
                    }

                    // claro_admin_tools_index
                    if ($pathinfo === '/admin/roles/tools/index') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\RolesController::toolsIndexAction',  '_route' => 'claro_admin_tools_index',);
                    }

                    // claro_admin_add_tool_to_role
                    if (0 === strpos($pathinfo, '/admin/roles/bind/role') && preg_match('#^/admin/roles/bind/role/(?P<role>[^/]++)/tool/(?P<tool>[^/]++)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_admin_add_tool_to_role;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_add_tool_to_role')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\RolesController::addRoleToToolAction',));
                    }
                    not_claro_admin_add_tool_to_role:

                    // claro_admin_remove_tool_from_role
                    if (0 === strpos($pathinfo, '/admin/roles/unbind/role') && preg_match('#^/admin/roles/unbind/role/(?P<role>[^/]++)/tool/(?P<tool>[^/]++)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_admin_remove_tool_from_role;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_remove_tool_from_role')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\RolesController::removeRoleFromToolAction',));
                    }
                    not_claro_admin_remove_tool_from_role:

                    if (0 === strpos($pathinfo, '/admin/roles/create/platform_role')) {
                        // claro_admin_create_platform_role_form
                        if ($pathinfo === '/admin/roles/create/platform_role/form') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\RolesController::createPlatformRoleModalFormAction',  '_route' => 'claro_admin_create_platform_role_form',);
                        }

                        // claro_admin_create_platform_role
                        if ($pathinfo === '/admin/roles/create/platform_role') {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_claro_admin_create_platform_role;
                            }

                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\RolesController::createPlatformRoleAction',  '_route' => 'claro_admin_create_platform_role',);
                        }
                        not_claro_admin_create_platform_role:

                    }

                    if (0 === strpos($pathinfo, '/admin/roles/r')) {
                        // platform_roles_list
                        if ($pathinfo === '/admin/roles/roles/list') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\RolesController::roleListAction',  '_route' => 'platform_roles_list',);
                        }

                        // platform_roles_remove
                        if (0 === strpos($pathinfo, '/admin/roles/remove') && preg_match('#^/admin/roles/remove/(?P<role>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'platform_roles_remove')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\RolesController::removeRoleAction',));
                        }

                    }

                    // platform_role_initialize
                    if (0 === strpos($pathinfo, '/admin/roles/initialize/role') && preg_match('#^/admin/roles/initialize/role/(?P<role>[^/]++)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_platform_role_initialize;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'platform_role_initialize')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\RolesController::initializeRoleLimitAction',));
                    }
                    not_platform_role_initialize:

                    if (0 === strpos($pathinfo, '/admin/roles/role')) {
                        // platform_role_increase_limit
                        if (preg_match('#^/admin/roles/role/(?P<role>[^/]++)/increase/(?P<amount>[^/]++)$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_platform_role_increase_limit;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'platform_role_increase_limit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\RolesController::increaseRoleMaxUsers',));
                        }
                        not_platform_role_increase_limit:

                        // platform_role_name_edit
                        if (preg_match('#^/admin/roles/role/(?P<role>[^/]++)/edit/name/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_platform_role_name_edit;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'platform_role_name_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\RolesController::editRoleNameAction',));
                        }
                        not_platform_role_name_edit:

                        // platform_role_workspace_creation_edit
                        if (preg_match('#^/admin/roles/role/(?P<role>[^/]++)/invert_workspace_creation$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_platform_role_workspace_creation_edit;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'platform_role_workspace_creation_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\RolesController::invertPersonalWorkspaceCreationAction',));
                        }
                        not_platform_role_workspace_creation_edit:

                    }

                }

                if (0 === strpos($pathinfo, '/admin/users')) {
                    if (0 === strpos($pathinfo, '/admin/users/new')) {
                        // claro_admin_user_creation_form
                        if ($pathinfo === '/admin/users/new') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\UsersController::userCreationFormAction',  '_route' => 'claro_admin_user_creation_form',);
                        }

                        // claro_admin_create_user
                        if ($pathinfo === '/admin/users/new/submit') {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_claro_admin_create_user;
                            }

                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\UsersController::createAction',  '_route' => 'claro_admin_create_user',);
                        }
                        not_claro_admin_create_user:

                    }

                    if (0 === strpos($pathinfo, '/admin/users/i')) {
                        // claro_admin_users_index
                        if ($pathinfo === '/admin/users/index') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\UsersController::indexAction',  '_route' => 'claro_admin_users_index',);
                        }

                        // claro_admin_import_users_form
                        if ($pathinfo === '/admin/users/import') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\UsersController::importFormAction',  '_route' => 'claro_admin_import_users_form',);
                        }

                    }

                    // claro_admin_user_workspaces
                    if (0 === strpos($pathinfo, '/admin/users/user') && preg_match('#^/admin/users/user/(?P<user>[^/]++)/workspaces/page/(?P<page>[^/]++)/max(?:/(?P<max>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_user_workspaces')), array (  'page' => 1,  'max' => 50,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\UsersController::userWorkspaceListAction',));
                    }

                    // claro_admin_import_users
                    if ($pathinfo === '/admin/users/import/submit') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_admin_import_users;
                        }

                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\UsersController::importAction',  '_route' => 'claro_admin_import_users',);
                    }
                    not_claro_admin_import_users:

                    // claro_admin_export_users
                    if (0 === strpos($pathinfo, '/admin/users/export/users') && preg_match('#^/admin/users/export/users/(?P<format>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_export_users')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\UsersController::export',));
                    }

                    if (0 === strpos($pathinfo, '/admin/users/workspace/personal')) {
                        // claro_admin_workspace_tool_config_index
                        if ($pathinfo === '/admin/users/workspace/personal/tool/config') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\UsersController::personalWorkspaceToolConfigIndexAction',  '_route' => 'claro_admin_workspace_tool_config_index',);
                        }

                        // claro_admin_personal_workspace_resource_rights
                        if ($pathinfo === '/admin/users/workspace/personal/resources/config') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\UsersController::personalWorkspaceResourceRightsConfigAction',  '_route' => 'claro_admin_personal_workspace_resource_rights',);
                        }

                    }

                    if (0 === strpos($pathinfo, '/admin/users/pws')) {
                        if (0 === strpos($pathinfo, '/admin/users/pws/tool')) {
                            // claro_admin_pws_activate_tool
                            if (0 === strpos($pathinfo, '/admin/users/pws/tool/activate') && preg_match('#^/admin/users/pws/tool/activate/(?P<perm>[^/]++)/(?P<role>[^/]++)/(?P<tool>[^/]++)$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_pws_activate_tool')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\UsersController::activatePersonalWorkspaceToolPermAction',));
                            }

                            // claro_admin_pws_remove_tool
                            if (0 === strpos($pathinfo, '/admin/users/pws/tool/remove') && preg_match('#^/admin/users/pws/tool/remove/(?P<perm>[^/]++)/(?P<role>[^/]++)/(?P<tool>[^/]++)$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_pws_remove_tool')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\UsersController::removePersonalWorkspaceToolPermAction',));
                            }

                        }

                        if (0 === strpos($pathinfo, '/admin/users/pws/rights')) {
                            // claro_admin_pws_activate_rights_change
                            if (0 === strpos($pathinfo, '/admin/users/pws/rights/activate') && preg_match('#^/admin/users/pws/rights/activate/(?P<role>[^/]++)$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_pws_activate_rights_change')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\UsersController::activatePersonalWorkspaceRightsAction',));
                            }

                            // claro_admin_pws_deactivate_rights_change
                            if (0 === strpos($pathinfo, '/admin/users/pws/rights/deactivate') && preg_match('#^/admin/users/pws/rights/deactivate/(?P<role>[^/]++)$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_pws_deactivate_rights_change')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\UsersController::deactivatePersonalWorkspaceRightsAction',));
                            }

                        }

                    }

                    if (0 === strpos($pathinfo, '/admin/users/import/profile/pics')) {
                        // import_profile_pics_form
                        if ($pathinfo === '/admin/users/import/profile/pics/form') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\UsersController::importProfilePicsFormAction',  '_route' => 'import_profile_pics_form',);
                        }

                        // import_profile_pics
                        if ($pathinfo === '/admin/users/import/profile/pics') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\UsersController::importProfilePicsAction',  '_route' => 'import_profile_pics',);
                        }

                    }

                    // admin_user_action
                    if (preg_match('#^/admin/users/(?P<user>[^/]++)/admin/action/(?P<action>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'admin_user_action')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\UsersController::executeUserAdminAction',));
                    }

                    // admin_group_action
                    if (preg_match('#^/admin/users/(?P<group>[^/]++)/admin/action/(?P<action>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'admin_group_action')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\UsersController::executeGroupAdminAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/admin/logs')) {
                    // claro_admin_logs_show
                    if (rtrim($pathinfo, '/') === '/admin/logs') {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'claro_admin_logs_show');
                        }

                        return array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\LogsController::logListAction',  '_route' => 'claro_admin_logs_show',);
                    }

                    // claro_admin_logs_show_paginated
                    if (preg_match('#^/admin/logs(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_logs_show_paginated')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\LogsController::logListAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/admin/analytics')) {
                    // claro_admin_analytics_show
                    if (rtrim($pathinfo, '/') === '/admin/analytics') {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'claro_admin_analytics_show');
                        }

                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\AnalyticsController::analyticsAction',  '_route' => 'claro_admin_analytics_show',);
                    }

                    // claro_admin_analytics_connections
                    if ($pathinfo === '/admin/analytics/connections') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\AnalyticsController::analyticsConnectionsAction',  '_route' => 'claro_admin_analytics_connections',);
                    }

                    // claro_admin_analytics_resources
                    if ($pathinfo === '/admin/analytics/resources') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\AnalyticsController::analyticsResourcesAction',  '_route' => 'claro_admin_analytics_resources',);
                    }

                    // claro_admin_analytics_top
                    if (0 === strpos($pathinfo, '/admin/analytics/top') && preg_match('#^/admin/analytics/top(?:/(?P<topType>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_analytics_top')), array (  'topType' => 'top_users_connections',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\AnalyticsController::analyticsTopAction',));
                    }

                    // claro_admin_analytics_other_details
                    if (0 === strpos($pathinfo, '/admin/analytics/item') && preg_match('#^/admin/analytics/item/(?P<item>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_analytics_other_details')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\AnalyticsController::analyticsItemAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/admin/workspace/registration')) {
                    if (0 === strpos($pathinfo, '/admin/workspace/registration/registration')) {
                        if (0 === strpos($pathinfo, '/admin/workspace/registration/registration/management')) {
                            // claro_admin_registration_management
                            if (0 === strpos($pathinfo, '/admin/workspace/registration/registration/management/max') && preg_match('#^/admin/workspace/registration/registration/management/max(?:/(?P<max>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_registration_management')), array (  'search' => '',  'max' => 20,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspaceRegistrationController::registrationManagementAction',));
                            }

                            // claro_admin_registration_management_search
                            if (0 === strpos($pathinfo, '/admin/workspace/registration/registration/management/search') && preg_match('#^/admin/workspace/registration/registration/management/search/(?P<search>[^/]++)/max(?:/(?P<max>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_registration_management_search')), array (  'max' => 20,  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspaceRegistrationController::registrationManagementAction',));
                            }

                            // claro_admin_registration_management_users
                            if ($pathinfo === '/admin/workspace/registration/registration/management/users') {
                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspaceRegistrationController::registrationManagementUserListAction',  '_route' => 'claro_admin_registration_management_users',);
                            }

                            // claro_admin_registration_management_groups
                            if ($pathinfo === '/admin/workspace/registration/registration/management/groups') {
                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspaceRegistrationController::registrationManagementGroupListAction',  '_route' => 'claro_admin_registration_management_groups',);
                            }

                        }

                        if (0 === strpos($pathinfo, '/admin/workspace/registration/registration/list')) {
                            if (0 === strpos($pathinfo, '/admin/workspace/registration/registration/list/users/page')) {
                                // claro_users_list_registration_pager
                                if (preg_match('#^/admin/workspace/registration/registration/list/users/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_users_list_registration_pager')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspaceRegistrationController::userListPagerAction',));
                                }

                                // claro_users_list_registration_pager_search
                                if (preg_match('#^/admin/workspace/registration/registration/list/users/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_users_list_registration_pager_search')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspaceRegistrationController::userListPagerAction',));
                                }

                            }

                            if (0 === strpos($pathinfo, '/admin/workspace/registration/registration/list/groups/page')) {
                                // claro_groups_list_registration_pager
                                if (preg_match('#^/admin/workspace/registration/registration/list/groups/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_groups_list_registration_pager')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspaceRegistrationController::groupListPagerAction',));
                                }

                                // claro_groups_list_registration_pager_search
                                if (preg_match('#^/admin/workspace/registration/registration/list/groups/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_groups_list_registration_pager_search')), array (  'page' => 1,  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspaceRegistrationController::groupListPagerAction',));
                                }

                            }

                        }

                        if (0 === strpos($pathinfo, '/admin/workspace/registration/registration/management/workspaces')) {
                            // claro_admin_subscribe_users_to_workspaces
                            if (0 === strpos($pathinfo, '/admin/workspace/registration/registration/management/workspaces/users') && preg_match('#^/admin/workspace/registration/registration/management/workspaces/users/(?P<roleKey>[^/]++)$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'POST') {
                                    $allow[] = 'POST';
                                    goto not_claro_admin_subscribe_users_to_workspaces;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_subscribe_users_to_workspaces')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspaceRegistrationController::subscribeMultipleUsersToMultipleWorkspacesAction',));
                            }
                            not_claro_admin_subscribe_users_to_workspaces:

                            // claro_admin_subscribe_groups_to_workspaces
                            if (0 === strpos($pathinfo, '/admin/workspace/registration/registration/management/workspaces/groups') && preg_match('#^/admin/workspace/registration/registration/management/workspaces/groups/(?P<roleKey>[^/]++)$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'POST') {
                                    $allow[] = 'POST';
                                    goto not_claro_admin_subscribe_groups_to_workspaces;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_subscribe_groups_to_workspaces')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspaceRegistrationController::subscribeMultipleGroupsToMultipleWorkspacesAction',));
                            }
                            not_claro_admin_subscribe_groups_to_workspaces:

                            if (0 === strpos($pathinfo, '/admin/workspace/registration/registration/management/workspaces/roles')) {
                                // claro_admin_subscribe_users_to_one_workspace
                                if ($pathinfo === '/admin/workspace/registration/registration/management/workspaces/roles/users') {
                                    if ($this->context->getMethod() != 'POST') {
                                        $allow[] = 'POST';
                                        goto not_claro_admin_subscribe_users_to_one_workspace;
                                    }

                                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspaceRegistrationController::subscribeMultipleUsersToOneWorkspaceAction',  '_route' => 'claro_admin_subscribe_users_to_one_workspace',);
                                }
                                not_claro_admin_subscribe_users_to_one_workspace:

                                // claro_admin_subscribe_groups_to_one_workspace
                                if ($pathinfo === '/admin/workspace/registration/registration/management/workspaces/roles/groups') {
                                    if ($this->context->getMethod() != 'POST') {
                                        $allow[] = 'POST';
                                        goto not_claro_admin_subscribe_groups_to_one_workspace;
                                    }

                                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspaceRegistrationController::subscribeMultipleGroupsToOneWorkspaceAction',  '_route' => 'claro_admin_subscribe_groups_to_one_workspace',);
                                }
                                not_claro_admin_subscribe_groups_to_one_workspace:

                            }

                        }

                    }

                    if (0 === strpos($pathinfo, '/admin/workspace/registration/workspace')) {
                        // claro_admin_workspace_users_unregistration_management
                        if (preg_match('#^/admin/workspace/registration/workspace/(?P<workspace>[^/]++)/users/unregistration/management/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_workspace_users_unregistration_management')), array (  'search' => '',  'page' => 1,  'max' => 50,  'orderedBy' => 'username',  'order' => 'ASC',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspaceRegistrationController::workspaceUsersUnregistrationManagementAction',));
                        }

                        // claro_admin_workspace_groups_unregistration_management
                        if (preg_match('#^/admin/workspace/registration/workspace/(?P<workspace>[^/]++)/groups/unregistration/management/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_workspace_groups_unregistration_management')), array (  'search' => '',  'page' => 1,  'max' => 50,  'orderedBy' => 'name',  'order' => 'ASC',  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspaceRegistrationController::workspaceGroupsUnregistrationManagementAction',));
                        }

                    }

                    if (0 === strpos($pathinfo, '/admin/workspace/registration/unregistration/management/workspace')) {
                        // claro_admin_unsubscribe_users_from_workspace
                        if (preg_match('#^/admin/workspace/registration/unregistration/management/workspace/(?P<workspace>[^/]++)/roles/users$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_unsubscribe_users_from_workspace')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspaceRegistrationController::unsubscribeMultipleUsersFromWorkspaceAction',));
                        }

                        // claro_admin_unsubscribe_groups_from_workspace
                        if (preg_match('#^/admin/workspace/registration/unregistration/management/workspace/(?P<workspace>[^/]++)/roles/groups$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_unsubscribe_groups_from_workspace')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WorkspaceRegistrationController::unsubscribeMultipleGroupsFromWorkspaceAction',));
                        }

                    }

                }

                if (0 === strpos($pathinfo, '/admin/facet')) {
                    // claro_admin_facet_index
                    if ($pathinfo === '/admin/facet/index') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\FacetController::indexAction',  '_route' => 'claro_admin_facet_index',);
                    }

                    // claro_admin_facet
                    if ($pathinfo === '/admin/facet/facet') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\FacetController::facetsAction',  '_route' => 'claro_admin_facet',);
                    }

                    // claro_admin_profile_properties
                    if ($pathinfo === '/admin/facet/properties') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\FacetController::profilePropertiesAction',  '_route' => 'claro_admin_profile_properties',);
                    }

                }

                if (0 === strpos($pathinfo, '/admin/o')) {
                    if (0 === strpos($pathinfo, '/admin/oauth')) {
                        // claro_admin_oauth_claroline
                        if (rtrim($pathinfo, '/') === '/admin/oauth') {
                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'claro_admin_oauth_claroline');
                            }

                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OauthController::listAction',  '_route' => 'claro_admin_oauth_claroline',);
                        }

                        // claro_admin_oauth_clients
                        if ($pathinfo === '/admin/oauth/clients') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OauthController::clientsAction',  '_route' => 'claro_admin_oauth_clients',);
                        }

                        if (0 === strpos($pathinfo, '/admin/oauth/form')) {
                            // claro_admin_oauth_client_form
                            if ($pathinfo === '/admin/oauth/form') {
                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OauthController::modalCreateFormAction',  '_route' => 'claro_admin_oauth_client_form',);
                            }

                            // claro_admin_oauth_form_edit
                            if (0 === strpos($pathinfo, '/admin/oauth/form/edit') && preg_match('#^/admin/oauth/form/edit/(?P<client>[^/]++)$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_oauth_form_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OauthController::modalEditFormAction',));
                            }

                            // claro_admin_oauth_client_create
                            if ($pathinfo === '/admin/oauth/form/create') {
                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OauthController::createClientAction',  '_route' => 'claro_admin_oauth_client_create',);
                            }

                            // claro_admin_oauth_client_edit
                            if (0 === strpos($pathinfo, '/admin/oauth/form/edit') && preg_match('#^/admin/oauth/form/edit/(?P<client>[^/]++)/submit$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_oauth_client_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OauthController::editClientAction',));
                            }

                        }

                        // oauth_client_remove
                        if (0 === strpos($pathinfo, '/admin/oauth/delete/client') && preg_match('#^/admin/oauth/delete/client/(?P<client>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'oauth_client_remove')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OauthController::deleteClientAction',));
                        }

                        if (0 === strpos($pathinfo, '/admin/oauth/request')) {
                            if (0 === strpos($pathinfo, '/admin/oauth/request/friend')) {
                                // oauth_request_friend_form
                                if ($pathinfo === '/admin/oauth/request/friend/form') {
                                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OauthController::requestFriendFormAction',  '_route' => 'oauth_request_friend_form',);
                                }

                                // oauth_request_friend_submit
                                if ($pathinfo === '/admin/oauth/request/friend/submit') {
                                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OauthController::requestFriendSubmitAction',  '_route' => 'oauth_request_friend_submit',);
                                }

                                // oauth_request_friend_remove
                                if (0 === strpos($pathinfo, '/admin/oauth/request/friend/remove') && preg_match('#^/admin/oauth/request/friend/remove/(?P<friend>[^/]++)$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'oauth_request_friend_remove')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OauthController::removeFriendRequest',));
                                }

                            }

                            // oauth_pending_friend_remove
                            if (0 === strpos($pathinfo, '/admin/oauth/request/pending/remove') && preg_match('#^/admin/oauth/request/pending/remove/(?P<friend>[^/]++)$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'oauth_pending_friend_remove')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OauthController::removePendingFriend',));
                            }

                            // oauth_request_friend_new
                            if (0 === strpos($pathinfo, '/admin/oauth/request/friend/name') && preg_match('#^/admin/oauth/request/friend/name/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'oauth_request_friend_new')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OauthController::newFriendRequestAction',));
                            }

                        }

                        // oauth_friends_accept
                        if (0 === strpos($pathinfo, '/admin/oauth/friends/accept') && preg_match('#^/admin/oauth/friends/accept/(?P<friend>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'oauth_friends_accept')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OauthController::acceptFriendAction',));
                        }

                        // oauth_receive_data
                        if (0 === strpos($pathinfo, '/admin/oauth/id') && preg_match('#^/admin/oauth/id/(?P<id>[^/]++)/secret/(?P<secret>[^/]++)/name/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'oauth_receive_data')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OauthController::receiveOauthDataAction',));
                        }

                        // oauth_client_hide
                        if (0 === strpos($pathinfo, '/admin/oauth/hide/client') && preg_match('#^/admin/oauth/hide/client/(?P<client>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'oauth_client_hide')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OauthController::hideClientAction',));
                        }

                        if (0 === strpos($pathinfo, '/admin/oauth/request/authentication')) {
                            // oauth_request_authentication_form
                            if (0 === strpos($pathinfo, '/admin/oauth/request/authentication/form') && preg_match('#^/admin/oauth/request/authentication/form/(?P<friend>[^/]++)$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'oauth_request_authentication_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OauthController::friendAuthenticationFormAction',));
                            }

                            // oauth_request_authentication_submit
                            if (0 === strpos($pathinfo, '/admin/oauth/request/authentication/submit') && preg_match('#^/admin/oauth/request/authentication/submit/(?P<friend>[^/]++)$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'oauth_request_authentication_submit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OauthController::friendAuthenticationSubmitAction',));
                            }

                        }

                    }

                    // claro_organization_index
                    if ($pathinfo === '/admin/organization/index') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\OrganizationController::indexAction',  '_route' => 'claro_organization_index',);
                    }

                }

                if (0 === strpos($pathinfo, '/admin/i18n/internationalization')) {
                    // claro_admin_i18n_form
                    if ($pathinfo === '/admin/i18n/internationalization/form') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\InternationalizationController::formAction',  '_route' => 'claro_admin_i18n_form',);
                    }

                    // claro_admin_i18n_submit
                    if ($pathinfo === '/admin/i18n/internationalization/submit') {
                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\InternationalizationController::submitAction',  '_route' => 'claro_admin_i18n_submit',);
                    }

                }

                if (0 === strpos($pathinfo, '/admin/plugins')) {
                    // claro_admin_plugins
                    if (rtrim($pathinfo, '/') === '/admin/plugins') {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'claro_admin_plugins');
                        }

                        return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\PluginController::indexAction',  '_route' => 'claro_admin_plugins',);
                    }

                    // claro_admin_plugin_parameters
                    if (0 === strpos($pathinfo, '/admin/plugins/plugin/parameters') && preg_match('#^/admin/plugins/plugin/parameters/(?P<pluginShortName>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_plugin_parameters')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\PluginController::pluginParametersAction',));
                    }

                }

            }

            if (0 === strpos($pathinfo, '/api')) {
                if (0 === strpos($pathinfo, '/api/connected_')) {
                    // api_get_connected_user
                    if (0 === strpos($pathinfo, '/api/connected_user') && preg_match('#^/api/connected_user(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_connected_user;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_connected_user')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\ApiController::connectedUserAction',  '_format' => 'json',));
                    }
                    not_api_get_connected_user:

                    // api_get_connected_roles
                    if (0 === strpos($pathinfo, '/api/connected_roles') && preg_match('#^/api/connected_roles(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_connected_roles;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_connected_roles')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\ApiController::connectedRolesAction',  '_format' => 'json',));
                    }
                    not_api_get_connected_roles:

                }

                if (0 === strpos($pathinfo, '/api/users')) {
                    // api_users
                    if (preg_match('#^/api/users(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_users;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_users')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::getUsersAction',  '_format' => 'json',));
                    }
                    not_api_users:

                    // api_add_user_role
                    if (preg_match('#^/api/users/(?P<user>[^/]++)/roles/(?P<role>[^/]++)/add(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PATCH') {
                            $allow[] = 'PATCH';
                            goto not_api_add_user_role;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_add_user_role')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::addUserRoleAction',  '_format' => 'json',));
                    }
                    not_api_add_user_role:

                    // api_remove_user_role
                    if (preg_match('#^/api/users/(?P<user>[^/]++)/roles/(?P<role>[^/]++)/remove(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_remove_user_role;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_remove_user_role')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::removeUserRoleAction',  '_format' => 'json',));
                    }
                    not_api_remove_user_role:

                    // api_add_user_group
                    if (preg_match('#^/api/users/(?P<user>[^/]++)/groups/(?P<group>[^/]++)/add(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PATCH') {
                            $allow[] = 'PATCH';
                            goto not_api_add_user_group;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_add_user_group')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::addUserGroupAction',  '_format' => 'json',));
                    }
                    not_api_add_user_group:

                    // api_remove_user_group
                    if (preg_match('#^/api/users/(?P<user>[^/]++)/groups/(?P<group>[^/]++)/remove(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_remove_user_group;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_remove_user_group')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::removeUserGroupAction',  '_format' => 'json',));
                    }
                    not_api_remove_user_group:

                }

                // api_users_password_initialize
                if (0 === strpos($pathinfo, '/api/passwords/initializes/users') && preg_match('#^/api/passwords/initializes/users(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_api_users_password_initialize;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_users_password_initialize')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::usersPasswordInitializeAction',  '_format' => 'json',));
                }
                not_api_users_password_initialize:

                if (0 === strpos($pathinfo, '/api/user')) {
                    if (0 === strpos($pathinfo, '/api/users')) {
                        // api_add_users_to_group
                        if (preg_match('#^/api/users/(?P<group>[^/]++)/to/group/add(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_add_users_to_group;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_add_users_to_group')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::addUsersToGroupAction',  '_format' => 'json',));
                        }
                        not_api_add_users_to_group:

                        // api_remove_users_from_group
                        if (preg_match('#^/api/users/(?P<group>[^/]++)/from/group/remove(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_remove_users_from_group;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_remove_users_from_group')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::removeUsersFromGroupAction',  '_format' => 'json',));
                        }
                        not_api_remove_users_from_group:

                        // api_csv_remove_user
                        if (0 === strpos($pathinfo, '/api/users/csv/remove') && preg_match('#^/api/users/csv/remove(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_api_csv_remove_user;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_csv_remove_user')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::csvRemoveUserAction',  '_format' => 'json',));
                        }
                        not_api_csv_remove_user:

                    }

                    // api_disable_user
                    if (preg_match('#^/api/user/(?P<user>[^/]++)/disable(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_api_disable_user;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_disable_user')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::disableUserAction',  '_format' => 'json',));
                    }
                    not_api_disable_user:

                    // api_enable_user
                    if (preg_match('#^/api/user/(?P<user>[^/]++)/enable(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_api_enable_user;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_enable_user')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::enableUserAction',  '_format' => 'json',));
                    }
                    not_api_enable_user:

                    // api_csv_import_facets
                    if (0 === strpos($pathinfo, '/api/users/csv/facets') && preg_match('#^/api/users/csv/facets(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_api_csv_import_facets;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_csv_import_facets')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::csvImportFacetsAction',  '_format' => 'json',));
                    }
                    not_api_csv_import_facets:

                }

                // api_create_personal_workspace
                if (0 === strpos($pathinfo, '/api/pws/create') && preg_match('#^/api/pws/create/(?P<user>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_api_create_personal_workspace;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_create_personal_workspace')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::createPersonalWorkspaceAction',  '_format' => 'json',));
                }
                not_api_create_personal_workspace:

                if (0 === strpos($pathinfo, '/api/user')) {
                    if (0 === strpos($pathinfo, '/api/users')) {
                        // api_get_search_users
                        if (0 === strpos($pathinfo, '/api/users/page') && preg_match('#^/api/users/page/(?P<page>[^/]++)/limit/(?P<limit>[^/]++)/search(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_search_users;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_search_users')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::getSearchUsersAction',  '_format' => 'json',));
                        }
                        not_api_get_search_users:

                        // api_get_user_fields
                        if (0 === strpos($pathinfo, '/api/users/fields') && preg_match('#^/api/users/fields(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_user_fields;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_user_fields')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::getUserFieldsAction',  '_format' => 'json',));
                        }
                        not_api_get_user_fields:

                        // api_post_user
                        if (preg_match('#^/api/users(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_api_post_user;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_user')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::postUserAction',  '_format' => 'json',));
                        }
                        not_api_post_user:

                        // api_put_user
                        if (preg_match('#^/api/users/(?P<user>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_api_put_user;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_user')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::putUserAction',  '_format' => 'json',));
                        }
                        not_api_put_user:

                    }

                    // api_get_user
                    if (preg_match('#^/api/user/(?P<user>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_user;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_user')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::getUserAction',  '_format' => 'json',));
                    }
                    not_api_get_user:

                    // api_get_public_user
                    if (preg_match('#^/api/user/(?P<user>[^/]++)/public(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_public_user;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_public_user')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::getPublicUserAction',  '_format' => 'json',));
                    }
                    not_api_get_public_user:

                    if (0 === strpos($pathinfo, '/api/users')) {
                        // api_delete_user
                        if (preg_match('#^/api/users/(?P<user>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'DELETE') {
                                $allow[] = 'DELETE';
                                goto not_api_delete_user;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_user')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::deleteUserAction',  '_format' => 'json',));
                        }
                        not_api_delete_user:

                        // api_delete_users
                        if (preg_match('#^/api/users(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'DELETE') {
                                $allow[] = 'DELETE';
                                goto not_api_delete_users;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_users')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::deleteUsersAction',  '_format' => 'json',));
                        }
                        not_api_delete_users:

                        // api_put_users_roles
                        if (0 === strpos($pathinfo, '/api/users/roles/add') && preg_match('#^/api/users/roles/add(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_api_put_users_roles;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_users_roles')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::putRolesToUsersAction',  '_format' => 'json',));
                        }
                        not_api_put_users_roles:

                    }

                    // api_get_user_admin_actions
                    if (0 === strpos($pathinfo, '/api/user/admin/action') && preg_match('#^/api/user/admin/action(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_user_admin_actions;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_user_admin_actions')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::getUserAdminActionsAction',  '_format' => 'json',));
                    }
                    not_api_get_user_admin_actions:

                }

                // api_delete_personal_workspace
                if (0 === strpos($pathinfo, '/api/pws/delete') && preg_match('#^/api/pws/delete/(?P<user>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_api_delete_personal_workspace;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_personal_workspace')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\UserController::deletePersonalWorkspaceAction',  '_format' => 'json',));
                }
                not_api_delete_personal_workspace:

                // api_get_user_workspaces
                if (0 === strpos($pathinfo, '/api/user') && preg_match('#^/api/user/(?P<user>[^/]++)/workspaces(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_api_get_user_workspaces;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_user_workspaces')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceController::getUserWorkspacesAction',  '_format' => 'json',));
                }
                not_api_get_user_workspaces:

                if (0 === strpos($pathinfo, '/api/workspaces')) {
                    // api_get_connected_user_workspaces
                    if (preg_match('#^/api/workspaces(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_connected_user_workspaces;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_connected_user_workspaces')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceController::getConnectedUserWorkspacesAction',  '_format' => 'json',));
                    }
                    not_api_get_connected_user_workspaces:

                    // api_get_workspace
                    if (preg_match('#^/api/workspaces/(?P<workspace>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_workspace;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_workspace')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceController::getWorkspaceAction',  '_format' => 'json',));
                    }
                    not_api_get_workspace:

                    // api_get_workspace_additional_datas
                    if (preg_match('#^/api/workspaces/(?P<workspace>[^/]++)/additional/datas(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_workspace_additional_datas;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_workspace_additional_datas')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceController::getWorkspaceAdditionalDatasAction',  '_format' => 'json',));
                    }
                    not_api_get_workspace_additional_datas:

                }

                // api_get_non_personal_workspaces
                if (0 === strpos($pathinfo, '/api/non/personal/workspaces') && preg_match('#^/api/non/personal/workspaces(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_api_get_non_personal_workspaces;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_non_personal_workspaces')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceController::getNonPersonalWorkspacesAction',  '_format' => 'json',));
                }
                not_api_get_non_personal_workspaces:

                if (0 === strpos($pathinfo, '/api/workspace')) {
                    // api_post_workspace
                    if (0 === strpos($pathinfo, '/api/workspace/user') && preg_match('#^/api/workspace/user/(?P<user>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_api_post_workspace;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_workspace')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceController::postWorkspaceUserAction',  '_format' => 'json',));
                    }
                    not_api_post_workspace:

                    // api_delete_workspace
                    if (0 === strpos($pathinfo, '/api/workspaces') && preg_match('#^/api/workspaces/(?P<workspace>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_api_delete_workspace;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_workspace')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceController::deleteWorkspaceAction',  '_format' => 'json',));
                    }
                    not_api_delete_workspace:

                    // api_put_workspace
                    if (preg_match('#^/api/workspace/(?P<workspace>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_api_put_workspace;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_workspace')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceController::putWorkspaceAction',  '_format' => 'json',));
                    }
                    not_api_put_workspace:

                    // api_put_workspace_owner
                    if (0 === strpos($pathinfo, '/api/workspaces') && preg_match('#^/api/workspaces/(?P<workspace>[^/]++)/owners/(?P<user>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_api_put_workspace_owner;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_workspace_owner')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceController::putWorkspaceOwnerAction',  '_format' => 'json',));
                    }
                    not_api_put_workspace_owner:

                }

                if (0 === strpos($pathinfo, '/api/profile')) {
                    // api_get_profile_facets
                    if (preg_match('#^/api/profile/(?P<user>[^/]++)/facets(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_profile_facets;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_profile_facets')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\ProfileController::getFacetsAction',  '_format' => 'json',));
                    }
                    not_api_get_profile_facets:

                    // api_get_profile_links
                    if (preg_match('#^/api/profile/(?P<user>[^/]++)/links(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_profile_links;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_profile_links')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\ProfileController::getProfileLinksAction',  '_format' => 'json',));
                    }
                    not_api_get_profile_links:

                    // api_put_profile_fields
                    if (preg_match('#^/api/profile/(?P<user>[^/]++)/fields(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_api_put_profile_fields;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_profile_fields')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\ProfileController::putFieldsAction',  '_format' => 'json',));
                    }
                    not_api_put_profile_fields:

                }

                if (0 === strpos($pathinfo, '/api/facet')) {
                    // api_move_facet_down
                    if (preg_match('#^/api/facet/(?P<facet>[^/]++)/down(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_api_move_facet_down;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_move_facet_down')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::moveFacetDownAction',  '_format' => 'json',));
                    }
                    not_api_move_facet_down:

                    // api_move_facet_up
                    if (preg_match('#^/api/facet/(?P<facet>[^/]++)/up(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_api_move_facet_up;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_move_facet_up')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::moveFacetUpAction',  '_format' => 'json',));
                    }
                    not_api_move_facet_up:

                    // api_get_facets
                    if (0 === strpos($pathinfo, '/api/facets') && preg_match('#^/api/facets(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_facets;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_facets')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::getFacetsAction',  '_format' => 'json',));
                    }
                    not_api_get_facets:

                    // api_post_facet
                    if (0 === strpos($pathinfo, '/api/facet/create') && preg_match('#^/api/facet/create(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_api_post_facet;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_facet')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::createFacetAction',  '_format' => 'json',));
                    }
                    not_api_post_facet:

                    // api_put_facet
                    if (preg_match('#^/api/facet/(?P<facet>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_api_put_facet;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_facet')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::editFacetAction',  '_format' => 'json',));
                    }
                    not_api_put_facet:

                    // api_delete_facet
                    if (preg_match('#^/api/facet/(?P<facet>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_api_delete_facet;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_facet')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::deleteFacetAction',  '_format' => 'json',));
                    }
                    not_api_delete_facet:

                    // api_put_facet_roles
                    if (preg_match('#^/api/facet/(?P<facet>[^/]++)/roles(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_api_put_facet_roles;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_facet_roles')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::setFacetRolesAction',  '_format' => 'json',));
                    }
                    not_api_put_facet_roles:

                    // api_post_panel_facet
                    if (preg_match('#^/api/facet/(?P<facet>[^/]++)/panel/create(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_api_post_panel_facet;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_panel_facet')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::createFacetPanelAction',  '_format' => 'json',));
                    }
                    not_api_post_panel_facet:

                    // api_post_facet_field_choice
                    if (0 === strpos($pathinfo, '/api/facet/panel/field') && preg_match('#^/api/facet/panel/field/(?P<field>[^/]++)/choice(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_api_post_facet_field_choice;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_facet_field_choice')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::createFieldOptionsAction',  '_format' => 'json',));
                    }
                    not_api_post_facet_field_choice:

                    // api_delete_facet_field_choice
                    if (0 === strpos($pathinfo, '/api/facet/field/choice') && preg_match('#^/api/facet/field/choice/(?P<choice>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_api_delete_facet_field_choice;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_facet_field_choice')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::deleteFieldOptionsAction',  '_format' => 'json',));
                    }
                    not_api_delete_facet_field_choice:

                    if (0 === strpos($pathinfo, '/api/facet/p')) {
                        if (0 === strpos($pathinfo, '/api/facet/panel')) {
                            // api_put_panel_facet
                            if (preg_match('#^/api/facet/panel/(?P<panel>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'PUT') {
                                    $allow[] = 'PUT';
                                    goto not_api_put_panel_facet;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_panel_facet')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::editFacetPanelAction',  '_format' => 'json',));
                            }
                            not_api_put_panel_facet:

                            // api_delete_panel_facet
                            if (preg_match('#^/api/facet/panel/(?P<panel>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'DELETE') {
                                    $allow[] = 'DELETE';
                                    goto not_api_delete_panel_facet;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_panel_facet')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::deletePanelFacetAction',  '_format' => 'json',));
                            }
                            not_api_delete_panel_facet:

                            // api_post_field_facet
                            if (preg_match('#^/api/facet/panel/(?P<panel>[^/]++)/field/create(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'POST') {
                                    $allow[] = 'POST';
                                    goto not_api_post_field_facet;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_field_facet')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::createFieldFacetAction',  '_format' => 'json',));
                            }
                            not_api_post_field_facet:

                            if (0 === strpos($pathinfo, '/api/facet/panel/field')) {
                                // api_put_field_facet
                                if (preg_match('#^/api/facet/panel/field/(?P<field>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                    if ($this->context->getMethod() != 'PUT') {
                                        $allow[] = 'PUT';
                                        goto not_api_put_field_facet;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_field_facet')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::editFieldFacetAction',  '_format' => 'json',));
                                }
                                not_api_put_field_facet:

                                // api_delete_field_facet
                                if (preg_match('#^/api/facet/panel/field/(?P<field>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                    if ($this->context->getMethod() != 'DELETE') {
                                        $allow[] = 'DELETE';
                                        goto not_api_delete_field_facet;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_field_facet')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::deleteFieldFacetAction',  '_format' => 'json',));
                                }
                                not_api_delete_field_facet:

                            }

                            // api_put_panel_roles
                            if (preg_match('#^/api/facet/panel/(?P<panel>[^/]++)/roles(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'PUT') {
                                    $allow[] = 'PUT';
                                    goto not_api_put_panel_roles;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_panel_roles')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::putPanelRoleAction',  '_format' => 'json',));
                            }
                            not_api_put_panel_roles:

                        }

                        if (0 === strpos($pathinfo, '/api/facet/profile/preferences')) {
                            // api_get_profile_preferences
                            if (preg_match('#^/api/facet/profile/preferences(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_api_get_profile_preferences;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_profile_preferences')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::getProfilePreferencesAction',  '_format' => 'json',));
                            }
                            not_api_get_profile_preferences:

                            // api_put_profile_preferences
                            if (preg_match('#^/api/facet/profile/preferences(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'PUT') {
                                    $allow[] = 'PUT';
                                    goto not_api_put_profile_preferences;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_profile_preferences')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::putProfilePreferencesAction',  '_format' => 'json',));
                            }
                            not_api_put_profile_preferences:

                        }

                    }

                    // api_put_panels_order
                    if (preg_match('#^/api/facet/(?P<facet>[^/]++)/panels/order(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_api_put_panels_order;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_panels_order')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::orderPanelsAction',  '_format' => 'json',));
                    }
                    not_api_put_panels_order:

                    // api_put_fields_order
                    if (0 === strpos($pathinfo, '/api/facet/panel') && preg_match('#^/api/facet/panel/(?P<panel>[^/]++)/fields/order(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_api_put_fields_order;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_fields_order')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::orderFieldsAction',  '_format' => 'json',));
                    }
                    not_api_put_fields_order:

                }

                // api_post_invert_user_properties_edition
                if (0 === strpos($pathinfo, '/api/property') && preg_match('#^/api/property/(?P<property>[^/]++)/invert(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_api_post_invert_user_properties_edition;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_invert_user_properties_edition')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\FacetController::invertPropertiesEditableAction',  '_format' => 'json',));
                }
                not_api_post_invert_user_properties_edition:

                if (0 === strpos($pathinfo, '/api/group')) {
                    if (0 === strpos($pathinfo, '/api/groups')) {
                        // api_add_group_role
                        if (preg_match('#^/api/groups/(?P<group>[^/]++)/roles/(?P<role>[^/]++)/add(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'PATCH') {
                                $allow[] = 'PATCH';
                                goto not_api_add_group_role;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_add_group_role')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\GroupController::addGroupRoleAction',  '_format' => 'json',));
                        }
                        not_api_add_group_role:

                        // api_remove_group_role
                        if (preg_match('#^/api/groups/(?P<group>[^/]++)/roles/(?P<role>[^/]++)/remove(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_remove_group_role;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_remove_group_role')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\GroupController::removeGroupRoleAction',  '_format' => 'json',));
                        }
                        not_api_remove_group_role:

                        // api_group_members_import
                        if (preg_match('#^/api/groups/(?P<group>[^/]++)/import/members(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_api_group_members_import;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_group_members_import')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\GroupController::importMembersAction',  '_format' => 'json',));
                        }
                        not_api_group_members_import:

                        // api_get_groups
                        if (preg_match('#^/api/groups(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_groups;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_groups')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\GroupController::getGroupsAction',  '_format' => 'json',));
                        }
                        not_api_get_groups:

                        // api_get_group
                        if (preg_match('#^/api/groups/(?P<group>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_group;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_group')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\GroupController::getGroupAction',  '_format' => 'json',));
                        }
                        not_api_get_group:

                        // api_post_group
                        if (preg_match('#^/api/groups(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_api_post_group;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_group')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\GroupController::postGroupAction',  '_format' => 'json',));
                        }
                        not_api_post_group:

                        // api_put_group
                        if (preg_match('#^/api/groups/(?P<group>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_api_put_group;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_group')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\GroupController::putGroupAction',  '_format' => 'json',));
                        }
                        not_api_put_group:

                        // api_delete_group
                        if (preg_match('#^/api/groups/(?P<group>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'DELETE') {
                                $allow[] = 'DELETE';
                                goto not_api_delete_group;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_group')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\GroupController::deleteGroupAction',  '_format' => 'json',));
                        }
                        not_api_delete_group:

                        // api_delete_groups
                        if (preg_match('#^/api/groups(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'DELETE') {
                                $allow[] = 'DELETE';
                                goto not_api_delete_groups;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_groups')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\GroupController::deleteGroupsAction',  '_format' => 'json',));
                        }
                        not_api_delete_groups:

                        // api_get_search_groups
                        if (0 === strpos($pathinfo, '/api/groups/page') && preg_match('#^/api/groups/page/(?P<page>[^/]++)/limit/(?P<limit>[^/]++)/search(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_search_groups;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_search_groups')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\GroupController::getSearchGroupsAction',  '_format' => 'json',));
                        }
                        not_api_get_search_groups:

                    }

                    // api_get_group_searchable_fields
                    if (0 === strpos($pathinfo, '/api/group/searchable/fields') && preg_match('#^/api/group/searchable/fields(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_group_searchable_fields;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_group_searchable_fields')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\GroupController::getGroupSearchableFieldsAction',  '_format' => 'json',));
                    }
                    not_api_get_group_searchable_fields:

                    // api_get_group_create_form
                    if (0 === strpos($pathinfo, '/api/group/create/form') && preg_match('#^/api/group/create/form(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_group_create_form;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_group_create_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\GroupController::getGroupCreateFormAction',  '_format' => 'json',));
                    }
                    not_api_get_group_create_form:

                    // api_get_group_edit_form
                    if (preg_match('#^/api/group/(?P<group>[^/]++)/edit/form(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_group_edit_form;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_group_edit_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\GroupController::getGroupEditFormAction',  '_format' => 'json',));
                    }
                    not_api_get_group_edit_form:

                    // api_get_group_admin_actions
                    if (0 === strpos($pathinfo, '/api/group/admin/actions') && preg_match('#^/api/group/admin/actions(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_group_admin_actions;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_group_admin_actions')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\GroupController::getGroupAdminActionsAction',  '_format' => 'json',));
                    }
                    not_api_get_group_admin_actions:

                }

                if (0 === strpos($pathinfo, '/api/organization')) {
                    if (0 === strpos($pathinfo, '/api/organizations')) {
                        // api_post_organization
                        if (preg_match('#^/api/organizations(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_api_post_organization;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_organization')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Organization\\OrganizationController::postOrganizationAction',  '_format' => 'json',));
                        }
                        not_api_post_organization:

                        // api_delete_organization
                        if (preg_match('#^/api/organizations/(?P<organization>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'DELETE') {
                                $allow[] = 'DELETE';
                                goto not_api_delete_organization;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_organization')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Organization\\OrganizationController::deleteOrganizationAction',  '_format' => 'json',));
                        }
                        not_api_delete_organization:

                        // api_get_organizations
                        if (preg_match('#^/api/organizations(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_organizations;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_organizations')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Organization\\OrganizationController::getOrganizationsAction',  '_format' => 'json',));
                        }
                        not_api_get_organizations:

                    }

                    // api_get_organization_list
                    if (0 === strpos($pathinfo, '/api/organization/list') && preg_match('#^/api/organization/list(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_organization_list;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_organization_list')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Organization\\OrganizationController::getOrganizationListAction',  '_format' => 'json',));
                    }
                    not_api_get_organization_list:

                    // api_get_organization_edit_form
                    if (preg_match('#^/api/organization/(?P<organization>[^/]++)/edit/form(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_organization_edit_form;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_organization_edit_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Organization\\OrganizationController::getOrganizationEditFormAction',  '_format' => 'json',));
                    }
                    not_api_get_organization_edit_form:

                    // api_put_organization
                    if (0 === strpos($pathinfo, '/api/organizations') && preg_match('#^/api/organizations/(?P<organization>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_api_put_organization;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_organization')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Organization\\OrganizationController::putOrganizationAction',  '_format' => 'json',));
                    }
                    not_api_put_organization:

                }

                if (0 === strpos($pathinfo, '/api/location')) {
                    // api_get_locations
                    if (0 === strpos($pathinfo, '/api/locations') && preg_match('#^/api/locations(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_locations;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_locations')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Organization\\LocationController::getLocationsAction',  '_format' => 'json',));
                    }
                    not_api_get_locations:

                    // api_get_location_create_form
                    if (0 === strpos($pathinfo, '/api/location/create/form') && preg_match('#^/api/location/create/form(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_location_create_form;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_location_create_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Organization\\LocationController::getLocationCreateFormAction',  '_format' => 'json',));
                    }
                    not_api_get_location_create_form:

                    // api_get_location_edit_form
                    if (preg_match('#^/api/location/(?P<location>[^/]++)/edit/form(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_location_edit_form;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_location_edit_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Organization\\LocationController::getLocationEditFormAction',  '_format' => 'json',));
                    }
                    not_api_get_location_edit_form:

                    if (0 === strpos($pathinfo, '/api/locations')) {
                        // api_post_location
                        if (preg_match('#^/api/locations(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_api_post_location;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_location')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Organization\\LocationController::postLocationAction',  '_format' => 'json',));
                        }
                        not_api_post_location:

                        // api_put_location
                        if (preg_match('#^/api/locations/(?P<location>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_api_put_location;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_location')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Organization\\LocationController::putLocationAction',  '_format' => 'json',));
                        }
                        not_api_put_location:

                        // api_delete_location
                        if (preg_match('#^/api/locations/(?P<location>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'DELETE') {
                                $allow[] = 'DELETE';
                                goto not_api_delete_location;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_location')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Organization\\LocationController::deleteLocationAction',  '_format' => 'json',));
                        }
                        not_api_delete_location:

                    }

                }

                if (0 === strpos($pathinfo, '/api/p')) {
                    // api_post_parameters
                    if (0 === strpos($pathinfo, '/api/parameters') && preg_match('#^/api/parameters(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_api_post_parameters;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_parameters')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Admin\\ParametersController::postParametersAction',  '_format' => 'json',));
                    }
                    not_api_post_parameters:

                    if (0 === strpos($pathinfo, '/api/plugin')) {
                        // api_enable_plugin
                        if (preg_match('#^/api/plugin/(?P<plugin>[^/]++)/enable(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'PATCH') {
                                $allow[] = 'PATCH';
                                goto not_api_enable_plugin;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_enable_plugin')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Admin\\PluginController::enablePluginAction',  '_format' => 'json',));
                        }
                        not_api_enable_plugin:

                        // api_disable_plugin
                        if (preg_match('#^/api/plugin/(?P<plugin>[^/]++)/disable(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'PATCH') {
                                $allow[] = 'PATCH';
                                goto not_api_disable_plugin;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_disable_plugin')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Admin\\PluginController::disablePluginAction',  '_format' => 'json',));
                        }
                        not_api_disable_plugin:

                        // api_get_plugins
                        if (0 === strpos($pathinfo, '/api/plugins') && preg_match('#^/api/plugins(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_plugins;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_plugins')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Admin\\PluginController::getPluginsAction',  '_format' => 'json',));
                        }
                        not_api_get_plugins:

                    }

                }

                // api_get_create_year_form
                if (0 === strpos($pathinfo, '/api/create/year/form') && preg_match('#^/api/create/year/form(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_api_get_create_year_form;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_create_year_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Calendar\\YearController::getCreateYearFormAction',  '_format' => 'json',));
                }
                not_api_get_create_year_form:

                if (0 === strpos($pathinfo, '/api/years')) {
                    // api_get_years
                    if (preg_match('#^/api/years(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_years;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_years')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Calendar\\YearController::getYearsAction',  '_format' => 'json',));
                    }
                    not_api_get_years:

                    // api_post_year
                    if (preg_match('#^/api/years/(?P<organization>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_api_post_year;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_year')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Calendar\\YearController::postYearAction',  '_format' => 'json',));
                    }
                    not_api_post_year:

                }

                // api_get_create_leave_form
                if (0 === strpos($pathinfo, '/api/create/leave/form') && preg_match('#^/api/create/leave/form(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_api_get_create_leave_form;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_create_leave_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Calendar\\LeaveController::getCreateLeaveFormAction',  '_format' => 'json',));
                }
                not_api_get_create_leave_form:

                // api_get_leaves
                if (0 === strpos($pathinfo, '/api/leaves') && preg_match('#^/api/leaves(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_api_get_leaves;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_leaves')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Calendar\\LeaveController::getLeavesAction',  '_format' => 'json',));
                }
                not_api_get_leaves:

                // api_get_create_period_form
                if (0 === strpos($pathinfo, '/api/create/period/form') && preg_match('#^/api/create/period/form(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_api_get_create_period_form;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_create_period_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Calendar\\PeriodController::getCreatePeriodFormAction',  '_format' => 'json',));
                }
                not_api_get_create_period_form:

                // api_get_periods
                if (0 === strpos($pathinfo, '/api/periods') && preg_match('#^/api/periods(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_api_get_periods;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_periods')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Calendar\\PeriodController::getPeriodsAction',  '_format' => 'json',));
                }
                not_api_get_periods:

                // api_get_create_schedule_template_form
                if (0 === strpos($pathinfo, '/api/create/schedule/template/form') && preg_match('#^/api/create/schedule/template/form(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_api_get_create_schedule_template_form;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_create_schedule_template_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Calendar\\ScheduleTemplateController::getCreateScheduleTemplateFormAction',  '_format' => 'json',));
                }
                not_api_get_create_schedule_template_form:

                // api_get_schedule_templates
                if (0 === strpos($pathinfo, '/api/schedule/templates') && preg_match('#^/api/schedule/templates(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_api_get_schedule_templates;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_schedule_templates')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Calendar\\ScheduleTemplateController::getScheduleTemplatesAction',  '_format' => 'json',));
                }
                not_api_get_schedule_templates:

                // api_get_create_time_slot_form
                if (0 === strpos($pathinfo, '/api/create/time/slot/form') && preg_match('#^/api/create/time/slot/form(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_api_get_create_time_slot_form;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_create_time_slot_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Calendar\\TimeSlotController::getCreateTimeSlotFormAction',  '_format' => 'json',));
                }
                not_api_get_create_time_slot_form:

                // api_get_time_slots
                if (0 === strpos($pathinfo, '/api/time/slots') && preg_match('#^/api/time/slots(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_api_get_time_slots;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_time_slots')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Calendar\\TimeSlotController::getTimeSlotsAction',  '_format' => 'json',));
                }
                not_api_get_time_slots:

                // api_get_create_event_form
                if (0 === strpos($pathinfo, '/api/create/event/form') && preg_match('#^/api/create/event/form(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_api_get_create_event_form;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_create_event_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Calendar\\EventController::getCreateEventFormAction',  '_format' => 'json',));
                }
                not_api_get_create_event_form:

                // api_get_events
                if (0 === strpos($pathinfo, '/api/events') && preg_match('#^/api/events(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_api_get_events;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_events')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Calendar\\EventController::getEventsAction',  '_format' => 'json',));
                }
                not_api_get_events:

                if (0 === strpos($pathinfo, '/api/r')) {
                    if (0 === strpos($pathinfo, '/api/resources')) {
                        // api_submit_resource_form
                        if (preg_match('#^/api/resources/(?P<resourceType>[^/]++)/parent/(?P<parent>[^/]++)/encoding/(?P<encoding>[^/]++)/submit(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_api_submit_resource_form;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_submit_resource_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Resource\\ResourceController::submitResourceFormAction',  '_format' => 'json',));
                        }
                        not_api_submit_resource_form:

                        // api_get_resource_form
                        if (preg_match('#^/api/resources/(?P<resourceType>[^/]++)/form(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_resource_form;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_resource_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Resource\\ResourceController::getResourceFormAction',  '_format' => 'json',));
                        }
                        not_api_get_resource_form:

                        // api_get_resource_node
                        if (preg_match('#^/api/resources/(?P<resourceNode>[^/]++)/node(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_resource_node;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_resource_node')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Resource\\ResourceController::getResourceNodeAction',  '_format' => 'json',));
                        }
                        not_api_get_resource_node:

                    }

                    if (0 === strpos($pathinfo, '/api/roles/platform')) {
                        // api_get_platform_roles
                        if (preg_match('#^/api/roles/platform(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_platform_roles;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_platform_roles')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\RoleController::getPlatformRolesAction',  '_format' => 'json',));
                        }
                        not_api_get_platform_roles:

                        // api_get_platform_roles_admin_excluded
                        if (0 === strpos($pathinfo, '/api/roles/platform/exclude/admin') && preg_match('#^/api/roles/platform/exclude/admin(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_platform_roles_admin_excluded;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_platform_roles_admin_excluded')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\User\\RoleController::getPlatformRolesAdminExcludedAction',  '_format' => 'json',));
                        }
                        not_api_get_platform_roles_admin_excluded:

                    }

                }

                // api_get_available_locales
                if (0 === strpos($pathinfo, '/api/locales/available') && preg_match('#^/api/locales/available(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_api_get_available_locales;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_available_locales')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Admin\\LocaleController::getAvailableLocalesAction',  '_format' => 'json',));
                }
                not_api_get_available_locales:

            }

        }

        if (0 === strpos($pathinfo, '/contact')) {
            // claro_my_contacts_tool_index
            if (0 === strpos($pathinfo, '/contact/my/contacts/tool/index/page') && preg_match('#^/contact/my/contacts/tool/index/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_my_contacts_tool_index')), array (  'page' => 1,  'max' => 50,  'orderedBy' => 'lastName',  'order' => 'ASC',  'search' => '',  '_controller' => 'Claroline\\CoreBundle\\Controller\\ContactController::myContactsToolIndexAction',));
            }

            if (0 === strpos($pathinfo, '/contact/show')) {
                // claro_contact_show_all_my_contacts
                if (0 === strpos($pathinfo, '/contact/show/all/my/contacts/page') && preg_match('#^/contact/show/all/my/contacts/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order(?:/(?P<order>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_contact_show_all_my_contacts')), array (  'page' => 1,  'max' => 50,  'orderedBy' => 'lastName',  'order' => 'ASC',  '_controller' => 'Claroline\\CoreBundle\\Controller\\ContactController::showAllMyContactsAction',));
                }

                // claro_contact_show_contacts_by_category
                if (0 === strpos($pathinfo, '/contact/show/category') && preg_match('#^/contact/show/category/(?P<category>[^/]++)/contacts/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order(?:/(?P<order>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_contact_show_contacts_by_category')), array (  'page' => 1,  'max' => 50,  'orderedBy' => 'lastName',  'order' => 'ASC',  '_controller' => 'Claroline\\CoreBundle\\Controller\\ContactController::showCategoryContactsAction',));
                }

                // claro_contact_show_all_visible_users
                if (0 === strpos($pathinfo, '/contact/show/all/visible/users/page') && preg_match('#^/contact/show/all/visible/users/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order(?:/(?P<order>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_contact_show_all_visible_users')), array (  'page' => 1,  'max' => 50,  'orderedBy' => 'lastName',  'order' => 'ASC',  '_controller' => 'Claroline\\CoreBundle\\Controller\\ContactController::showAllVisibleUsersAction',));
                }

            }

            if (0 === strpos($pathinfo, '/contact/contact')) {
                // claro_contacts_add
                if ($pathinfo === '/contact/contacts/add') {
                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ContactController::contactsAddAction',  '_route' => 'claro_contacts_add',);
                }

                // claro_contact_delete
                if (preg_match('#^/contact/contact/(?P<contact>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_contact_delete')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ContactController::contactDeleteAction',));
                }

                // claro_contacts_add_to_category
                if (0 === strpos($pathinfo, '/contact/contacts/add/to/category') && preg_match('#^/contact/contacts/add/to/category/(?P<category>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_contacts_add_to_category')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ContactController::contactsAddToCategoryAction',));
                }

            }

            if (0 === strpos($pathinfo, '/contact/options/configure')) {
                // claro_contact_options_configure_form
                if ($pathinfo === '/contact/options/configure/form') {
                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ContactController::optionsConfigureFormAction',  '_route' => 'claro_contact_options_configure_form',);
                }

                // claro_contact_options_configure
                if ($pathinfo === '/contact/options/configure') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_claro_contact_options_configure;
                    }

                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ContactController::optionsConfigureAction',  '_route' => 'claro_contact_options_configure',);
                }
                not_claro_contact_options_configure:

            }

            if (0 === strpos($pathinfo, '/contact/c')) {
                if (0 === strpos($pathinfo, '/contact/category')) {
                    if (0 === strpos($pathinfo, '/contact/category/create')) {
                        // claro_contact_category_create_form
                        if ($pathinfo === '/contact/category/create/form') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ContactController::categoryCreateFormAction',  '_route' => 'claro_contact_category_create_form',);
                        }

                        // claro_contact_category_create
                        if ($pathinfo === '/contact/category/create') {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_claro_contact_category_create;
                            }

                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ContactController::categoryCreateAction',  '_route' => 'claro_contact_category_create',);
                        }
                        not_claro_contact_category_create:

                    }

                    // claro_contact_category_edit_form
                    if (preg_match('#^/contact/category/(?P<category>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_contact_category_edit_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ContactController::categoryEditFormAction',));
                    }

                    // claro_contact_category_edit
                    if (preg_match('#^/contact/category/(?P<category>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_contact_category_edit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_contact_category_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ContactController::categoryEditAction',));
                    }
                    not_claro_contact_category_edit:

                    // claro_contact_category_delete
                    if (preg_match('#^/contact/category/(?P<category>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_contact_category_delete')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ContactController::categoryDeleteAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/contact/contact')) {
                    // claro_contact_categories_transfer_form
                    if (preg_match('#^/contact/contact/(?P<user>[^/]++)/categories/transfer/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_contact_categories_transfer_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ContactController::categoriesTransferFormAction',));
                    }

                    // claro_contact_categories_transfer
                    if (preg_match('#^/contact/contact/(?P<user>[^/]++)/categories/transfer$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_contact_categories_transfer')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ContactController::categoriesTransferAction',));
                    }

                    // claro_contact_category_remove
                    if (preg_match('#^/contact/contact/(?P<user>[^/]++)/category/(?P<category>[^/]++)/remove$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_contact_category_remove')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\ContactController::contactCategoryRemoveAction',));
                    }

                }

            }

        }

        if (0 === strpos($pathinfo, '/portal')) {
            // claro_portal_index
            if (rtrim($pathinfo, '/') === '/portal') {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_claro_portal_index;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'claro_portal_index');
                }

                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\PortalController::indexAction',  '_route' => 'claro_portal_index',);
            }
            not_claro_portal_index:

            // claro_portal_index_2
            if (preg_match('#^/portal/(?P<path>((?!api).)*)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_claro_portal_index_2;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_portal_index_2')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\PortalController::indexAction',));
            }
            not_claro_portal_index_2:

            if (0 === strpos($pathinfo, '/portal/api')) {
                // claro_portal_api_get
                if ($pathinfo === '/portal/api/index') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claro_portal_api_get;
                    }

                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\PortalController::getPortalAction',  '_route' => 'claro_portal_api_get',);
                }
                not_claro_portal_api_get:

                // claro_portal_api_search
                if (0 === strpos($pathinfo, '/portal/api/search') && preg_match('#^/portal/api/search(?:/(?P<resourceType>[^/]++))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_claro_portal_api_search;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_portal_api_search')), array (  'resourceType' => 'all',  '_controller' => 'Claroline\\CoreBundle\\Controller\\PortalController::searchPortalAction',));
                }
                not_claro_portal_api_search:

            }

        }

        if (0 === strpos($pathinfo, '/a')) {
            if (0 === strpos($pathinfo, '/admin/widget/widget')) {
                // claro_admin_widgets_management
                if ($pathinfo === '/admin/widget/widgets/management') {
                    return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WidgetController::widgetsManagementAction',  '_route' => 'claro_admin_widgets_management',);
                }

                // claro_widget_edit_form
                if (preg_match('#^/admin/widget/widget/(?P<widget>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_widget_edit_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WidgetController::widgetEditFormAction',));
                }

                // claro_widget_edit
                if (preg_match('#^/admin/widget/widget/(?P<widget>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_widget_edit')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\Administration\\WidgetController::widgetEditAction',));
                }

            }

            if (0 === strpos($pathinfo, '/api')) {
                if (0 === strpos($pathinfo, '/api/desktop')) {
                    if (0 === strpos($pathinfo, '/api/desktop/home')) {
                        // api_get_desktop_options
                        if ($pathinfo === '/api/desktop/home/options') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::getDesktopOptionsAction',  '_route' => 'api_get_desktop_options',);
                        }

                        // api_get_desktop_home_tabs
                        if ($pathinfo === '/api/desktop/home/tabs') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::getDesktopHomeTabsAction',  '_route' => 'api_get_desktop_home_tabs',);
                        }

                        // api_put_desktop_home_edition_mode_toggle
                        if ($pathinfo === '/api/desktop/home/edition/mode/toggle') {
                            return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::putDesktopHomeEditionModeToggleAction',  '_route' => 'api_put_desktop_home_edition_mode_toggle',);
                        }

                    }

                    // api_put_admin_home_tab_visibility_toggle
                    if (0 === strpos($pathinfo, '/api/desktop/admin/home/tab') && preg_match('#^/api/desktop/admin/home/tab/(?P<htc>[^/]++)/visibility/toggle$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_admin_home_tab_visibility_toggle')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::putAdminHomeTabVisibilityToggleAction',));
                    }

                    if (0 === strpos($pathinfo, '/api/desktop/home/tab')) {
                        if (0 === strpos($pathinfo, '/api/desktop/home/tab/create')) {
                            // api_get_user_home_tab_creation_form
                            if ($pathinfo === '/api/desktop/home/tab/create/form') {
                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::getUserHomeTabCreationFormAction',  '_route' => 'api_get_user_home_tab_creation_form',);
                            }

                            // api_post_user_home_tab_creation
                            if ($pathinfo === '/api/desktop/home/tab/create') {
                                return array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::postUserHomeTabCreationAction',  '_route' => 'api_post_user_home_tab_creation',);
                            }

                        }

                        // api_get_user_home_tab_edition_form
                        if (preg_match('#^/api/desktop/home/tab/(?P<homeTab>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_user_home_tab_edition_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::getUserHomeTabEditionFormAction',));
                        }

                        // api_put_user_home_tab_edition
                        if (preg_match('#^/api/desktop/home/tab/(?P<homeTab>[^/]++)/edit$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_user_home_tab_edition')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::putUserHomeTabEditionAction',));
                        }

                        // api_delete_user_home_tab
                        if (preg_match('#^/api/desktop/home/tab/(?P<htc>[^/]++)/delete$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_user_home_tab')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::deleteUserHomeTabAction',));
                        }

                    }

                    // api_delete_pinned_workspace_home_tab
                    if (0 === strpos($pathinfo, '/api/desktop/pinned/home/tab') && preg_match('#^/api/desktop/pinned/home/tab/(?P<htc>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_pinned_workspace_home_tab')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::deletePinnedWorkspaceHomeTabAction',));
                    }

                    if (0 === strpos($pathinfo, '/api/desktop/home/tab')) {
                        // api_post_desktop_home_tab_config_reorder
                        if (preg_match('#^/api/desktop/home/tab/(?P<homeTabConfig>[^/]++)/next/(?P<nextHomeTabConfigId>[^/]++)/reorder$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_desktop_home_tab_config_reorder')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::postDesktopHomeTabConfigReorderAction',));
                        }

                        // api_get_desktop_widgets_display
                        if (preg_match('#^/api/desktop/home/tab/(?P<homeTab>[^/]++)/widgets/display$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_desktop_widgets_display')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::getDesktopWidgetsAction',));
                        }

                    }

                }

                if (0 === strpos($pathinfo, '/api/home/tab')) {
                    // api_get_widget_instance_creation_form
                    if (preg_match('#^/api/home/tab/(?P<htc>[^/]++)/widget/create/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_widget_instance_creation_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::getWidgetInstanceCreationFormAction',));
                    }

                    if (0 === strpos($pathinfo, '/api/home/tab/widget')) {
                        // api_get_widget_instance_edition_form
                        if (preg_match('#^/api/home/tab/widget/(?P<wdc>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_widget_instance_edition_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::getWidgetInstanceEditionFormAction',));
                        }

                        // api_get_widget_instance_content_configuration_form
                        if (preg_match('#^/api/home/tab/widget/(?P<widgetInstance>[^/]++)/content/configure/form$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_widget_instance_content_configuration_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::getWidgetInstanceContentConfigurationFormAction',));
                        }

                    }

                    // api_post_desktop_widget_instance_creation
                    if (preg_match('#^/api/home/tab/(?P<htc>[^/]++)/widget/create$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_desktop_widget_instance_creation')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::postDesktopWidgetInstanceCreationAction',));
                    }

                    // api_put_widget_instance_edition
                    if (0 === strpos($pathinfo, '/api/home/tab/widget') && preg_match('#^/api/home/tab/widget/(?P<wdc>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_widget_instance_edition')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::putWidgetInstanceEditionAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/api/desktop')) {
                    if (0 === strpos($pathinfo, '/api/desktop/home/tab/widget')) {
                        // api_put_desktop_widget_home_tab_config_visibility_change
                        if (preg_match('#^/api/desktop/home/tab/widget/(?P<widgetHomeTabConfig>[^/]++)/visibility/change$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_desktop_widget_home_tab_config_visibility_change')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::putDesktopWidgetHomeTabConfigVisibilityChangeAction',));
                        }

                        // api_delete_desktop_widget_home_tab_config
                        if (preg_match('#^/api/desktop/home/tab/widget/(?P<widgetHomeTabConfig>[^/]++)/delete$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_desktop_widget_home_tab_config')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::deleteDesktopWidgetHomeTabConfigAction',));
                        }

                    }

                    // api_put_desktop_widget_display_update
                    if (0 === strpos($pathinfo, '/api/desktop/widget/display') && preg_match('#^/api/desktop/widget/display/(?P<datas>[^/]++)/update$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_desktop_widget_display_update')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Desktop\\DesktopHomeController::putDesktopWidgetDisplayUpdateAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/api/workspace')) {
                    // api_get_workspace_home_tabs
                    if (preg_match('#^/api/workspace/(?P<workspace>[^/]++)/home/tabs$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_workspace_home_tabs')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceHomeController::getWorkspaceHomeTabsAction',));
                    }

                    // api_get_workspace_home_tab_creation_form
                    if (preg_match('#^/api/workspace/(?P<workspace>[^/]++)/home/tab/create/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_workspace_home_tab_creation_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceHomeController::getWorkspaceHomeTabCreationFormAction',));
                    }

                    // api_post_workspace_home_tab_creation
                    if (preg_match('#^/api/workspace/(?P<workspace>[^/]++)/home/tab/create$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_workspace_home_tab_creation')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceHomeController::postWorkspaceHomeTabCreationAction',));
                    }

                    if (0 === strpos($pathinfo, '/api/workspace/home/tab')) {
                        // api_get_workspace_home_tab_edition_form
                        if (preg_match('#^/api/workspace/home/tab/(?P<homeTabConfig>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_workspace_home_tab_edition_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceHomeController::getWorkspaceHomeTabEditionFormAction',));
                        }

                        // api_put_workspace_home_tab_edition
                        if (preg_match('#^/api/workspace/home/tab/(?P<homeTabConfig>[^/]++)/edit$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_workspace_home_tab_edition')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceHomeController::putWorkspaceHomeTabEditionAction',));
                        }

                        // api_delete_workspace_home_tab
                        if (preg_match('#^/api/workspace/home/tab/(?P<homeTabConfig>[^/]++)/delete$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_workspace_home_tab')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceHomeController::deleteWorkspaceHomeTabAction',));
                        }

                        // api_post_workspace_home_tab_config_reorder
                        if (preg_match('#^/api/workspace/home/tab/(?P<homeTabConfig>[^/]++)/next/(?P<nextHomeTabConfigId>[^/]++)/reorder$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_api_post_workspace_home_tab_config_reorder;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_workspace_home_tab_config_reorder')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceHomeController::postAdminHomeTabConfigReorderAction',));
                        }
                        not_api_post_workspace_home_tab_config_reorder:

                        // api_post_workspace_home_tab_bookmark
                        if (preg_match('#^/api/workspace/home/tab/(?P<homeTabConfig>[^/]++)/bookmark$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_workspace_home_tab_bookmark')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceHomeController::postWorkspaceHomeTabBookmarkAction',));
                        }

                        // api_get_workspace_widgets_display
                        if (preg_match('#^/api/workspace/home/tab/(?P<homeTab>[^/]++)/widgets/display$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_workspace_widgets_display')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceHomeController::getWorkspaceWidgetsAction',));
                        }

                        // api_get_workspace_widget_instance_creation_form
                        if (preg_match('#^/api/workspace/home/tab/(?P<homeTab>[^/]++)/widget/create/form$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_workspace_widget_instance_creation_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceHomeController::getWorkspaceInstanceCreationFormAction',));
                        }

                        // api_post_workspace_widget_instance_creation
                        if (preg_match('#^/api/workspace/home/tab/(?P<homeTab>[^/]++)/widget/create$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_workspace_widget_instance_creation')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceHomeController::postWorkspaceWidgetInstanceCreationAction',));
                        }

                        if (0 === strpos($pathinfo, '/api/workspace/home/tab/widget')) {
                            if (0 === strpos($pathinfo, '/api/workspace/home/tab/widget/config')) {
                                // api_get_workspace_widget_instance_edition_form
                                if (preg_match('#^/api/workspace/home/tab/widget/config/(?P<whtc>[^/]++)/display/(?P<wdc>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_workspace_widget_instance_edition_form')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceHomeController::getWorkspaceWidgetInstanceEditionFormAction',));
                                }

                                // api_put_workspace_widget_instance_edition
                                if (preg_match('#^/api/workspace/home/tab/widget/config/(?P<whtc>[^/]++)/display/(?P<wdc>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_workspace_widget_instance_edition')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceHomeController::putWorkspaceWidgetInstanceEditionAction',));
                                }

                            }

                            // api_delete_workspace_widget_home_tab_config
                            if (preg_match('#^/api/workspace/home/tab/widget/(?P<widgetHomeTabConfig>[^/]++)/delete$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_workspace_widget_home_tab_config')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceHomeController::deleteAdminWidgetHomeTabConfigAction',));
                            }

                        }

                    }

                    // api_put_workspace_widget_display_update
                    if (0 === strpos($pathinfo, '/api/workspace/widget/display') && preg_match('#^/api/workspace/widget/display/(?P<datas>[^/]++)/update$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_workspace_widget_display_update')), array (  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Workspace\\WorkspaceHomeController::putWorkspaceWidgetDisplayUpdateAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/api/client')) {
                    // claro_id_secret
                    if ($pathinfo === '/api/client/public') {
                        return array (  '_format' => 'json',  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Admin\\ClientController::getIdsecretAction',  '_route' => 'claro_id_secret',);
                    }

                    // claro_token_expired
                    if ($pathinfo === '/api/client/expired') {
                        return array (  '_format' => 'json',  '_controller' => 'Claroline\\CoreBundle\\Controller\\API\\Admin\\ClientController::getExpiredAction',  '_route' => 'claro_token_expired',);
                    }

                }

            }

            if (0 === strpos($pathinfo, '/agenda')) {
                if (0 === strpos($pathinfo, '/agenda/set-task')) {
                    // claro_agenda_set_task_as_not_done
                    if (preg_match('#^/agenda/set\\-task/(?P<event>[^/]++)/as\\-not\\-done$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_agenda_set_task_as_not_done')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\AgendaController::setTaskAsNotDone',));
                    }

                    // claro_agenda_set_task_as_done
                    if (preg_match('#^/agenda/set\\-task/(?P<event>[^/]++)/as\\-done$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_agenda_set_task_as_done')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\AgendaController::setTaskAsDone',));
                    }

                }

                // claro_agenda_invitation_action
                if (0 === strpos($pathinfo, '/agenda/accept/invitation') && preg_match('#^/agenda/accept/invitation/(?P<event>[^/]++)/(?P<action>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_agenda_invitation_action')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\AgendaController::invitationAction',));
                }

                // claro_agenda_delete_event
                if (preg_match('#^/agenda/(?P<event>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_agenda_delete_event')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\AgendaController::deleteAction',));
                }

                // claro_workspace_agenda_resize
                if (0 === strpos($pathinfo, '/agenda/resize/event') && preg_match('#^/agenda/resize/event/(?P<event>[^/]++)/day/(?P<day>[^/]++)/minute/(?P<minute>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_agenda_resize')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\AgendaController::resizeAction',));
                }

                // claro_workspace_agenda_move
                if (0 === strpos($pathinfo, '/agenda/move/event') && preg_match('#^/agenda/move/event/(?P<event>[^/]++)/day/(?P<day>[^/]++)/minute/(?P<minute>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_agenda_move')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\AgendaController::moveAction',));
                }

                // claro_workspace_agenda_export
                if (0 === strpos($pathinfo, '/agenda/workspace') && preg_match('#^/agenda/workspace/(?P<workspace>[^/]++)/export$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_agenda_export')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\AgendaController::exportWorkspaceEventIcsAction',));
                }

                if (0 === strpos($pathinfo, '/agenda/desktop')) {
                    // claro_desktop_agenda_export
                    if ($pathinfo === '/agenda/desktop/export') {
                        return array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\AgendaController::exportDesktopEventIcsAction',  '_route' => 'claro_desktop_agenda_export',);
                    }

                    // claro_desktop_agenda_show
                    if ($pathinfo === '/agenda/desktop/show') {
                        return array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\DesktopAgendaController::desktopShowAction',  '_route' => 'claro_desktop_agenda_show',);
                    }

                    if (0 === strpos($pathinfo, '/agenda/desktop/add')) {
                        // claro_desktop_agenda_add_event_form
                        if ($pathinfo === '/agenda/desktop/add/event/form') {
                            return array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\DesktopAgendaController::addEventModalFormAction',  '_route' => 'claro_desktop_agenda_add_event_form',);
                        }

                        // claro_desktop_agenda_add
                        if ($pathinfo === '/agenda/desktop/add') {
                            return array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\DesktopAgendaController::addEvent',  '_route' => 'claro_desktop_agenda_add',);
                        }

                    }

                    // claro_desktop_agenda_update_event_form
                    if (preg_match('#^/agenda/desktop/(?P<event>[^/]++)/update/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_desktop_agenda_update_event_form')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\DesktopAgendaController::updateEventModalFormAction',));
                    }

                    // claro_desktop_agenda_update
                    if (preg_match('#^/agenda/desktop/(?P<event>[^/]++)/update$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_desktop_agenda_update;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_desktop_agenda_update')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\DesktopAgendaController::updateAction',));
                    }
                    not_claro_desktop_agenda_update:

                    // claro_desktop_agenda_guest_update
                    if (preg_match('#^/agenda/desktop/(?P<event>[^/]++)/guest/update$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_desktop_agenda_guest_update')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\DesktopAgendaController::guestUpdateAction',));
                    }

                    // claro_agenda_delete_guest_event
                    if (preg_match('#^/agenda/desktop/(?P<event>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_agenda_delete_guest_event')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\DesktopAgendaController::guestDeleteAction',));
                    }

                    // claro_desktop_agenda_widget
                    if (0 === strpos($pathinfo, '/agenda/desktop/widget') && preg_match('#^/agenda/desktop/widget(?:/(?P<order>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_desktop_agenda_widget')), array (  'order' => NULL,  '_controller' => 'Claroline\\AgendaBundle\\Controller\\DesktopAgendaController::widgetAction',));
                    }

                    if (0 === strpos($pathinfo, '/agenda/desktop/import')) {
                        // claro_agenda_import_form
                        if ($pathinfo === '/agenda/desktop/import/modal/form') {
                            return array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\DesktopAgendaController::importEventsModalForm',  '_route' => 'claro_agenda_import_form',);
                        }

                        // claro_agenda_import
                        if ($pathinfo === '/agenda/desktop/import') {
                            return array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\DesktopAgendaController::importsEventsIcsAction',  '_route' => 'claro_agenda_import',);
                        }

                    }

                }

                if (0 === strpos($pathinfo, '/agenda/workspaces')) {
                    // claro_workspace_agenda_show
                    if (preg_match('#^/agenda/workspaces/(?P<workspace>[^/]++)/show$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_agenda_show')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\WorkspaceAgendaController::showAction',));
                    }

                    if (0 === strpos($pathinfo, '/agenda/workspaces/workspace')) {
                        // claro_workspace_agenda_import_form
                        if (preg_match('#^/agenda/workspaces/workspace/(?P<workspace>[^/]++)/import/modal/form$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_agenda_import_form')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\WorkspaceAgendaController::importEventsModalForm',));
                        }

                        // claro_workspace_agenda_import
                        if (preg_match('#^/agenda/workspaces/workspace/(?P<workspace>[^/]++)/import$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_agenda_import')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\WorkspaceAgendaController::importsEventsIcsAction',));
                        }

                    }

                    // claro_workspace_agenda_add_event_form
                    if (preg_match('#^/agenda/workspaces/(?P<workspace>[^/]++)/add/event/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_agenda_add_event_form')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\WorkspaceAgendaController::addEventModalFormAction',));
                    }

                    // claro_workspace_agenda_add_event
                    if (preg_match('#^/agenda/workspaces/(?P<workspace>[^/]++)/add$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_workspace_agenda_add_event;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_agenda_add_event')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\WorkspaceAgendaController::addEventAction',));
                    }
                    not_claro_workspace_agenda_add_event:

                    // claro_workspace_agenda_update_event_form
                    if (preg_match('#^/agenda/workspaces/(?P<event>[^/]++)/update/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_agenda_update_event_form')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\WorkspaceAgendaController::updateEventModalFormAction',));
                    }

                    // claro_workspace_agenda_update
                    if (preg_match('#^/agenda/workspaces/(?P<event>[^/]++)/update$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_workspace_agenda_update;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_workspace_agenda_update')), array (  '_controller' => 'Claroline\\AgendaBundle\\Controller\\WorkspaceAgendaController::updateAction',));
                    }
                    not_claro_workspace_agenda_update:

                }

            }

        }

        if (0 === strpos($pathinfo, '/reservation')) {
            if (0 === strpos($pathinfo, '/reservation/a')) {
                // formalibre_reservation_agenda_show
                if ($pathinfo === '/reservation/agenda/show') {
                    return array (  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationController::getReservationsAction',  '_route' => 'formalibre_reservation_agenda_show',);
                }

                // formalibre_add_reservation
                if ($pathinfo === '/reservation/add') {
                    return array (  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationController::addReservationAction',  '_route' => 'formalibre_add_reservation',);
                }

            }

            if (0 === strpos($pathinfo, '/reservation/change')) {
                // formalibre_change_reservation_form
                if (0 === strpos($pathinfo, '/reservation/change/form') && preg_match('#^/reservation/change/form/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_change_reservation_form')), array (  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationController::changeReservationFormAction',));
                }

                // formalibre_change_reservation
                if (preg_match('#^/reservation/change/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_change_reservation')), array (  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationController::changeReservationAction',));
                }

            }

            // formalibre_reservation_move
            if (preg_match('#^/reservation/(?P<id>[^/]++)/move/(?P<minutes>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_reservation_move')), array (  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationController::moveReservationAction',));
            }

            // formalibre_resize_reservation
            if (preg_match('#^/reservation/(?P<id>[^/]++)/resize/(?P<minutes>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_resize_reservation')), array (  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationController::resizeReservationAction',));
            }

            // formalibre_delete_reservation
            if (0 === strpos($pathinfo, '/reservation/delete') && preg_match('#^/reservation/delete/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_delete_reservation')), array (  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationController::deleteReservationAction',));
            }

            // formalibre_reservation_get_resource_info
            if (0 === strpos($pathinfo, '/reservation/get-resource-info') && preg_match('#^/reservation/get\\-resource\\-info(?:/(?P<id>[^/]++))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_reservation_get_resource_info')), array (  'id' => NULL,  'resource' => NULL,  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationController::getResourceInfoAction',));
            }

            if (0 === strpos($pathinfo, '/reservation/ad')) {
                // formalibre_reservation_admin_index
                if ($pathinfo === '/reservation/admin') {
                    return array (  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationAdminController::indexAction',  '_route' => 'formalibre_reservation_admin_index',);
                }

                // formalibre_add_new_resource_type
                if (0 === strpos($pathinfo, '/reservation/add/resource-type') && preg_match('#^/reservation/add/resource\\-type(?:/(?P<name>[^/]++))?$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_formalibre_add_new_resource_type;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_add_new_resource_type')), array (  'name' => '',  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationAdminController::addNewResourceTypeAction',));
                }
                not_formalibre_add_new_resource_type:

            }

            // formalibre_modify_resource_type_name
            if (0 === strpos($pathinfo, '/reservation/change/resource-type') && preg_match('#^/reservation/change/resource\\-type/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_modify_resource_type_name')), array (  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationAdminController::changeResourceTypeNameAction',));
            }

            // formalibre_delete_resource_type
            if (0 === strpos($pathinfo, '/reservation/delete/resource-type') && preg_match('#^/reservation/delete/resource\\-type/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_delete_resource_type')), array (  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationAdminController::deleteResourceTypeAction',));
            }

            // formalibre_add_new_resource
            if (0 === strpos($pathinfo, '/reservation/add/resource') && preg_match('#^/reservation/add/resource/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_add_new_resource')), array (  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationAdminController::addResourceAction',));
            }

            // formalibre_modification_resource
            if (0 === strpos($pathinfo, '/reservation/modify/resource') && preg_match('#^/reservation/modify/resource/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_modification_resource')), array (  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationAdminController::modifyResourceAction',));
            }

            // formalibre_delete_resource
            if (0 === strpos($pathinfo, '/reservation/delete/resource') && preg_match('#^/reservation/delete/resource/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_delete_resource')), array (  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationAdminController::deleteResourceAction',));
            }

            // formalibre_reservation_update_resource_roles
            if (0 === strpos($pathinfo, '/reservation/update/resource') && preg_match('#^/reservation/update/resource/(?P<id>[^/]++)/roles(?:/(?P<rolesList>[^/]++))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_reservation_update_resource_roles')), array (  'rolesList' => '',  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationAdminController::updateResourceRolesAction',));
            }

            // formalibre_reservation_import_resources_form
            if ($pathinfo === '/reservation/import') {
                return array (  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationAdminController::importResourcesModalFormAction',  '_route' => 'formalibre_reservation_import_resources_form',);
            }

            // formalibre_reservation_export_resources
            if ($pathinfo === '/reservation/export') {
                return array (  '_controller' => 'FormaLibre\\ReservationBundle\\Controller\\ReservationAdminController::exportResourcesAction',  '_route' => 'formalibre_reservation_export_resources',);
            }

        }

        // claro_image
        if (0 === strpos($pathinfo, '/clarolineimageplayerbundle/image') && preg_match('#^/clarolineimageplayerbundle/image/(?P<node>[^/]++)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_image')), array (  '_controller' => 'Claroline\\ImagePlayerBundle\\Controller\\ImagePlayerController::fileAction',));
        }

        if (0 === strpos($pathinfo, '/message')) {
            if (0 === strpos($pathinfo, '/message/message')) {
                if (0 === strpos($pathinfo, '/message/message/form')) {
                    // claro_message_form_for_user
                    if (0 === strpos($pathinfo, '/message/message/form/user') && preg_match('#^/message/message/form/user/(?P<user>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_form_for_user')), array (  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::formForUserAction',));
                    }

                    // claro_message_form_for_group
                    if (0 === strpos($pathinfo, '/message/message/form/group') && preg_match('#^/message/message/form/group/(?P<group>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_form_for_group')), array (  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::formForGroupAction',));
                    }

                    // claro_message_form_for_workspace
                    if (0 === strpos($pathinfo, '/message/message/form/workspace') && preg_match('#^/message/message/form/workspace/(?P<workspace>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_form_for_workspace')), array (  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::formForWorkspaceAction',));
                    }

                }

                // claro_message_send
                if (0 === strpos($pathinfo, '/message/message/send') && preg_match('#^/message/message/send(?:/(?P<parentId>[^/]++))?$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_claro_message_send;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_send')), array (  'parentId' => 0,  'parent' => NULL,  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::sendAction',));
                }
                not_claro_message_send:

                if (0 === strpos($pathinfo, '/message/message/received/page')) {
                    // claro_message_list_received
                    if (preg_match('#^/message/message/received/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_list_received')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::listReceivedAction',));
                    }

                    // claro_message_list_received_search
                    if (preg_match('#^/message/message/received/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_list_received_search')), array (  'page' => 1,  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::listReceivedAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/message/message/sent/page')) {
                    // claro_message_list_sent
                    if (preg_match('#^/message/message/sent/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_list_sent')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::listSentAction',));
                    }

                    // claro_message_list_sent_search
                    if (preg_match('#^/message/message/sent/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_list_sent_search')), array (  'page' => 1,  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::listSentAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/message/message/removed/page')) {
                    // claro_message_list_removed
                    if (preg_match('#^/message/message/removed/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_list_removed')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::listRemovedAction',));
                    }

                    // claro_message_list_removed_search
                    if (preg_match('#^/message/message/removed/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_list_removed_search')), array (  'page' => 1,  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::listRemovedAction',));
                    }

                }

                // claro_message_show
                if (0 === strpos($pathinfo, '/message/message/show') && preg_match('#^/message/message/show(?:/(?P<message>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_show')), array (  'message' => 0,  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::showAction',));
                }

                // claro_message_soft_delete
                if ($pathinfo === '/message/message/remove') {
                    return array (  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::softDeleteAction',  '_route' => 'claro_message_soft_delete',);
                }

                // claro_message_delete
                if ($pathinfo === '/message/message/delete') {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_claro_message_delete;
                    }

                    return array (  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::deleteAction',  '_route' => 'claro_message_delete',);
                }
                not_claro_message_delete:

                // claro_message_restore_from_trash
                if ($pathinfo === '/message/message/restore') {
                    return array (  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::restoreFromTrashAction',  '_route' => 'claro_message_restore_from_trash',);
                }

                // claro_message_mark_as_read
                if (0 === strpos($pathinfo, '/message/message/mark_as_read') && preg_match('#^/message/message/mark_as_read/(?P<message>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_mark_as_read')), array (  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::markAsReadAction',));
                }

                if (0 === strpos($pathinfo, '/message/message/contactable/users/page')) {
                    // claro_message_contactable_users
                    if (preg_match('#^/message/message/contactable/users/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_contactable_users')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::contactableUsersListAction',));
                    }

                    // claro_message_contactable_users_search
                    if (preg_match('#^/message/message/contactable/users/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_contactable_users_search')), array (  'page' => 1,  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::contactableUsersListAction',));
                    }

                }

                // claro_message_notification
                if (0 === strpos($pathinfo, '/message/message/notification') && preg_match('#^/message/message/notification/(?P<isNotified>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_claro_message_notification;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_notification')), array (  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::setMailNotificationAction',));
                }
                not_claro_message_notification:

                if (0 === strpos($pathinfo, '/message/message/contactable')) {
                    if (0 === strpos($pathinfo, '/message/message/contactable/groups/page')) {
                        // claro_message_contactable_groups
                        if (preg_match('#^/message/message/contactable/groups/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_contactable_groups')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::contactableGroupsListAction',));
                        }

                        // claro_message_contactable_groups_search
                        if (preg_match('#^/message/message/contactable/groups/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_contactable_groups_search')), array (  'page' => 1,  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::contactableGroupsListAction',));
                        }

                    }

                    if (0 === strpos($pathinfo, '/message/message/contactable/workspaces/page')) {
                        // claro_message_contactable_workspaces
                        if (preg_match('#^/message/message/contactable/workspaces/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_contactable_workspaces')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::contactableWorkspacesListAction',));
                        }

                        // claro_message_contactable_workspaces_search
                        if (preg_match('#^/message/message/contactable/workspaces/page/(?P<page>[^/]++)/search/(?P<search>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_contactable_workspaces_search')), array (  'page' => 1,  '_controller' => 'Claroline\\MessageBundle\\Controller\\MessageController::contactableWorkspacesListAction',));
                        }

                    }

                }

            }

            if (0 === strpos($pathinfo, '/message/api')) {
                // claro_received_message
                if (0 === strpos($pathinfo, '/message/api/received') && preg_match('#^/message/api/received(?:\\.(?P<_format>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_received_message')), array (  '_format' => 'json',  '_controller' => 'Claroline\\MessageBundle\\Controller\\API\\MessageController::getReceivedAction',));
                }

                // claro_sent_message
                if (0 === strpos($pathinfo, '/message/api/sent') && preg_match('#^/message/api/sent(?:\\.(?P<_format>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_sent_message')), array (  '_format' => 'json',  '_controller' => 'Claroline\\MessageBundle\\Controller\\API\\MessageController::getSentAction',));
                }

                // claro_removed_message
                if (0 === strpos($pathinfo, '/message/api/removed') && preg_match('#^/message/api/removed(?:\\.(?P<_format>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_removed_message')), array (  '_format' => 'json',  '_controller' => 'Claroline\\MessageBundle\\Controller\\API\\MessageController::getRemovedAction',));
                }

            }

        }

        if (0 === strpos($pathinfo, '/forum')) {
            // claro_forum_categories
            if (preg_match('#^/forum/(?P<forum>[^/]++)/category$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_categories')), array (  'page' => 1,  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::openAction',));
            }

            // claro_forum_subjects
            if (0 === strpos($pathinfo, '/forum/category') && preg_match('#^/forum/category/(?P<category>[^/]++)/subjects/page/(?P<page>[^/]++)/max(?:/(?P<max>[^/]++))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_subjects')), array (  'page' => 1,  'max' => 20,  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::subjectsAction',));
            }

            if (0 === strpos($pathinfo, '/forum/form')) {
                // claro_forum_form_subject_creation
                if (0 === strpos($pathinfo, '/forum/form/subject') && preg_match('#^/forum/form/subject/(?P<category>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_form_subject_creation')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::subjectFormAction',));
                }

                // claro_forum_form_category_creation
                if (0 === strpos($pathinfo, '/forum/form/category') && preg_match('#^/forum/form/category/(?P<forum>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_form_category_creation')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::categoryFormAction',));
                }

            }

            // claro_forum_create_category
            if (0 === strpos($pathinfo, '/forum/category/create') && preg_match('#^/forum/category/create/(?P<forum>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_create_category')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::createCategoryAction',));
            }

            if (0 === strpos($pathinfo, '/forum/subject')) {
                // claro_forum_create_subject
                if (0 === strpos($pathinfo, '/forum/subject/create') && preg_match('#^/forum/subject/create/(?P<category>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_create_subject')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::createSubjectAction',));
                }

                // claro_forum_messages
                if (preg_match('#^/forum/subject/(?P<subject>[^/]++)/messages/page/(?P<page>[^/]++)/max(?:/(?P<max>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_messages')), array (  'page' => 1,  'max' => 20,  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::messagesAction',));
                }

            }

            // claro_forum_create_message
            if (0 === strpos($pathinfo, '/forum/create/message') && preg_match('#^/forum/create/message/(?P<subject>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_create_message')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::createMessageAction',));
            }

            if (0 === strpos($pathinfo, '/forum/edit')) {
                if (0 === strpos($pathinfo, '/forum/edit/message')) {
                    // claro_forum_edit_message_form
                    if (preg_match('#^/forum/edit/message/(?P<message>[^/]++)/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_edit_message_form')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::editMessageFormAction',));
                    }

                    // claro_forum_edit_message
                    if (preg_match('#^/forum/edit/message/(?P<message>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_edit_message')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::editMessageAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/forum/edit/category')) {
                    // claro_forum_edit_category_form
                    if (preg_match('#^/forum/edit/category/(?P<category>[^/]++)/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_edit_category_form')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::editCategoryFormAction',));
                    }

                    // claro_forum_edit_category
                    if (preg_match('#^/forum/edit/category/(?P<category>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_edit_category')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::editCategoryAction',));
                    }

                }

            }

            // claro_forum_delete_category
            if (0 === strpos($pathinfo, '/forum/delete/category') && preg_match('#^/forum/delete/category/(?P<category>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_delete_category')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::deleteCategory',));
            }

            // claro_forum_search
            if (preg_match('#^/forum/(?P<forum>[^/]++)/search/(?P<search>[^/]++)/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_search')), array (  'page' => 1,  'search' => '',  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::searchAction',));
            }

            if (0 === strpos($pathinfo, '/forum/edit/subject')) {
                // claro_forum_edit_subject_form
                if (preg_match('#^/forum/edit/subject/(?P<subjectId>[^/]++)/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_edit_subject_form')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::editSubjectFormAction',));
                }

                // claro_forum_edit_subject
                if (preg_match('#^/forum/edit/subject/(?P<subjectId>[^/]++)/submit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_edit_subject')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::editSubjectAction',));
                }

            }

            // claro_forum_delete_message
            if (0 === strpos($pathinfo, '/forum/delete/message') && preg_match('#^/forum/delete/message/(?P<message>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_delete_message')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::deleteMessageAction',));
            }

            // claro_forum_subscribe
            if (0 === strpos($pathinfo, '/forum/subscribe/forum') && preg_match('#^/forum/subscribe/forum/(?P<forum>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_subscribe')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::subscribeAction',));
            }

            // claro_forum_unsubscribe
            if (0 === strpos($pathinfo, '/forum/unsubscribe/forum') && preg_match('#^/forum/unsubscribe/forum/(?P<forum>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_unsubscribe')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::unsubscribeAction',));
            }

            // claro_forum_delete_subject
            if (0 === strpos($pathinfo, '/forum/delete/subject') && preg_match('#^/forum/delete/subject/(?P<subject>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_delete_subject')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::deleteSubjectAction',));
            }

            // claro_subject_move_form
            if (0 === strpos($pathinfo, '/forum/subject') && preg_match('#^/forum/subject/(?P<subject>[^/]++)/move/form$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_claro_subject_move_form;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_subject_move_form')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::moveSubjectFormAction',));
            }
            not_claro_subject_move_form:

            if (0 === strpos($pathinfo, '/forum/message')) {
                // claro_message_move_form
                if (preg_match('#^/forum/message/(?P<message>[^/]++)/move/form/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claro_message_move_form;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_move_form')), array (  'page' => 1,  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::moveMessageFormAction',));
                }
                not_claro_message_move_form:

                // claro_message_move
                if (preg_match('#^/forum/message/(?P<message>[^/]++)/move/(?P<newSubject>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claro_message_move;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_message_move')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::moveMessageAction',));
                }
                not_claro_message_move:

            }

            if (0 === strpos($pathinfo, '/forum/s')) {
                // claro_subject_move
                if (0 === strpos($pathinfo, '/forum/subject') && preg_match('#^/forum/subject/(?P<subject>[^/]++)/move/(?P<newCategory>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claro_subject_move;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_subject_move')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::moveSubjectAction',));
                }
                not_claro_subject_move:

                // claro_subject_stick
                if (0 === strpos($pathinfo, '/forum/stick/subject') && preg_match('#^/forum/stick/subject/(?P<subject>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claro_subject_stick;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_subject_stick')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::stickSubjectAction',));
                }
                not_claro_subject_stick:

            }

            // claro_subject_unstick
            if (0 === strpos($pathinfo, '/forum/unstick/subject') && preg_match('#^/forum/unstick/subject/(?P<subject>[^/]++)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_claro_subject_unstick;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_subject_unstick')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::unstickSubjectAction',));
            }
            not_claro_subject_unstick:

            // claro_subject_close
            if (0 === strpos($pathinfo, '/forum/close/subject') && preg_match('#^/forum/close/subject/(?P<subject>[^/]++)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_claro_subject_close;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_subject_close')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::closeSubjectAction',));
            }
            not_claro_subject_close:

            // claro_subject_open
            if (0 === strpos($pathinfo, '/forum/open/subject') && preg_match('#^/forum/open/subject/(?P<subject>[^/]++)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_claro_subject_open;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_subject_open')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::openSubjectAction',));
            }
            not_claro_subject_open:

            // claro_forum_reply_message_form
            if (0 === strpos($pathinfo, '/forum/reply/message') && preg_match('#^/forum/reply/message/(?P<message>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_reply_message_form')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::replyMessageAction',));
            }

            // claro_forum_quote_message_form
            if (0 === strpos($pathinfo, '/forum/quote/message') && preg_match('#^/forum/quote/message/(?P<message>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_quote_message_form')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::quoteMessageAction',));
            }

            // claro_forum_activate_global_notifications
            if (preg_match('#^/forum/(?P<forum>[^/]++)/notifications/activate$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_activate_global_notifications')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::activateGlobalNotificationsAction',));
            }

            // claro_forum_disable_global_notifications
            if (preg_match('#^/forum/(?P<forum>[^/]++)/notifications/disable$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_forum_disable_global_notifications')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\ForumController::disableGlobalNotificationsAction',));
            }

            // claroline_forum_last_message_widget_configure
            if (0 === strpos($pathinfo, '/forum/widget/listmessages') && preg_match('#^/forum/widget/listmessages/(?P<widgetInstance>[^/]++)/config$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_claroline_forum_last_message_widget_configure;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_forum_last_message_widget_configure')), array (  '_controller' => 'Claroline\\ForumBundle\\Controller\\WidgetController::updateLastMessagesForumWidgetConfig',));
            }
            not_claroline_forum_last_message_widget_configure:

        }

        if (0 === strpos($pathinfo, '/clarolinetagbundle')) {
            if (0 === strpos($pathinfo, '/clarolinetagbundle/admin/tag')) {
                if (0 === strpos($pathinfo, '/clarolinetagbundle/admin/tags')) {
                    // claro_tag_admin_tags_management
                    if ($pathinfo === '/clarolinetagbundle/admin/tags/management') {
                        return array (  '_controller' => 'Claroline\\TagBundle\\Controller\\AdminTagController::adminTagsManagementAction',  '_route' => 'claro_tag_admin_tags_management',);
                    }

                    // claro_tag_admin_tags_display
                    if (0 === strpos($pathinfo, '/clarolinetagbundle/admin/tags/display/page') && preg_match('#^/clarolinetagbundle/admin/tags/display/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_tag_admin_tags_display')), array (  'page' => 1,  'search' => '',  'max' => 50,  'orderedBy' => 'name',  'order' => 'ASC',  '_controller' => 'Claroline\\TagBundle\\Controller\\AdminTagController::adminTagsDisplayAction',));
                    }

                }

                // claro_tag_admin_tag_delete
                if (preg_match('#^/clarolinetagbundle/admin/tag/(?P<tag>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_tag_admin_tag_delete')), array (  '_controller' => 'Claroline\\TagBundle\\Controller\\AdminTagController::adminTagDeleteAction',));
                }

                // claro_tag_admin_tagged_object_delete
                if (0 === strpos($pathinfo, '/clarolinetagbundle/admin/tagged/object') && preg_match('#^/clarolinetagbundle/admin/tagged/object/(?P<taggedObject>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_tag_admin_tagged_object_delete')), array (  '_controller' => 'Claroline\\TagBundle\\Controller\\AdminTagController::adminTaggedObjectDeleteAction',));
                }

            }

            if (0 === strpos($pathinfo, '/clarolinetagbundle/resource')) {
                // claro_tag_resource_tag_form
                if (preg_match('#^/clarolinetagbundle/resource/(?P<resourceNode>[^/]++)/tag/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_tag_resource_tag_form')), array (  '_controller' => 'Claroline\\TagBundle\\Controller\\TagController::resourceTagFormAction',));
                }

                // claro_tag_resource_tag
                if (preg_match('#^/clarolinetagbundle/resource/(?P<resourceNode>[^/]++)/tag$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_tag_resource_tag')), array (  '_controller' => 'Claroline\\TagBundle\\Controller\\TagController::resourceTagAction',));
                }

            }

            if (0 === strpos($pathinfo, '/clarolinetagbundle/group')) {
                // claro_tag_group_tag_form
                if (preg_match('#^/clarolinetagbundle/group/(?P<group>[^/]++)/tag/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_tag_group_tag_form')), array (  '_controller' => 'Claroline\\TagBundle\\Controller\\TagController::groupTagFormAction',));
                }

                // claro_tag_group_tag
                if (preg_match('#^/clarolinetagbundle/group/(?P<group>[^/]++)/tag$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_tag_group_tag')), array (  '_controller' => 'Claroline\\TagBundle\\Controller\\TagController::groupTagAction',));
                }

            }

            if (0 === strpos($pathinfo, '/clarolinetagbundle/user')) {
                // claro_tag_user_tag_form
                if (preg_match('#^/clarolinetagbundle/user/(?P<user>[^/]++)/tag/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_tag_user_tag_form')), array (  '_controller' => 'Claroline\\TagBundle\\Controller\\TagController::userTagFormAction',));
                }

                // claro_tag_user_tag
                if (preg_match('#^/clarolinetagbundle/user/(?P<user>[^/]++)/tag$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_tag_user_tag')), array (  '_controller' => 'Claroline\\TagBundle\\Controller\\TagController::userTagAction',));
                }

            }

            if (0 === strpos($pathinfo, '/clarolinetagbundle/workspace')) {
                // claro_tag_workspace_tag_form
                if (preg_match('#^/clarolinetagbundle/workspace/(?P<workspace>[^/]++)/tag/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_tag_workspace_tag_form')), array (  '_controller' => 'Claroline\\TagBundle\\Controller\\TagController::workspaceTagFormAction',));
                }

                // claro_tag_workspace_tag
                if (preg_match('#^/clarolinetagbundle/workspace/(?P<workspace>[^/]++)/tag$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_tag_workspace_tag')), array (  '_controller' => 'Claroline\\TagBundle\\Controller\\TagController::workspaceTagAction',));
                }

            }

            if (0 === strpos($pathinfo, '/clarolinetagbundle/resource')) {
                if (0 === strpos($pathinfo, '/clarolinetagbundle/resources/widget')) {
                    // claro_tag_resources_widget
                    if (preg_match('#^/clarolinetagbundle/resources/widget/(?P<widgetInstance>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_tag_resources_widget')), array (  '_controller' => 'Claroline\\TagBundle\\Controller\\TagController::resourcesTagsWidgetAction',));
                    }

                    // claro_tag_resources_widget_configure_form
                    if (preg_match('#^/clarolinetagbundle/resources/widget/(?P<widgetInstance>[^/]++)/configure/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_tag_resources_widget_configure_form')), array (  '_controller' => 'Claroline\\TagBundle\\Controller\\TagController::resourcesTagsWidgetConfigureFormAction',));
                    }

                    // claro_tag_resources_widget_configure
                    if (0 === strpos($pathinfo, '/clarolinetagbundle/resources/widget/configure/config') && preg_match('#^/clarolinetagbundle/resources/widget/configure/config/(?P<config>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_tag_resources_widget_configure')), array (  '_controller' => 'Claroline\\TagBundle\\Controller\\TagController::resourcesTagsWidgetConfigureAction',));
                    }

                    // claro_tag_resource_from_widget_open
                    if (0 === strpos($pathinfo, '/clarolinetagbundle/resources/widget/resource') && preg_match('#^/clarolinetagbundle/resources/widget/resource/(?P<resourceNode>[^/]++)/open$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_tag_resource_from_widget_open')), array (  '_controller' => 'Claroline\\TagBundle\\Controller\\TagController::resourceFromWidgetOpenAction',));
                    }

                }

                // claro_tag_resource_tag_delete
                if (preg_match('#^/clarolinetagbundle/resource/(?P<resourceNode>[^/]++)/tag/(?P<tag>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_tag_resource_tag_delete')), array (  '_controller' => 'Claroline\\TagBundle\\Controller\\TagController::tagDeleteFromResourceAction',));
                }

            }

        }

        if (0 === strpos($pathinfo, '/formalibresupportbundle')) {
            if (0 === strpos($pathinfo, '/formalibresupportbundle/admin')) {
                if (0 === strpos($pathinfo, '/formalibresupportbundle/admin/support')) {
                    // formalibre_admin_support_index
                    if ($pathinfo === '/formalibresupportbundle/admin/support/index') {
                        return array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportIndexAction',  '_route' => 'formalibre_admin_support_index',);
                    }

                    // formalibre_admin_support_configuration_menu
                    if ($pathinfo === '/formalibresupportbundle/admin/support/configuration/menu') {
                        return array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportConfigurationMenuAction',  '_route' => 'formalibre_admin_support_configuration_menu',);
                    }

                    // formalibre_admin_support_type_management
                    if ($pathinfo === '/formalibresupportbundle/admin/support/type/management') {
                        return array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportTypeManagementAction',  '_route' => 'formalibre_admin_support_type_management',);
                    }

                    // formalibre_admin_support_status_management
                    if ($pathinfo === '/formalibresupportbundle/admin/support/status/management') {
                        return array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportStatusManagementAction',  '_route' => 'formalibre_admin_support_status_management',);
                    }

                    if (0 === strpos($pathinfo, '/formalibresupportbundle/admin/support/contact')) {
                        if (0 === strpos($pathinfo, '/formalibresupportbundle/admin/support/contacts')) {
                            // formalibre_admin_support_contacts_management
                            if ($pathinfo === '/formalibresupportbundle/admin/support/contacts/management') {
                                return array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportContactsManagementAction',  '_route' => 'formalibre_admin_support_contacts_management',);
                            }

                            // formalibre_admin_support_contacts_add
                            if (preg_match('#^/formalibresupportbundle/admin/support/contacts/(?P<contactIds>[^/]++)/add$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_support_contacts_add')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportContactsAddAction',));
                            }

                        }

                        // formalibre_admin_support_contact_remove
                        if (preg_match('#^/formalibresupportbundle/admin/support/contact/(?P<contactId>[^/]++)/remove$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_support_contact_remove')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportContactRemoveAction',));
                        }

                    }

                    if (0 === strpos($pathinfo, '/formalibresupportbundle/admin/support/type')) {
                        // formalibre_admin_support_type_tabs
                        if (preg_match('#^/formalibresupportbundle/admin/support/type/(?P<type>[^/]++)/tabs/active/(?P<supportName>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_support_type_tabs')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportTabsAction',));
                        }

                        // formalibre_admin_support_new
                        if (preg_match('#^/formalibresupportbundle/admin/support/type/(?P<type>[^/]++)/new/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_support_new')), array (  'page' => 1,  'search' => '',  'max' => 50,  'orderedBy' => 'creationDate',  'order' => 'DESC',  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportNewAction',));
                        }

                        // formalibre_admin_support_level
                        if (preg_match('#^/formalibresupportbundle/admin/support/type/(?P<type>[^/]++)/level/(?P<level>[^/]++)/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_support_level')), array (  'page' => 1,  'search' => '',  'max' => 50,  'orderedBy' => 'creationDate',  'order' => 'DESC',  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportLevelAction',));
                        }

                        // formalibre_admin_support_my_tickets
                        if (preg_match('#^/formalibresupportbundle/admin/support/type/(?P<type>[^/]++)/my/tickets/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_support_my_tickets')), array (  'page' => 1,  'search' => '',  'max' => 50,  'orderedBy' => 'creationDate',  'order' => 'DESC',  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportMyTicketsAction',));
                        }

                        // formalibre_admin_support_archives
                        if (preg_match('#^/formalibresupportbundle/admin/support/type/(?P<type>[^/]++)/archives/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_support_archives')), array (  'page' => 1,  'search' => '',  'max' => 50,  'orderedBy' => 'creationDate',  'order' => 'DESC',  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportArchivesAction',));
                        }

                    }

                }

                if (0 === strpos($pathinfo, '/formalibresupportbundle/admin/ticket')) {
                    // formalibre_admin_ticket_comments_view
                    if (preg_match('#^/formalibresupportbundle/admin/ticket/(?P<ticket>[^/]++)/comments/view$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_comments_view')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketCommentsViewAction',));
                    }

                    // formalibre_admin_ticket_interventions_view
                    if (preg_match('#^/formalibresupportbundle/admin/ticket/(?P<ticket>[^/]++)/interventions/view$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_interventions_view')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketInterventionsViewAction',));
                    }

                    // formalibre_admin_ticket_delete
                    if (preg_match('#^/formalibresupportbundle/admin/ticket/(?P<ticket>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_delete')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketDeleteAction',));
                    }

                    // formalibre_admin_ticket_new_open
                    if (preg_match('#^/formalibresupportbundle/admin/ticket/(?P<ticket>[^/]++)/new/open$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_new_open')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminNewTicketOpenAction',));
                    }

                    // formalibre_admin_ticket_open
                    if (preg_match('#^/formalibresupportbundle/admin/ticket/(?P<ticket>[^/]++)/open$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_open')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketOpenAction',));
                    }

                    // formalibre_admin_ticket_open_comments
                    if (preg_match('#^/formalibresupportbundle/admin/ticket/(?P<ticket>[^/]++)/open/comments$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_open_comments')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketOpenCommentsAction',));
                    }

                    // formalibre_admin_ticket_open_interventions
                    if (preg_match('#^/formalibresupportbundle/admin/ticket/(?P<ticket>[^/]++)/open/interventions$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_open_interventions')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketOpenInterventionsAction',));
                    }

                    // formalibre_admin_ticket_management_info
                    if (preg_match('#^/formalibresupportbundle/admin/ticket/(?P<ticket>[^/]++)/management/info$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_management_info')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketManagementInfoAction',));
                    }

                    // formalibre_admin_ticket_intervention_start
                    if (preg_match('#^/formalibresupportbundle/admin/ticket/(?P<ticket>[^/]++)/intervention/start$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_intervention_start')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketInterventionStartAction',));
                    }

                    // formalibre_admin_ticket_intervention_stop
                    if (0 === strpos($pathinfo, '/formalibresupportbundle/admin/ticket/intervention') && preg_match('#^/formalibresupportbundle/admin/ticket/intervention/(?P<intervention>[^/]++)/stop$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_intervention_stop')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketInterventionStopAction',));
                    }

                    // formalibre_admin_ticket_type_change_form
                    if (preg_match('#^/formalibresupportbundle/admin/ticket/(?P<ticket>[^/]++)/type/change/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_type_change_form')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketTypeChangeFormAction',));
                    }

                    // formalibre_admin_ticket_type_change
                    if (preg_match('#^/formalibresupportbundle/admin/ticket/(?P<ticket>[^/]++)/type/change$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_type_change')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketTypeChangeAction',));
                    }

                    // formalibre_admin_ticket_comment_create_form
                    if (preg_match('#^/formalibresupportbundle/admin/ticket/(?P<ticket>[^/]++)/comment/create/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_comment_create_form')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketCommentCreateFormAction',));
                    }

                    // formalibre_admin_ticket_comment_create
                    if (preg_match('#^/formalibresupportbundle/admin/ticket/(?P<ticket>[^/]++)/comment/create$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_comment_create')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketCommentCreateAction',));
                    }

                    if (0 === strpos($pathinfo, '/formalibresupportbundle/admin/ticket/comment')) {
                        // formalibre_admin_ticket_comment_edit_form
                        if (preg_match('#^/formalibresupportbundle/admin/ticket/comment/(?P<comment>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_comment_edit_form')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketCommentEditFormAction',));
                        }

                        // formalibre_admin_ticket_comment_edit
                        if (preg_match('#^/formalibresupportbundle/admin/ticket/comment/(?P<comment>[^/]++)/edit$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_comment_edit')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketCommentEditAction',));
                        }

                        // formalibre_admin_ticket_comment_delete
                        if (preg_match('#^/formalibresupportbundle/admin/ticket/comment/(?P<comment>[^/]++)/delete$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_comment_delete')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketCommentDeleteAction',));
                        }

                    }

                    // formalibre_admin_ticket_intervention_create_form
                    if (preg_match('#^/formalibresupportbundle/admin/ticket/(?P<ticket>[^/]++)/intervention/create/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_intervention_create_form')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketInterventionCreateFormAction',));
                    }

                    // formalibre_admin_ticket_intervention_create
                    if (preg_match('#^/formalibresupportbundle/admin/ticket/(?P<ticket>[^/]++)/intervention/create$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_intervention_create')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketInterventionCreateAction',));
                    }

                    if (0 === strpos($pathinfo, '/formalibresupportbundle/admin/ticket/intervention')) {
                        // formalibre_admin_ticket_intervention_edit_form
                        if (preg_match('#^/formalibresupportbundle/admin/ticket/intervention/(?P<intervention>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_intervention_edit_form')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketInterventionEditFormAction',));
                        }

                        // formalibre_admin_ticket_intervention_edit
                        if (preg_match('#^/formalibresupportbundle/admin/ticket/intervention/(?P<intervention>[^/]++)/edit$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_intervention_edit')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketInterventionEditAction',));
                        }

                        // formalibre_admin_ticket_intervention_delete
                        if (preg_match('#^/formalibresupportbundle/admin/ticket/intervention/(?P<intervention>[^/]++)/delete$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_intervention_delete')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketInterventionDeleteAction',));
                        }

                        // formalibre_admin_ticket_intervention_status_edit_form
                        if (preg_match('#^/formalibresupportbundle/admin/ticket/intervention/(?P<intervention>[^/]++)/status/edit/form$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_intervention_status_edit_form')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketInterventionStatusEditFormAction',));
                        }

                        // formalibre_admin_ticket_intervention_status_edit
                        if (preg_match('#^/formalibresupportbundle/admin/ticket/intervention/(?P<intervention>[^/]++)/status/edit$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_ticket_intervention_status_edit')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminTicketInterventionStatusEditAction',));
                        }

                    }

                }

                if (0 === strpos($pathinfo, '/formalibresupportbundle/admin/support')) {
                    if (0 === strpos($pathinfo, '/formalibresupportbundle/admin/support/type')) {
                        if (0 === strpos($pathinfo, '/formalibresupportbundle/admin/support/type/create')) {
                            // formalibre_admin_support_type_create_form
                            if ($pathinfo === '/formalibresupportbundle/admin/support/type/create/form') {
                                return array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportTypeCreateFormAction',  '_route' => 'formalibre_admin_support_type_create_form',);
                            }

                            // formalibre_admin_support_type_create
                            if ($pathinfo === '/formalibresupportbundle/admin/support/type/create') {
                                return array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportTypeCreateAction',  '_route' => 'formalibre_admin_support_type_create',);
                            }

                        }

                        // formalibre_admin_support_type_edit_form
                        if (preg_match('#^/formalibresupportbundle/admin/support/type/(?P<type>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_support_type_edit_form')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportTypeEditFormAction',));
                        }

                        // formalibre_admin_support_type_edit
                        if (preg_match('#^/formalibresupportbundle/admin/support/type/(?P<type>[^/]++)/edit$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_support_type_edit')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportTypeEditAction',));
                        }

                        // formalibre_admin_support_type_delete
                        if (preg_match('#^/formalibresupportbundle/admin/support/type/(?P<type>[^/]++)/delete$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_support_type_delete')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportTypeDeleteAction',));
                        }

                    }

                    if (0 === strpos($pathinfo, '/formalibresupportbundle/admin/support/status')) {
                        if (0 === strpos($pathinfo, '/formalibresupportbundle/admin/support/status/create')) {
                            // formalibre_admin_support_status_create_form
                            if ($pathinfo === '/formalibresupportbundle/admin/support/status/create/form') {
                                return array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportStatusCreateFormAction',  '_route' => 'formalibre_admin_support_status_create_form',);
                            }

                            // formalibre_admin_support_status_create
                            if ($pathinfo === '/formalibresupportbundle/admin/support/status/create') {
                                return array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportStatusCreateAction',  '_route' => 'formalibre_admin_support_status_create',);
                            }

                        }

                        // formalibre_admin_support_status_edit_form
                        if (preg_match('#^/formalibresupportbundle/admin/support/status/(?P<status>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_support_status_edit_form')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportStatusEditFormAction',));
                        }

                        // formalibre_admin_support_status_edit
                        if (preg_match('#^/formalibresupportbundle/admin/support/status/(?P<status>[^/]++)/edit$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_support_status_edit')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportStatusEditAction',));
                        }

                        // formalibre_admin_support_status_delete
                        if (preg_match('#^/formalibresupportbundle/admin/support/status/(?P<status>[^/]++)/delete$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_support_status_delete')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportStatusDeleteAction',));
                        }

                        // formalibre_admin_support_status_reorder
                        if (preg_match('#^/formalibresupportbundle/admin/support/status/(?P<status>[^/]++)/reorder/next/(?P<nextStatusId>[^/]++)$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_formalibre_admin_support_status_reorder;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_admin_support_status_reorder')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::adminSupportStatusReorderAction',));
                        }
                        not_formalibre_admin_support_status_reorder:

                    }

                }

            }

            if (0 === strpos($pathinfo, '/formalibresupportbundle/plugin/configure')) {
                // formalibre_support_plugin_configure_form
                if ($pathinfo === '/formalibresupportbundle/plugin/configure/form') {
                    return array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::pluginConfigureFormAction',  '_route' => 'formalibre_support_plugin_configure_form',);
                }

                // formalibre_support_plugin_configure
                if ($pathinfo === '/formalibresupportbundle/plugin/configure') {
                    return array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\AdminSupportController::pluginConfigureAction',  '_route' => 'formalibre_support_plugin_configure',);
                }

            }

            // formalibre_support_index
            if (0 === strpos($pathinfo, '/formalibresupportbundle/support/index/page') && preg_match('#^/formalibresupportbundle/support/index/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_support_index')), array (  'page' => 1,  'search' => '',  'max' => 50,  'orderedBy' => 'num',  'order' => 'DESC',  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\SupportController::supportIndexAction',));
            }

            if (0 === strpos($pathinfo, '/formalibresupportbundle/ticket')) {
                if (0 === strpos($pathinfo, '/formalibresupportbundle/ticket/create')) {
                    // formalibre_ticket_create_form
                    if ($pathinfo === '/formalibresupportbundle/ticket/create/form') {
                        return array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\SupportController::ticketCreateFormAction',  '_route' => 'formalibre_ticket_create_form',);
                    }

                    // formalibre_ticket_create
                    if ($pathinfo === '/formalibresupportbundle/ticket/create') {
                        return array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\SupportController::ticketCreateAction',  '_route' => 'formalibre_ticket_create',);
                    }

                }

                // formalibre_ticket_edit_form
                if (preg_match('#^/formalibresupportbundle/ticket/(?P<ticket>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_ticket_edit_form')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\SupportController::ticketEditFormAction',));
                }

                // formalibre_ticket_edit
                if (preg_match('#^/formalibresupportbundle/ticket/(?P<ticket>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_ticket_edit')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\SupportController::ticketEditAction',));
                }

                // formalibre_ticket_edit_modal_form
                if (preg_match('#^/formalibresupportbundle/ticket/(?P<ticket>[^/]++)/edit/modal/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_ticket_edit_modal_form')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\SupportController::ticketEditModalFormAction',));
                }

                // formalibre_ticket_edit_modal
                if (preg_match('#^/formalibresupportbundle/ticket/(?P<ticket>[^/]++)/edit/modal$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_ticket_edit_modal')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\SupportController::ticketEditModalAction',));
                }

                // formalibre_ticket_delete
                if (preg_match('#^/formalibresupportbundle/ticket/(?P<ticket>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_ticket_delete')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\SupportController::ticketDeleteAction',));
                }

                // formalibre_ticket_open
                if (preg_match('#^/formalibresupportbundle/ticket/(?P<ticket>[^/]++)/open$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_ticket_open')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\SupportController::ticketOpenAction',));
                }

                // formalibre_ticket_comment_create_form
                if (preg_match('#^/formalibresupportbundle/ticket/(?P<ticket>[^/]++)/comment/create/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_ticket_comment_create_form')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\SupportController::ticketCommentCreateFormAction',));
                }

                // formalibre_ticket_comment_create
                if (preg_match('#^/formalibresupportbundle/ticket/(?P<ticket>[^/]++)/comment/create$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_ticket_comment_create')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\SupportController::ticketCommentCreateAction',));
                }

                // formalibre_ticket_comments_view
                if (preg_match('#^/formalibresupportbundle/ticket/(?P<ticket>[^/]++)/comments/view$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_ticket_comments_view')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\SupportController::ticketCommentsViewAction',));
                }

            }

            if (0 === strpos($pathinfo, '/formalibresupportbundle/user')) {
                // formalibre_ticket_from_issue_create_form
                if (preg_match('#^/formalibresupportbundle/user/(?P<user>[^/]++)/ticket/from/issue/(?P<exceptionClass>[^/]++)/message/(?P<message>[^/]++)/file/(?P<file>.+)/end_file/line/(?P<line>[^/]++)/url/(?P<url>.+)/end_url/referer/(?P<referer>.+)/end_referer/create/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_ticket_from_issue_create_form')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\SupportController::ticketFromIssueCreateFormAction',));
                }

                // formalibre_ticket_from_issue_create
                if (preg_match('#^/formalibresupportbundle/user/(?P<user>[^/]++)/ticket/from/issue/(?P<exceptionClass>[^/]++)/message/(?P<message>[^/]++)/file/(?P<file>.+)/end_file/line/(?P<line>[^/]++)/url/(?P<url>.+)/end_url/referer/(?P<referer>.+)/end_referer/create$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_ticket_from_issue_create')), array (  '_controller' => 'FormaLibre\\SupportBundle\\Controller\\SupportController::ticketFromIssueCreateAction',));
                }

            }

        }

        // claro_rss_config_update
        if (0 === strpos($pathinfo, '/rss-reader/simple_text_update/config') && preg_match('#^/rss\\-reader/simple_text_update/config/(?P<widget>[^/]++)$#s', $pathinfo, $matches)) {
            if ($this->context->getMethod() != 'POST') {
                $allow[] = 'POST';
                goto not_claro_rss_config_update;
            }

            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_rss_config_update')), array (  '_controller' => 'Claroline\\RssReaderBundle\\Controller\\RssReaderController::updateSimpleTextWidgetConfig',));
        }
        not_claro_rss_config_update:

        if (0 === strpos($pathinfo, '/icap_notification')) {
            // icap_notification_resource_enable
            if (0 === strpos($pathinfo, '/icap_notification/enableResourceNotification') && preg_match('#^/icap_notification/enableResourceNotification/(?P<resourceId>[^/]++)/(?P<resourceClass>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_notification_resource_enable')), array (  '_controller' => 'Icap\\NotificationBundle\\Controller\\FollowerResourceController::enableResourceNotificationAction',));
            }

            // icap_notification_resource_disable
            if (0 === strpos($pathinfo, '/icap_notification/disableResourceNotification') && preg_match('#^/icap_notification/disableResourceNotification/(?P<resourceId>[^/]++)/(?P<resourceClass>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_notification_resource_disable')), array (  '_controller' => 'Icap\\NotificationBundle\\Controller\\FollowerResourceController::disableResourceNotificationAction',));
            }

            // icap_notification_view
            if (0 === strpos($pathinfo, '/icap_notification/list') && preg_match('#^/icap_notification/list(?:/(?P<page>\\d+)(?:/(?P<markViewed>0|1))?)?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_notification_view')), array (  'page' => 1,  'markViewed' => 0,  '_controller' => 'Icap\\NotificationBundle\\Controller\\NotificationController::listAction',));
            }

            // icap_notification_rss
            if (0 === strpos($pathinfo, '/icap_notification/rss') && preg_match('#^/icap_notification/rss/(?P<rssId>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_notification_rss')), array (  '_format' => 'xml',  '_controller' => 'Icap\\NotificationBundle\\Controller\\NotificationController::rssAction',));
            }

            if (0 === strpos($pathinfo, '/icap_notification/configuration')) {
                // icap_notification_configuration
                if ($pathinfo === '/icap_notification/configuration') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_icap_notification_configuration;
                    }

                    return array (  '_controller' => 'Icap\\NotificationBundle\\Controller\\NotificationPluginConfigurationController::getAction',  '_route' => 'icap_notification_configuration',);
                }
                not_icap_notification_configuration:

                // icap_notification_configuration_save
                if ($pathinfo === '/icap_notification/configuration') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_icap_notification_configuration_save;
                    }

                    return array (  '_controller' => 'Icap\\NotificationBundle\\Controller\\NotificationPluginConfigurationController::postAction',  '_route' => 'icap_notification_configuration_save',);
                }
                not_icap_notification_configuration_save:

            }

            if (0 === strpos($pathinfo, '/icap_notification/parameters')) {
                // icap_notification_user_parameters
                if ($pathinfo === '/icap_notification/parameters') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_icap_notification_user_parameters;
                    }

                    return array (  '_controller' => 'Icap\\NotificationBundle\\Controller\\NotificationUserParametersController::getAction',  '_route' => 'icap_notification_user_parameters',);
                }
                not_icap_notification_user_parameters:

                // icap_notification_save_user_parameters
                if ($pathinfo === '/icap_notification/parameters') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_icap_notification_save_user_parameters;
                    }

                    return array (  '_controller' => 'Icap\\NotificationBundle\\Controller\\NotificationUserParametersController::postAction',  '_route' => 'icap_notification_save_user_parameters',);
                }
                not_icap_notification_save_user_parameters:

            }

            // icap_notification_regenerate_rss_url
            if ($pathinfo === '/icap_notification/regenerate_rss') {
                return array (  '_controller' => 'Icap\\NotificationBundle\\Controller\\NotificationUserParametersController::regenerateRssUrlAction',  '_route' => 'icap_notification_regenerate_rss_url',);
            }

            if (0 === strpos($pathinfo, '/icap_notification/api/notifications')) {
                // icap_notifications
                if (preg_match('#^/icap_notification/api/notifications(?:\\.(?P<_format>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_notifications')), array (  '_format' => 'json',  '_controller' => 'Icap\\NotificationBundle\\Controller\\API\\NotificationController::getNotificationsAction',));
                }

                // icap_notifications_read
                if (0 === strpos($pathinfo, '/icap_notification/api/notifications/read') && preg_match('#^/icap_notification/api/notifications/read(?:\\.(?P<_format>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_notifications_read')), array (  '_format' => 'json',  '_controller' => 'Icap\\NotificationBundle\\Controller\\API\\NotificationController::getNotificationsReadAction',));
                }

            }

        }

        if (0 === strpos($pathinfo, '/survey')) {
            // claro_survey_index
            if (preg_match('#^/survey/(?P<survey>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_index')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::indexAction',));
            }

            if (0 === strpos($pathinfo, '/survey/survey')) {
                // claro_survey_parameters
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/parameters$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_parameters')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::surveyEditionMainMenuAction',));
                }

                // claro_survey_parameters_edit_form
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/parameters/edit/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_parameters_edit_form')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::surveyParametersEditFormAction',));
                }

                // claro_survey_parameters_edit
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/parameters/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_parameters_edit')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::surveyParametersEditAction',));
                }

                // claro_survey_management
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/management$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_management')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::surveyManagementAction',));
                }

                // claro_survey_display
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/display$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_display')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::surveyDisplayAction',));
                }

                // claro_survey_publish
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/publish$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_publish')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::surveyPublishAction',));
                }

                // claro_survey_close
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/close$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_close')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::surveyCloseAction',));
                }

                // claro_survey_questions_management
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/questions/management/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/page/(?P<page>[^/]++)/max(?:/(?P<max>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_questions_management')), array (  'ordered' => 'title',  'order' => 'ASC',  'page' => 1,  'max' => 20,  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::questionsManagementAction',));
                }

                // claro_survey_models_management
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/models/management/ordered/by/(?P<orderedBy>[^/]++)/order(?:/(?P<order>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_models_management')), array (  'ordered' => 'title',  'order' => 'ASC',  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::modelsManagementAction',));
                }

                // claro_survey_model_delete
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/model/(?P<model>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_model_delete')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::modelDeleteAction',));
                }

                // claro_survey_questions_list
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/questions/list/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/page/(?P<page>[^/]++)/max(?:/(?P<max>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_questions_list')), array (  'ordered' => 'title',  'order' => 'ASC',  'page' => 1,  'max' => 20,  'orderedBy' => 'title',  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::questionsListAction',));
                }

                // claro_survey_question_create_form
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/question/create/form/source(?:/(?P<source>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_question_create_form')), array (  'source' => 'question',  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::questionCreateFormAction',));
                }

                // claro_survey_question_create
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/question/create/source(?:/(?P<source>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_question_create')), array (  'source' => 'question',  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::questionCreateAction',));
                }

                // claro_survey_question_edit_form
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/question/(?P<question>[^/]++)/edit/form/source(?:/(?P<source>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_question_edit_form')), array (  'source' => 'question',  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::questionEditFormAction',));
                }

                // claro_survey_question_edit
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/question/(?P<question>[^/]++)/edit/source(?:/(?P<source>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_question_edit')), array (  'source' => 'question',  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::questionEditAction',));
                }

                // claro_survey_question_delete
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/question/(?P<question>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_question_delete')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::questionDeleteAction',));
                }

                // claro_survey_question_title_create_form
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/question/title/create/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_question_title_create_form')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::questionTitleCreateFormAction',));
                }

                // claro_survey_question_title_create
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/question/title/create$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_question_title_create')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::questionTitleCreateAction',));
                }

                // claro_survey_question_title_edit_form
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/question/(?P<question>[^/]++)/title/edit/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_question_title_edit_form')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::questionTitleEditFormAction',));
                }

                // claro_survey_question_title_edit
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/question/(?P<question>[^/]++)/title/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_question_title_edit')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::questionTitleEditAction',));
                }

                // claro_survey_question_title_delete
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/question/(?P<question>[^/]++)/title/delete$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_question_title_delete')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::questionTitleDeleteAction',));
                }

                // claro_survey_add_question
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/add/question/(?P<question>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_add_question')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::surveyAddQuestionAction',));
                }

                // claro_survey_remove_question
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/remove/question/(?P<question>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_remove_question')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::surveyRemoveQuestionAction',));
                }

                // claro_survey_typed_question_display
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/typed/question/(?P<question>[^/]++)/display$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_typed_question_display')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::typedQuestionDisplayAction',));
                }

                // claro_survey_typed_question_create_form
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/type/(?P<questionType>[^/]++)/create/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_typed_question_create_form')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::typedQuestionCreateFormAction',));
                }

                // claro_survey_typed_question_edit_form
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/question/(?P<question>[^/]++)/type/(?P<questionType>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_typed_question_edit_form')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::typedQuestionEditFormAction',));
                }

                // claro_survey_question_relation_mandatory_switch
                if (0 === strpos($pathinfo, '/survey/survey/question/relation') && preg_match('#^/survey/survey/question/relation/(?P<relation>[^/]++)/switch$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_question_relation_mandatory_switch')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::surveyQuestionRelationMandatorySwitchAction',));
                }

                // claro_survey_answer_form
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/answer/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_answer_form')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::surveyAnswerFormAction',));
                }

                // claro_survey_answer
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/answer$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_answer')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::surveyAnswerAction',));
                }

                // claro_survey_results_show
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/results/show/question/(?P<question>[^/]++)/page/(?P<page>[^/]++)/max(?:/(?P<max>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_results_show')), array (  'page' => 1,  'max' => 20,  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::surveyResultsShowAction',));
                }

                // claro_survey_results_show_comments
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/results/show/question/(?P<question>[^/]++)/comments/page/(?P<page>[^/]++)/max(?:/(?P<max>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_results_show_comments')), array (  'page' => 1,  'max' => 20,  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::showCommentsForQuestionAction',));
                }

                // claro_survey_results_show_other_answers
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/results/show/question/(?P<question>[^/]++)/choice/(?P<choice>[^/]++)/other/page/(?P<page>[^/]++)/max(?:/(?P<max>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_results_show_other_answers')), array (  'page' => 1,  'max' => 20,  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::showOtherAnswersForChoiceAction',));
                }

                // claro_survey_retrieve_model_details
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/model/(?P<model>[^/]++)/details/retrieve$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_retrieve_model_details')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::retrieveModelDetailsAction',));
                }

                // claro_survey_update_question_order
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/question/order/update/relation/(?P<relation>[^/]++)/with/(?P<otherRelation>[^/]++)/mode/(?P<mode>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_update_question_order')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::updateQuestionOrderAction',));
                }

                // claro_survey_results_export
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/results/export$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_results_export')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::resultsExcelExportAction',));
                }

                // claro_survey_question_results_export
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/question/(?P<question>[^/]++)/results/export$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_question_results_export')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::questionResultsExcelExportAction',));
                }

                // claro_survey_answers_export
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/answers/export$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_answers_export')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::surveyAnswersExportAction',));
                }

                // claro_survey_answers_management
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/answers/management/page/(?P<page>[^/]++)/max(?:/(?P<max>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_answers_management')), array (  'page' => 1,  'max' => 20,  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::surveyAnswersManagementAction',));
                }

                // claro_survey_all_answers_delete
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/all/answers/delete$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_all_answers_delete')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::allSurveyAnswersDeleteAction',));
                }

                // claro_survey_answers_delete
                if (preg_match('#^/survey/survey/(?P<survey>[^/]++)/answers/delete$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_survey_answers_delete')), array (  '_controller' => 'Claroline\\SurveyBundle\\Controller\\SurveyController::surveyAnswersDeleteAction',));
                }

            }

        }

        if (0 === strpos($pathinfo, '/announcement/a')) {
            // claro_announcements_list
            if (0 === strpos($pathinfo, '/announcement/announcement/list/aggregate') && preg_match('#^/announcement/announcement/list/aggregate/(?P<aggregateId>[^/]++)/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_claro_announcements_list;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_announcements_list')), array (  'page' => 1,  '_controller' => 'Claroline\\AnnouncementBundle\\Controller\\AnnouncementController::announcementsListAction',));
            }
            not_claro_announcements_list:

            if (0 === strpos($pathinfo, '/announcement/aggregate')) {
                // claro_announcement_create_form
                if (preg_match('#^/announcement/aggregate/(?P<aggregateId>[^/]++)/create/form$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claro_announcement_create_form;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_announcement_create_form')), array (  '_controller' => 'Claroline\\AnnouncementBundle\\Controller\\AnnouncementController::createFormAction',));
                }
                not_claro_announcement_create_form:

                // claro_announcement_create
                if (preg_match('#^/announcement/aggregate/(?P<aggregateId>[^/]++)/create$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_claro_announcement_create;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_announcement_create')), array (  '_controller' => 'Claroline\\AnnouncementBundle\\Controller\\AnnouncementController::createAction',));
                }
                not_claro_announcement_create:

            }

            if (0 === strpos($pathinfo, '/announcement/announcement')) {
                // claro_announcement_edit_form
                if (preg_match('#^/announcement/announcement/(?P<announcementId>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claro_announcement_edit_form;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_announcement_edit_form')), array (  '_controller' => 'Claroline\\AnnouncementBundle\\Controller\\AnnouncementController::announcementEditFormAction',));
                }
                not_claro_announcement_edit_form:

                // claro_announcement_edit
                if (preg_match('#^/announcement/announcement/(?P<announcementId>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_claro_announcement_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_announcement_edit')), array (  '_controller' => 'Claroline\\AnnouncementBundle\\Controller\\AnnouncementController::announcementEditAction',));
                }
                not_claro_announcement_edit:

                // claro_announcement_delete
                if (preg_match('#^/announcement/announcement/(?P<announcementId>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_claro_announcement_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_announcement_delete')), array (  '_controller' => 'Claroline\\AnnouncementBundle\\Controller\\AnnouncementController::announcementDeleteAction',));
                }
                not_claro_announcement_delete:

                if (0 === strpos($pathinfo, '/announcement/announcement/widget')) {
                    // claro_announcement_widget
                    if (preg_match('#^/announcement/announcement/widget/(?P<widgetInstance>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_claro_announcement_widget;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_announcement_widget')), array (  '_controller' => 'Claroline\\AnnouncementBundle\\Controller\\AnnouncementController::announcementsWidgetAction',));
                    }
                    not_claro_announcement_widget:

                    // claro_announcement_widget_pager
                    if (preg_match('#^/announcement/announcement/widget/(?P<widgetInstance>[^/]++)/page(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_claro_announcement_widget_pager;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_announcement_widget_pager')), array (  'page' => 1,  '_controller' => 'Claroline\\AnnouncementBundle\\Controller\\AnnouncementController::announcementsWidgetPagerAction',));
                    }
                    not_claro_announcement_widget_pager:

                }

                if (0 === strpos($pathinfo, '/announcement/announcements/widget')) {
                    // claro_announcements_widget_configure_form
                    if (preg_match('#^/announcement/announcements/widget/(?P<widgetInstance>[^/]++)/configure/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_announcements_widget_configure_form')), array (  '_controller' => 'Claroline\\AnnouncementBundle\\Controller\\AnnouncementController::announcementsWidgetConfigureFormAction',));
                    }

                    // claro_announcements_widget_configure
                    if (0 === strpos($pathinfo, '/announcement/announcements/widget/configure/config') && preg_match('#^/announcement/announcements/widget/configure/config/(?P<config>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_announcements_widget_configure')), array (  '_controller' => 'Claroline\\AnnouncementBundle\\Controller\\AnnouncementController::announcementsWidgetConfigureAction',));
                    }

                }

                // claro_announcement_send_mail
                if (preg_match('#^/announcement/announcement/(?P<announcement>[^/]++)/send/mail$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_announcement_send_mail')), array (  '_controller' => 'Claroline\\AnnouncementBundle\\Controller\\AnnouncementController::announcementSendMailAction',));
                }

            }

        }

        if (0 === strpos($pathinfo, '/claroline')) {
            if (0 === strpos($pathinfo, '/clarolinescormbundle')) {
                // claro_render_scorm_12_resource
                if (0 === strpos($pathinfo, '/clarolinescormbundle/render/scorm/12') && preg_match('#^/clarolinescormbundle/render/scorm/12/(?P<scormId>[^/]++)/mode(?:/(?P<mode>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_render_scorm_12_resource')), array (  'mode' => 0,  '_controller' => 'Claroline\\ScormBundle\\Controller\\ScormController::renderScorm12ResourceAction',));
                }

                if (0 === strpos($pathinfo, '/clarolinescormbundle/scorm')) {
                    // claro_render_scorm_12_sco
                    if (0 === strpos($pathinfo, '/clarolinescormbundle/scorm/12/render/sco') && preg_match('#^/clarolinescormbundle/scorm/12/render/sco/(?P<scoId>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_render_scorm_12_sco')), array (  '_controller' => 'Claroline\\ScormBundle\\Controller\\ScormController::renderScorm12ScoAction',));
                    }

                    // claro_scorm_12_tracking_commit
                    if (0 === strpos($pathinfo, '/clarolinescormbundle/scorm/tracking/commit') && preg_match('#^/clarolinescormbundle/scorm/tracking/commit/(?P<datasString>.+)/mode/(?P<mode>[^/]++)/sco/(?P<scoId>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_scorm_12_tracking_commit')), array (  '_controller' => 'Claroline\\ScormBundle\\Controller\\ScormController::commitScorm12Tracking',));
                    }

                }

                // claro_render_scorm_2004_resource
                if (0 === strpos($pathinfo, '/clarolinescormbundle/render/scorm/2004') && preg_match('#^/clarolinescormbundle/render/scorm/2004/(?P<scormId>[^/]++)/mode(?:/(?P<mode>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_render_scorm_2004_resource')), array (  'mode' => 0,  '_controller' => 'Claroline\\ScormBundle\\Controller\\ScormController::renderScorm2004ResourceAction',));
                }

                if (0 === strpos($pathinfo, '/clarolinescormbundle/scorm')) {
                    if (0 === strpos($pathinfo, '/clarolinescormbundle/scorm/2004')) {
                        // claro_render_scorm_2004_sco
                        if (0 === strpos($pathinfo, '/clarolinescormbundle/scorm/2004/render/sco') && preg_match('#^/clarolinescormbundle/scorm/2004/render/sco/(?P<scoId>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_render_scorm_2004_sco')), array (  '_controller' => 'Claroline\\ScormBundle\\Controller\\ScormController::renderScorm2004ScoAction',));
                        }

                        // claro_scorm_2004_tracking_commit
                        if (0 === strpos($pathinfo, '/clarolinescormbundle/scorm/2004/tracking/commit/mode') && preg_match('#^/clarolinescormbundle/scorm/2004/tracking/commit/mode/(?P<mode>[^/]++)/sco/(?P<scoId>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_scorm_2004_tracking_commit')), array (  '_controller' => 'Claroline\\ScormBundle\\Controller\\ScormController::commitScorm2004Tracking',));
                        }

                    }

                    if (0 === strpos($pathinfo, '/clarolinescormbundle/scorm/12')) {
                        // claro_scorm_12_configuration_edit_form
                        if (preg_match('#^/clarolinescormbundle/scorm/12/(?P<scorm>[^/]++)/configuration/edit/form$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_scorm_12_configuration_edit_form')), array (  '_controller' => 'Claroline\\ScormBundle\\Controller\\ScormController::scorm12ConfigurationEditFormAction',));
                        }

                        // claro_scorm_12_configuration_edit
                        if (preg_match('#^/clarolinescormbundle/scorm/12/(?P<scorm>[^/]++)/configuration/edit$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_scorm_12_configuration_edit')), array (  '_controller' => 'Claroline\\ScormBundle\\Controller\\ScormController::scorm12ConfigurationEditAction',));
                        }

                    }

                    if (0 === strpos($pathinfo, '/clarolinescormbundle/scorm/2004')) {
                        // claro_scorm_2004_configuration_edit_form
                        if (preg_match('#^/clarolinescormbundle/scorm/2004/(?P<scorm>[^/]++)/configuration/edit/form$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_scorm_2004_configuration_edit_form')), array (  '_controller' => 'Claroline\\ScormBundle\\Controller\\ScormController::scorm2004ConfigurationEditFormAction',));
                        }

                        // claro_scorm_2004_configuration_edit
                        if (preg_match('#^/clarolinescormbundle/scorm/2004/(?P<scorm>[^/]++)/configuration/edit$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_scorm_2004_configuration_edit')), array (  '_controller' => 'Claroline\\ScormBundle\\Controller\\ScormController::scorm2004ConfigurationEditAction',));
                        }

                    }

                    // claro_scorm_results
                    if (preg_match('#^/clarolinescormbundle/scorm/(?P<resourceNode>[^/]++)/results$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_scorm_results')), array (  '_controller' => 'Claroline\\ScormBundle\\Controller\\API\\ScormController::scormResultsAction',));
                    }

                    // claro_scorm_get_tracking_details
                    if (preg_match('#^/clarolinescormbundle/scorm/(?P<resourceNode>[^/]++)/tracking/sco/(?P<scoId>[^/]++)/user/(?P<user>[^/]++)/details$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_scorm_get_tracking_details')), array (  '_controller' => 'Claroline\\ScormBundle\\Controller\\API\\ScormController::getScormTrackingDetailsAction',));
                    }

                }

            }

            // claro_pdf
            if (0 === strpos($pathinfo, '/clarolinepdfplayerbundle/pdf') && preg_match('#^/clarolinepdfplayerbundle/pdf/(?P<node>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_pdf')), array (  '_controller' => 'Claroline\\PdfPlayerBundle\\Controller\\PdfPlayerController::fileAction',));
            }

            if (0 === strpos($pathinfo, '/clarolinecursusbundle')) {
                // claro_cursus_tool_course_index
                if (0 === strpos($pathinfo, '/clarolinecursusbundle/tool/course/index/page') && preg_match('#^/clarolinecursusbundle/tool/course/index/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_tool_course_index')), array (  'page' => 1,  'search' => '',  'max' => 50,  'orderedBy' => 'title',  'order' => 'ASC',  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::cursusToolCourseIndexAction',));
                }

                if (0 === strpos($pathinfo, '/clarolinecursusbundle/c')) {
                    if (0 === strpos($pathinfo, '/clarolinecursusbundle/cursus')) {
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/cursus/course/create')) {
                            // claro_cursus_course_create_form
                            if ($pathinfo === '/clarolinecursusbundle/cursus/course/create/form') {
                                return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseCreateFormAction',  '_route' => 'claro_cursus_course_create_form',);
                            }

                            // claro_cursus_course_create
                            if ($pathinfo === '/clarolinecursusbundle/cursus/course/create') {
                                return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseCreateAction',  '_route' => 'claro_cursus_course_create',);
                            }

                        }

                        // claro_cursus_course_edit_form
                        if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursusId>[^/]++)/course/(?P<course>[^/]++)/edit/form/source(?:/(?P<source>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_edit_form')), array (  'source' => 0,  'cursusId' => -1,  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseEditFormAction',));
                        }

                        // claro_cursus_course_edit
                        if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursusId>[^/]++)/course/(?P<course>[^/]++)/edit/source(?:/(?P<source>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_edit')), array (  'source' => 0,  'cursusId' => -1,  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseEditAction',));
                        }

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/cursus/course')) {
                            // claro_cursus_course_delete
                            if (preg_match('#^/clarolinecursusbundle/cursus/course/(?P<course>[^/]++)/delete$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_delete')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseDeleteAction',));
                            }

                            // claro_cursus_course_display_description
                            if (preg_match('#^/clarolinecursusbundle/cursus/course/(?P<course>[^/]++)/description/display$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_display_description')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseDescriptionDisplayAction',));
                            }

                        }

                        // claro_cursus_course_management
                        if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursusId>[^/]++)/course/(?P<course>[^/]++)/management$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_management')), array (  'cursusId' => -1,  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseManagementAction',));
                        }

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/cursus/course')) {
                            // claro_cursus_course_session_create_form
                            if (preg_match('#^/clarolinecursusbundle/cursus/course/(?P<course>[^/]++)/session/create/form$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_session_create_form')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseSessionCreateFormAction',));
                            }

                            // claro_cursus_course_session_create
                            if (preg_match('#^/clarolinecursusbundle/cursus/course/(?P<course>[^/]++)/session/create$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_session_create')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseSessionCreateAction',));
                            }

                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/cursus/course/session')) {
                                // claro_cursus_course_session_edit_form
                                if (preg_match('#^/clarolinecursusbundle/cursus/course/session/(?P<session>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_session_edit_form')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseSessionEditFormAction',));
                                }

                                // claro_cursus_course_session_edit
                                if (preg_match('#^/clarolinecursusbundle/cursus/course/session/(?P<session>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_session_edit')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseSessionEditAction',));
                                }

                                // claro_cursus_course_session_delete
                                if (preg_match('#^/clarolinecursusbundle/cursus/course/session/(?P<session>[^/]++)/delete/with/workspace/(?P<mode>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ($this->context->getMethod() != 'DELETE') {
                                        $allow[] = 'DELETE';
                                        goto not_claro_cursus_course_session_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_session_delete')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseSessionDeleteAction',));
                                }
                                not_claro_cursus_course_session_delete:

                                // claro_cursus_course_session_view_management
                                if (preg_match('#^/clarolinecursusbundle/cursus/course/session/(?P<session>[^/]++)/view/management$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_session_view_management')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseSessionViewManagementAction',));
                                }

                                // claro_cursus_course_session_registration_unregistered_users_list
                                if (preg_match('#^/clarolinecursusbundle/cursus/course/session/(?P<session>[^/]++)/registration/unregistered/users/(?P<userType>[^/]++)/list/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_session_registration_unregistered_users_list')), array (  'userType' => 0,  'page' => 1,  'search' => '',  'max' => 50,  'orderedBy' => 'firstName',  'order' => 'ASC',  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseSessionRegistrationUnregisteredUsersListAction',));
                                }

                                // claro_cursus_course_session_register_user
                                if (preg_match('#^/clarolinecursusbundle/cursus/course/session/(?P<session>[^/]++)/register/user/(?P<user>[^/]++)/type/(?P<userType>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ($this->context->getMethod() != 'POST') {
                                        $allow[] = 'POST';
                                        goto not_claro_cursus_course_session_register_user;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_session_register_user')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseSessionUserRegisterAction',));
                                }
                                not_claro_cursus_course_session_register_user:

                            }

                        }

                        // claro_cursus_session_event_unregister_user
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/cursus/session/evnet/unregister/user') && preg_match('#^/clarolinecursusbundle/cursus/session/evnet/unregister/user/(?P<sessionEventUser>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_session_event_unregister_user')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::sessionEventUserUnregisterAction',));
                        }

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/cursus/course')) {
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/cursus/course/session')) {
                                // claro_cursus_course_session_registration_unregistered_groups_list
                                if (preg_match('#^/clarolinecursusbundle/cursus/course/session/(?P<session>[^/]++)/registration/unregistered/groups/(?P<groupType>[^/]++)/list/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_session_registration_unregistered_groups_list')), array (  'groupType' => 0,  'page' => 1,  'search' => '',  'max' => 50,  'orderedBy' => 'name',  'order' => 'ASC',  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseSessionRegistrationUnregisteredGroupsListAction',));
                                }

                                // claro_cursus_course_session_register_group
                                if (preg_match('#^/clarolinecursusbundle/cursus/course/session/(?P<session>[^/]++)/register/group/(?P<group>[^/]++)/type/(?P<groupType>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ($this->context->getMethod() != 'POST') {
                                        $allow[] = 'POST';
                                        goto not_claro_cursus_course_session_register_group;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_session_register_group')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseSessionGroupRegisterAction',));
                                }
                                not_claro_cursus_course_session_register_group:

                                // claro_cursus_course_session_unregister_group
                                if (0 === strpos($pathinfo, '/clarolinecursusbundle/cursus/course/session/unregister/group') && preg_match('#^/clarolinecursusbundle/cursus/course/session/unregister/group/(?P<sessionGroup>[^/]++)$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_session_unregister_group')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseSessionGroupUnregisterAction',));
                                }

                                // claro_cursus_course_session_confirmation_mail_send
                                if (preg_match('#^/clarolinecursusbundle/cursus/course/session/(?P<session>[^/]++)/confirmation/mail/send$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_session_confirmation_mail_send')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseSessionConfirmationMailSendAction',));
                                }

                                // claro_cursus_course_session_user_confirmation_mail_send
                                if (preg_match('#^/clarolinecursusbundle/cursus/course/session/(?P<session>[^/]++)/user/(?P<user>[^/]++)/confirmation/mail/send$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_session_user_confirmation_mail_send')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseSessionUserConfirmationMailSendAction',));
                                }

                                if (0 === strpos($pathinfo, '/clarolinecursusbundle/cursus/course/session/registration/queue')) {
                                    // claro_cursus_course_session_user_registration_accept
                                    if (preg_match('#^/clarolinecursusbundle/cursus/course/session/registration/queue/(?P<queue>[^/]++)/accept$#s', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_session_user_registration_accept')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseSessionUserRegistrationAcceptAction',));
                                    }

                                    // claro_cursus_course_session_user_registration_decline
                                    if (preg_match('#^/clarolinecursusbundle/cursus/course/session/registration/queue/(?P<queue>[^/]++)/decline$#s', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_session_user_registration_decline')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseSessionUserRegistrationDeclineAction',));
                                    }

                                }

                            }

                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/cursus/course/queue')) {
                                // claro_cursus_course_queued_user_transfer_form
                                if (preg_match('#^/clarolinecursusbundle/cursus/course/queue/(?P<queue>[^/]++)/user/transfer/form$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_queued_user_transfer_form')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseQueuedUserTransferFormAction',));
                                }

                                // claro_cursus_course_queued_user_transfer
                                if (preg_match('#^/clarolinecursusbundle/cursus/course/queue/(?P<queue>[^/]++)/user/transfer$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_queued_user_transfer')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseQueuedUserTransferAction',));
                                }

                            }

                            // claro_cursus_course_session_default_switch
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/cursus/course/session') && preg_match('#^/clarolinecursusbundle/cursus/course/session/(?P<session>[^/]++)/default/switch$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_session_default_switch')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::courseSessionDefaultSwitchAction',));
                            }

                        }

                    }

                    if (0 === strpos($pathinfo, '/clarolinecursusbundle/course')) {
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/courses')) {
                            // claro_cursus_courses_export
                            if ($pathinfo === '/clarolinecursusbundle/courses/export') {
                                return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::coursesExportAction',  '_route' => 'claro_cursus_courses_export',);
                            }

                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/courses/import')) {
                                // claro_cursus_courses_import_form
                                if ($pathinfo === '/clarolinecursusbundle/courses/import/form') {
                                    return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::coursesImportFormAction',  '_route' => 'claro_cursus_courses_import_form',);
                                }

                                // claro_cursus_courses_import
                                if ($pathinfo === '/clarolinecursusbundle/courses/import') {
                                    return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::coursesImportAction',  '_route' => 'claro_cursus_courses_import',);
                                }

                            }

                        }

                        // course_workspace_roles_translation_keys_retrieve
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/course/workspace') && preg_match('#^/clarolinecursusbundle/course/workspace/(?P<workspace>[^/]++)/retrieve/roles/translation/keys$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'course_workspace_roles_translation_keys_retrieve')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CourseController::retrieveRolesTranslationKeysFromWorkspaceAction',));
                        }

                    }

                    // claro_cursus_management_tool_menu
                    if ($pathinfo === '/clarolinecursusbundle/cursus/management/tool/menu') {
                        return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusManagementToolMenuAction',  '_route' => 'claro_cursus_management_tool_menu',);
                    }

                }

                // claro_cursus_tool_index
                if ($pathinfo === '/clarolinecursusbundle/tool/index') {
                    return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusToolIndexAction',  '_route' => 'claro_cursus_tool_index',);
                }

                if (0 === strpos($pathinfo, '/clarolinecursusbundle/cursus')) {
                    if (0 === strpos($pathinfo, '/clarolinecursusbundle/cursus/create')) {
                        // claro_cursus_create_form
                        if ($pathinfo === '/clarolinecursusbundle/cursus/create/form') {
                            return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusCreateFormAction',  '_route' => 'claro_cursus_create_form',);
                        }

                        // claro_cursus_create
                        if ($pathinfo === '/clarolinecursusbundle/cursus/create') {
                            return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusCreateAction',  '_route' => 'claro_cursus_create',);
                        }

                    }

                    // claro_cursus_edit_form
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_edit_form')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusEditFormAction',));
                    }

                    // claro_cursus_edit
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_edit')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusEditAction',));
                    }

                    // claro_cursus_view
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/view$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_view')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusViewAction',));
                    }

                    // claro_cursus_view_hierarchy
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/view/hierarchy$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_view_hierarchy')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusViewHierarchyAction',));
                    }

                    // claro_cursus_delete
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_delete')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusDeleteAction',));
                    }

                    // claro_cursus_display_description
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/description/display$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_display_description')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusDescriptionDisplayAction',));
                    }

                    // claro_cursus_management
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/management$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_management')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusManagementAction',));
                    }

                    // claro_cursus_child_create_form
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<parent>[^/]++)/child/create/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_child_create_form')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusChildCreateFormAction',));
                    }

                    // claro_cursus_child_create
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<parent>[^/]++)/child/create$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_child_create')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusChildCreateAction',));
                    }

                    // claro_cursus_add_courses_users_list
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/add/courses/list/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_add_courses_users_list')), array (  'page' => 1,  'search' => '',  'max' => 50,  'orderedBy' => 'title',  'order' => 'ASC',  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusAddCoursesListAction',));
                    }

                    // claro_cursus_associate_course
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/associate/course/(?P<course>[^/]++)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_cursus_associate_course;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_associate_course')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusCourseAssociateAction',));
                    }
                    not_claro_cursus_associate_course:

                    // claro_cursus_dissociate_course
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/dissociate/course$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_cursus_dissociate_course;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_dissociate_course')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusCourseDissociateAction',));
                    }
                    not_claro_cursus_dissociate_course:

                    // claro_cursus_add_course
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/add/course/(?P<course>[^/]++)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_cursus_add_course;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_add_course')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusCourseAddAction',));
                    }
                    not_claro_cursus_add_course:

                    // claro_cursus_add_courses
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/add/courses$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_cursus_add_courses;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_add_courses')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusCoursesAddAction',));
                    }
                    not_claro_cursus_add_courses:

                    // claro_cursus_remove_course
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/remove/course/(?P<course>[^/]++)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_cursus_remove_course;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_remove_course')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusCourseRemoveAction',));
                    }
                    not_claro_cursus_remove_course:

                    // claro_cursus_remove_courses
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/remove/courses$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claro_cursus_remove_courses;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_remove_courses')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusCoursesRemoveAction',));
                    }
                    not_claro_cursus_remove_courses:

                    // claro_cursus_course_into_cursus_create_form
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/course/create/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_into_cursus_create_form')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusCourseCreateFormAction',));
                    }

                    // claro_cursus_course_into_cursus_create
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/course/create$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_into_cursus_create')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusCourseCreateAction',));
                    }

                    // claro_cursus_update_order
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/order/update/with/cursus/(?P<otherCursus>[^/]++)/mode/(?P<mode>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_update_order')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::updateCursusOrderAction',));
                    }

                    // claro_cursus_update_parent_and_order
                    if (preg_match('#^/clarolinecursusbundle/cursus/(?P<cursus>[^/]++)/update/parent/(?P<parent>[^/]++)/order/with/cursus(?:/(?P<nextCursusId>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_update_parent_and_order')), array (  'nextCursusId' => -1,  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::updateCursusParentAndOrderAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/clarolinecursusbundle/plugin/configure')) {
                    // claro_cursus_plugin_configure_form
                    if ($pathinfo === '/clarolinecursusbundle/plugin/configure/form') {
                        return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::pluginConfigureFormAction',  '_route' => 'claro_cursus_plugin_configure_form',);
                    }

                    // claro_cursus_plugin_configure
                    if ($pathinfo === '/clarolinecursusbundle/plugin/configure') {
                        return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::pluginConfigureAction',  '_route' => 'claro_cursus_plugin_configure',);
                    }

                }

                // claro_cursus_change_displayed_word
                if (0 === strpos($pathinfo, '/clarolinecursusbundle/admin/displayed/word') && preg_match('#^/clarolinecursusbundle/admin/displayed/word/(?P<key>[^/]++)/change(?:/(?P<value>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_change_displayed_word')), array (  'value' => '',  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::displayedWordChangeAction',));
                }

                if (0 === strpos($pathinfo, '/clarolinecursusbundle/course')) {
                    if (0 === strpos($pathinfo, '/clarolinecursusbundle/courses')) {
                        // claro_cursus_courses_registration_widget
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/courses/registration/widget') && preg_match('#^/clarolinecursusbundle/courses/registration/widget/(?P<widgetInstance>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_courses_registration_widget')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::coursesRegistrationWidgetAction',));
                        }

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/courses/list/registration/widget')) {
                            // claro_cursus_courses_list_for_registration_widget
                            if (preg_match('#^/clarolinecursusbundle/courses/list/registration/widget/(?P<widgetInstance>[^/]++)/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_courses_list_for_registration_widget')), array (  'page' => 1,  'search' => '',  'max' => 20,  'orderedBy' => 'title',  'order' => 'ASC',  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::coursesListForRegistrationWidgetAction',));
                            }

                            // claro_cursus_courses_list_for_registration_widget_calendar
                            if (preg_match('#^/clarolinecursusbundle/courses/list/registration/widget/(?P<widgetInstance>[^/]++)/calendar/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_courses_list_for_registration_widget_calendar')), array (  'search' => '',  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::coursesListForRegistrationWidgetCalendarAction',));
                            }

                        }

                    }

                    // claro_cursus_course_session_self_register
                    if (0 === strpos($pathinfo, '/clarolinecursusbundle/course/session') && preg_match('#^/clarolinecursusbundle/course/session/(?P<session>[^/]++)/self/register$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_session_self_register')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::courseSessionSelfRegisterAction',));
                    }

                }

                // claro_cursus_session_event_self_register
                if (0 === strpos($pathinfo, '/clarolinecursusbundle/session/event') && preg_match('#^/clarolinecursusbundle/session/event/(?P<sessionEvent>[^/]++)/self/register$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_session_event_self_register')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::sessionEventSelfRegisterAction',));
                }

                if (0 === strpos($pathinfo, '/clarolinecursusbundle/course')) {
                    // claro_cursus_course_queue_register
                    if (preg_match('#^/clarolinecursusbundle/course/(?P<course>[^/]++)/queue/register$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_queue_register')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::courseQueueRegisterAction',));
                    }

                    // claro_cursus_course_queue_cancel
                    if (preg_match('#^/clarolinecursusbundle/course/(?P<course>[^/]++)/queue/cancel$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_queue_cancel')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::courseQueueCancelAction',));
                    }

                    if (0 === strpos($pathinfo, '/clarolinecursusbundle/courses/registration/widget')) {
                        // claro_cursus_courses_registration_widget_configure_form
                        if (preg_match('#^/clarolinecursusbundle/courses/registration/widget/(?P<widgetInstance>[^/]++)/configure/form$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_courses_registration_widget_configure_form')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::coursesRegistrationWidgetConfigureFormAction',));
                        }

                        // claro_cursus_courses_registration_widget_configure
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/courses/registration/widget/configure/config') && preg_match('#^/clarolinecursusbundle/courses/registration/widget/configure/config/(?P<config>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_courses_registration_widget_configure')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::coursesRegistrationWidgetConfigureAction',));
                        }

                    }

                }

                if (0 === strpos($pathinfo, '/clarolinecursusbundle/my/courses/widget')) {
                    // claro_cursus_my_courses_widget_configure_form
                    if (preg_match('#^/clarolinecursusbundle/my/courses/widget/(?P<widgetInstance>[^/]++)/configure/form$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_my_courses_widget_configure_form')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::myCoursesWidgetConfigureFormAction',));
                    }

                    // claro_cursus_my_courses_widget_configure
                    if (0 === strpos($pathinfo, '/clarolinecursusbundle/my/courses/widget/configure/config') && preg_match('#^/clarolinecursusbundle/my/courses/widget/configure/config/(?P<config>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_my_courses_widget_configure')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::myCoursesRegistrationWidgetConfigureAction',));
                    }

                    // claro_cursus_my_courses_widget
                    if (preg_match('#^/clarolinecursusbundle/my/courses/widget/(?P<widgetInstance>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_my_courses_widget')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::myCoursesWidgetAction',));
                    }

                    // claro_cursus_my_courses_list_for_widget
                    if (preg_match('#^/clarolinecursusbundle/my/courses/widget/(?P<widgetInstance>[^/]++)/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_my_courses_list_for_widget')), array (  'page' => 1,  'search' => '',  'max' => 20,  'orderedBy' => 'title',  'order' => 'ASC',  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::myCoursesListForWidgetAction',));
                    }

                    // claro_cursus_my_courses_list_for_widget_calendar
                    if (preg_match('#^/clarolinecursusbundle/my/courses/widget/(?P<widgetInstance>[^/]++)/calendar/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_my_courses_list_for_widget_calendar')), array (  'search' => '',  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::myCoursesListForWidgetCalendarAction',));
                    }

                    // claro_cursus_my_courses_list_for_widget_chronologic
                    if (preg_match('#^/clarolinecursusbundle/my/courses/widget/(?P<widgetInstance>[^/]++)/chronologic/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_my_courses_list_for_widget_chronologic')), array (  'search' => '',  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::myCoursesListForWidgetChronologicAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/clarolinecursusbundle/c')) {
                    if (0 === strpos($pathinfo, '/clarolinecursusbundle/courses/widget')) {
                        // claro_courses_widget_session_informations
                        if (preg_match('#^/clarolinecursusbundle/courses/widget/(?P<widgetInstance>[^/]++)/session/(?P<session>[^/]++)/informations/workspace/(?P<withWorkspace>[^/]++)/mail/(?P<withMail>[^/]++)/type(?:/(?P<type>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_courses_widget_session_informations')), array (  'withWorkspace' => 1,  'withMail' => 1,  'type' => 0,  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::coursesWidgetSessionInformationsAction',));
                        }

                        // claro_courses_widget_session_event_informations
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/courses/widget/session/event') && preg_match('#^/clarolinecursusbundle/courses/widget/session/event/(?P<sessionEvent>[^/]++)/informations/mail(?:/(?P<withMail>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_courses_widget_session_event_informations')), array (  'withMail' => 1,  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::coursesWidgetSessionEventInformationsAction',));
                        }

                    }

                    if (0 === strpos($pathinfo, '/clarolinecursusbundle/cursus')) {
                        // claro_cursus_export
                        if ($pathinfo === '/clarolinecursusbundle/cursus/export') {
                            return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusExportAction',  '_route' => 'claro_cursus_export',);
                        }

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/cursus/import')) {
                            // claro_cursus_import_form
                            if ($pathinfo === '/clarolinecursusbundle/cursus/import/form') {
                                return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusImportFormAction',  '_route' => 'claro_cursus_import_form',);
                            }

                            // claro_cursus_import
                            if ($pathinfo === '/clarolinecursusbundle/cursus/import') {
                                return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::cursusImportAction',  '_route' => 'claro_cursus_import',);
                            }

                        }

                    }

                }

                if (0 === strpos($pathinfo, '/clarolinecursusbundle/session/event')) {
                    // api_post_session_event_comment
                    if (preg_match('#^/clarolinecursusbundle/session/event/(?P<sessionEvent>[^/]++)/comment/create$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_session_event_comment')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::postSessionEventCommentAction',));
                    }

                    if (0 === strpos($pathinfo, '/clarolinecursusbundle/session/event/comment')) {
                        // api_put_session_event_comment_edit
                        if (preg_match('#^/clarolinecursusbundle/session/event/comment/(?P<sessionEventComment>[^/]++)/edit$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_session_event_comment_edit')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::putSessionEventCommentEditAction',));
                        }

                        // api_delete_session_event_comment
                        if (preg_match('#^/clarolinecursusbundle/session/event/comment/(?P<sessionEventComment>[^/]++)/delete$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_session_event_comment')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusController::deleteSessionEventCommentAction',));
                        }

                    }

                }

                // claro_cursus_tool_registration_index
                if ($pathinfo === '/clarolinecursusbundle/tool/registration/index') {
                    return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusRegistrationController::cursusToolRegistrationIndexAction',  '_route' => 'claro_cursus_tool_registration_index',);
                }

                if (0 === strpos($pathinfo, '/clarolinecursusbundle/user')) {
                    // claro_cursus_user_sessions_management
                    if (preg_match('#^/clarolinecursusbundle/user/(?P<user>[^/]++)/course/sessions/management$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_user_sessions_management')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusRegistrationController::userSessionsManagementAction',));
                    }

                    // claro_cursus_user_sessions_registration_management
                    if (preg_match('#^/clarolinecursusbundle/user/(?P<user>[^/]++)/type/(?P<type>[^/]++)/course/sessions/registration/management$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_user_sessions_registration_management')), array (  'page' => 1,  'max' => 50,  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusRegistrationController::userSessionsRegistrationManagementAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/clarolinecursusbundle/group')) {
                    // claro_cursus_group_sessions_management
                    if (preg_match('#^/clarolinecursusbundle/group/(?P<group>[^/]++)/course/sessions/management$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_group_sessions_management')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusRegistrationController::groupSessionsManagementAction',));
                    }

                    // claro_cursus_group_sessions_registration_management
                    if (preg_match('#^/clarolinecursusbundle/group/(?P<group>[^/]++)/type/(?P<type>[^/]++)/course/sessions/registration/management$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_group_sessions_registration_management')), array (  'page' => 1,  'max' => 50,  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusRegistrationController::groupSessionsRegistrationManagementAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/clarolinecursusbundle/course')) {
                    if (0 === strpos($pathinfo, '/clarolinecursusbundle/course/sessions')) {
                        // claro_cursus_sessions_datas_list
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/course/sessions/datas/list/page') && preg_match('#^/clarolinecursusbundle/course/sessions/datas/list/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_sessions_datas_list')), array (  'search' => '',  'page' => 1,  'max' => 20,  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusRegistrationController::sessionsDatasListAction',));
                        }

                        // claro_cursus_sessions_register
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/course/sessions/user') && preg_match('#^/clarolinecursusbundle/course/sessions/user/(?P<user>[^/]++)/type/(?P<type>[^/]++)/register$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_sessions_register')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusRegistrationController::sessionsRegisterAction',));
                        }

                        // claro_cursus_sessions_register_group
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/course/sessions/group') && preg_match('#^/clarolinecursusbundle/course/sessions/group/(?P<group>[^/]++)/type/(?P<type>[^/]++)/register$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_sessions_register_group')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusRegistrationController::sessionsRegisterGroupAction',));
                        }

                    }

                    // claro_cursus_course_registration_queue_user_validate
                    if (0 === strpos($pathinfo, '/clarolinecursusbundle/course/registration/queue') && preg_match('#^/clarolinecursusbundle/course/registration/queue/(?P<queue>[^/]++)/user/validate$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_course_registration_queue_user_validate')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusRegistrationController::courseRegistrationQueueUserValidateAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/clarolinecursusbundle/session')) {
                    // claro_cursus_session_registration_queue_user_validate
                    if (0 === strpos($pathinfo, '/clarolinecursusbundle/session/registration/queue') && preg_match('#^/clarolinecursusbundle/session/registration/queue/(?P<queue>[^/]++)/user/validate$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_session_registration_queue_user_validate')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusRegistrationController::sessionRegistrationQueueUserValidateAction',));
                    }

                    // claro_cursus_session_events_registration_management
                    if (preg_match('#^/clarolinecursusbundle/session/(?P<session>[^/]++)/events/registration/user/(?P<user>[^/]++)/management$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_cursus_session_events_registration_management')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\CursusRegistrationController::sessionEventsRegistrationManagementAction',));
                    }

                }

                if (0 === strpos($pathinfo, '/clarolinecursusbundle/a')) {
                    if (0 === strpos($pathinfo, '/clarolinecursusbundle/api')) {
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/users')) {
                            // api_add_user_to_cursus
                            if (preg_match('#^/clarolinecursusbundle/api/users/(?P<user>[^/]++)/tos/(?P<cursus>[^/]++)/cursus/add(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_api_add_user_to_cursus;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_add_user_to_cursus')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::addUserToCursusAction',  '_format' => 'json',));
                            }
                            not_api_add_user_to_cursus:

                            // api_remove_user_from_cursus
                            if (preg_match('#^/clarolinecursusbundle/api/users/(?P<user>[^/]++)/froms/(?P<cursus>[^/]++)/cursus/remove(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_api_remove_user_from_cursus;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_remove_user_from_cursus')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::removeUserFromCursusAction',  '_format' => 'json',));
                            }
                            not_api_remove_user_from_cursus:

                            // api_add_user_to_session
                            if (preg_match('#^/clarolinecursusbundle/api/users/(?P<user>[^/]++)/tos/(?P<session>[^/]++)/sessions/(?P<type>[^/]++)/add(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'PATCH') {
                                    $allow[] = 'PATCH';
                                    goto not_api_add_user_to_session;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_add_user_to_session')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::addUserToSessionAction',  '_format' => 'json',));
                            }
                            not_api_add_user_to_session:

                            // api_remove_user_from_session
                            if (preg_match('#^/clarolinecursusbundle/api/users/(?P<sessionUser>[^/]++)/from/session/remove(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_api_remove_user_from_session;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_remove_user_from_session')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::removeUserFromSessionAction',  '_format' => 'json',));
                            }
                            not_api_remove_user_from_session:

                            // api_add_user_to_cursus_hierarchy
                            if (preg_match('#^/clarolinecursusbundle/api/users/(?P<user>[^/]++)/tos/(?P<cursus>[^/]++)/cursus/hierarchy/add(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_api_add_user_to_cursus_hierarchy;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_add_user_to_cursus_hierarchy')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::addUserToCursusHierarchyAction',  '_format' => 'json',));
                            }
                            not_api_add_user_to_cursus_hierarchy:

                        }

                        // api_get_all_root_cursus
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/all/root/cursus') && preg_match('#^/clarolinecursusbundle/api/all/root/cursus(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_all_root_cursus;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_all_root_cursus')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getAllRootCursusAction',  '_format' => 'json',));
                        }
                        not_api_get_all_root_cursus:

                        // api_get_root_cursus
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/root/cursus') && preg_match('#^/clarolinecursusbundle/api/root/cursus(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_root_cursus;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_root_cursus')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getRootCursusAction',  '_format' => 'json',));
                        }
                        not_api_get_root_cursus:

                        // api_get_one_cursus
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/ones') && preg_match('#^/clarolinecursusbundle/api/ones/(?P<cursus>[^/]++)/cursus(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_one_cursus;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_one_cursus')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getOneCursusAction',  '_format' => 'json',));
                        }
                        not_api_get_one_cursus:

                        // api_get_datas_for_cursus_registration
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/datas') && preg_match('#^/clarolinecursusbundle/api/datas/(?P<cursus>[^/]++)/for/cursus/registration(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_datas_for_cursus_registration;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_datas_for_cursus_registration')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getDatasForCursusRegistrationAction',  '_format' => 'json',));
                        }
                        not_api_get_datas_for_cursus_registration:

                        // api_get_cursus_users_for_cursus_registration
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/cursuses') && preg_match('#^/clarolinecursusbundle/api/cursuses/(?P<cursus>[^/]++)/users/for/cursus/registration(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_cursus_users_for_cursus_registration;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_cursus_users_for_cursus_registration')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getCursusUsersForCursusRegistrationAction',  '_format' => 'json',));
                        }
                        not_api_get_cursus_users_for_cursus_registration:

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/datas')) {
                            // api_get_datas_for_searched_cursus_registration
                            if (preg_match('#^/clarolinecursusbundle/api/datas/(?P<search>[^/]++)/for/searched/cursus/registration(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_api_get_datas_for_searched_cursus_registration;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_datas_for_searched_cursus_registration')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getDatasForSearchedCursusRegistrationAction',  '_format' => 'json',));
                            }
                            not_api_get_datas_for_searched_cursus_registration:

                            // api_get_datas_for_cursus_hierarchy
                            if (preg_match('#^/clarolinecursusbundle/api/datas/(?P<cursus>[^/]++)/for/cursus/hierarchy(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_api_get_datas_for_cursus_hierarchy;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_datas_for_cursus_hierarchy')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getDatasForCursusHierarchyAction',  '_format' => 'json',));
                            }
                            not_api_get_datas_for_cursus_hierarchy:

                        }

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/cursuses')) {
                            // api_delete_cursus_group
                            if (preg_match('#^/clarolinecursusbundle/api/cursuses/(?P<cursusGroup>[^/]++)/group(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'DELETE') {
                                    $allow[] = 'DELETE';
                                    goto not_api_delete_cursus_group;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_cursus_group')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::deleteCursusGroupAction',  '_format' => 'json',));
                            }
                            not_api_delete_cursus_group:

                            // api_delete_cursus_groups
                            if (preg_match('#^/clarolinecursusbundle/api/cursuses/(?P<cursusGroupsIdsTxt>[^/]++)/groups(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'DELETE') {
                                    $allow[] = 'DELETE';
                                    goto not_api_delete_cursus_groups;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_cursus_groups')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::deleteCursusGroupsAction',  '_format' => 'json',));
                            }
                            not_api_delete_cursus_groups:

                            // api_delete_cursus_user
                            if (preg_match('#^/clarolinecursusbundle/api/cursuses/(?P<cursusUser>[^/]++)/user(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'DELETE') {
                                    $allow[] = 'DELETE';
                                    goto not_api_delete_cursus_user;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_cursus_user')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::deleteCursusUserAction',  '_format' => 'json',));
                            }
                            not_api_delete_cursus_user:

                            // api_delete_cursus_users
                            if (preg_match('#^/clarolinecursusbundle/api/cursuses/(?P<cursus>[^/]++)/users/(?P<usersIdsTxt>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'DELETE') {
                                    $allow[] = 'DELETE';
                                    goto not_api_delete_cursus_users;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_cursus_users')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::deleteCursusUsersAction',  '_format' => 'json',));
                            }
                            not_api_delete_cursus_users:

                        }

                        // api_get_unregistered_cursus_groups
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/unregistereds') && preg_match('#^/clarolinecursusbundle/api/unregistereds/(?P<cursus>[^/]++)/cursus/groups(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_unregistered_cursus_groups;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_unregistered_cursus_groups')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getUnregisteredCursusGroupsAction',  '_format' => 'json',));
                        }
                        not_api_get_unregistered_cursus_groups:

                        // api_get_searched_unregistered_cursus_groups
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/searcheds') && preg_match('#^/clarolinecursusbundle/api/searcheds/(?P<cursus>[^/]++)/unregistereds/(?P<search>[^/]++)/cursus/groups(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_searched_unregistered_cursus_groups;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_searched_unregistered_cursus_groups')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getSearchedUnregisteredCursusGroupsAction',  '_format' => 'json',));
                        }
                        not_api_get_searched_unregistered_cursus_groups:

                        // api_get_unregistered_cursus_users
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/unregistereds') && preg_match('#^/clarolinecursusbundle/api/unregistereds/(?P<cursus>[^/]++)/cursus/users(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_unregistered_cursus_users;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_unregistered_cursus_users')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getUnregisteredCursusUsersAction',  '_format' => 'json',));
                        }
                        not_api_get_unregistered_cursus_users:

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/se')) {
                            // api_get_searched_unregistered_cursus_users
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/searcheds') && preg_match('#^/clarolinecursusbundle/api/searcheds/(?P<cursus>[^/]++)/unregistereds/(?P<search>[^/]++)/cursus/users(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_api_get_searched_unregistered_cursus_users;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_searched_unregistered_cursus_users')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getSearchedUnregisteredCursusUsersAction',  '_format' => 'json',));
                            }
                            not_api_get_searched_unregistered_cursus_users:

                            // api_get_sessions_for_cursus_list
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/sessions') && preg_match('#^/clarolinecursusbundle/api/sessions/(?P<cursusIdsTxt>[^/]++)/for/cursus/list(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_api_get_sessions_for_cursus_list;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_sessions_for_cursus_list')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getSessionsForCursusListAction',  '_format' => 'json',));
                            }
                            not_api_get_sessions_for_cursus_list:

                        }

                        // api_post_group_register_to_multiple_cursus
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/groups') && preg_match('#^/clarolinecursusbundle/api/groups/(?P<group>[^/]++)/registers/(?P<cursusIdsTxt>[^/]++)/tos/(?P<sessionsIdsTxt>[^/]++)/multiples/cursuses(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_api_post_group_register_to_multiple_cursus;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_group_register_to_multiple_cursus')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::postGroupRegisterToMultipleCursusAction',  '_format' => 'json',));
                        }
                        not_api_post_group_register_to_multiple_cursus:

                        // api_post_users_register_to_multiple_cursus
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/users') && preg_match('#^/clarolinecursusbundle/api/users/(?P<usersIdsTxt>[^/]++)/registers/(?P<cursusIdsTxt>[^/]++)/tos/(?P<sessionsIdsTxt>[^/]++)/multiples/cursuses(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_api_post_users_register_to_multiple_cursus;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_users_register_to_multiple_cursus')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::postUsersRegisterToMultipleCursusAction',  '_format' => 'json',));
                        }
                        not_api_post_users_register_to_multiple_cursus:

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/registration')) {
                            // api_get_registration_queues_datas
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/registration/queues/datas') && preg_match('#^/clarolinecursusbundle/api/registration/queues/datas(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_api_get_registration_queues_datas;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_registration_queues_datas')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getRegistrationQueuesDatasAction',  '_format' => 'json',));
                            }
                            not_api_get_registration_queues_datas:

                            // api_get_registration_queues_datas_by_search
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/registrations') && preg_match('#^/clarolinecursusbundle/api/registrations/(?P<search>[^/]++)/queues/datas/by/search(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_api_get_registration_queues_datas_by_search;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_registration_queues_datas_by_search')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getRegistrationQueuesDatasBySearchAction',  '_format' => 'json',));
                            }
                            not_api_get_registration_queues_datas_by_search:

                        }

                        // api_put_course_queue_validate
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/courses') && preg_match('#^/clarolinecursusbundle/api/courses/(?P<queue>[^/]++)/queue/validate(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_api_put_course_queue_validate;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_course_queue_validate')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::putCourseQueueValidateAction',  '_format' => 'json',));
                        }
                        not_api_put_course_queue_validate:

                        // api_put_session_queue_validate
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/sessions') && preg_match('#^/clarolinecursusbundle/api/sessions/(?P<queue>[^/]++)/queue/validate(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_api_put_session_queue_validate;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_session_queue_validate')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::putSessionQueueValidateAction',  '_format' => 'json',));
                        }
                        not_api_put_session_queue_validate:

                        // api_delete_course_queue
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/courses') && preg_match('#^/clarolinecursusbundle/api/courses/(?P<queue>[^/]++)/queue(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'DELETE') {
                                $allow[] = 'DELETE';
                                goto not_api_delete_course_queue;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_course_queue')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::deleteCourseQueueAction',  '_format' => 'json',));
                        }
                        not_api_delete_course_queue:

                        // api_delete_session_queue
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/sessions') && preg_match('#^/clarolinecursusbundle/api/sessions/(?P<queue>[^/]++)/queue(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'DELETE') {
                                $allow[] = 'DELETE';
                                goto not_api_delete_session_queue;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_session_queue')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::deleteSessionQueueAction',  '_format' => 'json',));
                        }
                        not_api_delete_session_queue:

                        // api_get_available_sessions_by_course
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/availables') && preg_match('#^/clarolinecursusbundle/api/availables/(?P<course>[^/]++)/sessions/by/course(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_available_sessions_by_course;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_available_sessions_by_course')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getAvailableSessionsByCourseAction',  '_format' => 'json',));
                        }
                        not_api_get_available_sessions_by_course:

                        // api_post_course_queued_user_transfer
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/courses') && preg_match('#^/clarolinecursusbundle/api/courses/(?P<queue>[^/]++)/queueds/(?P<session>[^/]++)/users/transfers(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_api_post_course_queued_user_transfer;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_course_queued_user_transfer')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::postCourseQueuedUserTransferAction',  '_format' => 'json',));
                        }
                        not_api_post_course_queued_user_transfer:

                        // api_get_all_courses
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/all/courses') && preg_match('#^/clarolinecursusbundle/api/all/courses(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_all_courses;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_all_courses')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getAllCoursesAction',  '_format' => 'json',));
                        }
                        not_api_get_all_courses:

                        // api_get_all_unmapped_courses
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/cursus') && preg_match('#^/clarolinecursusbundle/api/cursus/(?P<cursus>[^/]++)/all/unmapped/courses(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_all_unmapped_courses;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_all_unmapped_courses')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getAllUnmappedCoursesAction',  '_format' => 'json',));
                        }
                        not_api_get_all_unmapped_courses:

                        // api_get_sessions
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/sessions/all') && preg_match('#^/clarolinecursusbundle/api/sessions/all(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_sessions;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_sessions')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getSessionsAction',  '_format' => 'json',));
                        }
                        not_api_get_sessions:

                        // api_get_sessions_by_course
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/course') && preg_match('#^/clarolinecursusbundle/api/course/(?P<course>[^/]++)/sessions(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_sessions_by_course;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_sessions_by_course')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getSessionsByCourseAction',  '_format' => 'json',));
                        }
                        not_api_get_sessions_by_course:

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/session')) {
                            // api_get_workspace_id_from_session
                            if (preg_match('#^/clarolinecursusbundle/api/session/(?P<session>[^/]++)/workspace/id(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_api_get_workspace_id_from_session;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_workspace_id_from_session')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getWorkspaceIdFromSessionAction',  '_format' => 'json',));
                            }
                            not_api_get_workspace_id_from_session:

                            // api_get_session_events_by_session
                            if (preg_match('#^/clarolinecursusbundle/api/session/(?P<session>[^/]++)/events(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_api_get_session_events_by_session;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_session_events_by_session')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getSessionEventsBySessionAction',  '_format' => 'json',));
                            }
                            not_api_get_session_events_by_session:

                        }

                        // api_get_courses_profile_tab_option
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/courses/profile/tab/option') && preg_match('#^/clarolinecursusbundle/api/courses/profile/tab/option(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_courses_profile_tab_option;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_courses_profile_tab_option')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getCoursesProfileTabOptionAction',  '_format' => 'json',));
                        }
                        not_api_get_courses_profile_tab_option:

                        // api_get_closed_sessions_by_leaner
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/user') && preg_match('#^/clarolinecursusbundle/api/user/(?P<user>[^/]++)/closed/sessions(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_closed_sessions_by_leaner;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_closed_sessions_by_leaner')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getClosedSessionsByLeanerAction',  '_format' => 'json',));
                        }
                        not_api_get_closed_sessions_by_leaner:

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/all/cursus')) {
                            // api_get_all_cursus
                            if (preg_match('#^/clarolinecursusbundle/api/all/cursus(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_api_get_all_cursus;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_all_cursus')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getAllCursusAction',  '_format' => 'json',));
                            }
                            not_api_get_all_cursus:

                            // api_get_all_cursus_hierarchy
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/all/cursus/hierarchy') && preg_match('#^/clarolinecursusbundle/api/all/cursus/hierarchy(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_api_get_all_cursus_hierarchy;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_all_cursus_hierarchy')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getAllCursusHierarchyAction',  '_format' => 'json',));
                            }
                            not_api_get_all_cursus_hierarchy:

                        }

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/c')) {
                            // api_get_cursus
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/cursuses') && preg_match('#^/clarolinecursusbundle/api/cursuses/(?P<cursus>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_api_get_cursus;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_cursus')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getCursusAction',  '_format' => 'json',));
                            }
                            not_api_get_cursus:

                            // api_get_course
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/course') && preg_match('#^/clarolinecursusbundle/api/course(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_api_get_course;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_course')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\CursusController::getCourseAction',  '_format' => 'json',));
                            }
                            not_api_get_course:

                        }

                    }

                    // claro_cursus_admin_management_index
                    if ($pathinfo === '/clarolinecursusbundle/admin/management/index') {
                        return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::indexAction',  '_route' => 'claro_cursus_admin_management_index',);
                    }

                    if (0 === strpos($pathinfo, '/clarolinecursusbundle/api')) {
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/c')) {
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/cursus')) {
                                // api_post_cursus_creation
                                if ($pathinfo === '/clarolinecursusbundle/api/cursus/create') {
                                    return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postCursusCreationAction',  '_route' => 'api_post_cursus_creation',);
                                }

                                // api_post_cursus_child_creation
                                if (preg_match('#^/clarolinecursusbundle/api/cursus/(?P<parent>[^/]++)/child/create$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_cursus_child_creation')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postCursusChildCreationAction',));
                                }

                                // api_put_cursus_edition
                                if (preg_match('#^/clarolinecursusbundle/api/cursus/(?P<cursus>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_cursus_edition')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::putCursusEditionAction',));
                                }

                                // api_delete_cursus
                                if (preg_match('#^/clarolinecursusbundle/api/cursus/(?P<cursus>[^/]++)/delete$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_cursus')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::deleteCursusAction',));
                                }

                                // api_post_cursus_import
                                if ($pathinfo === '/clarolinecursusbundle/api/cursus/import') {
                                    return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postCursusImportAction',  '_route' => 'api_post_cursus_import',);
                                }

                                // api_post_cursus_course_creation
                                if (preg_match('#^/clarolinecursusbundle/api/cursus/(?P<cursus>[^/]++)/course/create$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_cursus_course_creation')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postCursusCourseCreateAction',));
                                }

                            }

                            // api_post_course_creation
                            if ($pathinfo === '/clarolinecursusbundle/api/course/create') {
                                return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postCourseCreateAction',  '_route' => 'api_post_course_creation',);
                            }

                            // api_post_cursus_course_add
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/cursus') && preg_match('#^/clarolinecursusbundle/api/cursus/(?P<cursus>[^/]++)/course/(?P<course>[^/]++)/add$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_cursus_course_add')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postCursusCourseAddAction',));
                            }

                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/course')) {
                                // api_put_course_edition
                                if (preg_match('#^/clarolinecursusbundle/api/course/(?P<course>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_course_edition')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::putCourseEditionAction',));
                                }

                                // api_delete_course
                                if (preg_match('#^/clarolinecursusbundle/api/course/(?P<course>[^/]++)/delete$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_course')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::deleteCourseAction',));
                                }

                                // api_post_courses_import
                                if ($pathinfo === '/clarolinecursusbundle/api/courses/import') {
                                    return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postCoursesImportAction',  '_route' => 'api_post_courses_import',);
                                }

                                // api_get_course_by_id
                                if (preg_match('#^/clarolinecursusbundle/api/course/(?P<course>[^/]++)/get/by/id$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_course_by_id')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getCourseByIdAction',));
                                }

                            }

                            // api_get_cursus_by_code_without_id
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/cursus/get/by/code') && preg_match('#^/clarolinecursusbundle/api/cursus/get/by/code/(?P<code>[^/]++)/without/id(?:/(?P<id>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_cursus_by_code_without_id')), array (  'id' => 0,  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getCursusByCodeWithoutIdAction',));
                            }

                            // api_get_course_by_code_without_id
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/course/get/by/code') && preg_match('#^/clarolinecursusbundle/api/course/get/by/code/(?P<code>[^/]++)/without/id(?:/(?P<id>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_course_by_code_without_id')), array (  'id' => 0,  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getCourseByCodeWithoutIdAction',));
                            }

                        }

                        // api_get_session_by_id
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/session') && preg_match('#^/clarolinecursusbundle/api/session/(?P<session>[^/]++)/get/by/id$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_session_by_id')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getSessionByIdAction',));
                        }

                        // api_post_session_creation
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/course') && preg_match('#^/clarolinecursusbundle/api/course/(?P<course>[^/]++)/session/create$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_session_creation')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postSessionCreateAction',));
                        }

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/session')) {
                            // api_put_session_edition
                            if (preg_match('#^/clarolinecursusbundle/api/session/(?P<session>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_session_edition')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::putSessionEditionAction',));
                            }

                            // api_delete_session
                            if (preg_match('#^/clarolinecursusbundle/api/session/(?P<session>[^/]++)/mode/(?P<mode>[^/]++)/delete$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_session')), array (  'mode' => 0,  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::deleteSessionAction',));
                            }

                        }

                        // api_put_session_default_reset
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/course') && preg_match('#^/clarolinecursusbundle/api/course/(?P<course>[^/]++)/session/(?P<session>[^/]++)/default/reset$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_session_default_reset')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::resetSessionsDefaultAction',));
                        }

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/session')) {
                            // api_get_session_event_by_id
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/session/event') && preg_match('#^/clarolinecursusbundle/api/session/event/(?P<sessionEvent>[^/]++)/get/by/id$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_session_event_by_id')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getSessionEventByIdAction',));
                            }

                            // api_post_session_event_creation
                            if (preg_match('#^/clarolinecursusbundle/api/session/(?P<session>[^/]++)/event/create$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_session_event_creation')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postSessionEventCreateAction',));
                            }

                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/session/event')) {
                                // api_put_session_event_edition
                                if (preg_match('#^/clarolinecursusbundle/api/session/event/(?P<sessionEvent>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_session_event_edition')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::putSessionEventEditionAction',));
                                }

                                // api_delete_session_event
                                if (preg_match('#^/clarolinecursusbundle/api/session/event/(?P<sessionEvent>[^/]++)/delete$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_session_event')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::deleteSessionEventAction',));
                                }

                            }

                            // api_get_session_users_by_session_and_type
                            if (preg_match('#^/clarolinecursusbundle/api/session/(?P<session>[^/]++)/user/type/(?P<type>[^/]++)$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_session_users_by_session_and_type')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getSessionUsersBySessionAndTypeAction',));
                            }

                            // api_get_session_users_by_session
                            if (preg_match('#^/clarolinecursusbundle/api/session/(?P<session>[^/]++)/users$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_session_users_by_session')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getSessionUsersBySessionAction',));
                            }

                            // api_get_session_groups_by_session
                            if (preg_match('#^/clarolinecursusbundle/api/session/(?P<session>[^/]++)/groups$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_session_groups_by_session')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getSessionGroupsBySessionAction',));
                            }

                            // api_get_session_pending_users_by_session
                            if (preg_match('#^/clarolinecursusbundle/api/session/(?P<session>[^/]++)/pending/users$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_session_pending_users_by_session')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getSessionPendingUsersBySessionAction',));
                            }

                            // api_delete_session_user
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/session/user') && preg_match('#^/clarolinecursusbundle/api/session/user/(?P<sessionUser>[^/]++)/delete$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_session_user')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::deleteSessionUserAction',));
                            }

                            // api_delete_session_group
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/session/group') && preg_match('#^/clarolinecursusbundle/api/session/group/(?P<sessionGroup>[^/]++)/delete$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_session_group')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::deleteSessionGroupAction',));
                            }

                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/session/registration/queue')) {
                                // api_accept_session_registration_queue
                                if (preg_match('#^/clarolinecursusbundle/api/session/registration/queue/(?P<queue>[^/]++)/accept$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_accept_session_registration_queue')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::acceptSessionRegistrationQueueAction',));
                                }

                                // api_delete_session_registration_queue
                                if (preg_match('#^/clarolinecursusbundle/api/session/registration/queue/(?P<queue>[^/]++)/delete$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_session_registration_queue')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::deleteSessionRegistrationQueueAction',));
                                }

                            }

                            // api_get_session_unregistered_users
                            if (preg_match('#^/clarolinecursusbundle/api/session/(?P<session>[^/]++)/unregistered/users/type(?:/(?P<userType>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_session_unregistered_users')), array (  'userType' => 0,  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getSessionUnregisteredUsersAction',));
                            }

                            // api_get_session_unregistered_groups
                            if (preg_match('#^/clarolinecursusbundle/api/session/(?P<session>[^/]++)/unregistered/groups/type(?:/(?P<groupType>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_session_unregistered_groups')), array (  'groupType' => 0,  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getSessionUnregisteredGroupsAction',));
                            }

                            // api_post_session_user_registration
                            if (preg_match('#^/clarolinecursusbundle/api/session/(?P<session>[^/]++)/user/(?P<user>[^/]++)/type/(?P<userType>[^/]++)/register$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_session_user_registration')), array (  'userType' => 0,  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postSessionUserRegisterAction',));
                            }

                            // api_post_session_group_registration
                            if (preg_match('#^/clarolinecursusbundle/api/session/(?P<session>[^/]++)/group/(?P<group>[^/]++)/type/(?P<groupType>[^/]++)/register$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_session_group_registration')), array (  'groupType' => 0,  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postSessionGroupRegisterAction',));
                            }

                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/session/event')) {
                                // api_get_session_event_unregistered_users
                                if (preg_match('#^/clarolinecursusbundle/api/session/event/(?P<sessionEvent>[^/]++)/unregistered/users$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_session_event_unregistered_users')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getSessionEventUnregisteredUsersAction',));
                                }

                                // api_post_session_event_user_registration
                                if (preg_match('#^/clarolinecursusbundle/api/session/event/(?P<sessionEvent>[^/]++)/user/(?P<user>[^/]++)/register$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_session_event_user_registration')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postSessionEventUserRegisterAction',));
                                }

                                // api_get_session_event_users_by_session_event
                                if (preg_match('#^/clarolinecursusbundle/api/session/event/(?P<sessionEvent>[^/]++)/users$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_session_event_users_by_session_event')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getSessionEventUsersBySessionEventAction',));
                                }

                                // api_delete_session_event_user
                                if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/session/event/user') && preg_match('#^/clarolinecursusbundle/api/session/event/user/(?P<sessionEventUser>[^/]++)/delete$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_session_event_user')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::deleteSessionEventUserAction',));
                                }

                            }

                        }

                        // api_get_validators_roles
                        if ($pathinfo === '/clarolinecursusbundle/api/validators/roles') {
                            return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getValidatorsRolesAction',  '_route' => 'api_get_validators_roles',);
                        }

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/worskpace')) {
                            // api_get_workspaces
                            if ($pathinfo === '/clarolinecursusbundle/api/worskpaces') {
                                return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getWorkspacesAction',  '_route' => 'api_get_workspaces',);
                            }

                            // api_get_workspace_models
                            if ($pathinfo === '/clarolinecursusbundle/api/worskpace/models') {
                                return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getWorkspaceModelsAction',  '_route' => 'api_get_workspace_models',);
                            }

                        }

                        // api_get_cursus_locations
                        if ($pathinfo === '/clarolinecursusbundle/api/cursus/locations') {
                            return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getLocationsAction',  '_route' => 'api_get_cursus_locations',);
                        }

                        // api_get_reservation_resources
                        if ($pathinfo === '/clarolinecursusbundle/api/reservation/resources') {
                            return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getReservationResourcesAction',  '_route' => 'api_get_reservation_resources',);
                        }

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/cursus')) {
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/cursus/reservation/resource')) {
                                // api_get_cursus_reservation_resources
                                if ($pathinfo === '/clarolinecursusbundle/api/cursus/reservation/resources') {
                                    return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getCursusReservationResourcesAction',  '_route' => 'api_get_cursus_reservation_resources',);
                                }

                                // api_post_cursus_reservation_resources_tag
                                if (preg_match('#^/clarolinecursusbundle/api/cursus/reservation/resource/(?P<resource>[^/]++)/tag/create$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_cursus_reservation_resources_tag')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postReservationResourceTagAction',));
                                }

                                // api_delete_cursus_reservation_resources_tag
                                if (preg_match('#^/clarolinecursusbundle/api/cursus/reservation/resource/(?P<resource>[^/]++)/tag/delete$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_cursus_reservation_resources_tag')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::deleteReservationResourceTagAction',));
                                }

                            }

                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/cursus/general/parameters/re')) {
                                // api_get_cursus_general_parameters
                                if ($pathinfo === '/clarolinecursusbundle/api/cursus/general/parameters/retrieve') {
                                    return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getGeneralParametersAction',  '_route' => 'api_get_cursus_general_parameters',);
                                }

                                // api_post_cursus_general_parameters
                                if ($pathinfo === '/clarolinecursusbundle/api/cursus/general/parameters/register') {
                                    return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postGeneralParametersAction',  '_route' => 'api_post_cursus_general_parameters',);
                                }

                            }

                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/cursus/document/model')) {
                                // api_get_cursus_document_models
                                if ($pathinfo === '/clarolinecursusbundle/api/cursus/document/models/retrieve') {
                                    return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getDocumentModelsAction',  '_route' => 'api_get_cursus_document_models',);
                                }

                                // api_get_cursus_document_model
                                if (preg_match('#^/clarolinecursusbundle/api/cursus/document/model/(?P<documentModel>[^/]++)/retrieve$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_cursus_document_model')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getDocumentModelAction',));
                                }

                                // api_post_cursus_document_model_creation
                                if ($pathinfo === '/clarolinecursusbundle/api/cursus/document/model/create') {
                                    return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postDocumentModelCreateAction',  '_route' => 'api_post_cursus_document_model_creation',);
                                }

                                // api_put_cursus_document_model_edition
                                if (preg_match('#^/clarolinecursusbundle/api/cursus/document/model/(?P<documentModel>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_cursus_document_model_edition')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::putDocumentModelEditAction',));
                                }

                                // api_delete_cursus_document_model
                                if (preg_match('#^/clarolinecursusbundle/api/cursus/document/model/(?P<documentModel>[^/]++)/delete$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_cursus_document_model')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::deleteDocumentModelAction',));
                                }

                                // api_get_cursus_document_models_by_type
                                if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/cursus/document/models/type') && preg_match('#^/clarolinecursusbundle/api/cursus/document/models/type/(?P<type>[^/]++)/retrieve$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_cursus_document_models_by_type')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getDocumentModelsByTypeAction',));
                                }

                            }

                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/cursus/populated/document/models/type')) {
                                // api_get_cursus_populated_document_models_by_type
                                if (preg_match('#^/clarolinecursusbundle/api/cursus/populated/document/models/type/(?P<type>[^/]++)/source/(?P<sourceId>[^/]++)/retrieve$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_cursus_populated_document_models_by_type')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getPopulatedDocumentModelsByTypeAction',));
                                }

                                // api_get_cursus_populated_document_models_by_type_for_user
                                if (preg_match('#^/clarolinecursusbundle/api/cursus/populated/document/models/type/(?P<type>[^/]++)/source/(?P<sourceId>[^/]++)/for/user/(?P<user>[^/]++)/retrieve$#s', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_cursus_populated_document_models_by_type_for_user')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::getPopulatedDocumentModelsByTypeForUserAction',));
                                }

                            }

                        }

                        // api_post_session_event_repeat
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/session/event') && preg_match('#^/clarolinecursusbundle/api/session/event/(?P<sessionEvent>[^/]++)/repeat$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_session_event_repeat')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postSessionEventRepeatAction',));
                        }

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/cursus/location')) {
                            // api_post_cursus_location_creation
                            if ($pathinfo === '/clarolinecursusbundle/api/cursus/location/create') {
                                return array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postLocationCreateAction',  '_route' => 'api_post_cursus_location_creation',);
                            }

                            // api_put_cursus_location_edition
                            if (preg_match('#^/clarolinecursusbundle/api/cursus/location/(?P<location>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_cursus_location_edition')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::putLocationEditAction',));
                            }

                            // api_delete_cursus_location
                            if (preg_match('#^/clarolinecursusbundle/api/cursus/location/(?P<location>[^/]++)/delete$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_cursus_location')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::deleteLocationAction',));
                            }

                        }

                        // api_post_session_message_send
                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/session') && preg_match('#^/clarolinecursusbundle/api/session/(?P<session>[^/]++)/message/send$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_session_message_send')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postSessionMessageSendAction',));
                        }

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/cursus/document/model')) {
                            // api_post_cursus_document_send
                            if (preg_match('#^/clarolinecursusbundle/api/cursus/document/model/(?P<documentModel>[^/]++)/source/(?P<sourceId>[^/]++)/send$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_cursus_document_send')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postDocumentSendAction',));
                            }

                            // api_post_cursus_document_for_user_send
                            if (preg_match('#^/clarolinecursusbundle/api/cursus/document/model/(?P<documentModel>[^/]++)/source/(?P<sourceId>[^/]++)/for/user/(?P<user>[^/]++)/send$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_cursus_document_for_user_send')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::postDocumentForUserSendAction',));
                            }

                        }

                        if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/session')) {
                            // api_get_session_users_csv_export
                            if (preg_match('#^/clarolinecursusbundle/api/session/(?P<session>[^/]++)/users/type/(?P<type>[^/]++)/csv/export$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_session_users_csv_export')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::exportCsvSessionUsersAction',));
                            }

                            // api_get_session_event_users_csv_export
                            if (0 === strpos($pathinfo, '/clarolinecursusbundle/api/session/event') && preg_match('#^/clarolinecursusbundle/api/session/event/(?P<sessionEvent>[^/]++)/users/type/(?P<type>[^/]++)/csv/export$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_session_event_users_csv_export')), array (  '_controller' => 'Claroline\\CursusBundle\\Controller\\API\\AdminManagementController::exportCsvSessionEventUsersAction',));
                            }

                        }

                    }

                }

            }

        }

        if (0 === strpos($pathinfo, '/team')) {
            if (0 === strpos($pathinfo, '/team/workspace')) {
                // claro_team_index
                if (preg_match('#^/team/workspace/(?P<workspace>[^/]++)/team/index$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_index')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::indexAction',));
                }

                // claro_team_manager_menu
                if (preg_match('#^/team/workspace/(?P<workspace>[^/]++)/team/manager/menu/ordered/by/(?P<orderedBy>[^/]++)/order(?:/(?P<order>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_manager_menu')), array (  'orderedBy' => 'name',  'order' => 'ASC',  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::managerMenuAction',));
                }

                // claro_team_user_menu
                if (preg_match('#^/team/workspace/(?P<workspace>[^/]++)/team/user/menu/ordered/by/(?P<orderedBy>[^/]++)/order(?:/(?P<order>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_user_menu')), array (  'orderedBy' => 'name',  'order' => 'ASC',  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::userMenuAction',));
                }

                // claro_team_create_form
                if (preg_match('#^/team/workspace/(?P<workspace>[^/]++)/team/create/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_create_form')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::teamCreateFormAction',));
                }

                // claro_team_create
                if (preg_match('#^/team/workspace/(?P<workspace>[^/]++)/team/create$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_create')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::teamCreateAction',));
                }

            }

            if (0 === strpos($pathinfo, '/team/team')) {
                // claro_team_edit_form
                if (preg_match('#^/team/team/(?P<team>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_edit_form')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::teamEditFormAction',));
                }

                // claro_team_edit
                if (preg_match('#^/team/team/(?P<team>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_edit')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::teamEditAction',));
                }

                // claro_team_delete
                if (preg_match('#^/team/team/(?P<team>[^/]++)/delete(?:/(?P<withDirectory>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_delete')), array (  'withDirectory' => 0,  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::teamDeleteAction',));
                }

            }

            if (0 === strpos($pathinfo, '/team/workspace')) {
                // claro_team_multiple_create_form
                if (preg_match('#^/team/workspace/(?P<workspace>[^/]++)/multiple/teams/create/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_multiple_create_form')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::multipleTeamsCreateFormAction',));
                }

                // claro_team_multiple_create
                if (preg_match('#^/team/workspace/(?P<workspace>[^/]++)/multiple/teams/create$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_multiple_create')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::multipleTeamCreateAction',));
                }

            }

            if (0 === strpos($pathinfo, '/team/team')) {
                // claro_team_manager_register_user
                if (preg_match('#^/team/team/(?P<team>[^/]++)/user/(?P<user>[^/]++)/register$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_manager_register_user')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::managerRegisterUserToTeamAction',));
                }

                // claro_team_manager_unregister_user
                if (preg_match('#^/team/team/(?P<team>[^/]++)/user/(?P<user>[^/]++)/unregister$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_manager_unregister_user')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::managerUnregisterUserFromTeamAction',));
                }

                // claro_team_manager_register_users
                if (preg_match('#^/team/team/(?P<team>[^/]++)/users/register$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_manager_register_users')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::managerRegisterUsersToTeamAction',));
                }

                // claro_team_manager_unregister_users
                if (preg_match('#^/team/team/(?P<team>[^/]++)/users/unregister$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_manager_unregister_users')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::managerUnregisterUsersFromTeamAction',));
                }

            }

            if (0 === strpos($pathinfo, '/team/workspace')) {
                // claro_team_manager_delete_teams
                if (preg_match('#^/team/workspace/(?P<workspace>[^/]++)/teams/delete(?:/(?P<withDirectory>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_manager_delete_teams')), array (  'withDirectory' => 0,  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::managerDeleteTeamsAction',));
                }

                // claro_team_manager_empty_teams
                if (preg_match('#^/team/workspace/(?P<workspace>[^/]++)/teams/empty$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_manager_empty_teams')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::managerEmtyTeamsAction',));
                }

                // claro_team_manager_fill_teams
                if (preg_match('#^/team/workspace/(?P<workspace>[^/]++)/teams/fill$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_manager_fill_teams')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::managerFillTeamsAction',));
                }

            }

            if (0 === strpos($pathinfo, '/team/team')) {
                // claro_team_self_register_user
                if (preg_match('#^/team/team/(?P<team>[^/]++)/self/register/user$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_self_register_user')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::selfRegisterUserToTeamAction',));
                }

                // claro_team_self_unregister_user
                if (preg_match('#^/team/team/(?P<team>[^/]++)/self/unregister/user$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_self_unregister_user')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::selfUnregisterUserToTeamAction',));
                }

            }

            if (0 === strpos($pathinfo, '/team/workspace/team/parameters')) {
                // claro_team_parameters_edit_form
                if (preg_match('#^/team/workspace/team/parameters/(?P<params>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_parameters_edit_form')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::teamParamsEditFormAction',));
                }

                // claro_team_parameters_edit
                if (preg_match('#^/team/workspace/team/parameters/(?P<params>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_parameters_edit')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::teamParamsEditAction',));
                }

            }

            if (0 === strpos($pathinfo, '/team/team')) {
                // claro_team_registration_users_list
                if (preg_match('#^/team/team/(?P<team>[^/]++)/registration/users/list/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_registration_users_list')), array (  'page' => 1,  'search' => '',  'max' => 50,  'orderedBy' => 'firstName',  'order' => 'ASC',  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::registrationUserslistAction',));
                }

                // claro_team_registration_unregistered_users_list
                if (preg_match('#^/team/team/(?P<team>[^/]++)/registration/unregistered/users/list/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_registration_unregistered_users_list')), array (  'page' => 1,  'search' => '',  'max' => 50,  'orderedBy' => 'firstName',  'order' => 'ASC',  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::registrationUnregisteredUserslistAction',));
                }

                // claro_team_users_list
                if (preg_match('#^/team/team/(?P<team>[^/]++)/users/list$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_users_list')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::teamUserslistAction',));
                }

                // claro_team_display_description
                if (preg_match('#^/team/team/(?P<team>[^/]++)/description/display$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_display_description')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::teamDescriptionDisplayAction',));
                }

                // claro_team_manager_team_index
                if (preg_match('#^/team/team/(?P<team>[^/]++)/manager/index$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_manager_team_index')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::managerTeamIndexAction',));
                }

                // claro_team_user_team_index
                if (preg_match('#^/team/team/(?P<team>[^/]++)/user/index$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_user_team_index')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::userTeamIndexAction',));
                }

                // claro_team_manager_register_manager
                if (preg_match('#^/team/team/(?P<team>[^/]++)/user/(?P<user>[^/]++)/register/manager$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_manager_register_manager')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::managerRegisterManagerToTeamAction',));
                }

                // claro_team_manager_unregister_manager
                if (preg_match('#^/team/team/(?P<team>[^/]++)/unregister/manager$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_team_manager_unregister_manager')), array (  '_controller' => 'Claroline\\TeamBundle\\Controller\\TeamController::managerUnregisterManagerFromTeamAction',));
                }

            }

        }

        // claro_pdf_download
        if (0 === strpos($pathinfo, '/clarolinepdfgeneratorbundle/download') && preg_match('#^/clarolinepdfgeneratorbundle/download/(?P<pdf>[^/]++)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_pdf_download')), array (  '_controller' => 'Claroline\\PdfGeneratorBundle\\Controller\\PdfController::download',));
        }

        if (0 === strpos($pathinfo, '/presence')) {
            if (0 === strpos($pathinfo, '/presence/admin/presence')) {
                // formalibre_presence_admin_tool_index
                if ($pathinfo === '/presence/admin/presence/tool/index') {
                    return array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\AdminPresenceController::adminToolIndexAction',  '_route' => 'formalibre_presence_admin_tool_index',);
                }

                // formalibre_presence_admin_add_school_year
                if ($pathinfo === '/presence/admin/presence/addSchoolYear/index') {
                    return array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\AdminPresenceController::adminAddSchoolYearAction',  '_route' => 'formalibre_presence_admin_add_school_year',);
                }

            }

            if (0 === strpos($pathinfo, '/presence/presence/schoolYear_')) {
                // formalibre_school_year_modif
                if (0 === strpos($pathinfo, '/presence/presence/schoolYear_modif/id') && preg_match('#^/presence/presence/schoolYear_modif/id/(?P<theSchoolYear>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_school_year_modif')), array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\AdminPresenceController::SchoolYearModifAction',));
                }

                // formalibre_school_year_supprimer
                if (0 === strpos($pathinfo, '/presence/presence/schoolYear_supprimer/theSchoolYear') && preg_match('#^/presence/presence/schoolYear_supprimer/theSchoolYear/(?P<theSchoolYear>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_school_year_supprimer')), array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\AdminPresenceController::SchoolYearSupprimerAction',));
                }

            }

            if (0 === strpos($pathinfo, '/presence/admin')) {
                if (0 === strpos($pathinfo, '/presence/admin/p')) {
                    if (0 === strpos($pathinfo, '/presence/admin/presence')) {
                        // formalibre_presence_admin_right
                        if (0 === strpos($pathinfo, '/presence/admin/presence/right/right') && preg_match('#^/presence/admin/presence/right/right/(?P<right>[^/]++)/rightValue/(?P<rightValue>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_presence_admin_right')), array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\AdminPresenceController::adminRightAction',));
                        }

                        // formalibre_presence_horaire
                        if ($pathinfo === '/presence/admin/presence/horaire') {
                            return array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\AdminPresenceController::adminHoraireAction',  '_route' => 'formalibre_presence_horaire',);
                        }

                        // formalibre_presence_modifier_horaire
                        if (0 === strpos($pathinfo, '/presence/admin/presence/modifier_horaire/period') && preg_match('#^/presence/admin/presence/modifier_horaire/period/(?P<period>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_presence_modifier_horaire')), array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\AdminPresenceController::adminModifierHoraireAction',));
                        }

                    }

                    // formalibre_period_supprimer
                    if (0 === strpos($pathinfo, '/presence/admin/period_supprimer/period') && preg_match('#^/presence/admin/period_supprimer/period/(?P<period>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_period_supprimer')), array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\AdminPresenceController::adminPeriodSupprimerAction',));
                    }

                }

                // formalibre_admin_listing_roles
                if ($pathinfo === '/presence/admin/listing/roles') {
                    return array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\AdminPresenceController::adminListingRolesAction',  '_route' => 'formalibre_admin_listing_roles',);
                }

            }

            if (0 === strpos($pathinfo, '/presence/presence')) {
                if (0 === strpos($pathinfo, '/presence/presence/status_')) {
                    // formalibre_status_modif
                    if (0 === strpos($pathinfo, '/presence/presence/status_modif/id') && preg_match('#^/presence/presence/status_modif/id/(?P<theStatus>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_status_modif')), array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\AdminPresenceController::StatusModifAction',));
                    }

                    // formalibre_status_supprimer
                    if (0 === strpos($pathinfo, '/presence/presence/status_supprimerf/id') && preg_match('#^/presence/presence/status_supprimerf/id/(?P<theStatus>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_status_supprimer')), array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\AdminPresenceController::StatussupprimerAction',));
                    }

                }

                // formalibre_presence_listingstatusbydefault
                if ($pathinfo === '/presence/presence/listingstatusbydefault') {
                    return array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\AdminPresenceController::ListingStatusByDefaultAction',  '_route' => 'formalibre_presence_listingstatusbydefault',);
                }

                // formalibre_presence_tool_index
                if ($pathinfo === '/presence/presence/tool/index') {
                    return array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\PresenceController::ToolIndexAction',  '_route' => 'formalibre_presence_tool_index',);
                }

                // formalibre_choix_classe
                if (0 === strpos($pathinfo, '/presence/presence/choix_classe/period') && preg_match('#^/presence/presence/choix_classe/period/(?P<period>[^/]++)/date/(?P<date>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_choix_classe')), array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\PresenceController::ChoixClasseAction',));
                }

                // formalibre_presence_releve
                if (0 === strpos($pathinfo, '/presence/presence/releve/period') && preg_match('#^/presence/presence/releve/period/(?P<period>[^/]++)/date/(?P<date>[^/]++)/session/(?P<session>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_presence_releve')), array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\PresenceController::PresenceReleveAction',));
                }

                // formalibre_presence_archives
                if ($pathinfo === '/presence/presence/archives') {
                    return array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\PresenceController::ArchivesAction',  '_route' => 'formalibre_presence_archives',);
                }

                if (0 === strpos($pathinfo, '/presence/presence/presence_')) {
                    // formalibre_presence_modif
                    if (0 === strpos($pathinfo, '/presence/presence/presence_modif/id') && preg_match('#^/presence/presence/presence_modif/id/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_presence_modif')), array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\PresenceController::PresenceModifAction',));
                    }

                    if (0 === strpos($pathinfo, '/presence/presence/presence_supp')) {
                        // formalibre_presence_supp
                        if (0 === strpos($pathinfo, '/presence/presence/presence_supp/id') && preg_match('#^/presence/presence/presence_supp/id/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_presence_supp')), array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\PresenceController::PresenceSuppAction',));
                        }

                        // formalibre_presence_supp_validate
                        if (0 === strpos($pathinfo, '/presence/presence/presence_supp_validate/id') && preg_match('#^/presence/presence/presence_supp_validate/id/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formalibre_presence_supp_validate')), array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\PresenceController::PresenceSuppValidateAction',));
                        }

                    }

                }

                if (0 === strpos($pathinfo, '/presence/presence/listingstatus')) {
                    // formalibre_presence_listingstatus
                    if ($pathinfo === '/presence/presence/listingstatus') {
                        return array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\PresenceController::ListingStatusAction',  '_route' => 'formalibre_presence_listingstatus',);
                    }

                    // formalibre_presence_listingstatusbydefaultnoadmin
                    if ($pathinfo === '/presence/presence/listingstatusbydefaultnoadmin') {
                        return array (  '_controller' => 'FormaLibre\\PresenceBundle\\Controller\\PresenceController::ListingStatusByDefaultnoAdminAction',  '_route' => 'formalibre_presence_listingstatusbydefaultnoadmin',);
                    }

                }

            }

        }

        if (0 === strpos($pathinfo, '/video-player/api/video')) {
            // api_post_video_track
            if (preg_match('#^/video\\-player/api/video/(?P<video>[^/]++)/track(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_api_post_video_track;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_video_track')), array (  '_controller' => 'Claroline\\VideoPlayerBundle\\Controller\\API\\VideoController::postTrackAction',  '_format' => 'json',));
            }
            not_api_post_video_track:

            // api_put_video_track
            if (0 === strpos($pathinfo, '/video-player/api/video/track') && preg_match('#^/video\\-player/api/video/track/(?P<track>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'PUT') {
                    $allow[] = 'PUT';
                    goto not_api_put_video_track;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_video_track')), array (  '_controller' => 'Claroline\\VideoPlayerBundle\\Controller\\API\\VideoController::putTrackAction',  '_format' => 'json',));
            }
            not_api_put_video_track:

            // api_get_video_tracks
            if (preg_match('#^/video\\-player/api/video/(?P<video>[^/]++)/tracks(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_api_get_video_tracks;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_video_tracks')), array (  '_controller' => 'Claroline\\VideoPlayerBundle\\Controller\\API\\VideoController::getTracksAction',  '_format' => 'json',));
            }
            not_api_get_video_tracks:

            if (0 === strpos($pathinfo, '/video-player/api/video/track')) {
                // api_delete_video_track
                if (preg_match('#^/video\\-player/api/video/track/(?P<track>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_api_delete_video_track;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_delete_video_track')), array (  '_controller' => 'Claroline\\VideoPlayerBundle\\Controller\\API\\VideoController::deleteTrackAction',  '_format' => 'json',));
                }
                not_api_delete_video_track:

                // api_get_video_track_stream
                if (preg_match('#^/video\\-player/api/video/track/(?P<track>[^/]++)/stream(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_api_get_video_track_stream;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_video_track_stream')), array (  '_controller' => 'Claroline\\VideoPlayerBundle\\Controller\\API\\VideoController::streamTrackAction',  '_format' => 'json',));
                }
                not_api_get_video_track_stream:

            }

            // api_get_video_stream
            if (preg_match('#^/video\\-player/api/video/(?P<video>[^/]++)/stream(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_api_get_video_stream;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_video_stream')), array (  '_controller' => 'Claroline\\VideoPlayerBundle\\Controller\\API\\VideoController::streamVideoAction',  '_format' => 'json',));
            }
            not_api_get_video_stream:

        }

        if (0 === strpos($pathinfo, '/innovacollecticielbundle')) {
            // innova_collecticiel_correct
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/correct$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_correct')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::correctAction',));
            }

            // innova_collecticiel_correct_paginated
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/correct(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_correct_paginated')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::correctAction',));
            }

            // innova_collecticiel_correct_comment
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/correct/comment$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_correct_comment')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::correctCommentAction',));
            }

            // innova_collecticiel_drops_detail_correction_standard
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/detail/correction/standard/(?P<state>show|edit)/(?P<correctionId>\\d+)(?:/(?P<backUserId>\\d+))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_detail_correction_standard')), array (  'backUserId' => '-1',  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::dropsDetailCorrectionStandardAction',));
            }

            // innova_collecticiel_drops_detail_comment
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/detail/correction/(?P<state>show|edit|preview)/(?P<correctionId>\\d+)/document/(?P<documentId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_detail_comment')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::dropsDetailCommentAction',));
            }

            // innova_collecticiel_drops_detail_correction_paginated
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/detail/correction/(?P<state>show|edit|preview)/(?P<correctionId>\\d+)/(?P<page>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_detail_correction_paginated')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::dropsDetailCommentAction',));
            }

            // innova_collecticiel_drops_detail_correction_comment
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/detail/correction/comment/(?P<state>show|edit|preview)/(?P<correctionId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_detail_correction_comment')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::dropsDetailCorrectionCommentAction',));
            }

            // innova_collecticiel_drops_detail_add_comments_innova
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/detail/(?P<dropId>\\d+)/add/comments/document/(?P<documentId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_detail_add_comments_innova')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::dropsDetailAddCommentsInnovaAction',));
            }

            // innova_collecticiel_drops_detail_delete_correction
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/delete/correction/(?P<correctionId>\\d+)(?:/(?P<backPage>[^/]++))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_detail_delete_correction')), array (  'backPage' => 'default',  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::deleteCorrectionAction',));
            }

            // innova_collecticiel_revalidateCorrection
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/detail/correction/validation/confirmation/(?P<correctionId>[^/]++)(?:/(?P<value>[^/]++))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_revalidateCorrection')), array (  'page' => 1,  'withDropOnly' => 'all',  'value' => 'yes',  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::RevalidateCorrectionValidationAction',));
            }

            // innova_collecticiel_drops_detail_correction_validation
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/detail/correction/validation/(?P<value>no|yes)/(?P<correctionId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_detail_correction_validation')), array (  'routeParam' => 'default',  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::setCorrectionValidationAction',));
            }

            // innova_collecticiel_drops_detail_correction_validation_by_user
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/detail/correction/validation/byUser/(?P<value>no|yes)/(?P<correctionId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_detail_correction_validation_by_user')), array (  'routeParam' => 'byUser',  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::setCorrectionValidationAction',));
            }

            // innova_collecticiel_drops_detail_invalidate_all_corrections
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/detail/(?P<dropId>\\d+)/invalidate_all$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_detail_invalidate_all_corrections')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::invalidateAllCorrectionsAction',));
            }

            // innova_collecticiel_drops_deny_correction
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/detail/correction/deny/(?P<correctionId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_deny_correction')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::denyCorrectionAction',));
            }

            // innova_collecticiel_recalculate_score
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/recalculate/score/(?P<correctionId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_recalculate_score')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::recalculateScoreAction',));
            }

            // innova_collecticiel_examiner_corrections
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/examiners/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_examiner_corrections')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::correctionsByUserAction',));
            }

            // innova_collecticiel_examiner_corrections_paginated
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/examiners/(?P<userId>\\d+)(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_examiner_corrections_paginated')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::correctionsByUserAction',));
            }

            // innova_collecticiel_examiners
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/examiners(?:/(?P<withDropOnly>(withDropOnly|all|withoutDrops)))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_examiners')), array (  'page' => 1,  'withDropOnly' => 'all',  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::ExaminersByCorrectionMadeAction',));
            }

            // innova_collecticiel_examiners_paginated
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/examiners(?:/(?P<withDropOnly>(withDropOnly|all|withoutDrops))(?:/(?P<page>\\d+))?)?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_examiners_paginated')), array (  'page' => 1,  'withDropOnly' => 'all',  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::ExaminersByCorrectionMadeAction',));
            }

            // innova_collecticiel_recalculate_drop_grade
            if (preg_match('#^/innovacollecticielbundle/(?P<dropId>\\d+)/recalculateDropGrade$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_recalculate_drop_grade')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::recalculateScoreByDropAction',));
            }

            // innova_collecticiel_recalculate_dropzone_grades
            if (preg_match('#^/innovacollecticielbundle/(?P<dropzone>[^/]++)/recalculateDropzoneGrades$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_recalculate_dropzone_grades')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::recalculateScoreByDropzoneAction',));
            }

            // innova_collecticiel_drops_detail_add_correction
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/detail/(?P<dropId>\\d+)/add/correction$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_detail_add_correction')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::dropsDetailAddCorrectionAction',));
            }

            // innova_collecticiel_drops_detail_add_comments
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/detail/correction/(?P<state>show|edit|preview)/(?P<correctionId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_detail_add_comments')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::dropsDetailAddCommentsAction',));
            }

            // innova_collecticiel_drops_detail_correction_paginated_comments
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/detail/correction/(?P<state>show|edit|preview)/(?P<correctionId>\\d+)/(?P<page>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_detail_correction_paginated_comments')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::dropsDetailAddCommentsAction',));
            }

            // innova_collecticiel_add_comment
            if (preg_match('#^/innovacollecticielbundle/(?P<documentId>\\d+)/add/comments/(?P<userId>\\d+)/(?P<dropzoneId>\\d+)/(?P<correctionId>\\d+)$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_innova_collecticiel_add_comment;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_add_comment')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::AddCommentsInnovaAction',));
            }
            not_innova_collecticiel_add_comment:

            if (0 === strpos($pathinfo, '/innovacollecticielbundle/dropzone/comments')) {
                // innova_collecticiel_add_more_comments
                if ($pathinfo === '/innovacollecticielbundle/dropzone/comments') {
                    return array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::ajaxDropzoneAddMoreCommentsAction',  '_route' => 'innova_collecticiel_add_more_comments',);
                }

                // innova_collecticiel_add_more_comments_view
                if ($pathinfo === '/innovacollecticielbundle/dropzone/comments/view') {
                    return array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::dropzoneAddMoreCommentsAction',  '_route' => 'innova_collecticiel_add_more_comments_view',);
                }

            }

            if (0 === strpos($pathinfo, '/innovacollecticielbundle/add')) {
                // innova_collecticiel_add_more_comment
                if ($pathinfo === '/innovacollecticielbundle/add/more/comments') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_innova_collecticiel_add_more_comment;
                    }

                    return array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::addMoreCommentsInnovaAction',  '_route' => 'innova_collecticiel_add_more_comment',);
                }
                not_innova_collecticiel_add_more_comment:

                // innova_collecticiel_add_comment_for_docs
                if (0 === strpos($pathinfo, '/innovacollecticielbundle/add/comments') && preg_match('#^/innovacollecticielbundle/add/comments/(?P<userId>\\d+)/(?P<dropzoneId>\\d+)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_innova_collecticiel_add_comment_for_docs;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_add_comment_for_docs')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CorrectionController::addCommentForDocsInnovaAction',));
                }
                not_innova_collecticiel_add_comment_for_docs:

            }

            // innova_collecticiel_edit_add_criterion
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/edit/addcriterion/(?P<page>\\d+)/criterion/(?P<criterionId>\\d+)/admin/adminInnova\\}/collecticiel/(?P<collecticielOpenOrNot>[0-1])$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_edit_add_criterion')), array (  'criterionId' => 0,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CriterionController::editAddCriterionAction',));
            }

            // innova_collecticiel_edit_create_criterion
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/edit/createcriterion/(?P<page>\\d+)(?:/(?P<criterionId>\\d+))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_edit_create_criterion')), array (  'criterionId' => 0,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CriterionController::editCreateCriterionAction',));
            }

            // innova_collecticiel_edit_delete_criterion
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/edit/deletecriterion/(?P<page>\\d+)/(?P<criterionId>\\d+)/(?P<number>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_edit_delete_criterion')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CriterionController::editDeleteCriterionAction',));
            }

            // innova_collecticiel_edit_remove_criterion
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/edit/removecriterion/(?P<page>\\d+)/(?P<criterionId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_edit_remove_criterion')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\CriterionController::editRemoveCriterionAction',));
            }

            // innova_collecticiel_document
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/document/(?P<documentType>url|file|resource|text)/(?P<dropId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_document')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DocumentController::documentAction',));
            }

            // innova_collecticiel_delete_document
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/delete/document/(?P<dropId>\\d+)/(?P<documentId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_delete_document')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DocumentController::deleteDocumentAction',));
            }

            // innova_collecticiel_open_resource
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/open/resource/(?P<documentId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_open_resource')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DocumentController::openResourceAction',));
            }

            // innova_collecticiel_validate_document
            if (0 === strpos($pathinfo, '/innovacollecticielbundle/document') && preg_match('#^/innovacollecticielbundle/document/(?P<documentId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_validate_document')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DocumentController::ajaxValidateDocumentAction',));
            }

            // innova_collecticiel_unvalidate_document
            if (0 === strpos($pathinfo, '/innovacollecticielbundle/undocument') && preg_match('#^/innovacollecticielbundle/undocument/(?P<documentId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_unvalidate_document')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DocumentController::ajaxUnvalidateDocumentAction',));
            }

            // innova_collecticiel_drop_switch_admin
            if (0 === strpos($pathinfo, '/innovacollecticielbundle/drop') && preg_match('#^/innovacollecticielbundle/drop/(?P<resourceId>\\d+)/user/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drop_switch_admin')), array (  'user' => NULL,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::dropAction',));
            }

            // innova_collecticiel_drop_switch
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drop/user/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drop_switch')), array (  'user' => NULL,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::dropAction',));
            }

            // innova_collecticiel_drop
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drop$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drop')), array (  'user' => NULL,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::dropAction',));
            }

            // innova_collecticiel_drops_by_user
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/by/user$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_by_user')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::dropsByUserAction',));
            }

            // innova_collecticiel_drops_by_user_paginated
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/by/user(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_by_user_paginated')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::dropsByUserAction',));
            }

            // innova_collecticiel_drops
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::dropsByDefaultAction',));
            }

            // innova_collecticiel_drops_by_default
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/by/default$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_by_default')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::dropsByDefaultAction',));
            }

            // innova_collecticiel_drops_by_default_paginated
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/by/default(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_by_default_paginated')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::dropsByDefaultAction',));
            }

            // innova_collecticiel_drops_by_report
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/by/report$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_by_report')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::dropsByReportAction',));
            }

            // innova_collecticiel_drops_by_report_paginated
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/by/report(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_by_report_paginated')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::dropsByReportAction',));
            }

            // innova_collecticiel_drops_by_date
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/by/date$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_by_date')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::dropsByDateAction',));
            }

            // innova_collecticiel_drops_by_date_paginated
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/by/date(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_by_date_paginated')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::dropsByDateAction',));
            }

            // innova_collecticiel_drops_awaiting
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/awaiting$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_awaiting')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::dropsAwaitingAction',));
            }

            // innova_collecticiel_drops_awaiting_paginated
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/awaiting(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_awaiting_paginated')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::dropsAwaitingAction',));
            }

            // innova_collecticiel_drops_delete
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/delete/(?P<dropId>\\d+)/(?P<tab>\\d+)(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_delete')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::dropsDeleteAction',));
            }

            // innova_collecticiel_drops_detail
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drops/detail/(?P<dropId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drops_detail')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::dropsDetailAction',));
            }

            // innova_collecticiel_drop_detail_by_user
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/drop/detail/(?P<dropId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_drop_detail_by_user')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::dropDetailAction',));
            }

            // innova_collecticiel_unlock_drop
            if (0 === strpos($pathinfo, '/innovacollecticielbundle/unlock/drop') && preg_match('#^/innovacollecticielbundle/unlock/drop/(?P<dropId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_unlock_drop')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::unlockDropAction',));
            }

            // innova_collecticiel_report_drop
            if (0 === strpos($pathinfo, '/innovacollecticielbundle/report/drop') && preg_match('#^/innovacollecticielbundle/report/drop/(?P<correctionId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_report_drop')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::reportDropAction',));
            }

            // innova_collecticiel_remove_report
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/remove/report/(?P<dropId>\\d+)/(?P<correctionId>\\d+)/(?P<invalidate>0|1)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_remove_report')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::removeReportAction',));
            }

            // innova_collecticiel_auto_close_drops_confirmation
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/autoclosedrops/confirm$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_auto_close_drops_confirmation')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::autoCloseDropsConfirmationAction',));
            }

            // innova_collecticiel_auto_close_drops
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/autoclosedrops$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_auto_close_drops')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::autoCloseDropsAction',));
            }

            // innova_collecticiel_shared_spaces
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/shared/spaces$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_shared_spaces')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::sharedSpacesAction',));
            }

            // innova_collecticiel_shared_spaces_paginated
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/shared/spaces(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_shared_spaces_paginated')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::sharedSpacesAction',));
            }

            // innova_collecticiel_return_receipt
            if ($pathinfo === '/innovacollecticielbundle/drop/reception') {
                return array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::returnReceiptAction',  '_route' => 'innova_collecticiel_return_receipt',);
            }

            // innova_collecticiel_back_link
            if ($pathinfo === '/innovacollecticielbundle/back/link') {
                return array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropController::backLinkAction',  '_route' => 'innova_collecticiel_back_link',);
            }

            // innova_collecticiel_edit_common
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/edit/common$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_edit_common')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropzoneController::editCommonAction',));
            }

            // innova_collecticiel_edit
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_edit')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropzoneController::editAppreciationAction',));
            }

            // innova_collecticiel_edit_appreciation
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/edit/appreciation$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_edit_appreciation')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropzoneController::editAppreciationAction',));
            }

            // innova_collecticiel_edit_criteria
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/edit/criteria$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_edit_criteria')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropzoneController::editCriteriaAction',));
            }

            // innova_collecticiel_edit_criteria_innova
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/edit/criteria$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_edit_criteria_innova')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropzoneController::editCriteriaAction',));
            }

            // innova_collecticiel_edit_criteria_paginated
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/edit/criteria(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_edit_criteria_paginated')), array (  'page' => 1,  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropzoneController::editCriteriaAction',));
            }

            // innova_collecticiel_open
            if (preg_match('#^/innovacollecticielbundle/(?P<resourceId>\\d+)/open$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_open')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropzoneController::openAction',));
            }

            if (0 === strpos($pathinfo, '/innovacollecticielbundle/add')) {
                // innova_collecticiel_update_dropzone
                if ($pathinfo === '/innovacollecticielbundle/add/update/dropzone') {
                    return array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\DropzoneController::updateAjaxDropzoneAction',  '_route' => 'innova_collecticiel_update_dropzone',);
                }

                // innova_collecticiel_add_notation
                if ($pathinfo === '/innovacollecticielbundle/add/notation') {
                    return array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\NotationController::addNotationForDocsAction',  '_route' => 'innova_collecticiel_add_notation',);
                }

            }

            // innova_collecticiel_validate_transmit_evaluation
            if (0 === strpos($pathinfo, '/innovacollecticielbundle/document') && preg_match('#^/innovacollecticielbundle/document/(?P<documentId>\\d+)/dropzone/(?P<dropzoneId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_collecticiel_validate_transmit_evaluation')), array (  '_controller' => 'Innova\\CollecticielBundle\\Controller\\NotationController::ajaxValidateTransmitEvaluationDocumentAction',));
            }

        }

        if (0 === strpos($pathinfo, '/favourite')) {
            // hevinci_favourite_index
            if (0 === strpos($pathinfo, '/favourite/node') && preg_match('#^/favourite/node/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_favourite_index')), array (  '_controller' => 'HeVinci\\FavouriteBundle\\Controller\\FavouriteController::indexAction',));
            }

            // hevinci_add_favourite_form
            if (0 === strpos($pathinfo, '/favourite/add/form') && preg_match('#^/favourite/add/form/(?P<node>\\d+)$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_hevinci_add_favourite_form;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_add_favourite_form')), array (  '_controller' => 'HeVinci\\FavouriteBundle\\Controller\\FavouriteController::addFavouriteFormAction',));
            }
            not_hevinci_add_favourite_form:

            if (0 === strpos($pathinfo, '/favourite/delete')) {
                // hevinci_delete_favourite_form
                if (0 === strpos($pathinfo, '/favourite/delete/form') && preg_match('#^/favourite/delete/form/(?P<node>\\d+)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_hevinci_delete_favourite_form;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_delete_favourite_form')), array (  '_controller' => 'HeVinci\\FavouriteBundle\\Controller\\FavouriteController::deleteFavouriteFormAction',));
                }
                not_hevinci_delete_favourite_form:

                // hevinci_delete_favourite
                if (preg_match('#^/favourite/delete/(?P<node>\\d+)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_delete_favourite;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_delete_favourite')), array (  '_controller' => 'HeVinci\\FavouriteBundle\\Controller\\FavouriteController::deleteFavouriteAction',));
                }
                not_hevinci_delete_favourite:

            }

        }

        if (0 === strpos($pathinfo, '/competencies')) {
            if (0 === strpos($pathinfo, '/competencies/activities')) {
                // hevinci_activity_competencies
                if (preg_match('#^/competencies/activities/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_activity_competencies;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_activity_competencies')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ActivityController::competenciesAction',));
                }
                not_hevinci_activity_competencies:

                // hevinci_activity_link_ability
                if (preg_match('#^/competencies/activities/(?P<id>\\d+)/abilities/(?P<abilityId>[^/]++)/link$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_hevinci_activity_link_ability;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_activity_link_ability')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ActivityController::linkAbilityAction',));
                }
                not_hevinci_activity_link_ability:

                // hevinci_activity_link_competency
                if (preg_match('#^/competencies/activities/(?P<id>\\d+)/competencies/(?P<competencyId>[^/]++)/link$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_hevinci_activity_link_competency;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_activity_link_competency')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ActivityController::linkCompetencyAction',));
                }
                not_hevinci_activity_link_competency:

                // hevinci_activity_remove_ability
                if (preg_match('#^/competencies/activities/(?P<id>\\d+)/abilities/(?P<abilityId>[^/]++)/remove$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_activity_remove_ability;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_activity_remove_ability')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ActivityController::removeAbilityLinkAction',));
                }
                not_hevinci_activity_remove_ability:

                // hevinci_activity_remove_competency
                if (preg_match('#^/competencies/activities/(?P<id>\\d+)/competencies/(?P<competencyId>[^/]++)/remove$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_activity_remove_competency;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_activity_remove_competency')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ActivityController::removeCompetencyLinkAction',));
                }
                not_hevinci_activity_remove_competency:

                // hevinci_competency_activities
                if (0 === strpos($pathinfo, '/competencies/activities/competencies') && preg_match('#^/competencies/activities/competencies/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_competency_activities;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_competency_activities')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ActivityController::competencyActivitiesAction',));
                }
                not_hevinci_competency_activities:

                // hevinci_ability_activities
                if (0 === strpos($pathinfo, '/competencies/activities/abilities') && preg_match('#^/competencies/activities/abilities/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_ability_activities;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_ability_activities')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ActivityController::abilityActivitiesAction',));
                }
                not_hevinci_ability_activities:

            }

            if (0 === strpos($pathinfo, '/competencies/picker')) {
                // hevinci_pick_framework
                if (rtrim($pathinfo, '/') === '/competencies/picker') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_pick_framework;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'hevinci_pick_framework');
                    }

                    return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\PickerController::frameworksAction',  '_route' => 'hevinci_pick_framework',);
                }
                not_hevinci_pick_framework:

                if (0 === strpos($pathinfo, '/competencies/picker/framework')) {
                    // hevinci_pick_competency
                    if (preg_match('#^/competencies/picker/framework/(?P<id>[^/]++)(?:/(?P<loadAbilities>[01]))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_hevinci_pick_competency;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_pick_competency')), array (  'loadAbilities' => 1,  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\PickerController::competenciesAction',));
                    }
                    not_hevinci_pick_competency:

                    // hevinci_pick_level
                    if (preg_match('#^/competencies/picker/framework/(?P<id>[^/]++)/levels$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_hevinci_pick_level;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_pick_level')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\PickerController::levelsAction',));
                    }
                    not_hevinci_pick_level:

                }

                // hevinci_suggest_user
                if (0 === strpos($pathinfo, '/competencies/picker/users/suggest') && preg_match('#^/competencies/picker/users/suggest/(?P<query>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_suggest_user;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_suggest_user')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\PickerController::suggestUserAction',));
                }
                not_hevinci_suggest_user:

                // hevinci_suggest_group
                if (0 === strpos($pathinfo, '/competencies/picker/groups/suggest') && preg_match('#^/competencies/picker/groups/suggest/(?P<query>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_suggest_group;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_suggest_group')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\PickerController::suggestGroupAction',));
                }
                not_hevinci_suggest_group:

            }

            if (0 === strpos($pathinfo, '/competencies/objectives')) {
                // hevinci_competencies_widget
                if ($pathinfo === '/competencies/objectives-widget') {
                    return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\WidgetController::objectivesAction',  '_route' => 'hevinci_competencies_widget',);
                }

                // hevinci_objectives
                if (rtrim($pathinfo, '/') === '/competencies/objectives') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_objectives;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'hevinci_objectives');
                    }

                    return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::objectivesAction',  '_route' => 'hevinci_objectives',);
                }
                not_hevinci_objectives:

                // hevinci_new_objective
                if ($pathinfo === '/competencies/objectives/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_new_objective;
                    }

                    return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::newObjectiveAction',  '_route' => 'hevinci_new_objective',);
                }
                not_hevinci_new_objective:

                // hevinci_create_objective
                if ($pathinfo === '/competencies/objectives/') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_hevinci_create_objective;
                    }

                    return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::createObjectiveAction',  '_route' => 'hevinci_create_objective',);
                }
                not_hevinci_create_objective:

                // hevinci_delete_objective
                if (preg_match('#^/competencies/objectives/(?P<id>\\d+)/delete$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_delete_objective;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_delete_objective')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::deleteObjectiveAction',));
                }
                not_hevinci_delete_objective:

                // hevinci_objective_edit_form
                if (preg_match('#^/competencies/objectives/(?P<id>\\d+)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_objective_edit_form;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_objective_edit_form')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::objectiveEditionFormAction',));
                }
                not_hevinci_objective_edit_form:

                // hevinci_edit_objective
                if (preg_match('#^/competencies/objectives/(?P<id>\\d+)/edit$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_hevinci_edit_objective;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_edit_objective')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::editObjectiveAction',));
                }
                not_hevinci_edit_objective:

                // hevinci_objective_link_competency
                if (preg_match('#^/competencies/objectives/(?P<id>\\d+)/competencies/(?P<competencyId>\\d+)/levels/(?P<levelId>\\d+)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_hevinci_objective_link_competency;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_objective_link_competency')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::linkCompetencyAction',));
                }
                not_hevinci_objective_link_competency:

                // hevinci_delete_objective_association
                if (0 === strpos($pathinfo, '/competencies/objectives/link') && preg_match('#^/competencies/objectives/link/(?P<id>\\d+)/delete$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_delete_objective_association;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_delete_objective_association')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::deleteCompetencyLinkAction',));
                }
                not_hevinci_delete_objective_association:

                // hevinci_load_objective_competencies
                if (preg_match('#^/competencies/objectives/(?P<id>\\d+)/competencies$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_load_objective_competencies;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_load_objective_competencies')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::objectiveCompetenciesAction',));
                }
                not_hevinci_load_objective_competencies:

                // hevinci_load_user_objective_competencies
                if (preg_match('#^/competencies/objectives/(?P<id>\\d+)/users/(?P<userId>\\d+)/competencies$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_load_user_objective_competencies;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_load_user_objective_competencies')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::userObjectiveCompetenciesAction',));
                }
                not_hevinci_load_user_objective_competencies:

                // hevinci_objectives_users
                if ($pathinfo === '/competencies/objectives/users') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_objectives_users;
                    }

                    return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::usersAction',  '_route' => 'hevinci_objectives_users',);
                }
                not_hevinci_objectives_users:

                // hevinci_objective_users
                if (preg_match('#^/competencies/objectives/(?P<id>\\d+)/users$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_objective_users;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_objective_users')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::objectiveUsersAction',));
                }
                not_hevinci_objective_users:

                if (0 === strpos($pathinfo, '/competencies/objectives/groups')) {
                    // hevinci_objective_group_users
                    if (preg_match('#^/competencies/objectives/groups/(?P<id>\\d+)/users$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_hevinci_objective_group_users;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_objective_group_users')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::groupUsersAction',));
                    }
                    not_hevinci_objective_group_users:

                    // hevinci_objectives_groups
                    if ($pathinfo === '/competencies/objectives/groups') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_hevinci_objectives_groups;
                        }

                        return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::groupsAction',  '_route' => 'hevinci_objectives_groups',);
                    }
                    not_hevinci_objectives_groups:

                }

                // hevinci_objective_groups
                if (preg_match('#^/competencies/objectives/(?P<id>\\d+)/groups$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_objective_groups;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_objective_groups')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::objectiveGroupsAction',));
                }
                not_hevinci_objective_groups:

                // hevinci_objectives_assign_to_user
                if (preg_match('#^/competencies/objectives/(?P<objectiveId>[^/]++)/users/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_hevinci_objectives_assign_to_user;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_objectives_assign_to_user')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::assignObjectiveToUserAction',));
                }
                not_hevinci_objectives_assign_to_user:

                // hevinci_objectives_assign_to_group
                if (preg_match('#^/competencies/objectives/(?P<objectiveId>[^/]++)/groups/(?P<groupId>\\d+)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_hevinci_objectives_assign_to_group;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_objectives_assign_to_group')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::assignObjectiveToGroupAction',));
                }
                not_hevinci_objectives_assign_to_group:

                // hevinci_user_objectives
                if (0 === strpos($pathinfo, '/competencies/objectives/users') && preg_match('#^/competencies/objectives/users/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_user_objectives;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_user_objectives')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::loadUserObjectivesAction',));
                }
                not_hevinci_user_objectives:

                // hevinci_remove_user_objective
                if (preg_match('#^/competencies/objectives/(?P<objectiveId>[^/]++)/users/(?P<userId>\\d+)/remove$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_remove_user_objective;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_remove_user_objective')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::removeUserObjectiveAction',));
                }
                not_hevinci_remove_user_objective:

                // hevinci_remove_group_objective
                if (preg_match('#^/competencies/objectives/(?P<objectiveId>[^/]++)/groups/(?P<groupId>\\d+)/remove$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_remove_group_objective;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_remove_group_objective')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::removeGroupObjectiveAction',));
                }
                not_hevinci_remove_group_objective:

                // hevinci_group_objectives
                if (0 === strpos($pathinfo, '/competencies/objectives/groups') && preg_match('#^/competencies/objectives/groups/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_group_objectives;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_group_objectives')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::loadGroupObjectivesAction',));
                }
                not_hevinci_group_objectives:

                // hevinci_competency_user_history
                if (0 === strpos($pathinfo, '/competencies/objectives/users') && preg_match('#^/competencies/objectives/users/(?P<userId>\\d+)/competencies/(?P<id>\\d+)/history$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_competency_user_history;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_competency_user_history')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ObjectiveController::competencyUserHistoryAction',));
                }
                not_hevinci_competency_user_history:

            }

            if (0 === strpos($pathinfo, '/competencies/my-objectives')) {
                // hevinci_my_objectives_index
                if (rtrim($pathinfo, '/') === '/competencies/my-objectives') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_my_objectives_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'hevinci_my_objectives_index');
                    }

                    return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\MyObjectiveController::objectivesAction',  '_route' => 'hevinci_my_objectives_index',);
                }
                not_hevinci_my_objectives_index:

                // hevinci_load_my_objective_competencies
                if (preg_match('#^/competencies/my\\-objectives/(?P<id>\\d+)/competencies$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_load_my_objective_competencies;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_load_my_objective_competencies')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\MyObjectiveController::userObjectiveCompetenciesAction',));
                }
                not_hevinci_load_my_objective_competencies:

                // hevinci_competency_my_history
                if (0 === strpos($pathinfo, '/competencies/my-objectives/competencies') && preg_match('#^/competencies/my\\-objectives/competencies/(?P<id>\\d+)/history$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_competency_my_history;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_competency_my_history')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\MyObjectiveController::competencyUserHistoryAction',));
                }
                not_hevinci_competency_my_history:

            }

            if (0 === strpos($pathinfo, '/competencies/frameworks')) {
                // hevinci_frameworks
                if ($pathinfo === '/competencies/frameworks') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_frameworks;
                    }

                    return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::frameworksAction',  '_route' => 'hevinci_frameworks',);
                }
                not_hevinci_frameworks:

                // hevinci_new_framework
                if ($pathinfo === '/competencies/frameworks/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_new_framework;
                    }

                    return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::newFrameworkAction',  '_route' => 'hevinci_new_framework',);
                }
                not_hevinci_new_framework:

                // hevinci_create_framework
                if ($pathinfo === '/competencies/frameworks') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_hevinci_create_framework;
                    }

                    return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::createFrameworkAction',  '_route' => 'hevinci_create_framework',);
                }
                not_hevinci_create_framework:

                if (0 === strpos($pathinfo, '/competencies/frameworks/import')) {
                    // hevinci_import_framework_form
                    if ($pathinfo === '/competencies/frameworks/import') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_hevinci_import_framework_form;
                        }

                        return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::importFrameworkFormAction',  '_route' => 'hevinci_import_framework_form',);
                    }
                    not_hevinci_import_framework_form:

                    // hevinci_import_framework
                    if ($pathinfo === '/competencies/frameworks/import') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_hevinci_import_framework;
                        }

                        return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::importFrameworkAction',  '_route' => 'hevinci_import_framework',);
                    }
                    not_hevinci_import_framework:

                }

                // hevinci_export_framework
                if (preg_match('#^/competencies/frameworks/(?P<id>\\d+)/export$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_export_framework;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_export_framework')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::exportFrameworkAction',));
                }
                not_hevinci_export_framework:

                // hevinci_framework
                if (preg_match('#^/competencies/frameworks/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_framework;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_framework')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::frameworkAction',));
                }
                not_hevinci_framework:

                // hevinci_framework_activities
                if (preg_match('#^/competencies/frameworks/(?P<id>\\d+)/activities$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_framework_activities;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_framework_activities')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::activitiesAction',));
                }
                not_hevinci_framework_activities:

                // hevinci_edit_framework_form
                if (preg_match('#^/competencies/frameworks/(?P<id>\\d+)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_edit_framework_form;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_edit_framework_form')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::frameworkEditionFormAction',));
                }
                not_hevinci_edit_framework_form:

                // hevinci_edit_framework
                if (preg_match('#^/competencies/frameworks/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_hevinci_edit_framework;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_edit_framework')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::editFrameworkAction',));
                }
                not_hevinci_edit_framework:

            }

            // hevinci_delete_competency
            if (preg_match('#^/competencies/(?P<id>\\d+)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_hevinci_delete_competency;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_delete_competency')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::deleteCompetencyAction',));
            }
            not_hevinci_delete_competency:

            // hevinci_new_competency
            if (preg_match('#^/competencies/(?P<id>\\d+)/sub$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_hevinci_new_competency;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_new_competency')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::newSubCompetencyAction',));
            }
            not_hevinci_new_competency:

            // hevinci_create_competency
            if (preg_match('#^/competencies/(?P<id>\\d+)/sub$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_hevinci_create_competency;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_create_competency')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::createSubCompetencyAction',));
            }
            not_hevinci_create_competency:

            // hevinci_competency
            if (preg_match('#^/competencies/(?P<id>\\d+)/edit$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_hevinci_competency;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_competency')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::competencyAction',));
            }
            not_hevinci_competency:

            // hevinci_edit_competency
            if (preg_match('#^/competencies/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_hevinci_edit_competency;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_edit_competency')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::editCompetencyAction',));
            }
            not_hevinci_edit_competency:

            // hevinci_new_ability
            if (preg_match('#^/competencies/(?P<id>\\d+)/ability/new$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_hevinci_new_ability;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_new_ability')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::newAbilityAction',));
            }
            not_hevinci_new_ability:

            // hevinci_create_ability
            if (preg_match('#^/competencies/(?P<id>\\d+)/ability$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_hevinci_create_ability;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_create_ability')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::createAbilityAction',));
            }
            not_hevinci_create_ability:

            // hevinci_delete_ability
            if (preg_match('#^/competencies/(?P<id>\\d+)/ability/(?P<abilityId>\\d+)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_hevinci_delete_ability;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_delete_ability')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::deleteAbilityAction',));
            }
            not_hevinci_delete_ability:

            // hevinci_ability
            if (preg_match('#^/competencies/(?P<id>\\d+)/ability/(?P<abilityId>\\d+)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_hevinci_ability;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_ability')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::abilityAction',));
            }
            not_hevinci_ability:

            // hevinci_edit_ability
            if (preg_match('#^/competencies/(?P<id>\\d+)/ability/(?P<abilityId>\\d+)$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_hevinci_edit_ability;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_edit_ability')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::editAbilityAction',));
            }
            not_hevinci_edit_ability:

            // hevinci_add_ability_form
            if (preg_match('#^/competencies/(?P<id>\\d+)/ability/add$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_hevinci_add_ability_form;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_add_ability_form')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::addAbilityFormAction',));
            }
            not_hevinci_add_ability_form:

            // hevinci_add_ability
            if (preg_match('#^/competencies/(?P<id>\\d+)/ability/add$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_hevinci_add_ability;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_add_ability')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::addAbilityAction',));
            }
            not_hevinci_add_ability:

            // hevinci_suggest_ability
            if (preg_match('#^/competencies/(?P<id>\\d+)/ability/suggest/(?P<query>[^/]++)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_hevinci_suggest_ability;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_suggest_ability')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\CompetencyController::suggestAbilityAction',));
            }
            not_hevinci_suggest_ability:

            if (0 === strpos($pathinfo, '/competencies/scales')) {
                // hevinci_new_scale
                if ($pathinfo === '/competencies/scales/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_new_scale;
                    }

                    return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ScaleController::newScaleAction',  '_route' => 'hevinci_new_scale',);
                }
                not_hevinci_new_scale:

                // hevinci_create_scale
                if ($pathinfo === '/competencies/scales/') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_hevinci_create_scale;
                    }

                    return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ScaleController::createScaleAction',  '_route' => 'hevinci_create_scale',);
                }
                not_hevinci_create_scale:

                // hevinci_scales
                if (rtrim($pathinfo, '/') === '/competencies/scales') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_scales;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'hevinci_scales');
                    }

                    return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ScaleController::scalesAction',  '_route' => 'hevinci_scales',);
                }
                not_hevinci_scales:

                // hevinci_scale
                if (preg_match('#^/competencies/scales/(?P<id>\\d+)(?:/(?P<edit>[^/]++))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_scale;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_scale')), array (  'edit' => 0,  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ScaleController::scaleAction',));
                }
                not_hevinci_scale:

                // hevinci_edit_scale
                if (preg_match('#^/competencies/scales/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_hevinci_edit_scale;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_edit_scale')), array (  'edit' => 0,  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ScaleController::editScaleAction',));
                }
                not_hevinci_edit_scale:

                // hevinci_delete_scale
                if (0 === strpos($pathinfo, '/competencies/scales/delete') && preg_match('#^/competencies/scales/delete/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_hevinci_delete_scale;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_delete_scale')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ScaleController::deleteScaleAction',));
                }
                not_hevinci_delete_scale:

            }

        }

        if (0 === strpos($pathinfo, '/api/competencies/frameworks')) {
            // hevinci_competency_api_frameworks
            if ($pathinfo === '/api/competencies/frameworks') {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_hevinci_competency_api_frameworks;
                }

                return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ApiController::frameworksAction',  '_route' => 'hevinci_competency_api_frameworks',);
            }
            not_hevinci_competency_api_frameworks:

            // hevinci_competency_api_framework
            if (preg_match('#^/api/competencies/frameworks/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_hevinci_competency_api_framework;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_competency_api_framework')), array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ApiController::frameworkAction',));
            }
            not_hevinci_competency_api_framework:

            // hevinci_competency_api_createframework
            if ($pathinfo === '/api/competencies/frameworks') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_hevinci_competency_api_createframework;
                }

                return array (  '_controller' => 'HeVinci\\CompetencyBundle\\Controller\\ApiController::createFrameworkAction',  '_route' => 'hevinci_competency_api_createframework',);
            }
            not_hevinci_competency_api_createframework:

        }

        // hevinci_url_change
        if (0 === strpos($pathinfo, '/hevinciurlbundle/change') && preg_match('#^/hevinciurlbundle/change/(?P<node>[^/]++)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'hevinci_url_change')), array (  '_controller' => 'HeVinci\\UrlBundle\\Controller\\UrlController::changeUrlAction',));
        }

        if (0 === strpos($pathinfo, '/internal/portfolio')) {
            // icap_portfolio_internal_analytics_views
            if (0 === strpos($pathinfo, '/internal/portfolio/analytics') && preg_match('#^/internal/portfolio/analytics/(?P<id>[^/]++)/views/(?P<startDate>[^/]++)/(?P<endDate>[^/]++)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_icap_portfolio_internal_analytics_views;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_internal_analytics_views')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\Internal\\AnalyticsController::getViewAction',));
            }
            not_icap_portfolio_internal_analytics_views:

            // icap_portfolio_internal_comments_get
            if (preg_match('#^/internal/portfolio/(?P<id>[^/]++)/comment$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_icap_portfolio_internal_comments_get;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_internal_comments_get')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\Internal\\CommentController::getAllAction',));
            }
            not_icap_portfolio_internal_comments_get:

            // icap_portfolio_internal_comment_post
            if (preg_match('#^/internal/portfolio/(?P<id>[^/]++)/comment$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_icap_portfolio_internal_comment_post;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_internal_comment_post')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\Internal\\CommentController::postAction',));
            }
            not_icap_portfolio_internal_comment_post:

            // icap_portfolio_internal_portfolios
            if ($pathinfo === '/internal/portfolio') {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_icap_portfolio_internal_portfolios;
                }

                return array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\Internal\\PortfolioController::getAllAction',  '_route' => 'icap_portfolio_internal_portfolios',);
            }
            not_icap_portfolio_internal_portfolios:

            // icap_portfolio_internal_portfolio
            if (preg_match('#^/internal/portfolio/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_icap_portfolio_internal_portfolio;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_internal_portfolio')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\Internal\\PortfolioController::getAction',));
            }
            not_icap_portfolio_internal_portfolio:

            // icap_portfolio_internal_portfolio_put
            if (preg_match('#^/internal/portfolio/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'PUT') {
                    $allow[] = 'PUT';
                    goto not_icap_portfolio_internal_portfolio_put;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_internal_portfolio_put')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\Internal\\PortfolioController::putAction',));
            }
            not_icap_portfolio_internal_portfolio_put:

            // icap_portfolio_internal_portfolio_put_comments
            if (0 === strpos($pathinfo, '/internal/portfolio/comments') && preg_match('#^/internal/portfolio/comments/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'PUT') {
                    $allow[] = 'PUT';
                    goto not_icap_portfolio_internal_portfolio_put_comments;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_internal_portfolio_put_comments')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\Internal\\PortfolioController::putCommentsAction',));
            }
            not_icap_portfolio_internal_portfolio_put_comments:

            // icap_portfolio_internal_portfolio_widget_get
            if (preg_match('#^/internal/portfolio/(?P<id>\\d+)/(?P<type>[^/]++)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_icap_portfolio_internal_portfolio_widget_get;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_internal_portfolio_widget_get')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\Internal\\PortfolioWidgetController::getAction',));
            }
            not_icap_portfolio_internal_portfolio_widget_get:

            // icap_portfolio_internal_portfolio_widget_post
            if (preg_match('#^/internal/portfolio/(?P<id>\\d+)/(?P<type>[^/]++)$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_icap_portfolio_internal_portfolio_widget_post;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_internal_portfolio_widget_post')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\Internal\\PortfolioWidgetController::postAction',));
            }
            not_icap_portfolio_internal_portfolio_widget_post:

            // icap_portfolio_internal_portfolio_widget_put
            if (preg_match('#^/internal/portfolio/(?P<id>\\d+)/(?P<type>[^/]++)/(?P<portfolioWidgetId>\\d+)$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'PUT') {
                    $allow[] = 'PUT';
                    goto not_icap_portfolio_internal_portfolio_widget_put;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_internal_portfolio_widget_put')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\Internal\\PortfolioWidgetController::putAction',));
            }
            not_icap_portfolio_internal_portfolio_widget_put:

            // icap_portfolio_internal_portfolio_widget_delete
            if (preg_match('#^/internal/portfolio/(?P<id>\\d+)/(?P<type>[^/]++)/(?P<portfolioWidgetId>\\d+)$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'DELETE') {
                    $allow[] = 'DELETE';
                    goto not_icap_portfolio_internal_portfolio_widget_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_internal_portfolio_widget_delete')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\Internal\\PortfolioWidgetController::deleteAction',));
            }
            not_icap_portfolio_internal_portfolio_widget_delete:

            if (0 === strpos($pathinfo, '/internal/portfolio/widget')) {
                // icap_portfolio_internal_widget_get
                if (preg_match('#^/internal/portfolio/widget/(?P<type>[^/]++)(?:/(?P<action>[^/]++))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_icap_portfolio_internal_widget_get;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_internal_widget_get')), array (  'action' => 'empty',  '_controller' => 'Icap\\PortfolioBundle\\Controller\\Internal\\WidgetController::getAction',));
                }
                not_icap_portfolio_internal_widget_get:

                // icap_portfolio_internal_widget
                if ($pathinfo === '/internal/portfolio/widget') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_icap_portfolio_internal_widget;
                    }

                    return array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\Internal\\WidgetController::getAllAction',  '_route' => 'icap_portfolio_internal_widget',);
                }
                not_icap_portfolio_internal_widget:

                // icap_portfolio_internal_widget_delete
                if (preg_match('#^/internal/portfolio/widget/(?P<type>[^/]++)/(?P<widgetId>\\d+)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_icap_portfolio_internal_widget_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_internal_widget_delete')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\Internal\\WidgetController::deleteAction',));
                }
                not_icap_portfolio_internal_widget_delete:

                // icap_portfolio_internal_widget_post
                if (preg_match('#^/internal/portfolio/widget/(?P<type>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_icap_portfolio_internal_widget_post;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_internal_widget_post')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\Internal\\WidgetController::postAction',));
                }
                not_icap_portfolio_internal_widget_post:

                // icap_portfolio_internal_widget_put
                if (preg_match('#^/internal/portfolio/widget/(?P<type>[^/]++)/(?P<widgetId>\\d+)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'PUT') {
                        $allow[] = 'PUT';
                        goto not_icap_portfolio_internal_widget_put;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_internal_widget_put')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\Internal\\WidgetController::putAction',));
                }
                not_icap_portfolio_internal_widget_put:

            }

        }

        if (0 === strpos($pathinfo, '/portfolio')) {
            // icap_portfolio_index
            if (preg_match('#^/portfolio(?:/(?P<page>\\d+)(?:/(?P<guidedPage>\\d+)(?:/(?P<portfolioSlug>[^/]++))?)?)?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_index')), array (  'page' => 1,  'guidedPage' => 1,  'portfolioSlug' => NULL,  '_controller' => 'Icap\\PortfolioBundle\\Controller\\PortfolioController::indexAction',));
            }

            // icap_portfolio_add
            if ($pathinfo === '/portfolio/add') {
                return array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\PortfolioController::addAction',  '_route' => 'icap_portfolio_add',);
            }

            // icap_portfolio_rename
            if (0 === strpos($pathinfo, '/portfolio/rename') && preg_match('#^/portfolio/rename/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_rename')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\PortfolioController::renameAction',));
            }

            // icap_portfolio_delete
            if (0 === strpos($pathinfo, '/portfolio/delete') && preg_match('#^/portfolio/delete/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_delete')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\PortfolioController::deleteAction',));
            }

            // icap_portfolio_update_visibility
            if (0 === strpos($pathinfo, '/portfolio/visibility') && preg_match('#^/portfolio/visibility/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_update_visibility')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\PortfolioController::updateVisibilityAction',));
            }

            // icap_portfolio_update_guides
            if (0 === strpos($pathinfo, '/portfolio/guides') && preg_match('#^/portfolio/guides/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_update_guides')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\PortfolioController::manageGuidesAction',));
            }

            // icap_portfolio_export
            if (0 === strpos($pathinfo, '/portfolio/export') && preg_match('#^/portfolio/export/(?P<portfolioSlug>[^/\\.]++)\\.(?P<format>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_export')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\PortfolioController::exportAction',));
            }

            if (0 === strpos($pathinfo, '/portfolio/import')) {
                // icap_portfolio_import
                if (preg_match('#^/portfolio/import(?:/(?P<format>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_import')), array (  'format' => NULL,  '_controller' => 'Icap\\PortfolioBundle\\Controller\\PortfolioController::importFormAction',));
                }

                // icap_portfolio_import_preview
                if (preg_match('#^/portfolio/import/(?P<format>[^/]++)/(?P<previewId>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_import_preview')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\PortfolioController::importPreviewAction',));
                }

            }

            // icap_portfolio_view
            if (preg_match('#^/portfolio/(?P<portfolioSlug>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_portfolio_view')), array (  '_controller' => 'Icap\\PortfolioBundle\\Controller\\PortfolioController::viewAction',));
            }

        }

        if (0 === strpos($pathinfo, '/a')) {
            if (0 === strpos($pathinfo, '/admin/badges')) {
                // icap_badge_admin_badges
                if (preg_match('#^/admin/badges(?:/(?P<badgePage>\\d+)(?:/(?P<claimPage>\\d+)(?:/(?P<userPage>\\d+))?)?)?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_admin_badges')), array (  'badgePage' => 1,  'claimPage' => 1,  'userPage' => 1,  '_controller' => 'Icap\\BadgeBundle\\Controller\\AdministrationController::listAction',));
                }

                // icap_badge_admin_badges_add
                if ($pathinfo === '/admin/badges/add') {
                    return array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\AdministrationController::addAction',  '_route' => 'icap_badge_admin_badges_add',);
                }

                // icap_badge_admin_badges_edit
                if (0 === strpos($pathinfo, '/admin/badges/edit') && preg_match('#^/admin/badges/edit/(?P<slug>[^/]++)(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_admin_badges_edit')), array (  'page' => 1,  '_controller' => 'Icap\\BadgeBundle\\Controller\\AdministrationController::editAction',));
                }

                // icap_badge_admin_badges_delete
                if (0 === strpos($pathinfo, '/admin/badges/delete') && preg_match('#^/admin/badges/delete/(?P<slug>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_admin_badges_delete')), array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\AdministrationController::deleteAction',));
                }

                // icap_badge_admin_badges_award
                if (0 === strpos($pathinfo, '/admin/badges/award') && preg_match('#^/admin/badges/award/(?P<slug>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_admin_badges_award')), array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\AdministrationController::awardAction',));
                }

                // icap_badge_admin_badges_unaward
                if (0 === strpos($pathinfo, '/admin/badges/unaward') && preg_match('#^/admin/badges/unaward/(?P<slug>[^/]++)/(?P<username>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_admin_badges_unaward')), array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\AdministrationController::unawardAction',));
                }

                // icap_badge_admin_manage_claim
                if (0 === strpos($pathinfo, '/admin/badges/claim/manage') && preg_match('#^/admin/badges/claim/manage/(?P<id>[^/]++)(?:/(?P<validate>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_admin_manage_claim')), array (  'validate' => false,  '_controller' => 'Icap\\BadgeBundle\\Controller\\AdministrationController::manageClaimAction',));
                }

                // icap_badge_admin_badges_statistics
                if ($pathinfo === '/admin/badges/statistics') {
                    return array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\AdministrationController::statisticsAction',  '_route' => 'icap_badge_admin_badges_statistics',);
                }

                // icap_badge_admin_badges_recalculate
                if (0 === strpos($pathinfo, '/admin/badges/recalculate') && preg_match('#^/admin/badges/recalculate/(?P<slug>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_admin_badges_recalculate')), array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\AdministrationController::recalculateAction',));
                }

                // icap_badge_export_csv
                if ($pathinfo === '/admin/badges/export') {
                    return array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\AdministrationController::exportCSVAction',  '_route' => 'icap_badge_export_csv',);
                }

            }

            if (0 === strpos($pathinfo, '/api/badges')) {
                // icap_badge_api_badge_all
                if (rtrim($pathinfo, '/') === '/api/badges') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_badge_api_badge_all');
                    }

                    return array (  '_format' => 'json',  '_controller' => 'icap_badge.api.badge:allAction',  '_route' => 'icap_badge_api_badge_all',);
                }

                // icap_badge_api_badge_get
                if (preg_match('#^/api/badges/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_api_badge_get')), array (  '_format' => 'json',  '_controller' => 'icap_badge.api.badge:getAction',));
                }

            }

        }

        if (0 === strpos($pathinfo, '/badge')) {
            // icap_badge_badge_picker
            if ($pathinfo === '/badges') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_icap_badge_badge_picker;
                }

                return array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\BadgeController::badgePickerAction',  '_route' => 'icap_badge_badge_picker',);
            }
            not_icap_badge_badge_picker:

            // icap_badge_badge_share_view
            if (preg_match('#^/badge/(?P<username>[^/]++)/(?P<badgeSlug>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_badge_share_view')), array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\BadgeController::shareViewAction',));
            }

            // icap_badge_badge_collection_share_view
            if (0 === strpos($pathinfo, '/badge/collection') && preg_match('#^/badge/collection/(?P<slug>[^/]++)(?:/(?P<locale>[^/]++))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_badge_collection_share_view')), array (  'locale' => 'fr',  '_controller' => 'Icap\\BadgeBundle\\Controller\\CollectionController::shareViewAction',));
            }

            // icap_badge_view_badge
            if (preg_match('#^/badge/(?P<slug>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_view_badge')), array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\FrontController::viewAction',));
            }

        }

        if (0 === strpos($pathinfo, '/internal')) {
            if (0 === strpos($pathinfo, '/internal/badge_collection')) {
                // icap_badge_badge_collection_add
                if ($pathinfo === '/internal/badge_collection/') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_icap_badge_badge_collection_add;
                    }

                    return array (  '_format' => 'json',  '_controller' => 'Icap\\BadgeBundle\\Controller\\Internal\\CollectionController::addAction',  '_route' => 'icap_badge_badge_collection_add',);
                }
                not_icap_badge_badge_collection_add:

                // icap_badge_badge_collection_edit
                if (preg_match('#^/internal/badge_collection/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'PATCH') {
                        $allow[] = 'PATCH';
                        goto not_icap_badge_badge_collection_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_badge_collection_edit')), array (  '_format' => 'json',  '_controller' => 'Icap\\BadgeBundle\\Controller\\Internal\\CollectionController::editAction',));
                }
                not_icap_badge_badge_collection_edit:

                // icap_badge_badge_collection_delete
                if (preg_match('#^/internal/badge_collection/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_icap_badge_badge_collection_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_badge_collection_delete')), array (  '_format' => 'json',  '_controller' => 'Icap\\BadgeBundle\\Controller\\Internal\\CollectionController::deleteAction',));
                }
                not_icap_badge_badge_collection_delete:

            }

            // icap_badge_user_badge_edit
            if (0 === strpos($pathinfo, '/internal/user_badge') && preg_match('#^/internal/user_badge(?:/(?P<id>[^/]++))?$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'PATCH') {
                    $allow[] = 'PATCH';
                    goto not_icap_badge_user_badge_edit;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_user_badge_edit')), array (  'id' => NULL,  '_format' => 'json',  '_controller' => 'Icap\\BadgeBundle\\Controller\\Internal\\UserBadgeController::editAction',));
            }
            not_icap_badge_user_badge_edit:

        }

        if (0 === strpos($pathinfo, '/profile/badge')) {
            // icap_badge_claim_badge
            if ($pathinfo === '/profile/badge/claim') {
                return array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\ProfileController::claimAction',  '_route' => 'icap_badge_claim_badge',);
            }

            // icap_badge_profile_view_badge
            if (preg_match('#^/profile/badge/(?P<slug>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_profile_view_badge')), array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\ProfileController::badgeAction',));
            }

            // icap_badge_profile_view_badges
            if (rtrim($pathinfo, '/') === '/profile/badge') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'icap_badge_profile_view_badges');
                }

                return array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\ProfileController::badgesAction',  '_route' => 'icap_badge_profile_view_badges',);
            }

        }

        if (0 === strpos($pathinfo, '/w')) {
            if (0 === strpos($pathinfo, '/workspace')) {
                // icap_badge_workspace_tool_my_badges
                if (preg_match('#^/workspace/(?P<workspaceId>[^/]++)/my_badges(?:/(?P<badgePage>\\d+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_workspace_tool_my_badges')), array (  'badgePage' => 1,  '_controller' => 'Icap\\BadgeBundle\\Controller\\Tool\\MyWorkspaceController::listAction',));
                }

                // icap_badge_workspace_tool_claim_badge
                if (preg_match('#^/workspace/(?P<workspaceId>[^/]++)/my_badges/claim/(?P<badge_id>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_workspace_tool_claim_badge')), array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\Tool\\MyWorkspaceController::claimAction',));
                }

                // icap_badge_workspace_tool_view_my_badge
                if (preg_match('#^/workspace/(?P<workspaceId>[^/]++)/my_badge/(?P<slug>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_workspace_tool_view_my_badge')), array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\Tool\\MyWorkspaceController::viewAction',));
                }

                // icap_badge_workspace_tool_badges
                if (preg_match('#^/workspace/(?P<workspaceId>[^/]++)/badges(?:/(?P<badgePage>\\d+)(?:/(?P<claimPage>\\d+)(?:/(?P<userPage>\\d+))?)?)?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_workspace_tool_badges')), array (  'badgePage' => 1,  'claimPage' => 1,  'userPage' => 1,  '_controller' => 'Icap\\BadgeBundle\\Controller\\Tool\\WorkspaceController::listAction',));
                }

                // icap_badge_workspace_tool_badges_add
                if (preg_match('#^/workspace/(?P<workspaceId>[^/]++)/badges/add$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_workspace_tool_badges_add')), array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\Tool\\WorkspaceController::addAction',));
                }

                // icap_badge_workspace_tool_badges_edit
                if (preg_match('#^/workspace/(?P<workspaceId>[^/]++)/badges/edit/(?P<slug>[^/]++)(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_workspace_tool_badges_edit')), array (  'page' => 1,  '_controller' => 'Icap\\BadgeBundle\\Controller\\Tool\\WorkspaceController::editAction',));
                }

                // icap_badge_workspace_tool_badges_delete
                if (preg_match('#^/workspace/(?P<workspaceId>[^/]++)/badges/delete/(?P<slug>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_workspace_tool_badges_delete')), array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\Tool\\WorkspaceController::deleteAction',));
                }

                // icap_badge_workspace_tool_badges_award
                if (preg_match('#^/workspace/(?P<workspaceId>[^/]++)/badges/award/(?P<slug>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_workspace_tool_badges_award')), array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\Tool\\WorkspaceController::awardAction',));
                }

                // icap_badge_workspace_tool_badges_unaward
                if (preg_match('#^/workspace/(?P<workspaceId>[^/]++)/badges/unaward/(?P<id>[^/]++)/(?P<username>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_workspace_tool_badges_unaward')), array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\Tool\\WorkspaceController::unawardAction',));
                }

                // icap_badge_workspace_tool_manage_claim
                if (preg_match('#^/workspace/(?P<workspaceId>[^/]++)/badges/claim/manage/(?P<id>[^/]++)(?:/(?P<validate>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_workspace_tool_manage_claim')), array (  'validate' => false,  '_controller' => 'Icap\\BadgeBundle\\Controller\\Tool\\WorkspaceController::manageClaimAction',));
                }

                // icap_badge_workspace_tool_badges_statistics
                if (preg_match('#^/workspace/(?P<workspaceId>[^/]++)/badges/statistics$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_workspace_tool_badges_statistics')), array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\Tool\\WorkspaceController::statisticsAction',));
                }

                // icap_badge_workspace_tool_badges_recalculate
                if (preg_match('#^/workspace/(?P<workspaceId>[^/]++)/badges/recalculate/(?P<slug>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_workspace_tool_badges_recalculate')), array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\Tool\\WorkspaceController::recalculateAction',));
                }

                // icap_badge_workspace_export_csv
                if (preg_match('#^/workspace/(?P<workspaceId>[^/]++)/badges/export$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_workspace_export_csv')), array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\Tool\\WorkspaceController::exportCSVAction',));
                }

            }

            // icap_badge_badge_usage_update_config
            if (0 === strpos($pathinfo, '/widget/badge/config') && preg_match('#^/widget/badge/config/(?P<widgetInstance>[^/]++)$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_icap_badge_badge_usage_update_config;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_badge_badge_usage_update_config')), array (  '_controller' => 'Icap\\BadgeBundle\\Controller\\Widget\\BadgeController::updateAction',));
            }
            not_icap_badge_badge_usage_update_config:

        }

        if (0 === strpos($pathinfo, '/icap')) {
            if (0 === strpos($pathinfo, '/icap_blog')) {
                // icap_blog_api_api_getblog
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_getblog');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogAction',  '_route' => 'icap_blog_api_api_getblog',);
                }

                // icap_blog_api_api_putblog
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_putblog');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::putBlogAction',  '_route' => 'icap_blog_api_api_putblog',);
                }

                // icap_blog_api_api_getblogoptions
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_getblogoptions');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogOptionsAction',  '_route' => 'icap_blog_api_api_getblogoptions',);
                }

                // icap_blog_api_api_putblogoptions
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_putblogoptions');
                    }

                    return array (  'options' => NULL,  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::putBlogOptionsAction',  '_route' => 'icap_blog_api_api_putblogoptions',);
                }

                // icap_blog_api_api_getblogtags
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_getblogtags');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogTagsAction',  '_route' => 'icap_blog_api_api_getblogtags',);
                }

                // icap_blog_api_api_getblogauthors
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_getblogauthors');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogAuthorsAction',  '_route' => 'icap_blog_api_api_getblogauthors',);
                }

                // icap_blog_api_api_getblogarchives
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_getblogarchives');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogArchivesAction',  '_route' => 'icap_blog_api_api_getblogarchives',);
                }

                // icap_blog_api_api_getblogpost
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_getblogpost');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogPostAction',  '_route' => 'icap_blog_api_api_getblogpost',);
                }

                // icap_blog_api_api_getblogposts
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_getblogposts');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogPostsAction',  '_route' => 'icap_blog_api_api_getblogposts',);
                }

                // icap_blog_api_api_getblogtagsposts
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_getblogtagsposts');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogTagsPostsAction',  '_route' => 'icap_blog_api_api_getblogtagsposts',);
                }

                // icap_blog_api_api_getblogauthorsposts
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_getblogauthorsposts');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogAuthorsPostsAction',  '_route' => 'icap_blog_api_api_getblogauthorsposts',);
                }

                // icap_blog_api_api_getblogdaysposts
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_getblogdaysposts');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogDaysPostsAction',  '_route' => 'icap_blog_api_api_getblogdaysposts',);
                }

                // icap_blog_api_api_getblogmonthsposts
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_getblogmonthsposts');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogMonthsPostsAction',  '_route' => 'icap_blog_api_api_getblogmonthsposts',);
                }

                // icap_blog_api_api_postblogpost
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_postblogpost');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::postBlogPostAction',  '_route' => 'icap_blog_api_api_postblogpost',);
                }

                // icap_blog_api_api_putblogpost
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_putblogpost');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::putBlogPostAction',  '_route' => 'icap_blog_api_api_putblogpost',);
                }

                // icap_blog_api_api_putblogpostvisibility
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_putblogpostvisibility');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::putBlogPostVisibilityAction',  '_route' => 'icap_blog_api_api_putblogpostvisibility',);
                }

                // icap_blog_api_api_deleteblogpost
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_deleteblogpost');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::deleteBlogPostAction',  '_route' => 'icap_blog_api_api_deleteblogpost',);
                }

                // icap_blog_api_api_getblogposttags
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_getblogposttags');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogPostTagsAction',  '_route' => 'icap_blog_api_api_getblogposttags',);
                }

                // icap_blog_api_api_getblogpostcomments
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_getblogpostcomments');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogPostCommentsAction',  '_route' => 'icap_blog_api_api_getblogpostcomments',);
                }

                // icap_blog_api_api_postblogpostcomment
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_postblogpostcomment');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::postBlogPostCommentAction',  '_route' => 'icap_blog_api_api_postblogpostcomment',);
                }

                // icap_blog_api_api_putblogpostcomment
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_putblogpostcomment');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::putBlogPostCommentAction',  '_route' => 'icap_blog_api_api_putblogpostcomment',);
                }

                // icap_blog_api_api_deleteblogpostcomment
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_deleteblogpostcomment');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::deleteBlogPostCommentAction',  '_route' => 'icap_blog_api_api_deleteblogpostcomment',);
                }

                // icap_blog_api_api_putblogpostcommentvisibility
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_putblogpostcommentvisibility');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::putBlogPostCommentVisibilityAction',  '_route' => 'icap_blog_api_api_putblogpostcommentvisibility',);
                }

                // icap_blog_api_api_postblogbanner
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_postblogbanner');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::postBlogBannerAction',  '_route' => 'icap_blog_api_api_postblogbanner',);
                }

                // icap_blog_api_api_deleteblogbanners
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_deleteblogbanners');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::deleteBlogBannersAction',  '_route' => 'icap_blog_api_api_deleteblogbanners',);
                }

                // icap_blog_api_api_getblogsearch
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_getblogsearch');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogSearchAction',  '_route' => 'icap_blog_api_api_getblogsearch',);
                }

                // icap_blog_api_api_getarchivedata
                if (rtrim($pathinfo, '/') === '/icap_blog') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_blog_api_api_getarchivedata');
                    }

                    return array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getArchiveData',  '_route' => 'icap_blog_api_api_getarchivedata',);
                }

                // icap_blog_view
                if (preg_match('#^/icap_blog/(?P<blogId>\\d+)(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_view')), array (  'page' => 1,  'filter' => NULL,  '_controller' => 'Icap\\BlogBundle\\Controller\\BlogController::viewAction',));
                }

                // icap_blog_view_filter
                if (preg_match('#^/icap_blog/(?P<blogId>\\d+)(?:/(?P<filter>[^/]++)(?:/(?P<page>\\d+))?)?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_view_filter')), array (  'page' => 1,  'filter' => NULL,  '_controller' => 'Icap\\BlogBundle\\Controller\\BlogController::viewAction',));
                }

                // icap_blog_view_pdf
                if (0 === strpos($pathinfo, '/icap_blog/pdf') && preg_match('#^/icap_blog/pdf/(?P<blogId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_view_pdf')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\BlogController::viewPdfAction',));
                }

                // icap_blog_rss
                if (0 === strpos($pathinfo, '/icap_blog/rss') && preg_match('#^/icap_blog/rss/(?P<blogId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_rss')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\BlogController::rssAction',));
                }

                // icap_blog_calendar_datas
                if (0 === strpos($pathinfo, '/icap_blog/calendar') && preg_match('#^/icap_blog/calendar/(?P<blogId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_calendar_datas')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\BlogController::calendarDatas',));
                }

                // icap_blog_comment_delete
                if (preg_match('#^/icap_blog/(?P<blogId>\\d+)/(?P<postSlug>[^/]++)/comment/delete/(?P<commentId>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_comment_delete')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\CommentController::deleteAction',));
                }

                // icap_blog_comment_publish
                if (preg_match('#^/icap_blog/(?P<blogId>\\d+)/(?P<postSlug>[^/]++)/comment/publish/(?P<commentId>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_comment_publish')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\CommentController::publishAction',));
                }

                // icap_blog_comment_unpublish
                if (preg_match('#^/icap_blog/(?P<blogId>\\d+)/(?P<postSlug>[^/]++)/comment/unpublish/(?P<commentId>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_comment_unpublish')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\CommentController::unpublishAction',));
                }

                // icap_blog_comment_edit
                if (preg_match('#^/icap_blog/(?P<blogId>\\d+)/(?P<postSlug>[^/]++)/comment/edit/(?P<commentId>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_comment_edit')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\CommentController::editAction',));
                }

                // icap_blog_post_view
                if (preg_match('#^/icap_blog/(?P<blogId>[^/]++)/post/view/(?P<postSlug>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_post_view')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\PostController::viewAction',));
                }

                // icap_blog_post_new
                if (preg_match('#^/icap_blog/(?P<blogId>\\d+)/post/new$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_post_new')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\PostController::newAction',));
                }

                // icap_blog_post_edit
                if (preg_match('#^/icap_blog/(?P<blogId>\\d+)/post/edit/(?P<postSlug>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_post_edit')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\PostController::editAction',));
                }

                // icap_blog_post_delete
                if (preg_match('#^/icap_blog/(?P<blogId>\\d+)/post/delete/(?P<postSlug>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_post_delete')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\PostController::deleteAction',));
                }

                // icap_blog_post_publish
                if (preg_match('#^/icap_blog/(?P<blogId>\\d+)/post/publish/(?P<postSlug>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_post_publish')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\PostController::publishAction',));
                }

                // icap_blog_post_unpublish
                if (preg_match('#^/icap_blog/(?P<blogId>\\d+)/post/unpublish/(?P<postSlug>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_post_unpublish')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\PostController::unpublishAction',));
                }

                if (0 === strpos($pathinfo, '/icap_blog/icap_blog/widget')) {
                    // icap_blog_widget_list_configure
                    if (0 === strpos($pathinfo, '/icap_blog/icap_blog/widget/list') && preg_match('#^/icap_blog/icap_blog/widget/list/(?P<id>\\d+)/config$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_icap_blog_widget_list_configure;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_widget_list_configure')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\WidgetController::updateWidgetBlogList',));
                    }
                    not_icap_blog_widget_list_configure:

                    // icap_blog_widget_blog_configure
                    if (0 === strpos($pathinfo, '/icap_blog/icap_blog/widget/blog') && preg_match('#^/icap_blog/icap_blog/widget/blog/(?P<id>\\d+)/config$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_icap_blog_widget_blog_configure;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_widget_blog_configure')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\WidgetController::updateWidgetBlog',));
                    }
                    not_icap_blog_widget_blog_configure:

                    // icap_blog_widget_tag_list_blog_configure
                    if (0 === strpos($pathinfo, '/icap_blog/icap_blog/widget/tags') && preg_match('#^/icap_blog/icap_blog/widget/tags/(?P<id>\\d+)/config$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_icap_blog_widget_tag_list_blog_configure;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_widget_tag_list_blog_configure')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\WidgetController::updateWidgetTagListBlog',));
                    }
                    not_icap_blog_widget_tag_list_blog_configure:

                }

                if (0 === strpos($pathinfo, '/icap_blog/api')) {
                    // icap_blog_api_order_panels
                    if (0 === strpos($pathinfo, '/icap_blog/api/panels') && preg_match('#^/icap_blog/api/panels/(?P<blog>[^/]++)/order(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PATCH') {
                            $allow[] = 'PATCH';
                            goto not_icap_blog_api_order_panels;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_order_panels')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::orderPanelsAction',  '_format' => 'json',));
                    }
                    not_icap_blog_api_order_panels:

                    if (0 === strpos($pathinfo, '/icap_blog/api/blogs')) {
                        // icap_blog_api_get_blog
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_icap_blog_api_get_blog;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_get_blog')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_get_blog:

                        // icap_blog_api_put_blog
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_icap_blog_api_put_blog;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_put_blog')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::putBlogAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_put_blog:

                        // icap_blog_api_get_blog_options
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/options(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_icap_blog_api_get_blog_options;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_get_blog_options')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogOptionsAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_get_blog_options:

                        // icap_blog_api_put_blog_options
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/options(?:/(?P<options>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?)?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_icap_blog_api_put_blog_options;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_put_blog_options')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::putBlogOptionsAction',  'options' => NULL,  '_format' => 'json',));
                        }
                        not_icap_blog_api_put_blog_options:

                        // icap_blog_api_get_blog_tags
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/tags(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_icap_blog_api_get_blog_tags;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_get_blog_tags')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogTagsAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_get_blog_tags:

                        // icap_blog_api_get_blog_authors
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/authors(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_icap_blog_api_get_blog_authors;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_get_blog_authors')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogAuthorsAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_get_blog_authors:

                        // icap_blog_api_get_blog_archives
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/archives(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_icap_blog_api_get_blog_archives;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_get_blog_archives')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogArchivesAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_get_blog_archives:

                        // icap_blog_api_get_blog_post
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/posts/(?P<postId>.+)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_icap_blog_api_get_blog_post;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_get_blog_post')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogPostAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_get_blog_post:

                        // icap_blog_api_get_blog_posts
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/posts(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_icap_blog_api_get_blog_posts;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_get_blog_posts')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogPostsAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_get_blog_posts:

                        // icap_blog_api_get_blog_tags_posts
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/tags/(?P<tagId>.+)/posts(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_icap_blog_api_get_blog_tags_posts;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_get_blog_tags_posts')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogTagsPostsAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_get_blog_tags_posts:

                        // icap_blog_api_get_blog_authors_posts
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/authors/(?P<author>\\d+)/posts(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_icap_blog_api_get_blog_authors_posts;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_get_blog_authors_posts')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogAuthorsPostsAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_get_blog_authors_posts:

                        // icap_blog_api_get_blog_days_posts
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/days/(?P<day>\\d{2}-\\d{2}-\\d{4})/posts(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_icap_blog_api_get_blog_days_posts;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_get_blog_days_posts')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogDaysPostsAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_get_blog_days_posts:

                        // icap_blog_api_get_blog_months_posts
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/months/(?P<month>\\d{2}-\\d{4})/posts(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_icap_blog_api_get_blog_months_posts;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_get_blog_months_posts')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogMonthsPostsAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_get_blog_months_posts:

                        // icap_blog_api_post_blog_post
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/posts(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_icap_blog_api_post_blog_post;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_post_blog_post')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::postBlogPostAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_post_blog_post:

                        // icap_blog_api_put_blog_post
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/posts/(?P<post>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_icap_blog_api_put_blog_post;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_put_blog_post')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::putBlogPostAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_put_blog_post:

                        // icap_blog_api_put_blog_post_visibility
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/posts/(?P<post>\\d+)/visibility(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_icap_blog_api_put_blog_post_visibility;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_put_blog_post_visibility')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::putBlogPostVisibilityAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_put_blog_post_visibility:

                        // icap_blog_api_delete_blog_post
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/posts/(?P<post>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'DELETE') {
                                $allow[] = 'DELETE';
                                goto not_icap_blog_api_delete_blog_post;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_delete_blog_post')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::deleteBlogPostAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_delete_blog_post:

                        // icap_blog_api_get_blog_post_tags
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/posts/(?P<post>\\d+)/tags(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_icap_blog_api_get_blog_post_tags;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_get_blog_post_tags')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogPostTagsAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_get_blog_post_tags:

                        // icap_blog_api_get_blog_post_comments
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/posts/(?P<post>\\d+)/comments(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_icap_blog_api_get_blog_post_comments;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_get_blog_post_comments')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogPostCommentsAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_get_blog_post_comments:

                        // icap_blog_api_post_blog_post_comment
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/posts/(?P<post>\\d+)/comments(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_icap_blog_api_post_blog_post_comment;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_post_blog_post_comment')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::postBlogPostCommentAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_post_blog_post_comment:

                        // icap_blog_api_put_blog_post_comment
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/posts/(?P<post>\\d+)/comments/(?P<comment>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_icap_blog_api_put_blog_post_comment;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_put_blog_post_comment')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::putBlogPostCommentAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_put_blog_post_comment:

                        // icap_blog_api_delete_blog_post_comment
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/posts/(?P<post>\\d+)/comments/(?P<comment>\\d+)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'DELETE') {
                                $allow[] = 'DELETE';
                                goto not_icap_blog_api_delete_blog_post_comment;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_delete_blog_post_comment')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::deleteBlogPostCommentAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_delete_blog_post_comment:

                        // icap_blog_api_put_blog_post_comment_visibility
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/posts/(?P<post>\\d+)/comments/(?P<comment>\\d+)/visibility(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_icap_blog_api_put_blog_post_comment_visibility;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_put_blog_post_comment_visibility')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::putBlogPostCommentVisibilityAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_put_blog_post_comment_visibility:

                        // icap_blog_api_post_blog_banner
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/banners(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_icap_blog_api_post_blog_banner;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_post_blog_banner')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::postBlogBannerAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_post_blog_banner:

                        // icap_blog_api_delete_blog_banners
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/banners(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'DELETE') {
                                $allow[] = 'DELETE';
                                goto not_icap_blog_api_delete_blog_banners;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_delete_blog_banners')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::deleteBlogBannersAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_delete_blog_banners:

                        // icap_blog_api_get_blog_search
                        if (preg_match('#^/icap_blog/api/blogs/(?P<blog>\\d+)/searches/(?P<search>.+)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_icap_blog_api_get_blog_search;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_blog_api_get_blog_search')), array (  '_controller' => 'Icap\\BlogBundle\\Controller\\API\\ApiController::getBlogSearchAction',  '_format' => 'json',));
                        }
                        not_icap_blog_api_get_blog_search:

                    }

                }

            }

            if (0 === strpos($pathinfo, '/icapdropzonebundle')) {
                // icap_dropzone_correct
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/correct$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_correct')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::correctAction',));
                }

                // icap_dropzone_correct_paginated
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/correct(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_correct_paginated')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::correctAction',));
                }

                // icap_dropzone_correct_comment
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/correct/comment$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_correct_comment')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::correctCommentAction',));
                }

                // icap_dropzone_drops_detail_correction_standard
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/detail/correction/standard/(?P<state>show|edit)/(?P<correctionId>\\d+)(?:/(?P<backUserId>\\d+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_detail_correction_standard')), array (  'backUserId' => '-1',  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::dropsDetailCorrectionStandardAction',));
                }

                // icap_dropzone_drops_detail_correction
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/detail/correction/(?P<state>show|edit|preview)/(?P<correctionId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_detail_correction')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::dropsDetailCorrectionAction',));
                }

                // icap_dropzone_drops_detail_correction_paginated
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/detail/correction/(?P<state>show|edit|preview)/(?P<correctionId>\\d+)/(?P<page>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_detail_correction_paginated')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::dropsDetailCorrectionAction',));
                }

                // icap_dropzone_drops_detail_correction_comment
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/detail/correction/comment/(?P<state>show|edit|preview)/(?P<correctionId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_detail_correction_comment')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::dropsDetailCorrectionCommentAction',));
                }

                // icap_dropzone_drops_detail_add_correction
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/detail/(?P<dropId>\\d+)/add/correction$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_detail_add_correction')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::dropsDetailAddCorrectionAction',));
                }

                // icap_dropzone_drops_detail_delete_correction
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/delete/correction/(?P<correctionId>\\d+)(?:/(?P<backPage>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_detail_delete_correction')), array (  'backPage' => 'default',  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::deleteCorrectionAction',));
                }

                // icap_dropzone_revalidateCorrection
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/detail/correction/validation/confirmation/(?P<correctionId>[^/]++)(?:/(?P<value>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_revalidateCorrection')), array (  'page' => 1,  'withDropOnly' => 'all',  'value' => 'yes',  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::RevalidateCorrectionValidationAction',));
                }

                // icap_dropzone_drops_detail_correction_validation
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/detail/correction/validation/(?P<value>no|yes)/(?P<correctionId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_detail_correction_validation')), array (  'routeParam' => 'default',  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::setCorrectionValidationAction',));
                }

                // icap_dropzone_drops_detail_correction_validation_by_user
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/detail/correction/validation/byUser/(?P<value>no|yes)/(?P<correctionId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_detail_correction_validation_by_user')), array (  'routeParam' => 'byUser',  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::setCorrectionValidationAction',));
                }

                // icap_dropzone_drops_detail_invalidate_all_corrections
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/detail/(?P<dropId>\\d+)/invalidate_all$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_detail_invalidate_all_corrections')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::invalidateAllCorrectionsAction',));
                }

                // icap_dropzone_drops_deny_correction
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/detail/correction/deny/(?P<correctionId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_deny_correction')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::denyCorrectionAction',));
                }

                // icap_dropzone_recalculate_score
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/recalculate/score/(?P<correctionId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_recalculate_score')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::recalculateScoreAction',));
                }

                // icap_dropzone_examiner_corrections
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/examiners/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_examiner_corrections')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::correctionsByUserAction',));
                }

                // icap_dropzone_examiner_corrections_paginated
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/examiners/(?P<userId>\\d+)(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_examiner_corrections_paginated')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::correctionsByUserAction',));
                }

                // icap_dropzone_examiners
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/examiners(?:/(?P<withDropOnly>(withDropOnly|all|withoutDrops)))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_examiners')), array (  'page' => 1,  'withDropOnly' => 'all',  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::ExaminersByCorrectionMadeAction',));
                }

                // icap_dropzone_examiners_paginated
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/examiners(?:/(?P<withDropOnly>(withDropOnly|all|withoutDrops))(?:/(?P<page>\\d+))?)?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_examiners_paginated')), array (  'page' => 1,  'withDropOnly' => 'all',  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::ExaminersByCorrectionMadeAction',));
                }

                // icap_dropzone_recalculate_drop_grade
                if (preg_match('#^/icapdropzonebundle/(?P<dropId>\\d+)/recalculateDropGrade$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_recalculate_drop_grade')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::recalculateScoreByDropAction',));
                }

                // icap_dropzone_recalculate_dropzone_grades
                if (preg_match('#^/icapdropzonebundle/(?P<dropzone>[^/]++)/recalculateDropzoneGrades$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_recalculate_dropzone_grades')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CorrectionController::recalculateScoreByDropzoneAction',));
                }

                // icap_dropzone_edit_add_criterion
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/edit/addcriterion/(?P<page>\\d+)(?:/(?P<criterionId>\\d+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_edit_add_criterion')), array (  'criterionId' => 0,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CriterionController::editAddCriterionAction',));
                }

                // icap_dropzone_edit_create_criterion
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/edit/createcriterion/(?P<page>\\d+)(?:/(?P<criterionId>\\d+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_edit_create_criterion')), array (  'criterionId' => 0,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CriterionController::editCreateCriterionAction',));
                }

                // icap_dropzone_edit_delete_criterion
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/edit/deletecriterion/(?P<page>\\d+)/(?P<criterionId>\\d+)/(?P<number>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_edit_delete_criterion')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CriterionController::editDeleteCriterionAction',));
                }

                // icap_dropzone_edit_remove_criterion
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/edit/removecriterion/(?P<page>\\d+)/(?P<criterionId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_edit_remove_criterion')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\CriterionController::editRemoveCriterionAction',));
                }

                // icap_dropzone_document
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/document/(?P<documentType>url|file|resource|text)/(?P<dropId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_document')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DocumentController::documentAction',));
                }

                // icap_dropzone_delete_document
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/delete/document/(?P<dropId>\\d+)/(?P<documentId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_delete_document')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DocumentController::deleteDocumentAction',));
                }

                // icap_dropzone_open_resource
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/open/resource/(?P<documentId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_open_resource')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DocumentController::openResourceAction',));
                }

                // icap_dropzone_drop
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drop$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drop')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::dropAction',));
                }

                // icap_dropzone_drops_by_user
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/by/user$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_by_user')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::dropsByUserAction',));
                }

                // icap_dropzone_drops_by_user_paginated
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/by/user(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_by_user_paginated')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::dropsByUserAction',));
                }

                // icap_dropzone_unlock_user
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/unlock/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_unlock_user')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::unlockUser',));
                }

                // icap_dropzone_unlock_all_user
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/unlock/all$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_unlock_all_user')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::unlockUsers',));
                }

                // icap_dropzone_unlock_cancel
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/unlock/cancel$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_unlock_cancel')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::unlockUsersCancel',));
                }

                // icap_dropzone_drops
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::dropsByDefaultAction',));
                }

                // icap_dropzone_drops_by_default
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/by/default$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_by_default')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::dropsByDefaultAction',));
                }

                // icap_dropzone_drops_by_default_paginated
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/by/default(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_by_default_paginated')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::dropsByDefaultAction',));
                }

                // icap_dropzone_drops_by_report
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/by/report$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_by_report')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::dropsByReportAction',));
                }

                // icap_dropzone_drops_by_report_paginated
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/by/report(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_by_report_paginated')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::dropsByReportAction',));
                }

                // icap_dropzone_drops_by_date
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/by/date$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_by_date')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::dropsByDateAction',));
                }

                // icap_dropzone_drops_by_date_paginated
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/by/date(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_by_date_paginated')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::dropsByDateAction',));
                }

                // icap_dropzone_drops_awaiting
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/awaiting$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_awaiting')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::dropsAwaitingAction',));
                }

                // icap_dropzone_drops_awaiting_paginated
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/awaiting(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_awaiting_paginated')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::dropsAwaitingAction',));
                }

                // icap_dropzone_drops_unfinished
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/unfinished$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_unfinished')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::dropsUnfinishedAction',));
                }

                // icap_dropzone_drops_unfinished_paginated
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/unfinished(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_unfinished_paginated')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::dropsUnfinishedAction',));
                }

                // icap_dropzone_drops_delete
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/delete/(?P<dropId>\\d+)/(?P<tab>\\d+)(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_delete')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::dropsDeleteAction',));
                }

                // icap_dropzone_drops_detail
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drops/detail/(?P<dropId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drops_detail')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::dropsDetailAction',));
                }

                // icap_dropzone_drop_detail_by_user
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/drop/detail/(?P<dropId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_drop_detail_by_user')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::dropDetailAction',));
                }

                // icap_dropzone_unlock_drop
                if (0 === strpos($pathinfo, '/icapdropzonebundle/unlock/drop') && preg_match('#^/icapdropzonebundle/unlock/drop/(?P<dropId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_unlock_drop')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::unlockDropAction',));
                }

                // icap_dropzone_report_drop
                if (0 === strpos($pathinfo, '/icapdropzonebundle/report/drop') && preg_match('#^/icapdropzonebundle/report/drop/(?P<correctionId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_report_drop')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::reportDropAction',));
                }

                // icap_dropzone_remove_report
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/remove/report/(?P<dropId>\\d+)/(?P<correctionId>\\d+)/(?P<invalidate>0|1)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_remove_report')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::removeReportAction',));
                }

                // icap_dropzone_auto_close_drops_confirmation
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/autoclosedrops/confirm$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_auto_close_drops_confirmation')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::autoCloseDropsConfirmationAction',));
                }

                // icap_dropzone_auto_close_drops
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/autoclosedrops$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_auto_close_drops')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::autoCloseDropsAction',));
                }

                // icap_dropzone_close_drop
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/close/(?P<dropId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_close_drop')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::closeDropAction',));
                }

                // icap_dropzone_remind_drop
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/remind/(?P<dropId>\\d+)/user/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_remind_drop')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropController::sendReminderAction',));
                }

                // icap_dropzone_edit
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_edit')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropzoneController::editCommonAction',));
                }

                // icap_dropzone_edit_common
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/edit/common$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_edit_common')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropzoneController::editCommonAction',));
                }

                // icap_dropzone_edit_criteria
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/edit/criteria$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_edit_criteria')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropzoneController::editCriteriaAction',));
                }

                // icap_dropzone_edit_criteria_paginated
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/edit/criteria(?:/(?P<page>\\d+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_edit_criteria_paginated')), array (  'page' => 1,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropzoneController::editCriteriaAction',));
                }

                // icap_dropzone_open
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/open$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_open')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropzoneController::openAction',));
                }

                // icap_dropzone_download_copies_by_date
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/download/byDates$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_download_copies_by_date')), array (  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropzoneController::downloadCopiesBetweenDatesAction',));
                }

                // icap_dropzone_download_copies
                if (preg_match('#^/icapdropzonebundle/(?P<resourceId>\\d+)/download$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_dropzone_download_copies')), array (  'beginDate' => NULL,  'endDate' => NULL,  '_controller' => 'Icap\\DropzoneBundle\\Controller\\DropzoneController::donwloadCopiesAction',));
                }

            }

            if (0 === strpos($pathinfo, '/icap_')) {
                if (0 === strpos($pathinfo, '/icap_socialmedia')) {
                    if (0 === strpos($pathinfo, '/icap_socialmedia/comment')) {
                        // icap_socialmedia_comments_view
                        if (0 === strpos($pathinfo, '/icap_socialmedia/comments/resource') && preg_match('#^/icap_socialmedia/comments/resource/(?P<resourceId>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_socialmedia_comments_view')), array (  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\CommentActionController::viewAction',));
                        }

                        // icap_socialmedia_comment_form
                        if (0 === strpos($pathinfo, '/icap_socialmedia/comment/form') && preg_match('#^/icap_socialmedia/comment/form/(?P<resourceId>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_socialmedia_comment_form')), array (  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\CommentActionController::formAction',));
                        }

                        // icap_socialmedia_comment
                        if (preg_match('#^/icap_socialmedia/comment/(?P<resourceId>[^/]++)$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_icap_socialmedia_comment;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_socialmedia_comment')), array (  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\CommentActionController::commentAction',));
                        }
                        not_icap_socialmedia_comment:

                        // icap_socialmedia_commentlist
                        if (0 === strpos($pathinfo, '/icap_socialmedia/comment/list') && preg_match('#^/icap_socialmedia/comment/list/(?P<resourceId>[^/]++)(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_socialmedia_commentlist')), array (  'page' => '1',  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\CommentActionController::commentListAction',));
                        }

                        // icap_socialmedia_comment_delete
                        if (0 === strpos($pathinfo, '/icap_socialmedia/comment/item') && preg_match('#^/icap_socialmedia/comment/item/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'DELETE') {
                                $allow[] = 'DELETE';
                                goto not_icap_socialmedia_comment_delete;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_socialmedia_comment_delete')), array (  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\CommentActionController::deleteWallItemAction',));
                        }
                        not_icap_socialmedia_comment_delete:

                    }

                    if (0 === strpos($pathinfo, '/icap_socialmedia/like')) {
                        // icap_socialmedia_like_form
                        if (0 === strpos($pathinfo, '/icap_socialmedia/like/form') && preg_match('#^/icap_socialmedia/like/form/(?P<resourceId>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_socialmedia_like_form')), array (  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\LikeActionController::formAction',));
                        }

                        // icap_socialmedia_like
                        if ($pathinfo === '/icap_socialmedia/like') {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_icap_socialmedia_like;
                            }

                            return array (  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\LikeActionController::likeAction',  '_route' => 'icap_socialmedia_like',);
                        }
                        not_icap_socialmedia_like:

                    }

                    // icap_socialmedia_unlike
                    if ($pathinfo === '/icap_socialmedia/unlike') {
                        return array (  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\LikeActionController::unlikeAction',  '_route' => 'icap_socialmedia_unlike',);
                    }

                    // icap_socialmedia_likelist
                    if (0 === strpos($pathinfo, '/icap_socialmedia/like/list') && preg_match('#^/icap_socialmedia/like/list(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_icap_socialmedia_likelist;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_socialmedia_likelist')), array (  'page' => '1',  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\LikeActionController::likeListAction',));
                    }
                    not_icap_socialmedia_likelist:

                    if (0 === strpos($pathinfo, '/icap_socialmedia/note')) {
                        // icap_socialmedia_note_form
                        if (0 === strpos($pathinfo, '/icap_socialmedia/note/form') && preg_match('#^/icap_socialmedia/note/form/(?P<resourceId>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_socialmedia_note_form')), array (  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\NoteActionController::formAction',));
                        }

                        // icap_socialmedia_note
                        if (preg_match('#^/icap_socialmedia/note/(?P<resourceId>[^/]++)$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_icap_socialmedia_note;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_socialmedia_note')), array (  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\NoteActionController::noteAction',));
                        }
                        not_icap_socialmedia_note:

                        // icap_socialmedia_notelist
                        if (0 === strpos($pathinfo, '/icap_socialmedia/note/list') && preg_match('#^/icap_socialmedia/note/list/(?P<resourceId>[^/]++)(?:/(?P<page>[^/]++))?$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_socialmedia_notelist')), array (  'page' => '1',  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\NoteActionController::noteListAction',));
                        }

                        // icap_socialmedia_note_delete
                        if (0 === strpos($pathinfo, '/icap_socialmedia/note/item') && preg_match('#^/icap_socialmedia/note/item/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'DELETE') {
                                $allow[] = 'DELETE';
                                goto not_icap_socialmedia_note_delete;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_socialmedia_note_delete')), array (  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\NoteActionController::deleteWallItemAction',));
                        }
                        not_icap_socialmedia_note_delete:

                    }

                    if (0 === strpos($pathinfo, '/icap_socialmedia/share')) {
                        // icap_socialmedia_share_form
                        if (0 === strpos($pathinfo, '/icap_socialmedia/share/form') && preg_match('#^/icap_socialmedia/share/form/(?P<resourceId>[^/]++)$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_socialmedia_share_form')), array (  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\ShareActionController::formAction',));
                        }

                        // icap_socialmedia_share
                        if ($pathinfo === '/icap_socialmedia/share') {
                            return array (  'user' => NULL,  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\ShareActionController::shareAction',  '_route' => 'icap_socialmedia_share',);
                        }

                    }

                    if (0 === strpos($pathinfo, '/icap_socialmedia/wall')) {
                        // icap_socialmedia_wall_view
                        if (preg_match('#^/icap_socialmedia/wall/(?P<publicUrl>[^/]++)$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_icap_socialmedia_wall_view;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_socialmedia_wall_view')), array (  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\WallController::viewAction',));
                        }
                        not_icap_socialmedia_wall_view:

                        // icap_socialmedia_walllist
                        if (0 === strpos($pathinfo, '/icap_socialmedia/wall/list') && preg_match('#^/icap_socialmedia/wall/list/(?P<page>[^/]++)/(?P<userId>[^/]++)$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_icap_socialmedia_walllist;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_socialmedia_walllist')), array (  'page' => '1',  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\WallController::itemListAction',));
                        }
                        not_icap_socialmedia_walllist:

                        // icap_socialmedia_wall_item_delete
                        if (0 === strpos($pathinfo, '/icap_socialmedia/wall/item') && preg_match('#^/icap_socialmedia/wall/item/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'DELETE') {
                                $allow[] = 'DELETE';
                                goto not_icap_socialmedia_wall_item_delete;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_socialmedia_wall_item_delete')), array (  '_controller' => 'Icap\\SocialmediaBundle\\Controller\\WallController::deleteWallItemAction',));
                        }
                        not_icap_socialmedia_wall_item_delete:

                    }

                }

                if (0 === strpos($pathinfo, '/icap_wiki')) {
                    // icap_wiki_api_api_patchwiki
                    if (rtrim($pathinfo, '/') === '/icap_wiki') {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'icap_wiki_api_api_patchwiki');
                        }

                        return array (  '_controller' => 'Icap\\WikiBundle\\Controller\\API\\ApiController::patchWikiAction',  '_route' => 'icap_wiki_api_api_patchwiki',);
                    }

                    // icap_wiki_api_api_patchwikisection
                    if (rtrim($pathinfo, '/') === '/icap_wiki') {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'icap_wiki_api_api_patchwikisection');
                        }

                        return array (  '_controller' => 'Icap\\WikiBundle\\Controller\\API\\ApiController::patchWikiSectionAction',  '_route' => 'icap_wiki_api_api_patchwikisection',);
                    }

                    // icap_wiki_api_api_putwikisection
                    if (rtrim($pathinfo, '/') === '/icap_wiki') {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'icap_wiki_api_api_putwikisection');
                        }

                        return array (  '_controller' => 'Icap\\WikiBundle\\Controller\\API\\ApiController::putWikiSectionAction',  '_route' => 'icap_wiki_api_api_putwikisection',);
                    }

                    // icap_wiki_api_api_deletewikisection
                    if (rtrim($pathinfo, '/') === '/icap_wiki') {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'icap_wiki_api_api_deletewikisection');
                        }

                        return array (  '_controller' => 'Icap\\WikiBundle\\Controller\\API\\ApiController::deleteWikiSectionAction',  '_route' => 'icap_wiki_api_api_deletewikisection',);
                    }

                    // icap_wiki_api_move_wiki_section
                    if (0 === strpos($pathinfo, '/icap_wiki/api/wikis') && preg_match('#^/icap_wiki/api/wikis/(?P<wiki>\\d+)/sections/(?P<section>\\d+)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_icap_wiki_api_move_wiki_section;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_wiki_api_move_wiki_section')), array (  '_controller' => 'Icap\\WikiBundle\\Controller\\API\\ApiController::moveWikiSectionAction',));
                    }
                    not_icap_wiki_api_move_wiki_section:

                    // icap_wiki_api_api_getwikisectioncontribution
                    if (rtrim($pathinfo, '/') === '/icap_wiki') {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'icap_wiki_api_api_getwikisectioncontribution');
                        }

                        return array (  'contribution' => 'null',  '_controller' => 'Icap\\WikiBundle\\Controller\\API\\ApiController::getWikiSectionContributionAction',  '_route' => 'icap_wiki_api_api_getwikisectioncontribution',);
                    }

                    // icap_wiki_api_api_postwikisectioncontribution
                    if (rtrim($pathinfo, '/') === '/icap_wiki') {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'icap_wiki_api_api_postwikisectioncontribution');
                        }

                        return array (  'section' => NULL,  '_controller' => 'Icap\\WikiBundle\\Controller\\API\\ApiController::postWikiSectionContributionAction',  '_route' => 'icap_wiki_api_api_postwikisectioncontribution',);
                    }

                    // icap_wiki_api_api_patchwikisectioncontribution
                    if (rtrim($pathinfo, '/') === '/icap_wiki') {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'icap_wiki_api_api_patchwikisectioncontribution');
                        }

                        return array (  '_controller' => 'Icap\\WikiBundle\\Controller\\API\\ApiController::patchWikiSectionContributionAction',  '_route' => 'icap_wiki_api_api_patchwikisectioncontribution',);
                    }

                    // icap_wiki_api_get_wiki_section_contribution_diff
                    if (0 === strpos($pathinfo, '/icap_wiki/api/wikis') && preg_match('#^/icap_wiki/api/wikis/(?P<wiki>\\d+)/sections/(?P<section>\\d+)/contributions/(?P<oldContributionId>\\d+)/(?P<newContributionId>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_icap_wiki_api_get_wiki_section_contribution_diff;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_wiki_api_get_wiki_section_contribution_diff')), array (  '_controller' => 'Icap\\WikiBundle\\Controller\\API\\ApiController::getWikiSectionContributionDiff',));
                    }
                    not_icap_wiki_api_get_wiki_section_contribution_diff:

                    // icap_wiki_view
                    if (preg_match('#^/icap_wiki/(?P<wikiId>\\d+)(?:\\.(?P<_format>html|pdf))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_wiki_view')), array (  '_format' => 'html',  '_controller' => 'Icap\\WikiBundle\\Controller\\WikiController::viewAction',));
                    }

                    if (0 === strpos($pathinfo, '/icap_wiki/api')) {
                        // icap_wiki_api_move_wiki_sectionicap_wiki_api_move_wiki_section
                        if (0 === strpos($pathinfo, '/icap_wiki/api/api/wikis') && preg_match('#^/icap_wiki/api/api/wikis/(?P<wiki>\\d+)/sections/(?P<section>\\d+)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_icap_wiki_api_move_wiki_sectionicap_wiki_api_move_wiki_section;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_wiki_api_move_wiki_sectionicap_wiki_api_move_wiki_section')), array (  '_controller' => 'Icap\\WikiBundle\\Controller\\API\\ApiController::moveWikiSectionAction',  '_format' => 'json',));
                        }
                        not_icap_wiki_api_move_wiki_sectionicap_wiki_api_move_wiki_section:

                        if (0 === strpos($pathinfo, '/icap_wiki/api/wikis')) {
                            // icap_wiki_api_patch_wiki
                            if (preg_match('#^/icap_wiki/api/wikis/(?P<wiki>\\d+)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'PATCH') {
                                    $allow[] = 'PATCH';
                                    goto not_icap_wiki_api_patch_wiki;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_wiki_api_patch_wiki')), array (  '_controller' => 'Icap\\WikiBundle\\Controller\\API\\ApiController::patchWikiAction',  '_format' => 'json',));
                            }
                            not_icap_wiki_api_patch_wiki:

                            // icap_wiki_api_patch_wiki_section
                            if (preg_match('#^/icap_wiki/api/wikis/(?P<wiki>\\d+)/sections/(?P<section>\\d+)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'PATCH') {
                                    $allow[] = 'PATCH';
                                    goto not_icap_wiki_api_patch_wiki_section;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_wiki_api_patch_wiki_section')), array (  '_controller' => 'Icap\\WikiBundle\\Controller\\API\\ApiController::patchWikiSectionAction',  '_format' => 'json',));
                            }
                            not_icap_wiki_api_patch_wiki_section:

                            // icap_wiki_api_put_wiki_section
                            if (preg_match('#^/icap_wiki/api/wikis/(?P<wiki>\\d+)/sections/(?P<section>\\d+)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'PUT') {
                                    $allow[] = 'PUT';
                                    goto not_icap_wiki_api_put_wiki_section;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_wiki_api_put_wiki_section')), array (  '_controller' => 'Icap\\WikiBundle\\Controller\\API\\ApiController::putWikiSectionAction',  '_format' => 'json',));
                            }
                            not_icap_wiki_api_put_wiki_section:

                            // icap_wiki_api_delete_wiki_section
                            if (preg_match('#^/icap_wiki/api/wikis/(?P<wiki>\\d+)/sections/(?P<section>\\d+)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'DELETE') {
                                    $allow[] = 'DELETE';
                                    goto not_icap_wiki_api_delete_wiki_section;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_wiki_api_delete_wiki_section')), array (  '_controller' => 'Icap\\WikiBundle\\Controller\\API\\ApiController::deleteWikiSectionAction',  '_format' => 'json',));
                            }
                            not_icap_wiki_api_delete_wiki_section:

                            // icap_wiki_api_get_wiki_section_contribution
                            if (preg_match('#^/icap_wiki/api/wikis/(?P<wiki>\\d+)/sections/(?P<section>\\d+)/contributions(?:/(?P<contribution>\\d+)(?:\\.(?P<_format>json|xml|csv|xls|html))?)?$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_icap_wiki_api_get_wiki_section_contribution;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_wiki_api_get_wiki_section_contribution')), array (  '_controller' => 'Icap\\WikiBundle\\Controller\\API\\ApiController::getWikiSectionContributionAction',  'contribution' => 'null',  '_format' => 'json',));
                            }
                            not_icap_wiki_api_get_wiki_section_contribution:

                            // icap_wiki_api_post_wiki_section_contribution
                            if (preg_match('#^/icap_wiki/api/wikis/(?P<wiki>\\d+)/sections/(?P<section>\\d+)/contributions(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'POST') {
                                    $allow[] = 'POST';
                                    goto not_icap_wiki_api_post_wiki_section_contribution;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_wiki_api_post_wiki_section_contribution')), array (  '_controller' => 'Icap\\WikiBundle\\Controller\\API\\ApiController::postWikiSectionContributionAction',  '_format' => 'json',));
                            }
                            not_icap_wiki_api_post_wiki_section_contribution:

                            // icap_wiki_api_patch_wiki_section_contribution
                            if (preg_match('#^/icap_wiki/api/wikis/(?P<wiki>\\d+)/sections/(?P<section>\\d+)/contributions/(?P<contribution>\\d+)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                                if ($this->context->getMethod() != 'PATCH') {
                                    $allow[] = 'PATCH';
                                    goto not_icap_wiki_api_patch_wiki_section_contribution;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_wiki_api_patch_wiki_section_contribution')), array (  '_controller' => 'Icap\\WikiBundle\\Controller\\API\\ApiController::patchWikiSectionContributionAction',  '_format' => 'json',));
                            }
                            not_icap_wiki_api_patch_wiki_section_contribution:

                        }

                    }

                }

            }

        }

        if (0 === strpos($pathinfo, '/admin/parameters/oauth')) {
            // claro_admin_oauth_form
            if (preg_match('#^/admin/parameters/oauth/(?P<service>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_oauth_form')), array (  '_controller' => 'Icap\\OAuthBundle\\Controller\\OauthController::formAction',));
            }

            // claro_admin_oauth_form_submit
            if (preg_match('#^/admin/parameters/oauth/(?P<service>[^/]++)/submit$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_claro_admin_oauth_form_submit;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_admin_oauth_form_submit')), array (  '_controller' => 'Icap\\OAuthBundle\\Controller\\OauthController::submitFormAction',));
            }
            not_claro_admin_oauth_form_submit:

        }

        if (0 === strpos($pathinfo, '/icap_oauth')) {
            // icap_oauth_check_connexion
            if ($pathinfo === '/icap_oauth/check_connection') {
                return array (  '_controller' => 'Icap\\OAuthBundle\\Controller\\ConnexionController::checkConnexionAction',  '_route' => 'icap_oauth_check_connexion',);
            }

            // icap_oauth_register
            if ($pathinfo === '/icap_oauth/register') {
                return array (  '_controller' => 'Icap\\OAuthBundle\\Controller\\ConnexionController::registerAction',  '_route' => 'icap_oauth_register',);
            }

            // icap_oauth_create_account
            if ($pathinfo === '/icap_oauth/create_account') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_icap_oauth_create_account;
                }

                return array (  '_controller' => 'Icap\\OAuthBundle\\Controller\\ConnexionController::createAccountAction',  '_route' => 'icap_oauth_create_account',);
            }
            not_icap_oauth_create_account:

            if (0 === strpos($pathinfo, '/icap_oauth/l')) {
                // icap_oauth_login
                if ($pathinfo === '/icap_oauth/login') {
                    return array (  '_controller' => 'Icap\\OAuthBundle\\Controller\\ConnexionController::loginAction',  '_route' => 'icap_oauth_login',);
                }

                if (0 === strpos($pathinfo, '/icap_oauth/link_account')) {
                    // icap_oauth_link_account
                    if ($pathinfo === '/icap_oauth/link_account') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_icap_oauth_link_account;
                        }

                        return array (  '_controller' => 'Icap\\OAuthBundle\\Controller\\ConnexionController::linkAccountAction',  '_route' => 'icap_oauth_link_account',);
                    }
                    not_icap_oauth_link_account:

                    // icap_oauth_link_account_mail
                    if ($pathinfo === '/icap_oauth/link_account_mail') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_icap_oauth_link_account_mail;
                        }

                        return array (  '_controller' => 'Icap\\OAuthBundle\\Controller\\ConnexionController::linkAccountByMailAction',  '_route' => 'icap_oauth_link_account_mail',);
                    }
                    not_icap_oauth_link_account_mail:

                }

            }

        }

        // hwi_oauth_connect
        if (rtrim($pathinfo, '/') === '/login') {
            if (substr($pathinfo, -1) !== '/') {
                return $this->redirect($pathinfo.'/', 'hwi_oauth_connect');
            }

            return array (  '_controller' => 'HWI\\Bundle\\OAuthBundle\\Controller\\ConnectController::connectAction',  '_route' => 'hwi_oauth_connect',);
        }

        if (0 === strpos($pathinfo, '/connect')) {
            // hwi_oauth_connect_service
            if (0 === strpos($pathinfo, '/connect/service') && preg_match('#^/connect/service/(?P<service>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hwi_oauth_connect_service')), array (  '_controller' => 'HWI\\Bundle\\OAuthBundle\\Controller\\ConnectController::connectServiceAction',));
            }

            // hwi_oauth_connect_registration
            if (0 === strpos($pathinfo, '/connect/registration') && preg_match('#^/connect/registration/(?P<key>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hwi_oauth_connect_registration')), array (  '_controller' => 'HWI\\Bundle\\OAuthBundle\\Controller\\ConnectController::registrationAction',));
            }

            // hwi_oauth_service_redirect
            if (preg_match('#^/connect/(?P<service>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'hwi_oauth_service_redirect')), array (  '_controller' => 'HWI\\Bundle\\OAuthBundle\\Controller\\ConnectController::redirectToServiceAction',));
            }

        }

        if (0 === strpos($pathinfo, '/login/check-')) {
            // facebook_login
            if ($pathinfo === '/login/check-facebook') {
                return array('_route' => 'facebook_login');
            }

            // twitter_login
            if ($pathinfo === '/login/check-twitter') {
                return array('_route' => 'twitter_login');
            }

            // google_login
            if ($pathinfo === '/login/check-google') {
                return array('_route' => 'google_login');
            }

            // linkedin_login
            if ($pathinfo === '/login/check-linkedin') {
                return array('_route' => 'linkedin_login');
            }

            // windows_live_login
            if ($pathinfo === '/login/check-windows') {
                return array('_route' => 'windows_live_login');
            }

            // office_365_login
            if ($pathinfo === '/login/check-o365') {
                return array('_route' => 'office_365_login');
            }

        }

        if (0 === strpos($pathinfo, '/results')) {
            // claro_open_result
            if (preg_match('#^/results/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_claro_open_result;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_open_result')), array (  '_controller' => 'Claroline\\ResultBundle\\Controller\\ResultController::resultAction',));
            }
            not_claro_open_result:

            // claro_create_mark
            if (preg_match('#^/results/(?P<id>\\d+)/users/(?P<userId>[^/]++)$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_claro_create_mark;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_create_mark')), array (  '_controller' => 'Claroline\\ResultBundle\\Controller\\ResultController::createMarkAction',));
            }
            not_claro_create_mark:

            if (0 === strpos($pathinfo, '/results/marks')) {
                // claro_delete_mark
                if (preg_match('#^/results/marks/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_claro_delete_mark;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_delete_mark')), array (  '_controller' => 'Claroline\\ResultBundle\\Controller\\ResultController::deleteMarkAction',));
                }
                not_claro_delete_mark:

                // claro_edit_mark
                if (preg_match('#^/results/marks/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'PUT') {
                        $allow[] = 'PUT';
                        goto not_claro_edit_mark;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_edit_mark')), array (  '_controller' => 'Claroline\\ResultBundle\\Controller\\ResultController::editMarkAction',));
                }
                not_claro_edit_mark:

            }

            // claro_import_marks
            if (preg_match('#^/results/(?P<id>\\d+)/marks/import(?:/(?P<type>[^/]++))?$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_claro_import_marks;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_import_marks')), array (  'type' => 'fullname',  '_controller' => 'Claroline\\ResultBundle\\Controller\\ResultController::importAction',));
            }
            not_claro_import_marks:

        }

        if (0 === strpos($pathinfo, '/i')) {
            if (0 === strpos($pathinfo, '/innova_path')) {
                // innova_path_manage_results
                if (0 === strpos($pathinfo, '/innova_path/manage/userpath') && preg_match('#^/innova_path/manage/userpath/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_innova_path_manage_results;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_path_manage_results')), array (  '_controller' => 'innova_path.controller.manageresults:displayStepUnlockAction',));
                }
                not_innova_path_manage_results:

                // innova_path_publish
                if (0 === strpos($pathinfo, '/innova_path/publish') && preg_match('#^/innova_path/publish/(?P<id>\\d+)(?:/(?P<redirect>[^/]++))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'PUT', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'PUT', 'HEAD'));
                        goto not_innova_path_publish;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_path_publish')), array (  'redirect' => false,  '_controller' => 'innova_path.controller.path:publishAction',));
                }
                not_innova_path_publish:

                if (0 === strpos($pathinfo, '/innova_path/template')) {
                    // innova_path_template_list
                    if ($pathinfo === '/innova_path/template') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_innova_path_template_list;
                        }

                        return array (  '_controller' => 'innova_path.controller.path_template:indexAction',  '_route' => 'innova_path_template_list',);
                    }
                    not_innova_path_template_list:

                    // innova_path_template_create
                    if ($pathinfo === '/innova_path/template/') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_innova_path_template_create;
                        }

                        return array (  '_controller' => 'innova_path.controller.path_template:addAction',  '_route' => 'innova_path_template_create',);
                    }
                    not_innova_path_template_create:

                    // innova_path_template_update
                    if (preg_match('#^/innova_path/template/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_innova_path_template_update;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_path_template_update')), array (  '_controller' => 'innova_path.controller.path_template:editAction',));
                    }
                    not_innova_path_template_update:

                    // innova_path_template_delete
                    if (0 === strpos($pathinfo, '/innova_path/template/delete') && preg_match('#^/innova_path/template/delete/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_innova_path_template_delete;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_path_template_delete')), array (  '_controller' => 'innova_path.controller.path_template:deleteAction',));
                    }
                    not_innova_path_template_delete:

                }

                if (0 === strpos($pathinfo, '/innova_path/condition')) {
                    if (0 === strpos($pathinfo, '/innova_path/condition/group')) {
                        // innova_path_criteria_groups
                        if ($pathinfo === '/innova_path/condition/group') {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_innova_path_criteria_groups;
                            }

                            return array (  '_controller' => 'innova_path.controller.step_condition:listGroupsAction',  '_route' => 'innova_path_criteria_groups',);
                        }
                        not_innova_path_criteria_groups:

                        // innova_path_criteria_user_groups
                        if ($pathinfo === '/innova_path/condition/group/current_user') {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_innova_path_criteria_user_groups;
                            }

                            return array (  'user' => NULL,  '_controller' => 'innova_path.controller.step_condition:listUserGroupsAction',  '_route' => 'innova_path_criteria_user_groups',);
                        }
                        not_innova_path_criteria_user_groups:

                    }

                    if (0 === strpos($pathinfo, '/innova_path/condition/activity')) {
                        // innova_path_criteria_activity_statuses
                        if ($pathinfo === '/innova_path/condition/activity/statuses') {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_innova_path_criteria_activity_statuses;
                            }

                            return array (  '_controller' => 'innova_path.controller.step_condition:listActivityStatusesAction',  '_route' => 'innova_path_criteria_activity_statuses',);
                        }
                        not_innova_path_criteria_activity_statuses:

                        // innova_path_criteria_evaluation
                        if (0 === strpos($pathinfo, '/innova_path/condition/activity/evaluation') && preg_match('#^/innova_path/condition/activity/evaluation/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_innova_path_criteria_evaluation;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_path_criteria_evaluation')), array (  '_controller' => 'innova_path.controller.step_condition:getActivityEvaluation',));
                        }
                        not_innova_path_criteria_evaluation:

                    }

                    if (0 === strpos($pathinfo, '/innova_path/condition/team')) {
                        // innova_path_criteria_user_teams
                        if ($pathinfo === '/innova_path/condition/team/current_user') {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_innova_path_criteria_user_teams;
                            }

                            return array (  'user' => NULL,  '_controller' => 'innova_path.controller.step_condition:listUserTeamsAction',  '_route' => 'innova_path_criteria_user_teams',);
                        }
                        not_innova_path_criteria_user_teams:

                        // innova_path_criteria_teams
                        if (preg_match('#^/innova_path/condition/team/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_innova_path_criteria_teams;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_path_criteria_teams')), array (  '_controller' => 'innova_path.controller.step_condition:listTeamsAction',));
                        }
                        not_innova_path_criteria_teams:

                    }

                    // innova_path_step_callforunlock
                    if (0 === strpos($pathinfo, '/innova_path/condition/stepunlock') && preg_match('#^/innova_path/condition/stepunlock/(?P<step>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_innova_path_step_callforunlock;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_path_step_callforunlock')), array (  '_controller' => 'innova_path.controller.step_condition:callForUnlock',));
                    }
                    not_innova_path_step_callforunlock:

                    // innova_path_unlock_step
                    if (0 === strpos($pathinfo, '/innova_path/conditionunlockstep') && preg_match('#^/innova_path/conditionunlockstep/(?P<step>[^/]++)/user/(?P<user>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_innova_path_unlock_step;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_path_unlock_step')), array (  '_controller' => 'innova_path.controller.step_condition:unlockStep',));
                    }
                    not_innova_path_unlock_step:

                }

                if (0 === strpos($pathinfo, '/innova_path/step')) {
                    // innova_path_progression_create
                    if (preg_match('#^/innova_path/step/(?P<id>\\d+)/progression$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_innova_path_progression_create;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_path_progression_create')), array (  '_controller' => 'innova_path.controller.user_progression:createAction',));
                    }
                    not_innova_path_progression_create:

                    // innova_path_progression_update
                    if (preg_match('#^/innova_path/step/(?P<id>\\d+)/progression$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_innova_path_progression_update;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_path_progression_update')), array (  '_controller' => 'innova_path.controller.user_progression:updateAction',));
                    }
                    not_innova_path_progression_update:

                }

                // innova_path_widget_config
                if (0 === strpos($pathinfo, '/innova_path/widget/config') && preg_match('#^/innova_path/widget/config/(?P<widgetInstance>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_innova_path_widget_config;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_path_widget_config')), array (  '_controller' => 'innova_path.controller.path_widget:updateConfigAction',));
                }
                not_innova_path_widget_config:

                if (0 === strpos($pathinfo, '/innova_path/editor')) {
                    // innova_path_editor_wizard
                    if (preg_match('#^/innova_path/editor/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_innova_path_editor_wizard;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_path_editor_wizard')), array (  '_controller' => 'innova_path.controller.path_editor:displayAction',));
                    }
                    not_innova_path_editor_wizard:

                    // innova_path_editor_wizard_save
                    if (preg_match('#^/innova_path/editor/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_innova_path_editor_wizard_save;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_path_editor_wizard_save')), array (  '_controller' => 'innova_path.controller.path_editor:saveAction',));
                    }
                    not_innova_path_editor_wizard_save:

                    // innova_path_load_activity
                    if (0 === strpos($pathinfo, '/innova_path/editor/load_activity') && preg_match('#^/innova_path/editor/load_activity/(?P<nodeId>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_innova_path_load_activity;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_path_load_activity')), array (  '_controller' => 'innova_path.controller.path_editor:loadActivityAction',));
                    }
                    not_innova_path_load_activity:

                    // innova_path_show_activity
                    if (0 === strpos($pathinfo, '/innova_path/editor/show_activity') && preg_match('#^/innova_path/editor/show_activity/(?P<activityId>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_innova_path_show_activity;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_path_show_activity')), array (  '_controller' => 'innova_path.controller.path_editor:showActivityAction',));
                    }
                    not_innova_path_show_activity:

                }

                // innova_path_player_wizard
                if (0 === strpos($pathinfo, '/innova_path/player') && preg_match('#^/innova_path/player/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'innova_path_player_wizard')), array (  '_controller' => 'innova_path.controller.path_player:displayAction',));
                }

            }

            if (0 === strpos($pathinfo, '/icap_website')) {
                // icap_website_view
                if (preg_match('#^/icap_website/(?P<websiteId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_website_view')), array (  'view' => false,  '_controller' => 'Icap\\WebsiteBundle\\Controller\\WebsiteController::viewAction',));
                }

                // icap_website_force_view
                if (0 === strpos($pathinfo, '/icap_website/view') && preg_match('#^/icap_website/view/(?P<websiteId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_website_force_view')), array (  'view' => true,  '_controller' => 'Icap\\WebsiteBundle\\Controller\\WebsiteController::viewAction',));
                }

                // icap_website_options_update
                if (preg_match('#^/icap_website/(?P<websiteId>\\d+)/options$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'PUT') {
                        $allow[] = 'PUT';
                        goto not_icap_website_options_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_website_options_update')), array (  '_controller' => 'Icap\\WebsiteBundle\\Controller\\WebsiteOptionsController::putAction',));
                }
                not_icap_website_options_update:

                // icap_website_options_image_upload
                if (preg_match('#^/icap_website/(?P<websiteId>\\d+)/options/upload/(?P<imageStr>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_icap_website_options_image_upload;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_website_options_image_upload')), array (  '_controller' => 'Icap\\WebsiteBundle\\Controller\\WebsiteOptionsController::uploadImageFileAction',));
                }
                not_icap_website_options_image_upload:

                // icap_website_options_image_update
                if (preg_match('#^/icap_website/(?P<websiteId>\\d+)/options/update\\-image/(?P<imageStr>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'PUT') {
                        $allow[] = 'PUT';
                        goto not_icap_website_options_image_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_website_options_image_update')), array (  '_controller' => 'Icap\\WebsiteBundle\\Controller\\WebsiteOptionsController::updateImagePathAction',));
                }
                not_icap_website_options_image_update:

                // icap_website_page_view
                if (preg_match('#^/icap_website/(?P<websiteId>\\d+)/(?P<pageId>\\d+)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_icap_website_page_view;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_website_page_view')), array (  '_controller' => 'Icap\\WebsiteBundle\\Controller\\WebsitePageController::viewAction',));
                }
                not_icap_website_page_view:

                // icap_website_page_get
                if (preg_match('#^/icap_website/(?P<websiteId>\\d+)/page/(?P<pageId>\\d+)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_icap_website_page_get;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_website_page_get')), array (  '_controller' => 'Icap\\WebsiteBundle\\Controller\\WebsitePageController::getAction',));
                }
                not_icap_website_page_get:

                // icap_website_page_post
                if (preg_match('#^/icap_website/(?P<websiteId>\\d+)/page/(?P<parentPageId>\\d+)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_icap_website_page_post;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_website_page_post')), array (  '_controller' => 'Icap\\WebsiteBundle\\Controller\\WebsitePageController::postAction',));
                }
                not_icap_website_page_post:

                // icap_website_page_put
                if (preg_match('#^/icap_website/(?P<websiteId>\\d+)/page/(?P<pageId>\\d+)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'PUT') {
                        $allow[] = 'PUT';
                        goto not_icap_website_page_put;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_website_page_put')), array (  '_controller' => 'Icap\\WebsiteBundle\\Controller\\WebsitePageController::putAction',));
                }
                not_icap_website_page_put:

                // icap_website_page_set_homepage
                if (preg_match('#^/icap_website/(?P<websiteId>\\d+)/page/(?P<pageId>\\d+)/setHomepage$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'PUT') {
                        $allow[] = 'PUT';
                        goto not_icap_website_page_set_homepage;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_website_page_set_homepage')), array (  '_controller' => 'Icap\\WebsiteBundle\\Controller\\WebsitePageController::setHomepageAction',));
                }
                not_icap_website_page_set_homepage:

                // icap_website_page_move
                if (preg_match('#^/icap_website/(?P<websiteId>\\d+)/page/(?P<pageId>\\d+)/(?P<newParentId>\\d+)(?:/(?P<previousSiblingId>\\d+))?$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'PUT') {
                        $allow[] = 'PUT';
                        goto not_icap_website_page_move;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_website_page_move')), array (  'previousSiblingId' => 0,  '_controller' => 'Icap\\WebsiteBundle\\Controller\\WebsitePageController::moveAction',));
                }
                not_icap_website_page_move:

                // icap_website_page_delete
                if (preg_match('#^/icap_website/(?P<websiteId>\\d+)/page/(?P<pageId>\\d+)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_icap_website_page_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_website_page_delete')), array (  '_controller' => 'Icap\\WebsiteBundle\\Controller\\WebsitePageController::deleteAction',));
                }
                not_icap_website_page_delete:

            }

        }

        if (0 === strpos($pathinfo, '/flashcards')) {
            // claroline_open_flashcard
            if (preg_match('#^/flashcards/(?P<deck>[^/]++)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_claroline_open_flashcard;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_open_flashcard')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\DeckController::deckAction',));
            }
            not_claroline_open_flashcard:

            if (0 === strpos($pathinfo, '/flashcards/deck')) {
                // claroline_get_all_themes
                if ($pathinfo === '/flashcards/deck/get_all_themes') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claroline_get_all_themes;
                    }

                    return array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\DeckController::getAllThemesAction',  '_route' => 'claroline_get_all_themes',);
                }
                not_claroline_get_all_themes:

                if (0 === strpos($pathinfo, '/flashcards/deck/edit')) {
                    // claroline_edit_default_param
                    if (0 === strpos($pathinfo, '/flashcards/deck/edit/default_param') && preg_match('#^/flashcards/deck/edit/default_param/(?P<deck>[^/]++)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claroline_edit_default_param;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_edit_default_param')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\DeckController::editDefaultParamAction',));
                    }
                    not_claroline_edit_default_param:

                    // claroline_edit_user_param
                    if (0 === strpos($pathinfo, '/flashcards/deck/edit/user_param') && preg_match('#^/flashcards/deck/edit/user_param/(?P<deck>[^/]++)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claroline_edit_user_param;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_edit_user_param')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\DeckController::editUserParamAction',));
                    }
                    not_claroline_edit_user_param:

                }

                // claroline_get_user_pref
                if (preg_match('#^/flashcards/deck/(?P<deck>[^/]++)/get_user_pref$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claroline_get_user_pref;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_get_user_pref')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\DeckController::getUserPreference',));
                }
                not_claroline_get_user_pref:

            }

            if (0 === strpos($pathinfo, '/flashcards/note')) {
                if (0 === strpos($pathinfo, '/flashcards/note_type')) {
                    // claroline_edit_note_type
                    if ($pathinfo === '/flashcards/note_type/edit') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_claroline_edit_note_type;
                        }

                        return array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\NoteTypeController::editNoteTypeAction',  '_route' => 'claroline_edit_note_type',);
                    }
                    not_claroline_edit_note_type:

                    // claroline_get_note_type
                    if (0 === strpos($pathinfo, '/flashcards/note_type/get') && preg_match('#^/flashcards/note_type/get/(?P<noteTypeId>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_claroline_get_note_type;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_get_note_type')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\NoteTypeController::findNoteTypeAction',));
                    }
                    not_claroline_get_note_type:

                    // claroline_getall_note_type
                    if ($pathinfo === '/flashcards/note_type/all') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_claroline_getall_note_type;
                        }

                        return array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\NoteTypeController::allNoteTypesAction',  '_route' => 'claroline_getall_note_type',);
                    }
                    not_claroline_getall_note_type:

                }

                // claroline_create_note
                if (0 === strpos($pathinfo, '/flashcards/note/create/deck') && preg_match('#^/flashcards/note/create/deck/(?P<deck>[^/]++)/note_type/(?P<noteType>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_claroline_create_note;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_create_note')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\NoteController::createNoteAction',));
                }
                not_claroline_create_note:

                // claroline_edit_note
                if (0 === strpos($pathinfo, '/flashcards/note/edit') && preg_match('#^/flashcards/note/edit/(?P<note>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_claroline_edit_note;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_edit_note')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\NoteController::editNoteAction',));
                }
                not_claroline_edit_note:

                // claroline_get_note
                if (0 === strpos($pathinfo, '/flashcards/note/get') && preg_match('#^/flashcards/note/get/(?P<note>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claroline_get_note;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_get_note')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\NoteController::findNoteAction',));
                }
                not_claroline_get_note:

                // claroline_list_notes
                if (0 === strpos($pathinfo, '/flashcards/note/list/deck') && preg_match('#^/flashcards/note/list/deck/(?P<deck>[^/]++)/note_type/(?P<noteType>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claroline_list_notes;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_list_notes')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\NoteController::listNotesAction',));
                }
                not_claroline_list_notes:

                // claroline_delete_note
                if (0 === strpos($pathinfo, '/flashcards/note/delete') && preg_match('#^/flashcards/note/delete/(?P<note>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claroline_delete_note;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_delete_note')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\NoteController::deleteNoteAction',));
                }
                not_claroline_delete_note:

            }

            if (0 === strpos($pathinfo, '/flashcards/card')) {
                // claroline_count_cards
                if (0 === strpos($pathinfo, '/flashcards/card/count/deck') && preg_match('#^/flashcards/card/count/deck/(?P<deck>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claroline_count_cards;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_count_cards')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\CardController::countCardsAction',));
                }
                not_claroline_count_cards:

                // claroline_new_card_to_learn
                if (0 === strpos($pathinfo, '/flashcards/card/new_card_to_learn/deck') && preg_match('#^/flashcards/card/new_card_to_learn/deck/(?P<deck>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claroline_new_card_to_learn;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_new_card_to_learn')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\CardController::newCardToLearnAction',));
                }
                not_claroline_new_card_to_learn:

                // claroline_card_to_review
                if (0 === strpos($pathinfo, '/flashcards/card/card_to_review/deck') && preg_match('#^/flashcards/card/card_to_review/deck/(?P<deck>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claroline_card_to_review;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_card_to_review')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\CardController::cardToReviewAction',));
                }
                not_claroline_card_to_review:

            }

            // claroline_study_card
            if (0 === strpos($pathinfo, '/flashcards/study_card/deck') && preg_match('#^/flashcards/study_card/deck/(?P<deck>[^/]++)/session/(?P<sessionId>[^/]++)/card/(?P<card>[^/]++)/result/(?P<result>[^/]++)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_claroline_study_card;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_study_card')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\CardController::studyCardAction',));
            }
            not_claroline_study_card:

            if (0 === strpos($pathinfo, '/flashcards/ca')) {
                // claroline_cancel_last_study
                if (0 === strpos($pathinfo, '/flashcards/cancel_last_study/deck') && preg_match('#^/flashcards/cancel_last_study/deck/(?P<deck>[^/]++)/session/(?P<sessionId>[^/]++)/card/(?P<card>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_claroline_cancel_last_study;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_cancel_last_study')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\CardController::cancelStudyCardAction',));
                }
                not_claroline_cancel_last_study:

                if (0 === strpos($pathinfo, '/flashcards/card')) {
                    // claroline_reset_card
                    if (preg_match('#^/flashcards/card/(?P<card>[^/]++)/reset$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_claroline_reset_card;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_reset_card')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\CardController::resetCardAction',));
                    }
                    not_claroline_reset_card:

                    // claroline_suspend_card
                    if (preg_match('#^/flashcards/card/(?P<card>[^/]++)/suspend/(?P<suspend>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_claroline_suspend_card;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_suspend_card')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\CardController::suspendCardAction',));
                    }
                    not_claroline_suspend_card:

                    if (0 === strpos($pathinfo, '/flashcards/card_learning')) {
                        // claroline_getall_card_learning
                        if (0 === strpos($pathinfo, '/flashcards/card_learning/all/deck') && preg_match('#^/flashcards/card_learning/all/deck/(?P<deck>[^/]++)$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_claroline_getall_card_learning;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_getall_card_learning')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\CardLearningController::allCardLearningAction',));
                        }
                        not_claroline_getall_card_learning:

                        // claroline_count_card_learning
                        if (0 === strpos($pathinfo, '/flashcards/card_learning/count/deck') && preg_match('#^/flashcards/card_learning/count/deck/(?P<deck>[^/]++)$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_claroline_count_card_learning;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_count_card_learning')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\CardLearningController::countCardLearningAction',));
                        }
                        not_claroline_count_card_learning:

                    }

                }

            }

            // claroline_create_session
            if (0 === strpos($pathinfo, '/flashcards/session/create/deck') && preg_match('#^/flashcards/session/create/deck/(?P<deck>[^/]++)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_claroline_create_session;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claroline_create_session')), array (  '_controller' => 'Claroline\\FlashCardBundle\\Controller\\SessionController::createSessionAction',));
            }
            not_claroline_create_session:

        }

        // question_bank
        if ($pathinfo === '/questions') {
            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'HEAD'));
                goto not_question_bank;
            }

            return array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Tool\\QuestionBankController::openAction',  '_route' => 'question_bank',);
        }
        not_question_bank:

        if (0 === strpos($pathinfo, '/exercises')) {
            // ujm_exercise_open
            if (preg_match('#^/exercises/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_ujm_exercise_open;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ujm_exercise_open')), array (  'user' => NULL,  '_controller' => 'UJM\\ExoBundle\\Controller\\Resource\\ExerciseController::openAction',));
            }
            not_ujm_exercise_open:

            // ujm_exercise_docimology
            if (preg_match('#^/exercises/(?P<id>[^/]++)/docimology$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_ujm_exercise_docimology;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ujm_exercise_docimology')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Resource\\ExerciseController::docimologyAction',));
            }
            not_ujm_exercise_docimology:

        }

        if (0 === strpos($pathinfo, '/api')) {
            if (0 === strpos($pathinfo, '/api/exercises')) {
                // exercise_get
                if (preg_match('#^/api/exercises/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_exercise_get;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'exercise_get')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\ExerciseController::getAction',));
                }
                not_exercise_get:

                // exercise_update
                if (preg_match('#^/api/exercises/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'PUT') {
                        $allow[] = 'PUT';
                        goto not_exercise_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'exercise_update')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\ExerciseController::updateAction',));
                }
                not_exercise_update:

                // exercise_publish
                if (preg_match('#^/api/exercises/(?P<id>[^/]++)/publish$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_exercise_publish;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'exercise_publish')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\ExerciseController::publishAction',));
                }
                not_exercise_publish:

                // exercise_unpublish
                if (preg_match('#^/api/exercises/(?P<id>[^/]++)/unpublish$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_exercise_unpublish;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'exercise_unpublish')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\ExerciseController::unpublishAction',));
                }
                not_exercise_unpublish:

                // exercise_papers
                if (preg_match('#^/api/exercises/(?P<exerciseId>[^/]++)/papers$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_exercise_papers;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'exercise_papers')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\PaperController::listAction',));
                }
                not_exercise_papers:

                // exercise_export_paper
                if (preg_match('#^/api/exercises/(?P<exerciseId>[^/]++)/papers/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_exercise_export_paper;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'exercise_export_paper')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\PaperController::getAction',));
                }
                not_exercise_export_paper:

                // ujm_exercise_delete_papers
                if (preg_match('#^/api/exercises/(?P<exerciseId>[^/]++)/papers$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_ujm_exercise_delete_papers;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'ujm_exercise_delete_papers')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\PaperController::deleteAllAction',));
                }
                not_ujm_exercise_delete_papers:

                // ujm_exercise_delete_paper
                if (preg_match('#^/api/exercises/(?P<exerciseId>[^/]++)/papers/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_ujm_exercise_delete_paper;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'ujm_exercise_delete_paper')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\PaperController::deleteAction',));
                }
                not_ujm_exercise_delete_paper:

                // exercise_papers_export
                if (preg_match('#^/api/exercises/(?P<exerciseId>[^/]++)/papers/export$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_exercise_papers_export;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'exercise_papers_export')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\PaperController::exportCsvAction',));
                }
                not_exercise_papers_export:

            }

            if (0 === strpos($pathinfo, '/api/questions')) {
                // question_search
                if ($pathinfo === '/api/questions/search') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_question_search;
                    }

                    return array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\Question\\QuestionController::searchAction',  '_route' => 'question_search',);
                }
                not_question_search:

                // question_create
                if ($pathinfo === '/api/questions') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_question_create;
                    }

                    return array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\Question\\QuestionController::createAction',  '_route' => 'question_create',);
                }
                not_question_create:

                // question_update
                if (preg_match('#^/api/questions/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'PUT') {
                        $allow[] = 'PUT';
                        goto not_question_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'question_update')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\Question\\QuestionController::updateAction',));
                }
                not_question_update:

                // question_delete
                if (preg_match('#^/api/questions/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_question_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'question_delete')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\Question\\QuestionController::deleteAction',));
                }
                not_question_delete:

            }

            if (0 === strpos($pathinfo, '/api/categories')) {
                // question_category_list
                if ($pathinfo === '/api/categories') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_question_category_list;
                    }

                    return array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\Question\\CategoryController::listAction',  '_route' => 'question_category_list',);
                }
                not_question_category_list:

                // question_category_create
                if ($pathinfo === '/api/categories') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_question_category_create;
                    }

                    return array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\Question\\CategoryController::createAction',  '_route' => 'question_category_create',);
                }
                not_question_category_create:

                // question_category_update
                if (preg_match('#^/api/categories/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'PUT') {
                        $allow[] = 'PUT';
                        goto not_question_category_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'question_category_update')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\Question\\CategoryController::updateAction',));
                }
                not_question_category_update:

                // question_category_delete
                if (preg_match('#^/api/categories/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_question_category_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'question_category_delete')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\Question\\CategoryController::deleteAction',));
                }
                not_question_category_delete:

            }

            if (0 === strpos($pathinfo, '/api/exercises')) {
                // exercise_attempt_start
                if (preg_match('#^/api/exercises/(?P<exerciseId>[^/]++)/attempts$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_exercise_attempt_start;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'exercise_attempt_start')), array (  'user' => NULL,  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\AttemptController::startAction',));
                }
                not_exercise_attempt_start:

                // exercise_attempt_submit
                if (preg_match('#^/api/exercises/(?P<exerciseId>[^/]++)/attempts/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'PUT') {
                        $allow[] = 'PUT';
                        goto not_exercise_attempt_submit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'exercise_attempt_submit')), array (  'user' => NULL,  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\AttemptController::submitAnswersAction',));
                }
                not_exercise_attempt_submit:

                // exercise_attempt_finish
                if (preg_match('#^/api/exercises/(?P<exerciseId>[^/]++)/attempts/(?P<id>[^/]++)/end$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'PUT') {
                        $allow[] = 'PUT';
                        goto not_exercise_attempt_finish;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'exercise_attempt_finish')), array (  'user' => NULL,  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\AttemptController::finishAction',));
                }
                not_exercise_attempt_finish:

                // exercise_attempt_hint_show
                if (preg_match('#^/api/exercises/(?P<exerciseId>[^/]++)/attempts/(?P<id>[^/]++)/(?P<questionId>[^/]++)/hints/(?P<hintId>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_exercise_attempt_hint_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'exercise_attempt_hint_show')), array (  'user' => NULL,  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\AttemptController::useHintAction',));
                }
                not_exercise_attempt_hint_show:

                // exercise_correction_questions
                if (preg_match('#^/api/exercises/(?P<exerciseId>[^/]++)/correction$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_exercise_correction_questions;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'exercise_correction_questions')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\CorrectionController::listQuestionsToCorrectAction',));
                }
                not_exercise_correction_questions:

                // exercise_correction_save
                if (preg_match('#^/api/exercises/(?P<exerciseId>[^/]++)/correction/(?P<questionId>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'PUT') {
                        $allow[] = 'PUT';
                        goto not_exercise_correction_save;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'exercise_correction_save')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\CorrectionController::saveAction',));
                }
                not_exercise_correction_save:

            }

            if (0 === strpos($pathinfo, '/api/q')) {
                if (0 === strpos($pathinfo, '/api/questions/share')) {
                    // questions_share
                    if ($pathinfo === '/api/questions/share') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_questions_share;
                        }

                        return array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\Question\\ShareController::shareAction',  '_route' => 'questions_share',);
                    }
                    not_questions_share:

                    // question_share_update
                    if ($pathinfo === '/api/questions/share') {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_question_share_update;
                        }

                        return array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\Question\\ShareController::updateAction',  '_route' => 'question_share_update',);
                    }
                    not_question_share_update:

                    // question_share_delete
                    if ($pathinfo === '/api/questions/share') {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_question_share_delete;
                        }

                        return array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\Question\\ShareController::deleteAction',  '_route' => 'question_share_delete',);
                    }
                    not_question_share_delete:

                    // questions_share_users
                    if (preg_match('#^/api/questions/share/(?P<search>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_questions_share_users;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'questions_share_users')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\Question\\ShareController::searchUsers',));
                    }
                    not_questions_share_users:

                }

                if (0 === strpos($pathinfo, '/api/qti')) {
                    // question_qti_import
                    if ($pathinfo === '/api/qti') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_question_qti_import;
                        }

                        return array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\QTIController::importAction',  '_route' => 'question_qti_import',);
                    }
                    not_question_qti_import:

                    // exercise_qti_export
                    if (0 === strpos($pathinfo, '/api/qti/exercises') && preg_match('#^/api/qti/exercises/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_exercise_qti_export;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'exercise_qti_export')), array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\QTIController::exportExerciseAction',));
                    }
                    not_exercise_qti_export:

                    // question_qti_export
                    if ($pathinfo === '/api/qti/questions') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_question_qti_export;
                        }

                        return array (  '_controller' => 'UJM\\ExoBundle\\Controller\\Api\\QTIController::exportQuestionsAction',  '_route' => 'question_qti_export',);
                    }
                    not_question_qti_export:

                }

            }

        }

        if (0 === strpos($pathinfo, '/icap_lesson')) {
            // icap_lesson_api_api_getdefaultchapter
            if (0 === strpos($pathinfo, '/icap_lesson/defaultChapter') && preg_match('#^/icap_lesson/defaultChapter/(?P<lesson>\\d+)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_icap_lesson_api_api_getdefaultchapter;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_api_getdefaultchapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::getDefaultChapterAction',));
            }
            not_icap_lesson_api_api_getdefaultchapter:

            // icap_lesson_api_api_gettree
            if (0 === strpos($pathinfo, '/icap_lesson/tree') && preg_match('#^/icap_lesson/tree/(?P<lesson>\\d+)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_icap_lesson_api_api_gettree;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_api_gettree')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::getTreeAction',));
            }
            not_icap_lesson_api_api_gettree:

            if (0 === strpos($pathinfo, '/icap_lesson/chapter')) {
                // icap_lesson_api_api_getchapterlist
                if (0 === strpos($pathinfo, '/icap_lesson/chapterlist') && preg_match('#^/icap_lesson/chapterlist/(?P<lesson>\\d+)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_icap_lesson_api_api_getchapterlist;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_api_getchapterlist')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::getChapterListAction',));
                }
                not_icap_lesson_api_api_getchapterlist:

                if (0 === strpos($pathinfo, '/icap_lesson/chapters')) {
                    // icap_lesson_api_api_viewchapter
                    if (preg_match('#^/icap_lesson/chapters/(?P<lesson>\\d+)/(?P<chapter>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_icap_lesson_api_api_viewchapter;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_api_viewchapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::viewChapterAction',));
                    }
                    not_icap_lesson_api_api_viewchapter:

                    // icap_lesson_api_api_createchapter
                    if (preg_match('#^/icap_lesson/chapters/(?P<lesson>\\d+)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_icap_lesson_api_api_createchapter;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_api_createchapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::createChapterAction',));
                    }
                    not_icap_lesson_api_api_createchapter:

                    // icap_lesson_api_api_duplicatechapter
                    if (preg_match('#^/icap_lesson/chapters/(?P<lesson>\\d+)/(?P<chapter>[^/]++)/duplicate$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_icap_lesson_api_api_duplicatechapter;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_api_duplicatechapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::duplicateChapterAction',));
                    }
                    not_icap_lesson_api_api_duplicatechapter:

                    // icap_lesson_api_api_editchapter
                    if (preg_match('#^/icap_lesson/chapters/(?P<lesson>\\d+)/(?P<chapter>[^/]++)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_icap_lesson_api_api_editchapter;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_api_editchapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::editChapterAction',));
                    }
                    not_icap_lesson_api_api_editchapter:

                    // icap_lesson_api_api_movechapter
                    if (preg_match('#^/icap_lesson/chapters/(?P<lesson>\\d+)/(?P<chapter>[^/]++)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PATCH') {
                            $allow[] = 'PATCH';
                            goto not_icap_lesson_api_api_movechapter;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_api_movechapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::moveChapterAction',));
                    }
                    not_icap_lesson_api_api_movechapter:

                    // icap_lesson_api_api_deletechapter
                    if (preg_match('#^/icap_lesson/chapters/(?P<lesson>\\d+)/(?P<chapter>[^/]++)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_icap_lesson_api_api_deletechapter;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_api_deletechapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::deleteChapterAction',));
                    }
                    not_icap_lesson_api_api_deletechapter:

                }

            }

            if (0 === strpos($pathinfo, '/icap_lesson/view')) {
                // icap_lesson
                if (preg_match('#^/icap_lesson/view/(?P<resourceId>\\d+)/?$#s', $pathinfo, $matches)) {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_lesson');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\LessonController::viewLessonAction',));
                }

                // icap_lesson_pdf
                if (0 === strpos($pathinfo, '/icap_lesson/view/pdf') && preg_match('#^/icap_lesson/view/pdf/(?P<resourceId>\\d+)(?:\\.(?P<_format>pdf))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_pdf')), array (  '_format' => 'pdf',  '_controller' => 'Icap\\LessonBundle\\Controller\\LessonController::viewLessonPdfAction',));
                }

                // icap_lesson_chapter
                if (preg_match('#^/icap_lesson/view/(?P<resourceId>\\d+)/(?P<chapterId>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\LessonController::viewChapterAction',));
                }

            }

            // icap_lesson_edit_chapter
            if (0 === strpos($pathinfo, '/icap_lesson/edit') && preg_match('#^/icap_lesson/edit/(?P<resourceId>\\d+)/(?P<chapterId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_edit_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\LessonController::editChapterAction',));
            }

            // icap_lesson_update_chapter
            if (0 === strpos($pathinfo, '/icap_lesson/update') && preg_match('#^/icap_lesson/update/(?P<resourceId>\\d+)/(?P<chapterId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_update_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\LessonController::updateChapterAction',));
            }

            // icap_lesson_confirm_delete_chapter
            if (0 === strpos($pathinfo, '/icap_lesson/confirm-delete') && preg_match('#^/icap_lesson/confirm\\-delete/(?P<resourceId>\\d+)/(?P<chapterId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_confirm_delete_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\LessonController::confirmDeleteChapterAction',));
            }

            // icap_lesson_delete_chapter
            if (0 === strpos($pathinfo, '/icap_lesson/delete') && preg_match('#^/icap_lesson/delete/(?P<resourceId>\\d+)/(?P<chapterId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_delete_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\LessonController::deleteChapterAction',));
            }

            if (0 === strpos($pathinfo, '/icap_lesson/new')) {
                // icap_lesson_new_chapter_without_parent
                if (preg_match('#^/icap_lesson/new/(?P<resourceId>\\d+)/?$#s', $pathinfo, $matches)) {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'icap_lesson_new_chapter_without_parent');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_new_chapter_without_parent')), array (  'parentChapterId' => 0,  '_controller' => 'Icap\\LessonBundle\\Controller\\LessonController::newChapterAction',));
                }

                // icap_lesson_new_chapter
                if (preg_match('#^/icap_lesson/new/(?P<resourceId>\\d+)/(?P<parentChapterId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_new_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\LessonController::newChapterAction',));
                }

            }

            if (0 === strpos($pathinfo, '/icap_lesson/a')) {
                // icap_lesson_add_chapter
                if (0 === strpos($pathinfo, '/icap_lesson/add') && preg_match('#^/icap_lesson/add/(?P<resourceId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_add_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\LessonController::addChapterAction',));
                }

                // icap_lesson_add_ng_chapter
                if (0 === strpos($pathinfo, '/icap_lesson/api/add') && preg_match('#^/icap_lesson/api/add/(?P<resourceId>\\d+)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_icap_lesson_add_ng_chapter;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_add_ng_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\LessonController::addNgChapterAction',));
                }
                not_icap_lesson_add_ng_chapter:

            }

            // icap_lesson_choice_move_chapter
            if (0 === strpos($pathinfo, '/icap_lesson/choice-move') && preg_match('#^/icap_lesson/choice\\-move/(?P<resourceId>\\d+)/(?P<chapterId>\\d+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_choice_move_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\LessonController::choiceMoveChapterAction',));
            }

            // icap_lesson_move_chapter
            if (0 === strpos($pathinfo, '/icap_lesson/move') && preg_match('#^/icap_lesson/move/(?P<resourceId>\\d+)/(?P<chapterId>\\d+)$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_icap_lesson_move_chapter;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_move_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\LessonController::moveChapterAction',));
            }
            not_icap_lesson_move_chapter:

            if (0 === strpos($pathinfo, '/icap_lesson/duplicate')) {
                // icap_lesson_duplicate_form_chapter
                if (0 === strpos($pathinfo, '/icap_lesson/duplicate_form') && preg_match('#^/icap_lesson/duplicate_form/(?P<resourceId>\\d+)/(?P<chapterId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_duplicate_form_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\LessonController::duplicateFormChapterAction',));
                }

                // icap_lesson_duplicate_chapter
                if (preg_match('#^/icap_lesson/duplicate/(?P<resourceId>\\d+)/(?P<chapterId>\\d+)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_duplicate_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\LessonController::duplicateChapterAction',));
                }

            }

            if (0 === strpos($pathinfo, '/icap_lesson/api')) {
                if (0 === strpos($pathinfo, '/icap_lesson/api/chapters')) {
                    // icap_lesson_api_view_chapter
                    if (preg_match('#^/icap_lesson/api/chapters/(?P<lesson>\\d+)/(?P<chapter>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_icap_lesson_api_view_chapter;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_view_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::viewChapterAction',  '_format' => 'json',));
                    }
                    not_icap_lesson_api_view_chapter:

                    // icap_lesson_api_create_chapter
                    if (preg_match('#^/icap_lesson/api/chapters/(?P<lesson>\\d+)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_icap_lesson_api_create_chapter;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_create_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::createChapterAction',  '_format' => 'json',));
                    }
                    not_icap_lesson_api_create_chapter:

                    // icap_lesson_api_duplicate_chapter
                    if (preg_match('#^/icap_lesson/api/chapters/(?P<lesson>\\d+)/(?P<chapter>[^/]++)/duplicate(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_icap_lesson_api_duplicate_chapter;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_duplicate_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::duplicateChapterAction',  '_format' => 'json',));
                    }
                    not_icap_lesson_api_duplicate_chapter:

                    // icap_lesson_api_edit_chapter
                    if (preg_match('#^/icap_lesson/api/chapters/(?P<lesson>\\d+)/(?P<chapter>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_icap_lesson_api_edit_chapter;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_edit_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::editChapterAction',  '_format' => 'json',));
                    }
                    not_icap_lesson_api_edit_chapter:

                    // icap_lesson_api_move_chapter
                    if (preg_match('#^/icap_lesson/api/chapters/(?P<lesson>\\d+)/(?P<chapter>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'PATCH') {
                            $allow[] = 'PATCH';
                            goto not_icap_lesson_api_move_chapter;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_move_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::moveChapterAction',  '_format' => 'json',));
                    }
                    not_icap_lesson_api_move_chapter:

                }

                // icap_lesson_api_get_default_chapter
                if (0 === strpos($pathinfo, '/icap_lesson/api/defaultChapter') && preg_match('#^/icap_lesson/api/defaultChapter/(?P<lesson>\\d+)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_icap_lesson_api_get_default_chapter;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_get_default_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::getDefaultChapterAction',  '_format' => 'json',));
                }
                not_icap_lesson_api_get_default_chapter:

                // icap_lesson_api_get_tree
                if (0 === strpos($pathinfo, '/icap_lesson/api/tree') && preg_match('#^/icap_lesson/api/tree/(?P<lesson>\\d+)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_icap_lesson_api_get_tree;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_get_tree')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::getTreeAction',  '_format' => 'json',));
                }
                not_icap_lesson_api_get_tree:

                if (0 === strpos($pathinfo, '/icap_lesson/api/chapter')) {
                    // icap_lesson_api_get_chapter_list
                    if (0 === strpos($pathinfo, '/icap_lesson/api/chapterlist') && preg_match('#^/icap_lesson/api/chapterlist/(?P<lesson>\\d+)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_icap_lesson_api_get_chapter_list;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_get_chapter_list')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::getChapterListAction',  '_format' => 'json',));
                    }
                    not_icap_lesson_api_get_chapter_list:

                    // icap_lesson_api_delete_chapter
                    if (0 === strpos($pathinfo, '/icap_lesson/api/chapters') && preg_match('#^/icap_lesson/api/chapters/(?P<lesson>\\d+)/(?P<chapter>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_icap_lesson_api_delete_chapter;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'icap_lesson_api_delete_chapter')), array (  '_controller' => 'Icap\\LessonBundle\\Controller\\API\\ApiController::deleteChapterAction',  '_format' => 'json',));
                    }
                    not_icap_lesson_api_delete_chapter:

                }

            }

        }

        if (0 === strpos($pathinfo, '/clarolinechatbundle')) {
            // claro_chat_user
            if (0 === strpos($pathinfo, '/clarolinechatbundle/user') && preg_match('#^/clarolinechatbundle/user/(?P<user>[^/]++)/chat$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_chat_user')), array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\ChatController::userChatAction',));
            }

            if (0 === strpos($pathinfo, '/clarolinechatbundle/chat/room')) {
                // claro_chat_room_open
                if (preg_match('#^/clarolinechatbundle/chat/room/(?P<chatRoom>[^/]++)/open$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_chat_room_open')), array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\ChatController::chatRoomOpenAction',));
                }

                // claro_chat_room_message_register
                if (preg_match('#^/clarolinechatbundle/chat/room/(?P<chatRoom>[^/]++)/user/(?P<username>[^/]++)/full/(?P<fullName>[^/]++)/message(?:/(?P<message>.+))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_chat_room_message_register')), array (  'message' => '',  '_controller' => 'Claroline\\ChatBundle\\Controller\\ChatController::chatRoomMessageRegisterAction',));
                }

                // claro_chat_room_presence_register
                if (preg_match('#^/clarolinechatbundle/chat/room/(?P<chatRoom>[^/]++)/user/(?P<username>[^/]++)/full/(?P<fullName>[^/]++)/presence/status/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_chat_room_presence_register')), array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\ChatController::chatRoomPresenceRegisterAction',));
                }

                // claro_chat_room_status_register
                if (preg_match('#^/clarolinechatbundle/chat/room/(?P<chatRoom>[^/]++)/user/(?P<username>[^/]++)/full/(?P<fullName>[^/]++)/status/status/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_chat_room_status_register')), array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\ChatController::chatRoomStatusRegisterAction',));
                }

                // claro_chat_room_configure_form
                if (preg_match('#^/clarolinechatbundle/chat/room/(?P<chatRoom>[^/]++)/configure/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_chat_room_configure_form')), array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\ChatController::chatRoomConfigureFormAction',));
                }

                // claro_chat_room_configure
                if (preg_match('#^/clarolinechatbundle/chat/room/(?P<chatRoom>[^/]++)/configure$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_chat_room_configure')), array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\ChatController::chatRoomConfigureAction',));
                }

                // claro_chat_room_status_edit
                if (preg_match('#^/clarolinechatbundle/chat/room/(?P<chatRoom>[^/]++)/status/(?P<roomStatus>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_chat_room_status_edit')), array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\ChatController::chatRoomStatusEditAction',));
                }

            }

            if (0 === strpos($pathinfo, '/clarolinechatbundle/a')) {
                if (0 === strpos($pathinfo, '/clarolinechatbundle/admin/chat')) {
                    // claro_chat_admin_management
                    if ($pathinfo === '/clarolinechatbundle/admin/chat/management') {
                        return array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\AdminChatController::adminChatManagementAction',  '_route' => 'claro_chat_admin_management',);
                    }

                    if (0 === strpos($pathinfo, '/clarolinechatbundle/admin/chat/configure')) {
                        // claro_chat_admin_configure_form
                        if ($pathinfo === '/clarolinechatbundle/admin/chat/configure/form') {
                            return array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\AdminChatController::adminChatConfigureFormAction',  '_route' => 'claro_chat_admin_configure_form',);
                        }

                        // claro_chat_admin_configure
                        if ($pathinfo === '/clarolinechatbundle/admin/chat/configure') {
                            return array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\AdminChatController::adminChatConfigureAction',  '_route' => 'claro_chat_admin_configure',);
                        }

                    }

                    // claro_chat_admin_reset
                    if ($pathinfo === '/clarolinechatbundle/admin/chat/reset') {
                        return array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\AdminChatController::resetConfigurationAction',  '_route' => 'claro_chat_admin_reset',);
                    }

                    if (0 === strpos($pathinfo, '/clarolinechatbundle/admin/chat/user')) {
                        if (0 === strpos($pathinfo, '/clarolinechatbundle/admin/chat/users')) {
                            // claro_chat_users_admin_management
                            if (0 === strpos($pathinfo, '/clarolinechatbundle/admin/chat/users/management') && preg_match('#^/clarolinechatbundle/admin/chat/users/management/(?P<show>[^/]++)/page/(?P<page>[^/]++)/max/(?P<max>[^/]++)/ordered/by/(?P<orderedBy>[^/]++)/order/(?P<order>[^/]++)/search(?:/(?P<search>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_chat_users_admin_management')), array (  'show' => 0,  'page' => 1,  'search' => '',  'max' => 50,  'orderedBy' => 'username',  'order' => 'ASC',  '_controller' => 'Claroline\\ChatBundle\\Controller\\AdminChatController::adminChatUsersManagementAction',));
                            }

                            // claro_chat_users_list
                            if (0 === strpos($pathinfo, '/clarolinechatbundle/admin/chat/users/list/type') && preg_match('#^/clarolinechatbundle/admin/chat/users/list/type(?:/(?P<type>[^/]++))?$#s', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_chat_users_list')), array (  'type' => 'none',  '_controller' => 'Claroline\\ChatBundle\\Controller\\AdminChatController::chatUsersListAction',));
                            }

                        }

                        // claro_chat_user_create
                        if (preg_match('#^/clarolinechatbundle/admin/chat/user/(?P<user>[^/]++)/username/(?P<username>[^/]++)/password/(?P<password>[^/]++)/create$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_chat_user_create')), array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\AdminChatController::chatUsersCreateFormAction',));
                        }

                        // claro_chat_user_edit_form
                        if (preg_match('#^/clarolinechatbundle/admin/chat/user/(?P<chatUser>[^/]++)/edit/form$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_chat_user_edit_form')), array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\AdminChatController::chatUserEditFormAction',));
                        }

                        // claro_chat_user_edit
                        if (preg_match('#^/clarolinechatbundle/admin/chat/user/(?P<chatUser>[^/]++)/edit$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_chat_user_edit')), array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\AdminChatController::chatUserEditAction',));
                        }

                    }

                }

                if (0 === strpos($pathinfo, '/clarolinechatbundle/api')) {
                    // api_get_xmpp_options
                    if (0 === strpos($pathinfo, '/clarolinechatbundle/api/xmpp/options') && preg_match('#^/clarolinechatbundle/api/xmpp/options(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_api_get_xmpp_options;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_xmpp_options')), array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\API\\ChatController::getXmppOptionsAction',  '_format' => 'json',));
                    }
                    not_api_get_xmpp_options:

                    if (0 === strpos($pathinfo, '/clarolinechatbundle/api/chats')) {
                        // api_get_chat_room_user
                        if (preg_match('#^/clarolinechatbundle/api/chats/(?P<chatRoom>[^/]++)/room/user(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_chat_room_user;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_chat_room_user')), array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\API\\ChatController::getChatRoomUserAction',  '_format' => 'json',));
                        }
                        not_api_get_chat_room_user:

                        // api_post_chat_room_presence_register
                        if (preg_match('#^/clarolinechatbundle/api/chats/(?P<chatRoom>[^/]++)/rooms/(?P<username>[^/]++)/presences/(?P<fullName>[^/]++)/registers/(?P<status>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_api_post_chat_room_presence_register;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_chat_room_presence_register')), array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\API\\ChatController::postChatRoomPresenceRegisterAction',  '_format' => 'json',));
                        }
                        not_api_post_chat_room_presence_register:

                        // api_post_chat_room_message_register
                        if (preg_match('#^/clarolinechatbundle/api/chats/(?P<chatRoom>[^/]++)/rooms/(?P<username>[^/]++)/messages/(?P<fullName>[^/]++)/registers(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_api_post_chat_room_message_register;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_chat_room_message_register')), array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\API\\ChatController::postChatRoomMessageRegisterAction',  '_format' => 'json',));
                        }
                        not_api_post_chat_room_message_register:

                        // api_post_chat_users_infos
                        if (preg_match('#^/clarolinechatbundle/api/chats/(?P<chatRoom>[^/]++)/users/infos(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_api_post_chat_users_infos;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_post_chat_users_infos')), array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\API\\ChatController::postChatUsersInfosAction',  '_format' => 'json',));
                        }
                        not_api_post_chat_users_infos:

                    }

                    if (0 === strpos($pathinfo, '/clarolinechatbundle/api/r')) {
                        // api_get_registered_messages
                        if (0 === strpos($pathinfo, '/clarolinechatbundle/api/registereds') && preg_match('#^/clarolinechatbundle/api/registereds/(?P<chatRoom>[^/]++)/messages(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_api_get_registered_messages;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_get_registered_messages')), array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\API\\ChatController::getRegisteredMessagesAction',  '_format' => 'json',));
                        }
                        not_api_get_registered_messages:

                        // api_put_chat_room
                        if (0 === strpos($pathinfo, '/clarolinechatbundle/api/room') && preg_match('#^/clarolinechatbundle/api/room/(?P<chatRoom>[^/\\.]++)(?:\\.(?P<_format>json|xml|csv|xls|html))?$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_api_put_chat_room;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'api_put_chat_room')), array (  '_controller' => 'Claroline\\ChatBundle\\Controller\\API\\ChatController::putChatRoomAction',  '_format' => 'json',));
                        }
                        not_api_put_chat_room:

                    }

                }

            }

        }

        if (0 === strpos($pathinfo, '/dashboard/api')) {
            // create_dashboard
            if ($pathinfo === '/dashboard/api/new') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_create_dashboard;
                }

                return array (  '_format' => 'json',  '_controller' => 'Claroline\\DashboardBundle\\Controller\\Api\\DashboardsController::createDashboard',  '_route' => 'create_dashboard',);
            }
            not_create_dashboard:

            // update_dashboard
            if (0 === strpos($pathinfo, '/dashboard/api/put') && preg_match('#^/dashboard/api/put/(?P<dashboardId>[^/]++)$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'PUT') {
                    $allow[] = 'PUT';
                    goto not_update_dashboard;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'update_dashboard')), array (  '_format' => 'json',  '_controller' => 'Claroline\\DashboardBundle\\Controller\\Api\\DashboardsController::updateDashboard',));
            }
            not_update_dashboard:

            if (0 === strpos($pathinfo, '/dashboard/api/dashboards')) {
                // get_dashboards
                if ($pathinfo === '/dashboard/api/dashboards') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_get_dashboards;
                    }

                    return array (  '_format' => 'json',  '_controller' => 'Claroline\\DashboardBundle\\Controller\\Api\\DashboardsController::getAll',  '_route' => 'get_dashboards',);
                }
                not_get_dashboards:

                // get_nb_dashboards
                if ($pathinfo === '/dashboard/api/dashboards/count') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_get_nb_dashboards;
                    }

                    return array (  '_format' => 'json',  '_controller' => 'Claroline\\DashboardBundle\\Controller\\Api\\DashboardsController::getNbDashboard',  '_route' => 'get_nb_dashboards',);
                }
                not_get_nb_dashboards:

                // get_dashboard_spent_times
                if (preg_match('#^/dashboard/api/dashboards/(?P<dashboardId>[^/]++)/times$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_get_dashboard_spent_times;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'get_dashboard_spent_times')), array (  '_format' => 'json',  '_controller' => 'Claroline\\DashboardBundle\\Controller\\Api\\DashboardsController::getDashboardWorkspaceSpentTimes',));
                }
                not_get_dashboard_spent_times:

                // get_dashboard_spent_times_by_workspace
                if (0 === strpos($pathinfo, '/dashboard/api/dashboards/preview') && preg_match('#^/dashboard/api/dashboards/preview/(?P<workspaceId>[^/]++)/times$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_get_dashboard_spent_times_by_workspace;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'get_dashboard_spent_times_by_workspace')), array (  '_format' => 'json',  '_controller' => 'Claroline\\DashboardBundle\\Controller\\Api\\DashboardsController::getDashboardWorkspaceSpentTimesByWorkspace',));
                }
                not_get_dashboard_spent_times_by_workspace:

                // delete_dashboard
                if (preg_match('#^/dashboard/api/dashboards/(?P<dashboardId>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_delete_dashboard;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'delete_dashboard')), array (  '_format' => 'json',  '_controller' => 'Claroline\\DashboardBundle\\Controller\\Api\\DashboardsController::deleteDashboard',));
                }
                not_delete_dashboard:

                // get_dashboard
                if (preg_match('#^/dashboard/api/dashboards/(?P<dashboardId>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_get_dashboard;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'get_dashboard')), array (  '_format' => 'json',  '_controller' => 'Claroline\\DashboardBundle\\Controller\\Api\\DashboardsController::getOne',));
                }
                not_get_dashboard:

            }

        }

        if (0 === strpos($pathinfo, '/clarolineclacoformbundle/claco/form')) {
            // claro_claco_form_open
            if (preg_match('#^/clarolineclacoformbundle/claco/form/(?P<clacoForm>[^/]++)/open$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_open')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::clacoFormOpenAction',));
            }

            // claro_claco_form_configuration_edit
            if (preg_match('#^/clarolineclacoformbundle/claco/form/(?P<clacoForm>[^/]++)/config/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_configuration_edit')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::clacoFormConfigurationEditAction',));
            }

            // claro_claco_form_template_edit
            if (preg_match('#^/clarolineclacoformbundle/claco/form/(?P<clacoForm>[^/]++)/template/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_template_edit')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::clacoFormTemplateEditAction',));
            }

            // claro_claco_form_field_create
            if (preg_match('#^/clarolineclacoformbundle/claco/form/(?P<clacoForm>[^/]++)/field/create$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_field_create')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::fieldCreateAction',));
            }

            if (0 === strpos($pathinfo, '/clarolineclacoformbundle/claco/form/field')) {
                // claro_claco_form_field_edit
                if (preg_match('#^/clarolineclacoformbundle/claco/form/field/(?P<field>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_field_edit')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::fieldEditAction',));
                }

                // claro_claco_form_field_delete
                if (preg_match('#^/clarolineclacoformbundle/claco/form/field/(?P<field>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_field_delete')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::fieldDeleteAction',));
                }

            }

            // claro_claco_form_get_field_by_name_excluding_id
            if (preg_match('#^/clarolineclacoformbundle/claco/form/(?P<clacoForm>[^/]++)/field/get/by/name/(?P<name>[^/]++)/excluding/id(?:/(?P<id>[^/]++))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_get_field_by_name_excluding_id')), array (  'id' => 0,  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::getFieldByNameExcludingIdAction',));
            }

            // claro_claco_form_field_choices_categories_retrieve
            if (0 === strpos($pathinfo, '/clarolineclacoformbundle/claco/form/field') && preg_match('#^/clarolineclacoformbundle/claco/form/field/(?P<field>[^/]++)/choices/categories/retrieve$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_field_choices_categories_retrieve')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::fieldChoicesCategoriesRetrieveAction',));
            }

            // claro_claco_form_category_create
            if (preg_match('#^/clarolineclacoformbundle/claco/form/(?P<clacoForm>[^/]++)/category/create$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_category_create')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::categoryCreateAction',));
            }

            if (0 === strpos($pathinfo, '/clarolineclacoformbundle/claco/form/category')) {
                // claro_claco_form_category_edit
                if (preg_match('#^/clarolineclacoformbundle/claco/form/category/(?P<category>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_category_edit')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::categoryEditAction',));
                }

                // claro_claco_form_category_delete
                if (preg_match('#^/clarolineclacoformbundle/claco/form/category/(?P<category>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_category_delete')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::categoryDeleteAction',));
                }

            }

            // claro_claco_form_keyword_create
            if (preg_match('#^/clarolineclacoformbundle/claco/form/(?P<clacoForm>[^/]++)/keyword/create$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_keyword_create')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::keywordCreateAction',));
            }

            if (0 === strpos($pathinfo, '/clarolineclacoformbundle/claco/form/keyword')) {
                // claro_claco_form_keyword_edit
                if (preg_match('#^/clarolineclacoformbundle/claco/form/keyword/(?P<keyword>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_keyword_edit')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::keywordEditAction',));
                }

                // claro_claco_form_keyword_delete
                if (preg_match('#^/clarolineclacoformbundle/claco/form/keyword/(?P<keyword>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_keyword_delete')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::keywordDeleteAction',));
                }

            }

            // claro_claco_form_get_keyword_by_name_excluding_id
            if (preg_match('#^/clarolineclacoformbundle/claco/form/(?P<clacoForm>[^/]++)/keyword/get/by/name/(?P<name>[^/]++)/excluding/id(?:/(?P<id>[^/]++))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_get_keyword_by_name_excluding_id')), array (  'id' => 0,  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::getKeywordByNameExcludingIdAction',));
            }

            // claro_claco_form_entry_random
            if (preg_match('#^/clarolineclacoformbundle/claco/form/(?P<clacoForm>[^/]++)/entry/random$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_entry_random')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::entryRandomAction',));
            }

            // claro_claco_form_entries_list
            if (preg_match('#^/clarolineclacoformbundle/claco/form/(?P<clacoForm>[^/]++)/entries/list$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_entries_list')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::entriesListAction',));
            }

            // claro_claco_form_entry_create
            if (preg_match('#^/clarolineclacoformbundle/claco/form/(?P<clacoForm>[^/]++)/entry/create$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_entry_create')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::entryCreateAction',));
            }

            if (0 === strpos($pathinfo, '/clarolineclacoformbundle/claco/form/entry')) {
                // claro_claco_form_entry_edit
                if (preg_match('#^/clarolineclacoformbundle/claco/form/entry/(?P<entry>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_entry_edit')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::entryEditAction',));
                }

                // claro_claco_form_entry_delete
                if (preg_match('#^/clarolineclacoformbundle/claco/form/entry/(?P<entry>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_entry_delete')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::entryDeleteAction',));
                }

                // claro_claco_form_entry_retrieve
                if (preg_match('#^/clarolineclacoformbundle/claco/form/entry/(?P<entry>[^/]++)/retrieve$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_entry_retrieve')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::entryRetrieveAction',));
                }

                // claro_claco_form_entry_status_change
                if (preg_match('#^/clarolineclacoformbundle/claco/form/entry/(?P<entry>[^/]++)/status/change$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_entry_status_change')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::entryStatusChangeAction',));
                }

                // claro_claco_form_entry_comments_retrieve
                if (preg_match('#^/clarolineclacoformbundle/claco/form/entry/(?P<entry>[^/]++)/comments/retrieve$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_entry_comments_retrieve')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::entryCommentsRetrieveAction',));
                }

                // claro_claco_form_entry_comment_create
                if (preg_match('#^/clarolineclacoformbundle/claco/form/entry/(?P<entry>[^/]++)/comment/create$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_entry_comment_create')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::commentCreateAction',));
                }

                if (0 === strpos($pathinfo, '/clarolineclacoformbundle/claco/form/entry/comment')) {
                    // claro_claco_form_entry_comment_edit
                    if (preg_match('#^/clarolineclacoformbundle/claco/form/entry/comment/(?P<comment>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_entry_comment_edit')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::commentEditAction',));
                    }

                    // claro_claco_form_entry_comment_delete
                    if (preg_match('#^/clarolineclacoformbundle/claco/form/entry/comment/(?P<comment>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_entry_comment_delete')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::commentDeleteAction',));
                    }

                    // claro_claco_form_entry_comment_activate
                    if (preg_match('#^/clarolineclacoformbundle/claco/form/entry/comment/(?P<comment>[^/]++)/activate$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_entry_comment_activate')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::commentActivateAction',));
                    }

                    // claro_claco_form_entry_comment_block
                    if (preg_match('#^/clarolineclacoformbundle/claco/form/entry/comment/(?P<comment>[^/]++)/block$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_entry_comment_block')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormController::commentBlockAction',));
                    }

                }

            }

            if (0 === strpos($pathinfo, '/clarolineclacoformbundle/claco/form/widget')) {
                // claro_claco_form_widget_open
                if (preg_match('#^/clarolineclacoformbundle/claco/form/widget/(?P<widgetInstance>[^/]++)/open$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_widget_open')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormWidgetController::clacoFormWidgetOpenAction',));
                }

                // claro_claco_form_widget_configure_form
                if (preg_match('#^/clarolineclacoformbundle/claco/form/widget/(?P<widgetInstance>[^/]++)/configure/form$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_widget_configure_form')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormWidgetController::clacoFormWidgetConfigureFormAction',));
                }

                // claro_claco_form_widget_configure
                if (0 === strpos($pathinfo, '/clarolineclacoformbundle/claco/form/widget/config') && preg_match('#^/clarolineclacoformbundle/claco/form/widget/config/(?P<config>[^/]++)/configure$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_widget_configure')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormWidgetController::clacoFormWidgetConfigureAction',));
                }

            }

            // claro_claco_form_non_confidential_fields_retrieve
            if (0 === strpos($pathinfo, '/clarolineclacoformbundle/claco/form/resource/node') && preg_match('#^/clarolineclacoformbundle/claco/form/resource/node/(?P<resourceNode>[^/]++)/fields/retrieve$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'claro_claco_form_non_confidential_fields_retrieve')), array (  '_controller' => 'Claroline\\ClacoFormBundle\\Controller\\ClacoFormWidgetController::clacoFormNonConfidentialFieldsRetrieveAction',));
            }

        }

        // zenstruck_ajax_entity
        if ($pathinfo === '/_entity_find') {
            if ($this->context->getMethod() != 'POST') {
                $allow[] = 'POST';
                goto not_zenstruck_ajax_entity;
            }

            return array (  '_controller' => 'zenstruck_form.ajax_entity_controller:findAction',  '_route' => 'zenstruck_ajax_entity',);
        }
        not_zenstruck_ajax_entity:

        // bazinga_jstranslation_js
        if (0 === strpos($pathinfo, '/translations') && preg_match('#^/translations(?:/(?P<domain>[\\w]+)(?:\\.(?P<_format>js|json))?)?$#s', $pathinfo, $matches)) {
            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'HEAD'));
                goto not_bazinga_jstranslation_js;
            }

            return $this->mergeDefaults(array_replace($matches, array('_route' => 'bazinga_jstranslation_js')), array (  '_controller' => 'bazinga.jstranslation.controller:getTranslationsAction',  'domain' => 'messages',  '_format' => 'js',));
        }
        not_bazinga_jstranslation_js:

        if (0 === strpos($pathinfo, '/exporter/api')) {
            // exporter_api_norewrite
            if ($pathinfo === '/exporter/api/query') {
                return array (  'entityReference' => 'null',  '_format' => 'xml',  '_controller' => 'IDCI\\Bundle\\ExporterBundle\\Controller\\ApiController::indexAction',  '_route' => 'exporter_api_norewrite',);
            }

            // exporter_api
            if (preg_match('#^/exporter/api/(?P<entityReference>[^/\\.]++)(?:\\.(?P<_format>[^/]++))?$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'exporter_api')), array (  '_format' => 'xml',  '_controller' => 'IDCI\\Bundle\\ExporterBundle\\Controller\\ApiController::indexAction',));
            }

        }

        // fos_oauth_server_token
        if ($pathinfo === '/oauth/v2/token') {
            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                goto not_fos_oauth_server_token;
            }

            return array (  '_controller' => 'fos_oauth_server.controller.token:tokenAction',  '_route' => 'fos_oauth_server_token',);
        }
        not_fos_oauth_server_token:

        throw 0 < count($allow) ? new MethodNotAllowedException(array_unique($allow)) : new ResourceNotFoundException();
    }
}
