<?php

use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InactiveScopeException;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

/*
 * appProdProjectContainer.
 *
 * This class has been auto-generated
 * by the Symfony Dependency Injection Component.
 */
class appProdProjectContainer extends Container
{
    private $parameters;
    private $targetDirs = array();

    /*
     * Constructor.
     */
    public function __construct()
    {
        $dir = __DIR__;
        for ($i = 1; $i <= 4; ++$i) {
            $this->targetDirs[$i] = $dir = dirname($dir);
        }
        $this->parameters = $this->getDefaultParameters();

        $this->services =
        $this->scopedServices =
        $this->scopeStacks = array();
        $this->scopes = array('request' => 'container');
        $this->scopeChildren = array('request' => array());
        $this->methodMap = array(
            '_jms_di_extra.unnamed.service_0' => 'getJmsDiExtra_Unnamed_Service0Service',
            'annotation_reader' => 'getAnnotationReaderService',
            'assetic.asset_factory' => 'getAssetic_AssetFactoryService',
            'assetic.asset_manager' => 'getAssetic_AssetManagerService',
            'assetic.filter.cssmin' => 'getAssetic_Filter_CssminService',
            'assetic.filter.cssrewrite' => 'getAssetic_Filter_CssrewriteService',
            'assetic.filter.jsmin' => 'getAssetic_Filter_JsminService',
            'assetic.filter.less' => 'getAssetic_Filter_LessService',
            'assetic.filter_manager' => 'getAssetic_FilterManagerService',
            'assets.context' => 'getAssets_ContextService',
            'assets.packages' => 'getAssets_PackagesService',
            'bazinga.jstranslation.controller' => 'getBazinga_Jstranslation_ControllerService',
            'bazinga.jstranslation.translation_dumper' => 'getBazinga_Jstranslation_TranslationDumperService',
            'bazinga.jstranslation.translation_finder' => 'getBazinga_Jstranslation_TranslationFinderService',
            'be_simple.sso_auth.client' => 'getBeSimple_SsoAuth_ClientService',
            'be_simple.sso_auth.factory' => 'getBeSimple_SsoAuth_FactoryService',
            'be_simple.sso_auth.protocol.cas' => 'getBeSimple_SsoAuth_Protocol_CasService',
            'be_simple.sso_auth.server.cas' => 'getBeSimple_SsoAuth_Server_CasService',
            'cache_clearer' => 'getCacheClearerService',
            'cache_warmer' => 'getCacheWarmerService',
            'captcha.type' => 'getCaptcha_TypeService',
            'claroline.activity_tool_bundle.listener.tool_listener' => 'getClaroline_ActivityToolBundle_Listener_ToolListenerService',
            'claroline.agenda_bundle.listener.agenda_listener' => 'getClaroline_AgendaBundle_Listener_AgendaListenerService',
            'claroline.agenda_bundle.validator.constraints.date_range_validator' => 'getClaroline_AgendaBundle_Validator_Constraints_DateRangeValidatorService',
            'claroline.announcement.manager.announcement_manager' => 'getClaroline_Announcement_Manager_AnnouncementManagerService',
            'claroline.announcement_bundle.listener.announcement_listener' => 'getClaroline_AnnouncementBundle_Listener_AnnouncementListenerService',
            'claroline.announcement_bundle.listener.announcement_widget_listener' => 'getClaroline_AnnouncementBundle_Listener_AnnouncementWidgetListenerService',
            'claroline.authentication_handler' => 'getClaroline_AuthenticationHandlerService',
            'claroline.authenticator' => 'getClaroline_AuthenticatorService',
            'claroline.captcha_extension' => 'getClaroline_CaptchaExtensionService',
            'claroline.chat_bundle.listener.chat_listener' => 'getClaroline_ChatBundle_Listener_ChatListenerService',
            'claroline.chat_bundle.listener.chat_room_listener' => 'getClaroline_ChatBundle_Listener_ChatRoomListenerService',
            'claroline.chat_bundle.listener.user_creation_listener' => 'getClaroline_ChatBundle_Listener_UserCreationListenerService',
            'claroline.chat_bundle.listener.user_delete_listener' => 'getClaroline_ChatBundle_Listener_UserDeleteListenerService',
            'claroline.chat_bundle.testing.persister' => 'getClaroline_ChatBundle_Testing_PersisterService',
            'claroline.claco_form_bundle.listener.claco_form_listener' => 'getClaroline_ClacoFormBundle_Listener_ClacoFormListenerService',
            'claroline.claco_form_bundle.listener.claco_form_widget_listener' => 'getClaroline_ClacoFormBundle_Listener_ClacoFormWidgetListenerService',
            'claroline.command.update_command' => 'getClaroline_Command_UpdateCommandService',
            'claroline.common.authentication_manager' => 'getClaroline_Common_AuthenticationManagerService',
            'claroline.common.graph_service' => 'getClaroline_Common_GraphServiceService',
            'claroline.common.home_service' => 'getClaroline_Common_HomeServiceService',
            'claroline.common.logo_service' => 'getClaroline_Common_LogoServiceService',
            'claroline.common.terms_of_service_manager' => 'getClaroline_Common_TermsOfServiceManagerService',
            'claroline.config.platform_config_handler' => 'getClaroline_Config_PlatformConfigHandlerService',
            'claroline.core_bundle.converter.authenticated_user_converter' => 'getClaroline_CoreBundle_Converter_AuthenticatedUserConverterService',
            'claroline.core_bundle.converter.current_user_converter' => 'getClaroline_CoreBundle_Converter_CurrentUserConverterService',
            'claroline.core_bundle.converter.multiple_ids_converter' => 'getClaroline_CoreBundle_Converter_MultipleIdsConverterService',
            'claroline.core_bundle.converter.orderable_converter' => 'getClaroline_CoreBundle_Converter_OrderableConverterService',
            'claroline.core_bundle.converter.strict_id_converter' => 'getClaroline_CoreBundle_Converter_StrictIdConverterService',
            'claroline.core_bundle.form.administration.portal_configuration_type' => 'getClaroline_CoreBundle_Form_Administration_PortalConfigurationTypeService',
            'claroline.core_bundle.form.field.resource_picker_type' => 'getClaroline_CoreBundle_Form_Field_ResourcePickerTypeService',
            'claroline.core_bundle.library.configuration.platform_defaults' => 'getClaroline_CoreBundle_Library_Configuration_PlatformDefaultsService',
            'claroline.core_bundle.library.security.authentication.claroline_api_listener' => 'getClaroline_CoreBundle_Library_Security_Authentication_ClarolineApiListenerService',
            'claroline.core_bundle.library.security.evaluator.admin_tool_access_evaluator' => 'getClaroline_CoreBundle_Library_Security_Evaluator_AdminToolAccessEvaluatorService',
            'claroline.core_bundle.library.security.evaluator.workspace_access_evaluator' => 'getClaroline_CoreBundle_Library_Security_Evaluator_WorkspaceAccessEvaluatorService',
            'claroline.core_bundle.library.security.external_authenticator' => 'getClaroline_CoreBundle_Library_Security_ExternalAuthenticatorService',
            'claroline.core_bundle.library.security.voter.administration_tool_voter' => 'getClaroline_CoreBundle_Library_Security_Voter_AdministrationToolVoterService',
            'claroline.core_bundle.library.security.voter.administrator_voter' => 'getClaroline_CoreBundle_Library_Security_Voter_AdministratorVoterService',
            'claroline.core_bundle.library.security.voter.facet_voter' => 'getClaroline_CoreBundle_Library_Security_Voter_FacetVoterService',
            'claroline.core_bundle.library.security.voter.group_voter' => 'getClaroline_CoreBundle_Library_Security_Voter_GroupVoterService',
            'claroline.core_bundle.library.security.voter.i_p_white_list_voter' => 'getClaroline_CoreBundle_Library_Security_Voter_IPWhiteListVoterService',
            'claroline.core_bundle.library.security.voter.resource_voter' => 'getClaroline_CoreBundle_Library_Security_Voter_ResourceVoterService',
            'claroline.core_bundle.library.security.voter.user_voter' => 'getClaroline_CoreBundle_Library_Security_Voter_UserVoterService',
            'claroline.core_bundle.library.security.voter.widget_voter' => 'getClaroline_CoreBundle_Library_Security_Voter_WidgetVoterService',
            'claroline.core_bundle.library.security.voter.workspace_voter' => 'getClaroline_CoreBundle_Library_Security_Voter_WorkspaceVoterService',
            'claroline.core_bundle.listener.activity_rule_listener' => 'getClaroline_CoreBundle_Listener_ActivityRuleListenerService',
            'claroline.core_bundle.listener.administration.user_listener' => 'getClaroline_CoreBundle_Listener_Administration_UserListenerService',
            'claroline.core_bundle.listener.administration_tool_listener' => 'getClaroline_CoreBundle_Listener_AdministrationToolListenerService',
            'claroline.core_bundle.listener.ajax_authentication_listener' => 'getClaroline_CoreBundle_Listener_AjaxAuthenticationListenerService',
            'claroline.core_bundle.listener.assetic_dump_listener' => 'getClaroline_CoreBundle_Listener_AsseticDumpListenerService',
            'claroline.core_bundle.listener.kernel_terminate_listener' => 'getClaroline_CoreBundle_Listener_KernelTerminateListenerService',
            'claroline.core_bundle.listener.log.log_listener' => 'getClaroline_CoreBundle_Listener_Log_LogListenerService',
            'claroline.core_bundle.listener.log.log_widget_listener' => 'getClaroline_CoreBundle_Listener_Log_LogWidgetListenerService',
            'claroline.core_bundle.listener.login_page_authentication_listener' => 'getClaroline_CoreBundle_Listener_LoginPageAuthenticationListenerService',
            'claroline.core_bundle.listener.notification.notification_user_parameters_listener' => 'getClaroline_CoreBundle_Listener_Notification_NotificationUserParametersListenerService',
            'claroline.core_bundle.listener.on_request_listener' => 'getClaroline_CoreBundle_Listener_OnRequestListenerService',
            'claroline.core_bundle.listener.profile_widget_listener' => 'getClaroline_CoreBundle_Listener_ProfileWidgetListenerService',
            'claroline.core_bundle.listener.resource.activity_listener' => 'getClaroline_CoreBundle_Listener_Resource_ActivityListenerService',
            'claroline.core_bundle.listener.resource.directory_listener' => 'getClaroline_CoreBundle_Listener_Resource_DirectoryListenerService',
            'claroline.core_bundle.listener.resource.text_listener' => 'getClaroline_CoreBundle_Listener_Resource_TextListenerService',
            'claroline.core_bundle.listener.resources_widget_listener' => 'getClaroline_CoreBundle_Listener_ResourcesWidgetListenerService',
            'claroline.core_bundle.listener.simple_text_widget_listener' => 'getClaroline_CoreBundle_Listener_SimpleTextWidgetListenerService',
            'claroline.core_bundle.listener.tool.home_listener' => 'getClaroline_CoreBundle_Listener_Tool_HomeListenerService',
            'claroline.core_bundle.listener.tool.my_contacts_listener' => 'getClaroline_CoreBundle_Listener_Tool_MyContactsListenerService',
            'claroline.core_bundle.listener.tool.resource_manager_listener' => 'getClaroline_CoreBundle_Listener_Tool_ResourceManagerListenerService',
            'claroline.core_bundle.listener.tool_listener' => 'getClaroline_CoreBundle_Listener_ToolListenerService',
            'claroline.core_bundle.listener.transfer.img_format_listener' => 'getClaroline_CoreBundle_Listener_Transfer_ImgFormatListenerService',
            'claroline.core_bundle.listener.unavailable_platform_listener' => 'getClaroline_CoreBundle_Listener_UnavailablePlatformListenerService',
            'claroline.core_bundle.listener.user_password_encoder' => 'getClaroline_CoreBundle_Listener_UserPasswordEncoderService',
            'claroline.core_bundle.listener.view_as_listener' => 'getClaroline_CoreBundle_Listener_ViewAsListenerService',
            'claroline.core_bundle.listener.workspace_widget_listener' => 'getClaroline_CoreBundle_Listener_WorkspaceWidgetListenerService',
            'claroline.core_bundle.rule.constraints.action_constraint' => 'getClaroline_CoreBundle_Rule_Constraints_ActionConstraintService',
            'claroline.core_bundle.rule.constraints.doer_constraint' => 'getClaroline_CoreBundle_Rule_Constraints_DoerConstraintService',
            'claroline.core_bundle.rule.constraints.occurence_constraint' => 'getClaroline_CoreBundle_Rule_Constraints_OccurenceConstraintService',
            'claroline.core_bundle.rule.constraints.receiver_constraint' => 'getClaroline_CoreBundle_Rule_Constraints_ReceiverConstraintService',
            'claroline.core_bundle.rule.constraints.resource_constraint' => 'getClaroline_CoreBundle_Rule_Constraints_ResourceConstraintService',
            'claroline.core_bundle.rule.constraints.result_constraint' => 'getClaroline_CoreBundle_Rule_Constraints_ResultConstraintService',
            'claroline.core_bundle.rule.constraints.rule_active_date_constraint' => 'getClaroline_CoreBundle_Rule_Constraints_RuleActiveDateConstraintService',
            'claroline.core_bundle.twig.base_uri_extension' => 'getClaroline_CoreBundle_Twig_BaseUriExtensionService',
            'claroline.core_bundle.twig.composer_extension' => 'getClaroline_CoreBundle_Twig_ComposerExtensionService',
            'claroline.core_bundle.twig.content_extension' => 'getClaroline_CoreBundle_Twig_ContentExtensionService',
            'claroline.core_bundle.twig.date_formatter_extension' => 'getClaroline_CoreBundle_Twig_DateFormatterExtensionService',
            'claroline.core_bundle.twig.escaper_extension' => 'getClaroline_CoreBundle_Twig_EscaperExtensionService',
            'claroline.core_bundle.twig.file_extension' => 'getClaroline_CoreBundle_Twig_FileExtensionService',
            'claroline.core_bundle.twig.has_role_extension' => 'getClaroline_CoreBundle_Twig_HasRoleExtensionService',
            'claroline.core_bundle.twig.listener_extension' => 'getClaroline_CoreBundle_Twig_ListenerExtensionService',
            'claroline.core_bundle.twig.mailer_extension' => 'getClaroline_CoreBundle_Twig_MailerExtensionService',
            'claroline.core_bundle.twig.maintenance_extension' => 'getClaroline_CoreBundle_Twig_MaintenanceExtensionService',
            'claroline.core_bundle.twig.pcre_extension' => 'getClaroline_CoreBundle_Twig_PcreExtensionService',
            'claroline.core_bundle.twig.platform_configuration_extension' => 'getClaroline_CoreBundle_Twig_PlatformConfigurationExtensionService',
            'claroline.core_bundle.twig.resource_extension' => 'getClaroline_CoreBundle_Twig_ResourceExtensionService',
            'claroline.core_bundle.twig.router_extension' => 'getClaroline_CoreBundle_Twig_RouterExtensionService',
            'claroline.core_bundle.twig.send_datas_confirm_extension' => 'getClaroline_CoreBundle_Twig_SendDatasConfirmExtensionService',
            'claroline.core_bundle.twig.serializer_extension' => 'getClaroline_CoreBundle_Twig_SerializerExtensionService',
            'claroline.core_bundle.twig.theme_extension' => 'getClaroline_CoreBundle_Twig_ThemeExtensionService',
            'claroline.core_bundle.twig.url_auto_detector_twig_extension' => 'getClaroline_CoreBundle_Twig_UrlAutoDetectorTwigExtensionService',
            'claroline.core_bundle.twig.var_type_extension' => 'getClaroline_CoreBundle_Twig_VarTypeExtensionService',
            'claroline.core_bundle.twig.version_compare_extension' => 'getClaroline_CoreBundle_Twig_VersionCompareExtensionService',
            'claroline.core_bundle.twig.workspace_access_extension' => 'getClaroline_CoreBundle_Twig_WorkspaceAccessExtensionService',
            'claroline.core_bundle.validator.constraints.admin_workspace_tag_unique_name_validator' => 'getClaroline_CoreBundle_Validator_Constraints_AdminWorkspaceTagUniqueNameValidatorService',
            'claroline.core_bundle.validator.constraints.csv_directory_validator' => 'getClaroline_CoreBundle_Validator_Constraints_CsvDirectoryValidatorService',
            'claroline.core_bundle.validator.constraints.csv_home_tab_validator' => 'getClaroline_CoreBundle_Validator_Constraints_CsvHomeTabValidatorService',
            'claroline.core_bundle.validator.constraints.csv_home_text_widget_validator' => 'getClaroline_CoreBundle_Validator_Constraints_CsvHomeTextWidgetValidatorService',
            'claroline.core_bundle.validator.constraints.csv_user_validator' => 'getClaroline_CoreBundle_Validator_Constraints_CsvUserValidatorService',
            'claroline.core_bundle.validator.constraints.csv_workspace_user_import_validator' => 'getClaroline_CoreBundle_Validator_Constraints_CsvWorkspaceUserImportValidatorService',
            'claroline.core_bundle.validator.constraints.csv_workspace_validator' => 'getClaroline_CoreBundle_Validator_Constraints_CsvWorkspaceValidatorService',
            'claroline.core_bundle.validator.constraints.domain_name_validator' => 'getClaroline_CoreBundle_Validator_Constraints_DomainNameValidatorService',
            'claroline.core_bundle.validator.constraints.file_size_validator' => 'getClaroline_CoreBundle_Validator_Constraints_FileSizeValidatorService',
            'claroline.core_bundle.validator.constraints.ics_file_validator' => 'getClaroline_CoreBundle_Validator_Constraints_IcsFileValidatorService',
            'claroline.core_bundle.validator.constraints.import_users_in_group_validator' => 'getClaroline_CoreBundle_Validator_Constraints_ImportUsersInGroupValidatorService',
            'claroline.core_bundle.validator.constraints.profile_pics_file_validator' => 'getClaroline_CoreBundle_Validator_Constraints_ProfilePicsFileValidatorService',
            'claroline.core_bundle.validator.constraints.role_name_validator' => 'getClaroline_CoreBundle_Validator_Constraints_RoleNameValidatorService',
            'claroline.core_bundle.validator.constraints.user_administrative_code_validator' => 'getClaroline_CoreBundle_Validator_Constraints_UserAdministrativeCodeValidatorService',
            'claroline.core_bundle.validator.constraints.username_validator' => 'getClaroline_CoreBundle_Validator_Constraints_UsernameValidatorService',
            'claroline.core_bundle.validator.constraints.workspace_unique_code_validator' => 'getClaroline_CoreBundle_Validator_Constraints_WorkspaceUniqueCodeValidatorService',
            'claroline.cursus_bundle.listener.cursus_listener' => 'getClaroline_CursusBundle_Listener_CursusListenerService',
            'claroline.cursus_bundle.listener.cursus_registration_listener' => 'getClaroline_CursusBundle_Listener_CursusRegistrationListenerService',
            'claroline.cursus_bundle.listener.cursus_widget_listener' => 'getClaroline_CursusBundle_Listener_CursusWidgetListenerService',
            'claroline.dashboard_bundle.listener.dashboard_listener' => 'getClaroline_DashboardBundle_Listener_DashboardListenerService',
            'claroline.doctrine.debug' => 'getClaroline_Doctrine_DebugService',
            'claroline.doctrine.entity_listener_resolver' => 'getClaroline_Doctrine_EntityListenerResolverService',
            'claroline.doctrine_fixture_executor' => 'getClaroline_DoctrineFixtureExecutorService',
            'claroline.event.event_dispatcher' => 'getClaroline_Event_EventDispatcherService',
            'claroline.event.manager' => 'getClaroline_Event_ManagerService',
            'claroline.exporter.csv' => 'getClaroline_Exporter_CsvService',
            'claroline.exporter.xls' => 'getClaroline_Exporter_XlsService',
            'claroline.extension.webpack' => 'getClaroline_Extension_WebpackService',
            'claroline.flashcard.card_learning_manager' => 'getClaroline_Flashcard_CardLearningManagerService',
            'claroline.flashcard.card_log_manager' => 'getClaroline_Flashcard_CardLogManagerService',
            'claroline.flashcard.card_manager' => 'getClaroline_Flashcard_CardManagerService',
            'claroline.flashcard.deck_listener' => 'getClaroline_Flashcard_DeckListenerService',
            'claroline.flashcard.deck_manager' => 'getClaroline_Flashcard_DeckManagerService',
            'claroline.flashcard.note_manager' => 'getClaroline_Flashcard_NoteManagerService',
            'claroline.flashcard.note_type_manager' => 'getClaroline_Flashcard_NoteTypeManagerService',
            'claroline.flashcard.session_manager' => 'getClaroline_Flashcard_SessionManagerService',
            'claroline.form.adminlogfilter' => 'getClaroline_Form_AdminlogfilterService',
            'claroline.form.agenda' => 'getClaroline_Form_AgendaService',
            'claroline.form.base_content' => 'getClaroline_Form_BaseContentService',
            'claroline.form.buttongroupselect' => 'getClaroline_Form_ButtongroupselectService',
            'claroline.form.content' => 'getClaroline_Form_ContentService',
            'claroline.form.datepicker' => 'getClaroline_Form_DatepickerService',
            'claroline.form.daterange' => 'getClaroline_Form_DaterangeService',
            'claroline.form.datetimepicker' => 'getClaroline_Form_DatetimepickerService',
            'claroline.form.honeypot' => 'getClaroline_Form_HoneypotService',
            'claroline.form.logworkspacewidgetconfig' => 'getClaroline_Form_LogworkspacewidgetconfigService',
            'claroline.form.resourcelogfilter' => 'getClaroline_Form_ResourcelogfilterService',
            'claroline.form.scroll' => 'getClaroline_Form_ScrollService',
            'claroline.form.select2' => 'getClaroline_Form_Select2Service',
            'claroline.form.simpleautocomplete' => 'getClaroline_Form_SimpleautocompleteService',
            'claroline.form.tinymce' => 'getClaroline_Form_TinymceService',
            'claroline.form.twolevelselect' => 'getClaroline_Form_TwolevelselectService',
            'claroline.form.user_picker' => 'getClaroline_Form_UserPickerService',
            'claroline.form.workspacelogfilter' => 'getClaroline_Form_WorkspacelogfilterService',
            'claroline.form_handler' => 'getClaroline_FormHandlerService',
            'claroline.forum_bundle.listener.forum_widget_listener' => 'getClaroline_ForumBundle_Listener_ForumWidgetListenerService',
            'claroline.forum_bundle.listener.notification_listener' => 'getClaroline_ForumBundle_Listener_NotificationListenerService',
            'claroline.forum_bundle.listener.notification_user_parameters_listener' => 'getClaroline_ForumBundle_Listener_NotificationUserParametersListenerService',
            'claroline.honeypot_extension' => 'getClaroline_HoneypotExtensionService',
            'claroline.importer.announcement_importer' => 'getClaroline_Importer_AnnouncementImporterService',
            'claroline.importer.forum_importer' => 'getClaroline_Importer_ForumImporterService',
            'claroline.importer.groups_importer' => 'getClaroline_Importer_GroupsImporterService',
            'claroline.importer.icap_blog_importer' => 'getClaroline_Importer_IcapBlogImporterService',
            'claroline.importer.icap_lesson_importer' => 'getClaroline_Importer_IcapLessonImporterService',
            'claroline.importer.icap_website_importer' => 'getClaroline_Importer_IcapWebsiteImporterService',
            'claroline.importer.icap_wiki_importer' => 'getClaroline_Importer_IcapWikiImporterService',
            'claroline.importer.merger' => 'getClaroline_Importer_MergerService',
            'claroline.importer.properties_importer' => 'getClaroline_Importer_PropertiesImporterService',
            'claroline.importer.rich_text_formatter' => 'getClaroline_Importer_RichTextFormatterService',
            'claroline.importer.role_importer' => 'getClaroline_Importer_RoleImporterService',
            'claroline.importer.tools_importer' => 'getClaroline_Importer_ToolsImporterService',
            'claroline.importer.users_importer' => 'getClaroline_Importer_UsersImporterService',
            'claroline.installation.fixture_loader' => 'getClaroline_Installation_FixtureLoaderService',
            'claroline.installation.loader' => 'getClaroline_Installation_LoaderService',
            'claroline.installation.manager' => 'getClaroline_Installation_ManagerService',
            'claroline.installation.operation_executor' => 'getClaroline_Installation_OperationExecutorService',
            'claroline.installation.platform_installer' => 'getClaroline_Installation_PlatformInstallerService',
            'claroline.installation.refresher' => 'getClaroline_Installation_RefresherService',
            'claroline.library.scorm_12' => 'getClaroline_Library_Scorm12Service',
            'claroline.library.scorm_2004' => 'getClaroline_Library_Scorm2004Service',
            'claroline.library.testing.cursuspersister' => 'getClaroline_Library_Testing_CursuspersisterService',
            'claroline.library.testing.persister' => 'getClaroline_Library_Testing_PersisterService',
            'claroline.library.view.serializer.csv' => 'getClaroline_Library_View_Serializer_CsvService',
            'claroline.library.view.serializer.serializer' => 'getClaroline_Library_View_Serializer_SerializerService',
            'claroline.library.view.serializer.xls' => 'getClaroline_Library_View_Serializer_XlsService',
            'claroline.listener.core.notification_listener' => 'getClaroline_Listener_Core_NotificationListenerService',
            'claroline.listener.file_listener' => 'getClaroline_Listener_FileListenerService',
            'claroline.listener.forum_listener' => 'getClaroline_Listener_ForumListenerService',
            'claroline.listener.image_player_listener' => 'getClaroline_Listener_ImagePlayerListenerService',
            'claroline.listener.pdf_player_listener' => 'getClaroline_Listener_PdfPlayerListenerService',
            'claroline.listener.video_player_listener' => 'getClaroline_Listener_VideoPlayerListenerService',
            'claroline.listener.web_resource_listener' => 'getClaroline_Listener_WebResourceListenerService',
            'claroline.locale_setter' => 'getClaroline_LocaleSetterService',
            'claroline.log.manager' => 'getClaroline_Log_ManagerService',
            'claroline.mailing.transport_factory' => 'getClaroline_Mailing_TransportFactoryService',
            'claroline.manager.activity_manager' => 'getClaroline_Manager_ActivityManagerService',
            'claroline.manager.administration_manager' => 'getClaroline_Manager_AdministrationManagerService',
            'claroline.manager.agenda_manager' => 'getClaroline_Manager_AgendaManagerService',
            'claroline.manager.analytics_manager' => 'getClaroline_Manager_AnalyticsManagerService',
            'claroline.manager.api_manager' => 'getClaroline_Manager_ApiManagerService',
            'claroline.manager.cache_manager' => 'getClaroline_Manager_CacheManagerService',
            'claroline.manager.calendar.event_manager' => 'getClaroline_Manager_Calendar_EventManagerService',
            'claroline.manager.calendar.leave_manager' => 'getClaroline_Manager_Calendar_LeaveManagerService',
            'claroline.manager.calendar.period_manager' => 'getClaroline_Manager_Calendar_PeriodManagerService',
            'claroline.manager.calendar.schedule_template_manager' => 'getClaroline_Manager_Calendar_ScheduleTemplateManagerService',
            'claroline.manager.calendar.time_slot_manager' => 'getClaroline_Manager_Calendar_TimeSlotManagerService',
            'claroline.manager.calendar.year_manager' => 'getClaroline_Manager_Calendar_YearManagerService',
            'claroline.manager.chat_manager' => 'getClaroline_Manager_ChatManagerService',
            'claroline.manager.claco_form_manager' => 'getClaroline_Manager_ClacoFormManagerService',
            'claroline.manager.contact_manager' => 'getClaroline_Manager_ContactManagerService',
            'claroline.manager.content_manager' => 'getClaroline_Manager_ContentManagerService',
            'claroline.manager.curl_manager' => 'getClaroline_Manager_CurlManagerService',
            'claroline.manager.cursus_api_manager' => 'getClaroline_Manager_CursusApiManagerService',
            'claroline.manager.cursus_manager' => 'getClaroline_Manager_CursusManagerService',
            'claroline.manager.dashboard_manager' => 'getClaroline_Manager_DashboardManagerService',
            'claroline.manager.exporter_manager' => 'getClaroline_Manager_ExporterManagerService',
            'claroline.manager.facet_manager' => 'getClaroline_Manager_FacetManagerService',
            'claroline.manager.file_manager' => 'getClaroline_Manager_FileManagerService',
            'claroline.manager.forum_manager' => 'getClaroline_Manager_ForumManagerService',
            'claroline.manager.group_manager' => 'getClaroline_Manager_GroupManagerService',
            'claroline.manager.home_manager' => 'getClaroline_Manager_HomeManagerService',
            'claroline.manager.home_tab_manager' => 'getClaroline_Manager_HomeTabManagerService',
            'claroline.manager.icon_manager' => 'getClaroline_Manager_IconManagerService',
            'claroline.manager.import_csv_manager' => 'getClaroline_Manager_ImportCsvManagerService',
            'claroline.manager.ini_file_manager' => 'getClaroline_Manager_IniFileManagerService',
            'claroline.manager.ip_white_list_manager' => 'getClaroline_Manager_IpWhiteListManagerService',
            'claroline.manager.locale_manager' => 'getClaroline_Manager_LocaleManagerService',
            'claroline.manager.mail_manager' => 'getClaroline_Manager_MailManagerService',
            'claroline.manager.mask_manager' => 'getClaroline_Manager_MaskManagerService',
            'claroline.manager.message_manager' => 'getClaroline_Manager_MessageManagerService',
            'claroline.manager.migration_manager' => 'getClaroline_Manager_MigrationManagerService',
            'claroline.manager.oauth_manager' => 'getClaroline_Manager_OauthManagerService',
            'claroline.manager.organization.location_manager' => 'getClaroline_Manager_Organization_LocationManagerService',
            'claroline.manager.organization.organization_manager' => 'getClaroline_Manager_Organization_OrganizationManagerService',
            'claroline.manager.pdf_manager' => 'getClaroline_Manager_PdfManagerService',
            'claroline.manager.plugin_manager' => 'getClaroline_Manager_PluginManagerService',
            'claroline.manager.portal_manager' => 'getClaroline_Manager_PortalManagerService',
            'claroline.manager.profile_property_manager' => 'getClaroline_Manager_ProfilePropertyManagerService',
            'claroline.manager.resource_manager' => 'getClaroline_Manager_ResourceManagerService',
            'claroline.manager.resources_widget_manager' => 'getClaroline_Manager_ResourcesWidgetManagerService',
            'claroline.manager.rights_manager' => 'getClaroline_Manager_RightsManagerService',
            'claroline.manager.role_manager' => 'getClaroline_Manager_RoleManagerService',
            'claroline.manager.rss_manager' => 'getClaroline_Manager_RssManagerService',
            'claroline.manager.scorm_manager' => 'getClaroline_Manager_ScormManagerService',
            'claroline.manager.security_token_manager' => 'getClaroline_Manager_SecurityTokenManagerService',
            'claroline.manager.simple_text_manager' => 'getClaroline_Manager_SimpleTextManagerService',
            'claroline.manager.survey_manager' => 'getClaroline_Manager_SurveyManagerService',
            'claroline.manager.tag_manager' => 'getClaroline_Manager_TagManagerService',
            'claroline.manager.team_manager' => 'getClaroline_Manager_TeamManagerService',
            'claroline.manager.text_manager' => 'getClaroline_Manager_TextManagerService',
            'claroline.manager.theme_manager' => 'getClaroline_Manager_ThemeManagerService',
            'claroline.manager.tool_manager' => 'getClaroline_Manager_ToolManagerService',
            'claroline.manager.tool_mask_decoder_manager' => 'getClaroline_Manager_ToolMaskDecoderManagerService',
            'claroline.manager.tool_rights_manager' => 'getClaroline_Manager_ToolRightsManagerService',
            'claroline.manager.transfer_manager' => 'getClaroline_Manager_TransferManagerService',
            'claroline.manager.user_manager' => 'getClaroline_Manager_UserManagerService',
            'claroline.manager.video_player_manager' => 'getClaroline_Manager_VideoPlayerManagerService',
            'claroline.manager.widget_manager' => 'getClaroline_Manager_WidgetManagerService',
            'claroline.manager.workspace_manager' => 'getClaroline_Manager_WorkspaceManagerService',
            'claroline.manager.workspace_model_manager' => 'getClaroline_Manager_WorkspaceModelManagerService',
            'claroline.manager.workspace_tag_manager' => 'getClaroline_Manager_WorkspaceTagManagerService',
            'claroline.manager.workspace_user_queue_manager' => 'getClaroline_Manager_WorkspaceUserQueueManagerService',
            'claroline.menu.contact_additional_actions_renderer' => 'getClaroline_Menu_ContactAdditionalActionsRendererService',
            'claroline.menu.desktop_parameters_renderer' => 'getClaroline_Menu_DesktopParametersRendererService',
            'claroline.menu.exception_actions_renderer' => 'getClaroline_Menu_ExceptionActionsRendererService',
            'claroline.menu.external_authentication_renderer' => 'getClaroline_Menu_ExternalAuthenticationRendererService',
            'claroline.menu.group_additional_actions_renderer' => 'getClaroline_Menu_GroupAdditionalActionsRendererService',
            'claroline.menu.top_bar_left_renderer' => 'getClaroline_Menu_TopBarLeftRendererService',
            'claroline.menu.top_bar_right_renderer' => 'getClaroline_Menu_TopBarRightRendererService',
            'claroline.menu.user_additional_actions_renderer' => 'getClaroline_Menu_UserAdditionalActionsRendererService',
            'claroline.menu.workspace_additional_actions_renderer' => 'getClaroline_Menu_WorkspaceAdditionalActionsRendererService',
            'claroline.menu.workspace_user_renderer' => 'getClaroline_Menu_WorkspaceUserRendererService',
            'claroline.message_bundle.listener.message_listener' => 'getClaroline_MessageBundle_Listener_MessageListenerService',
            'claroline.message_bundle.validator.constraints.send_to_names_validator' => 'getClaroline_MessageBundle_Validator_Constraints_SendToNamesValidatorService',
            'claroline.migration.doctrine_schema_tool' => 'getClaroline_Migration_DoctrineSchemaToolService',
            'claroline.migration.generator' => 'getClaroline_Migration_GeneratorService',
            'claroline.migration.manager' => 'getClaroline_Migration_ManagerService',
            'claroline.migration.migrator' => 'getClaroline_Migration_MigratorService',
            'claroline.migration.writer' => 'getClaroline_Migration_WriterService',
            'claroline.pager.pager_factory' => 'getClaroline_Pager_PagerFactoryService',
            'claroline.pdf_generator_factory' => 'getClaroline_PdfGeneratorFactoryService',
            'claroline.persistence.object_manager' => 'getClaroline_Persistence_ObjectManagerService',
            'claroline.plugin.config_checker' => 'getClaroline_Plugin_ConfigCheckerService',
            'claroline.plugin.installer' => 'getClaroline_Plugin_InstallerService',
            'claroline.plugin.loader' => 'getClaroline_Plugin_LoaderService',
            'claroline.plugin.recorder' => 'getClaroline_Plugin_RecorderService',
            'claroline.plugin.recorder_database_writer' => 'getClaroline_Plugin_RecorderDatabaseWriterService',
            'claroline.plugin.routing_checker' => 'getClaroline_Plugin_RoutingCheckerService',
            'claroline.plugin.validator' => 'getClaroline_Plugin_ValidatorService',
            'claroline.repository.log' => 'getClaroline_Repository_LogService',
            'claroline.repository.portal' => 'getClaroline_Repository_PortalService',
            'claroline.repository.user' => 'getClaroline_Repository_UserService',
            'claroline.result.log_listener' => 'getClaroline_Result_LogListenerService',
            'claroline.result.result_listener' => 'getClaroline_Result_ResultListenerService',
            'claroline.result.result_manager' => 'getClaroline_Result_ResultManagerService',
            'claroline.rss_reader.atom_reader' => 'getClaroline_RssReader_AtomReaderService',
            'claroline.rss_reader.provider' => 'getClaroline_RssReader_ProviderService',
            'claroline.rss_reader.rss_reader' => 'getClaroline_RssReader_RssReaderService',
            'claroline.rss_reader_bundle.listener.rss_reader_listener' => 'getClaroline_RssReaderBundle_Listener_RssReaderListenerService',
            'claroline.rule.validator' => 'getClaroline_Rule_ValidatorService',
            'claroline.scorm.export_manager' => 'getClaroline_Scorm_ExportManagerService',
            'claroline.scorm.rich_text_exporter' => 'getClaroline_Scorm_RichTextExporterService',
            'claroline.scorm_bundle.listener.scorm12_listener' => 'getClaroline_ScormBundle_Listener_Scorm12ListenerService',
            'claroline.scorm_bundle.listener.scorm2004_listener' => 'getClaroline_ScormBundle_Listener_Scorm2004ListenerService',
            'claroline.security.token_updater' => 'getClaroline_Security_TokenUpdaterService',
            'claroline.security.utilities' => 'getClaroline_Security_UtilitiesService',
            'claroline.session.database_validator' => 'getClaroline_Session_DatabaseValidatorService',
            'claroline.session.handler_factory' => 'getClaroline_Session_HandlerFactoryService',
            'claroline.session.storage_options' => 'getClaroline_Session_StorageOptionsService',
            'claroline.session.storage_options_factory' => 'getClaroline_Session_StorageOptionsFactoryService',
            'claroline.survey_bundle.listener.survey_listener' => 'getClaroline_SurveyBundle_Listener_SurveyListenerService',
            'claroline.symfony_fixture_loader' => 'getClaroline_SymfonyFixtureLoaderService',
            'claroline.symfony_yaml' => 'getClaroline_SymfonyYamlService',
            'claroline.tag_bundle.listener.tag_listener' => 'getClaroline_TagBundle_Listener_TagListenerService',
            'claroline.tag_bundle.listener.tag_tool_listener' => 'getClaroline_TagBundle_Listener_TagToolListenerService',
            'claroline.tag_bundle.listener.tag_widget_listener' => 'getClaroline_TagBundle_Listener_TagWidgetListenerService',
            'claroline.team_bundle.listener.team_listener' => 'getClaroline_TeamBundle_Listener_TeamListenerService',
            'claroline.temporary_access_resource_manager' => 'getClaroline_TemporaryAccessResourceManagerService',
            'claroline.text_player_bundle.listener.text_player_listener' => 'getClaroline_TextPlayerBundle_Listener_TextPlayerListenerService',
            'claroline.tool.home_importer' => 'getClaroline_Tool_HomeImporterService',
            'claroline.tool.resource_manager_importer' => 'getClaroline_Tool_ResourceManagerImporterService',
            'claroline.tool.resources.activity_importer' => 'getClaroline_Tool_Resources_ActivityImporterService',
            'claroline.tool.resources.file_importer' => 'getClaroline_Tool_Resources_FileImporterService',
            'claroline.tool.resources.scorm12_importer' => 'getClaroline_Tool_Resources_Scorm12ImporterService',
            'claroline.tool.resources.scorm2004_importer' => 'getClaroline_Tool_Resources_Scorm2004ImporterService',
            'claroline.tool.resources.text_importer' => 'getClaroline_Tool_Resources_TextImporterService',
            'claroline.tool.resources.web_resource' => 'getClaroline_Tool_Resources_WebResourceService',
            'claroline.transformer.resource_picker' => 'getClaroline_Transformer_ResourcePickerService',
            'claroline.transformer.user_picker' => 'getClaroline_Transformer_UserPickerService',
            'claroline.twig.home_extension' => 'getClaroline_Twig_HomeExtensionService',
            'claroline.utilities.lipsum_generator' => 'getClaroline_Utilities_LipsumGeneratorService',
            'claroline.utilities.mime_type_guesser' => 'getClaroline_Utilities_MimeTypeGuesserService',
            'claroline.utilities.misc' => 'getClaroline_Utilities_MiscService',
            'claroline.utilities.thumbnail_creator' => 'getClaroline_Utilities_ThumbnailCreatorService',
            'claroline.video_player_bundle.twig.video_extension' => 'getClaroline_VideoPlayerBundle_Twig_VideoExtensionService',
            'claroline.view_handler.exporter.class' => 'getClaroline_ViewHandler_Exporter_ClassService',
            'claroline.widget.text_importer' => 'getClaroline_Widget_TextImporterService',
            'claroline_form_deck' => 'getClarolineFormDeckService',
            'claroline_form_result' => 'getClarolineFormResultService',
            'controller_name_converter' => 'getControllerNameConverterService',
            'debug.debug_handlers_listener' => 'getDebug_DebugHandlersListenerService',
            'debug.stopwatch' => 'getDebug_StopwatchService',
            'doctrine' => 'getDoctrineService',
            'doctrine.dbal.connection_factory' => 'getDoctrine_Dbal_ConnectionFactoryService',
            'doctrine.dbal.default_connection' => 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.orm.default_entity_listener_resolver' => 'getDoctrine_Orm_DefaultEntityListenerResolverService',
            'doctrine.orm.default_entity_manager' => 'getDoctrine_Orm_DefaultEntityManagerService',
            'doctrine.orm.default_entity_manager.delegate' => 'getDoctrine_Orm_DefaultEntityManager_DelegateService',
            'doctrine.orm.default_listeners.attach_entity_listeners' => 'getDoctrine_Orm_DefaultListeners_AttachEntityListenersService',
            'doctrine.orm.default_manager_configurator' => 'getDoctrine_Orm_DefaultManagerConfiguratorService',
            'doctrine.orm.validator.unique' => 'getDoctrine_Orm_Validator_UniqueService',
            'doctrine.orm.validator_initializer' => 'getDoctrine_Orm_ValidatorInitializerService',
            'doctrine_cache.providers.doctrine.orm.default_metadata_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService',
            'doctrine_cache.providers.doctrine.orm.default_query_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService',
            'doctrine_cache.providers.doctrine.orm.default_result_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService',
            'event_dispatcher' => 'getEventDispatcherService',
            'file_locator' => 'getFileLocatorService',
            'filesystem' => 'getFilesystemService',
            'form.csrf_provider' => 'getForm_CsrfProviderService',
            'form.factory' => 'getForm_FactoryService',
            'form.registry' => 'getForm_RegistryService',
            'form.resolved_type_factory' => 'getForm_ResolvedTypeFactoryService',
            'form.server_params' => 'getForm_ServerParamsService',
            'form.type.birthday' => 'getForm_Type_BirthdayService',
            'form.type.button' => 'getForm_Type_ButtonService',
            'form.type.checkbox' => 'getForm_Type_CheckboxService',
            'form.type.choice' => 'getForm_Type_ChoiceService',
            'form.type.collection' => 'getForm_Type_CollectionService',
            'form.type.country' => 'getForm_Type_CountryService',
            'form.type.currency' => 'getForm_Type_CurrencyService',
            'form.type.date' => 'getForm_Type_DateService',
            'form.type.datetime' => 'getForm_Type_DatetimeService',
            'form.type.email' => 'getForm_Type_EmailService',
            'form.type.entity' => 'getForm_Type_EntityService',
            'form.type.file' => 'getForm_Type_FileService',
            'form.type.form' => 'getForm_Type_FormService',
            'form.type.hidden' => 'getForm_Type_HiddenService',
            'form.type.integer' => 'getForm_Type_IntegerService',
            'form.type.language' => 'getForm_Type_LanguageService',
            'form.type.locale' => 'getForm_Type_LocaleService',
            'form.type.money' => 'getForm_Type_MoneyService',
            'form.type.number' => 'getForm_Type_NumberService',
            'form.type.password' => 'getForm_Type_PasswordService',
            'form.type.percent' => 'getForm_Type_PercentService',
            'form.type.radio' => 'getForm_Type_RadioService',
            'form.type.repeated' => 'getForm_Type_RepeatedService',
            'form.type.reset' => 'getForm_Type_ResetService',
            'form.type.search' => 'getForm_Type_SearchService',
            'form.type.submit' => 'getForm_Type_SubmitService',
            'form.type.text' => 'getForm_Type_TextService',
            'form.type.textarea' => 'getForm_Type_TextareaService',
            'form.type.time' => 'getForm_Type_TimeService',
            'form.type.timezone' => 'getForm_Type_TimezoneService',
            'form.type.url' => 'getForm_Type_UrlService',
            'form.type_extension.csrf' => 'getForm_TypeExtension_CsrfService',
            'form.type_extension.form.http_foundation' => 'getForm_TypeExtension_Form_HttpFoundationService',
            'form.type_extension.form.validator' => 'getForm_TypeExtension_Form_ValidatorService',
            'form.type_extension.repeated.validator' => 'getForm_TypeExtension_Repeated_ValidatorService',
            'form.type_extension.submit.validator' => 'getForm_TypeExtension_Submit_ValidatorService',
            'form.type_extension.upload.validator' => 'getForm_TypeExtension_Upload_ValidatorService',
            'form.type_guesser.doctrine' => 'getForm_TypeGuesser_DoctrineService',
            'form.type_guesser.validator' => 'getForm_TypeGuesser_ValidatorService',
            'forma_libre.presence_bundle.listener.presence_listener' => 'getFormaLibre_PresenceBundle_Listener_PresenceListenerService',
            'forma_libre.reservation_bundle.listener.reservation_tool_listener' => 'getFormaLibre_ReservationBundle_Listener_ReservationToolListenerService',
            'forma_libre.reservation_bundle.validator.constraints.csv_resource_validator' => 'getFormaLibre_ReservationBundle_Validator_Constraints_CsvResourceValidatorService',
            'forma_libre.reservation_bundle.validator.constraints.date_range_validator' => 'getFormaLibre_ReservationBundle_Validator_Constraints_DateRangeValidatorService',
            'forma_libre.reservation_bundle.validator.constraints.duration_validator' => 'getFormaLibre_ReservationBundle_Validator_Constraints_DurationValidatorService',
            'forma_libre.reservation_bundle.validator.constraints.reservation_modify_validator' => 'getFormaLibre_ReservationBundle_Validator_Constraints_ReservationModifyValidatorService',
            'forma_libre.reservation_bundle.validator.constraints.reservation_validator' => 'getFormaLibre_ReservationBundle_Validator_Constraints_ReservationValidatorService',
            'forma_libre.support_bundle.listener.support_listener' => 'getFormaLibre_SupportBundle_Listener_SupportListenerService',
            'formalibre.form.reservation' => 'getFormalibre_Form_ReservationService',
            'formalibre.form.reservation_import_resources_form' => 'getFormalibre_Form_ReservationImportResourcesFormService',
            'formalibre.form.resource' => 'getFormalibre_Form_ResourceService',
            'formalibre.form.resourcetype' => 'getFormalibre_Form_ResourcetypeService',
            'formalibre.manager.presence_manager' => 'getFormalibre_Manager_PresenceManagerService',
            'formalibre.manager.reservation_manager' => 'getFormalibre_Manager_ReservationManagerService',
            'formalibre.manager.support_manager' => 'getFormalibre_Manager_SupportManagerService',
            'fos_js_routing.controller' => 'getFosJsRouting_ControllerService',
            'fos_js_routing.extractor' => 'getFosJsRouting_ExtractorService',
            'fos_js_routing.serializer' => 'getFosJsRouting_SerializerService',
            'fos_oauth_server.access_token_manager.default' => 'getFosOauthServer_AccessTokenManager_DefaultService',
            'fos_oauth_server.auth_code_manager.default' => 'getFosOauthServer_AuthCodeManager_DefaultService',
            'fos_oauth_server.authorize.form' => 'getFosOauthServer_Authorize_FormService',
            'fos_oauth_server.authorize.form.handler.default' => 'getFosOauthServer_Authorize_Form_Handler_DefaultService',
            'fos_oauth_server.authorize.form.type' => 'getFosOauthServer_Authorize_Form_TypeService',
            'fos_oauth_server.client_manager.default' => 'getFosOauthServer_ClientManager_DefaultService',
            'fos_oauth_server.controller.token' => 'getFosOauthServer_Controller_TokenService',
            'fos_oauth_server.entity_manager' => 'getFosOauthServer_EntityManagerService',
            'fos_oauth_server.refresh_token_manager.default' => 'getFosOauthServer_RefreshTokenManager_DefaultService',
            'fos_oauth_server.server' => 'getFosOauthServer_ServerService',
            'fos_oauth_server.storage' => 'getFosOauthServer_StorageService',
            'fos_rest.body_listener' => 'getFosRest_BodyListenerService',
            'fos_rest.converter.request_body' => 'getFosRest_Converter_RequestBodyService',
            'fos_rest.decoder.json' => 'getFosRest_Decoder_JsonService',
            'fos_rest.decoder.jsontoform' => 'getFosRest_Decoder_JsontoformService',
            'fos_rest.decoder.xml' => 'getFosRest_Decoder_XmlService',
            'fos_rest.decoder_provider' => 'getFosRest_DecoderProviderService',
            'fos_rest.exception_format_negotiator' => 'getFosRest_ExceptionFormatNegotiatorService',
            'fos_rest.form.extension.csrf_disable' => 'getFosRest_Form_Extension_CsrfDisableService',
            'fos_rest.format_negotiator' => 'getFosRest_FormatNegotiatorService',
            'fos_rest.inflector.doctrine' => 'getFosRest_Inflector_DoctrineService',
            'fos_rest.mime_type_listener' => 'getFosRest_MimeTypeListenerService',
            'fos_rest.normalizer.camel_keys' => 'getFosRest_Normalizer_CamelKeysService',
            'fos_rest.normalizer.camel_keys_with_leading_underscore' => 'getFosRest_Normalizer_CamelKeysWithLeadingUnderscoreService',
            'fos_rest.param_fetcher_listener' => 'getFosRest_ParamFetcherListenerService',
            'fos_rest.request.param_fetcher' => 'getFosRest_Request_ParamFetcherService',
            'fos_rest.request.param_fetcher.reader' => 'getFosRest_Request_ParamFetcher_ReaderService',
            'fos_rest.routing.loader.controller' => 'getFosRest_Routing_Loader_ControllerService',
            'fos_rest.routing.loader.processor' => 'getFosRest_Routing_Loader_ProcessorService',
            'fos_rest.routing.loader.reader.action' => 'getFosRest_Routing_Loader_Reader_ActionService',
            'fos_rest.routing.loader.reader.controller' => 'getFosRest_Routing_Loader_Reader_ControllerService',
            'fos_rest.routing.loader.xml_collection' => 'getFosRest_Routing_Loader_XmlCollectionService',
            'fos_rest.routing.loader.yaml_collection' => 'getFosRest_Routing_Loader_YamlCollectionService',
            'fos_rest.serializer.exception_wrapper_normalizer' => 'getFosRest_Serializer_ExceptionWrapperNormalizerService',
            'fos_rest.serializer.exception_wrapper_serialize_handler' => 'getFosRest_Serializer_ExceptionWrapperSerializeHandlerService',
            'fos_rest.view.exception_wrapper_handler' => 'getFosRest_View_ExceptionWrapperHandlerService',
            'fos_rest.view_handler' => 'getFosRest_ViewHandlerService',
            'fos_rest.view_response_listener' => 'getFosRest_ViewResponseListenerService',
            'fos_rest.violation_formatter' => 'getFosRest_ViolationFormatterService',
            'fragment.handler' => 'getFragment_HandlerService',
            'fragment.renderer.esi' => 'getFragment_Renderer_EsiService',
            'fragment.renderer.hinclude' => 'getFragment_Renderer_HincludeService',
            'fragment.renderer.inline' => 'getFragment_Renderer_InlineService',
            'fragment.renderer.ssi' => 'getFragment_Renderer_SsiService',
            'gregwar_captcha.captcha_builder' => 'getGregwarCaptcha_CaptchaBuilderService',
            'gregwar_captcha.generator' => 'getGregwarCaptcha_GeneratorService',
            'gregwar_captcha.image_file_handler' => 'getGregwarCaptcha_ImageFileHandlerService',
            'gregwar_captcha.phrase_builder' => 'getGregwarCaptcha_PhraseBuilderService',
            'he_vinci.competency_bundle.form.field.levels_type' => 'getHeVinci_CompetencyBundle_Form_Field_LevelsTypeService',
            'he_vinci.competency_bundle.security.admin_tool_access_evaluator' => 'getHeVinci_CompetencyBundle_Security_AdminToolAccessEvaluatorService',
            'he_vinci.competency_bundle.twig.extension' => 'getHeVinci_CompetencyBundle_Twig_ExtensionService',
            'he_vinci.competency_bundle.validator.existing_ability_validator' => 'getHeVinci_CompetencyBundle_Validator_ExistingAbilityValidatorService',
            'he_vinci.competency_bundle.validator.importable_framework_validator' => 'getHeVinci_CompetencyBundle_Validator_ImportableFrameworkValidatorService',
            'he_vinci.competency_bundle.validator.unique_competency_validator' => 'getHeVinci_CompetencyBundle_Validator_UniqueCompetencyValidatorService',
            'he_vinci.favourite_bundle.listener.favourite_listener' => 'getHeVinci_FavouriteBundle_Listener_FavouriteListenerService',
            'he_vinci.favourite_bundle.twig.resource_path_extension' => 'getHeVinci_FavouriteBundle_Twig_ResourcePathExtensionService',
            'he_vinci.url_bundle.listener.url_listener' => 'getHeVinci_UrlBundle_Listener_UrlListenerService',
            'he_vinci.url_bundle.validator.constraints.reachable_url_validator' => 'getHeVinci_UrlBundle_Validator_Constraints_ReachableUrlValidatorService',
            'hevinci.competency.activity_listener' => 'getHevinci_Competency_ActivityListenerService',
            'hevinci.competency.activity_manager' => 'getHevinci_Competency_ActivityManagerService',
            'hevinci.competency.competency_manager' => 'getHevinci_Competency_CompetencyManagerService',
            'hevinci.competency.data_conflict_validator' => 'getHevinci_Competency_DataConflictValidatorService',
            'hevinci.competency.data_validator' => 'getHevinci_Competency_DataValidatorService',
            'hevinci.competency.json_validator' => 'getHevinci_Competency_JsonValidatorService',
            'hevinci.competency.objective_manager' => 'getHevinci_Competency_ObjectiveManagerService',
            'hevinci.competency.plugin_listener' => 'getHevinci_Competency_PluginListenerService',
            'hevinci.competency.progress_manager' => 'getHevinci_Competency_ProgressManagerService',
            'hevinci.competency.transfer_converter' => 'getHevinci_Competency_TransferConverterService',
            'hevinci.competency.transfer_validator' => 'getHevinci_Competency_TransferValidatorService',
            'hevinci.form.handler' => 'getHevinci_Form_HandlerService',
            'hevinci_form_ability' => 'getHevinciFormAbilityService',
            'hevinci_form_ability_import' => 'getHevinciFormAbilityImportService',
            'hevinci_form_competency' => 'getHevinciFormCompetencyService',
            'hevinci_form_framework' => 'getHevinciFormFrameworkService',
            'hevinci_form_import_framework' => 'getHevinciFormImportFrameworkService',
            'hevinci_form_objective' => 'getHevinciFormObjectiveService',
            'hevinci_form_scale' => 'getHevinciFormScaleService',
            'hevinci_url.manager.url' => 'getHevinciUrl_Manager_UrlService',
            'http_kernel' => 'getHttpKernelService',
            'hwi_oauth.http_client' => 'getHwiOauth_HttpClientService',
            'hwi_oauth.resource_owner.facebook' => 'getHwiOauth_ResourceOwner_FacebookService',
            'hwi_oauth.resource_owner.google' => 'getHwiOauth_ResourceOwner_GoogleService',
            'hwi_oauth.resource_owner.linkedin' => 'getHwiOauth_ResourceOwner_LinkedinService',
            'hwi_oauth.resource_owner.office_365' => 'getHwiOauth_ResourceOwner_Office365Service',
            'hwi_oauth.resource_owner.twitter' => 'getHwiOauth_ResourceOwner_TwitterService',
            'hwi_oauth.resource_owner.windows_live' => 'getHwiOauth_ResourceOwner_WindowsLiveService',
            'hwi_oauth.resource_ownermap.main' => 'getHwiOauth_ResourceOwnermap_MainService',
            'hwi_oauth.security.oauth_utils' => 'getHwiOauth_Security_OauthUtilsService',
            'hwi_oauth.templating.helper.oauth' => 'getHwiOauth_Templating_Helper_OauthService',
            'hwi_oauth.user.provider' => 'getHwiOauth_User_ProviderService',
            'hwi_oauth.user_checker' => 'getHwiOauth_UserCheckerService',
            'icap.badge_bundle.converter.slug_converter' => 'getIcap_BadgeBundle_Converter_SlugConverterService',
            'icap.badge_bundle.form.type.badge_type' => 'getIcap_BadgeBundle_Form_Type_BadgeTypeService',
            'icap.badge_bundle.form.type.portfolio.badges_badge_type' => 'getIcap_BadgeBundle_Form_Type_Portfolio_BadgesBadgeTypeService',
            'icap.badge_bundle.form.type.portfolio.badges_type' => 'getIcap_BadgeBundle_Form_Type_Portfolio_BadgesTypeService',
            'icap.badge_bundle.form.type.tool.workspace.badge_type' => 'getIcap_BadgeBundle_Form_Type_Tool_Workspace_BadgeTypeService',
            'icap.badge_bundle.form.type.widget.badge_usage_config_type' => 'getIcap_BadgeBundle_Form_Type_Widget_BadgeUsageConfigTypeService',
            'icap.badge_bundle.listener.administration_tool_listener' => 'getIcap_BadgeBundle_Listener_AdministrationToolListenerService',
            'icap.badge_bundle.listener.badge_listener' => 'getIcap_BadgeBundle_Listener_BadgeListenerService',
            'icap.badge_bundle.listener.portfolio.widget_listener' => 'getIcap_BadgeBundle_Listener_Portfolio_WidgetListenerService',
            'icap.badge_bundle.listener.widget.badge_usage_widget_listener' => 'getIcap_BadgeBundle_Listener_Widget_BadgeUsageWidgetListenerService',
            'icap.badge_bundle.rule.constraints.badge_constraint' => 'getIcap_BadgeBundle_Rule_Constraints_BadgeConstraintService',
            'icap.blog.comment_repository' => 'getIcap_Blog_CommentRepositoryService',
            'icap.blog.form.type.listwidgetblog' => 'getIcap_Blog_Form_Type_ListwidgetblogService',
            'icap.blog.manager.post' => 'getIcap_Blog_Manager_PostService',
            'icap.blog.manager.tag' => 'getIcap_Blog_Manager_TagService',
            'icap.blog.post_repository' => 'getIcap_Blog_PostRepositoryService',
            'icap.blog.tag_repository' => 'getIcap_Blog_TagRepositoryService',
            'icap.blog.twig.extension' => 'getIcap_Blog_Twig_ExtensionService',
            'icap.blog.type.tags' => 'getIcap_Blog_Type_TagsService',
            'icap.blog_bundle.entity_listener.comment' => 'getIcap_BlogBundle_EntityListener_CommentService',
            'icap.blog_bundle.entity_listener.post' => 'getIcap_BlogBundle_EntityListener_PostService',
            'icap.blog_bundle.listener.notification_listener' => 'getIcap_BlogBundle_Listener_NotificationListenerService',
            'icap.blog_bundle.listener.notification_user_parameters_listener' => 'getIcap_BlogBundle_Listener_NotificationUserParametersListenerService',
            'icap.blog_bundle.listener.widget_listener' => 'getIcap_BlogBundle_Listener_WidgetListenerService',
            'icap.dropzone_bundle.library.security.voter.temporary_access_resource_voter' => 'getIcap_DropzoneBundle_Library_Security_Voter_TemporaryAccessResourceVoterService',
            'icap.dropzone_bundle.listener.dropzone_listener' => 'getIcap_DropzoneBundle_Listener_DropzoneListenerService',
            'icap.dropzone_bundle.listener.log.log_drop_evaluate_listener' => 'getIcap_DropzoneBundle_Listener_Log_LogDropEvaluateListenerService',
            'icap.dropzone_bundle.listener.notification_user_parameters_listener' => 'getIcap_DropzoneBundle_Listener_NotificationUserParametersListenerService',
            'icap.formula_plugin_bundle.listener.formula_plugin_listener' => 'getIcap_FormulaPluginBundle_Listener_FormulaPluginListenerService',
            'icap.lesson.chaptertype' => 'getIcap_Lesson_ChaptertypeService',
            'icap.lesson.duplicatechaptertype' => 'getIcap_Lesson_DuplicatechaptertypeService',
            'icap.lesson.manager' => 'getIcap_Lesson_ManagerService',
            'icap.lesson.manager.chapter' => 'getIcap_Lesson_Manager_ChapterService',
            'icap.lesson.movechaptertype' => 'getIcap_Lesson_MovechaptertypeService',
            'icap.lesson_bundle.entity_listener.chapter' => 'getIcap_LessonBundle_EntityListener_ChapterService',
            'icap.lesson_bundle.listener.notification_listener' => 'getIcap_LessonBundle_Listener_NotificationListenerService',
            'icap.lesson_bundle.listener.notification_user_parameters_listener' => 'getIcap_LessonBundle_Listener_NotificationUserParametersListenerService',
            'icap.listener.blog.badge_listener' => 'getIcap_Listener_Blog_BadgeListenerService',
            'icap.listener.blog.log_listener' => 'getIcap_Listener_Blog_LogListenerService',
            'icap.listener.blog_listener' => 'getIcap_Listener_BlogListenerService',
            'icap.listener.document_listener' => 'getIcap_Listener_DocumentListenerService',
            'icap.listener.dropzone.badge_listener' => 'getIcap_Listener_Dropzone_BadgeListenerService',
            'icap.listener.dropzone.display_log_listener' => 'getIcap_Listener_Dropzone_DisplayLogListenerService',
            'icap.listener.dropzone.notification_listener' => 'getIcap_Listener_Dropzone_NotificationListenerService',
            'icap.listener.lesson.badge_listener' => 'getIcap_Listener_Lesson_BadgeListenerService',
            'icap.listener.lesson_listener' => 'getIcap_Listener_LessonListenerService',
            'icap.listener.lesson_log_listener' => 'getIcap_Listener_LessonLogListenerService',
            'icap.listener.portfolio.log_listener' => 'getIcap_Listener_Portfolio_LogListenerService',
            'icap.listener.portfolio.notification_listener' => 'getIcap_Listener_Portfolio_NotificationListenerService',
            'icap.listener.wiki.badge_listener' => 'getIcap_Listener_Wiki_BadgeListenerService',
            'icap.listener.wiki.log_listener' => 'getIcap_Listener_Wiki_LogListenerService',
            'icap.listener.wiki.notification_listener' => 'getIcap_Listener_Wiki_NotificationListenerService',
            'icap.manager.correction_manager' => 'getIcap_Manager_CorrectionManagerService',
            'icap.manager.drop_voter' => 'getIcap_Manager_DropVoterService',
            'icap.manager.dropzone_manager' => 'getIcap_Manager_DropzoneManagerService',
            'icap.manager.dropzone_voter' => 'getIcap_Manager_DropzoneVoterService',
            'icap.notification.manager' => 'getIcap_Notification_ManagerService',
            'icap.notification.manager.notification_user_parameters' => 'getIcap_Notification_Manager_NotificationUserParametersService',
            'icap.notification.manager.plugin_configuration' => 'getIcap_Notification_Manager_PluginConfigurationService',
            'icap.notification_bundle.configuration.default_notification_platform_configuration' => 'getIcap_NotificationBundle_Configuration_DefaultNotificationPlatformConfigurationService',
            'icap.notification_bundle.form.notification_plugin_configuration_type' => 'getIcap_NotificationBundle_Form_NotificationPluginConfigurationTypeService',
            'icap.notification_bundle.listener.administration_tool_listener' => 'getIcap_NotificationBundle_Listener_AdministrationToolListenerService',
            'icap.notification_bundle.listener.configure_menu_listener' => 'getIcap_NotificationBundle_Listener_ConfigureMenuListenerService',
            'icap.notification_bundle.listener.log_listener' => 'getIcap_NotificationBundle_Listener_LogListenerService',
            'icap.o_auth_bundle.listener.configure_menu_listener' => 'getIcap_OAuthBundle_Listener_ConfigureMenuListenerService',
            'icap.o_auth_bundle.listener.external_authentication_listener' => 'getIcap_OAuthBundle_Listener_ExternalAuthenticationListenerService',
            'icap.o_auth_bundle.twig.oauth_extension' => 'getIcap_OAuthBundle_Twig_OauthExtensionService',
            'icap.oauth.failure_handler' => 'getIcap_Oauth_FailureHandlerService',
            'icap.oauth.hwi.resource_owner_factory' => 'getIcap_Oauth_Hwi_ResourceOwnerFactoryService',
            'icap.oauth.logout_success_handler' => 'getIcap_Oauth_LogoutSuccessHandlerService',
            'icap.oauth.manager' => 'getIcap_Oauth_ManagerService',
            'icap.oauth.user_provider' => 'getIcap_Oauth_UserProviderService',
            'icap.portfolio.twig.extension' => 'getIcap_Portfolio_Twig_ExtensionService',
            'icap.portfolio_bundle.form.type.guides_portfolio_type' => 'getIcap_PortfolioBundle_Form_Type_GuidesPortfolioTypeService',
            'icap.portfolio_bundle.form.type.portfolio_comment_type' => 'getIcap_PortfolioBundle_Form_Type_PortfolioCommentTypeService',
            'icap.portfolio_bundle.form.type.portfolio_group_type' => 'getIcap_PortfolioBundle_Form_Type_PortfolioGroupTypeService',
            'icap.portfolio_bundle.form.type.portfolio_guide_type' => 'getIcap_PortfolioBundle_Form_Type_PortfolioGuideTypeService',
            'icap.portfolio_bundle.form.type.portfolio_import' => 'getIcap_PortfolioBundle_Form_Type_PortfolioImportService',
            'icap.portfolio_bundle.form.type.portfolio_team_type' => 'getIcap_PortfolioBundle_Form_Type_PortfolioTeamTypeService',
            'icap.portfolio_bundle.form.type.portfolio_title_type' => 'getIcap_PortfolioBundle_Form_Type_PortfolioTitleTypeService',
            'icap.portfolio_bundle.form.type.portfolio_type' => 'getIcap_PortfolioBundle_Form_Type_PortfolioTypeService',
            'icap.portfolio_bundle.form.type.portfolio_user_type' => 'getIcap_PortfolioBundle_Form_Type_PortfolioUserTypeService',
            'icap.portfolio_bundle.form.type.portfolio_widget_type' => 'getIcap_PortfolioBundle_Form_Type_PortfolioWidgetTypeService',
            'icap.portfolio_bundle.form.type.rename_portfolio_type' => 'getIcap_PortfolioBundle_Form_Type_RenamePortfolioTypeService',
            'icap.portfolio_bundle.form.type.visibility_portfolio_type' => 'getIcap_PortfolioBundle_Form_Type_VisibilityPortfolioTypeService',
            'icap.portfolio_bundle.form.type.widgets.experience_type' => 'getIcap_PortfolioBundle_Form_Type_Widgets_ExperienceTypeService',
            'icap.portfolio_bundle.form.type.widgets.formations_formation_type' => 'getIcap_PortfolioBundle_Form_Type_Widgets_FormationsFormationTypeService',
            'icap.portfolio_bundle.form.type.widgets.formations_type' => 'getIcap_PortfolioBundle_Form_Type_Widgets_FormationsTypeService',
            'icap.portfolio_bundle.form.type.widgets.skills_skill_type' => 'getIcap_PortfolioBundle_Form_Type_Widgets_SkillsSkillTypeService',
            'icap.portfolio_bundle.form.type.widgets.skills_type' => 'getIcap_PortfolioBundle_Form_Type_Widgets_SkillsTypeService',
            'icap.portfolio_bundle.form.type.widgets.text_type' => 'getIcap_PortfolioBundle_Form_Type_Widgets_TextTypeService',
            'icap.portfolio_bundle.form.type.widgets.user_information_type' => 'getIcap_PortfolioBundle_Form_Type_Widgets_UserInformationTypeService',
            'icap.portfolio_bundle.listener.administration_analytics_listener' => 'getIcap_PortfolioBundle_Listener_AdministrationAnalyticsListenerService',
            'icap.portfolio_bundle.listener.configure_top_menu_listener' => 'getIcap_PortfolioBundle_Listener_ConfigureTopMenuListenerService',
            'icap.portfolio_bundle.listener.notification_user_parameters_listener' => 'getIcap_PortfolioBundle_Listener_NotificationUserParametersListenerService',
            'icap.portfolio_bundle.listener.widget_listener' => 'getIcap_PortfolioBundle_Listener_WidgetListenerService',
            'icap.socialmedia_bundle.listener.log_listener' => 'getIcap_SocialmediaBundle_Listener_LogListenerService',
            'icap.socialmedia_bundle.listener.notification_listener' => 'getIcap_SocialmediaBundle_Listener_NotificationListenerService',
            'icap.socialmedia_bundle.listener.notification_user_parameters_listener' => 'getIcap_SocialmediaBundle_Listener_NotificationUserParametersListenerService',
            'icap.socialmedia_bundle.listener.profile_link_listener' => 'getIcap_SocialmediaBundle_Listener_ProfileLinkListenerService',
            'icap.socialmedia_bundle.listener.resource_actions_listener' => 'getIcap_SocialmediaBundle_Listener_ResourceActionsListenerService',
            'icap.socialmedia_bundle.twig.socialmedia_extension' => 'getIcap_SocialmediaBundle_Twig_SocialmediaExtensionService',
            'icap.website.manager' => 'getIcap_Website_ManagerService',
            'icap.website.options.manager' => 'getIcap_Website_Options_ManagerService',
            'icap.website.page.manager' => 'getIcap_Website_Page_ManagerService',
            'icap.website_bundle.listener.website_listener' => 'getIcap_WebsiteBundle_Listener_WebsiteListenerService',
            'icap.wiki.contribution_manager' => 'getIcap_Wiki_ContributionManagerService',
            'icap.wiki.contribution_repository' => 'getIcap_Wiki_ContributionRepositoryService',
            'icap.wiki.manager' => 'getIcap_Wiki_ManagerService',
            'icap.wiki.section_edit_type' => 'getIcap_Wiki_SectionEditTypeService',
            'icap.wiki.section_manager' => 'getIcap_Wiki_SectionManagerService',
            'icap.wiki.section_repository' => 'getIcap_Wiki_SectionRepositoryService',
            'icap.wiki_bundle.entity_listener.contribution' => 'getIcap_WikiBundle_EntityListener_ContributionService',
            'icap.wiki_bundle.listener.notification_user_parameters_listener' => 'getIcap_WikiBundle_Listener_NotificationUserParametersListenerService',
            'icap.wiki_bundle.listener.wiki_listener' => 'getIcap_WikiBundle_Listener_WikiListenerService',
            'icap_badge.api.badge' => 'getIcapBadge_Api_BadgeService',
            'icap_badge.entity_listener.badge' => 'getIcapBadge_EntityListener_BadgeService',
            'icap_badge.factory.portfolio_widget' => 'getIcapBadge_Factory_PortfolioWidgetService',
            'icap_badge.form.badge' => 'getIcapBadge_Form_BadgeService',
            'icap_badge.form.badge.award' => 'getIcapBadge_Form_Badge_AwardService',
            'icap_badge.form.badge.collection' => 'getIcapBadge_Form_Badge_CollectionService',
            'icap_badge.form.badge.rule' => 'getIcapBadge_Form_Badge_RuleService',
            'icap_badge.form.badge.workspace' => 'getIcapBadge_Form_Badge_WorkspaceService',
            'icap_badge.form.badge.workspace.rule' => 'getIcapBadge_Form_Badge_Workspace_RuleService',
            'icap_badge.form.badgepicker' => 'getIcapBadge_Form_BadgepickerService',
            'icap_badge.form.claimbadge' => 'getIcapBadge_Form_ClaimbadgeService',
            'icap_badge.form.user_badge' => 'getIcapBadge_Form_UserBadgeService',
            'icap_badge.form_handler.badge' => 'getIcapBadge_FormHandler_BadgeService',
            'icap_badge.form_handler.badge.workspace' => 'getIcapBadge_FormHandler_Badge_WorkspaceService',
            'icap_badge.listener.core.notification_listener' => 'getIcapBadge_Listener_Core_NotificationListenerService',
            'icap_badge.manager.badge' => 'getIcapBadge_Manager_BadgeService',
            'icap_badge.manager.badge_claim' => 'getIcapBadge_Manager_BadgeClaimService',
            'icap_badge.manager.badge_widget' => 'getIcapBadge_Manager_BadgeWidgetService',
            'icap_badge.repository.badge' => 'getIcapBadge_Repository_BadgeService',
            'icap_badge.transformer.badge' => 'getIcapBadge_Transformer_BadgeService',
            'icap_badge.transformer.badge_picker' => 'getIcapBadge_Transformer_BadgePickerService',
            'icap_badge.widget.form.badge_usage' => 'getIcapBadge_Widget_Form_BadgeUsageService',
            'icap_blog.form.comment' => 'getIcapBlog_Form_CommentService',
            'icap_blog.form.post' => 'getIcapBlog_Form_PostService',
            'icap_blog.form.widget_blog' => 'getIcapBlog_Form_WidgetBlogService',
            'icap_blog.form.widget_list' => 'getIcapBlog_Form_WidgetListService',
            'icap_blog.form.widget_list_blog' => 'getIcapBlog_Form_WidgetListBlogService',
            'icap_blog.form.widget_tag_list_blog' => 'getIcapBlog_Form_WidgetTagListBlogService',
            'icap_blog.manager.blog' => 'getIcapBlog_Manager_BlogService',
            'icap_blog.manager.widget' => 'getIcapBlog_Manager_WidgetService',
            'icap_blog.transformer.int_to_blog' => 'getIcapBlog_Transformer_IntToBlogService',
            'icap_notification.twig.notification_extension' => 'getIcapNotification_Twig_NotificationExtensionService',
            'icap_portfolio.factory.comment' => 'getIcapPortfolio_Factory_CommentService',
            'icap_portfolio.factory.widget' => 'getIcapPortfolio_Factory_WidgetService',
            'icap_portfolio.form_handler.portfolio' => 'getIcapPortfolio_FormHandler_PortfolioService',
            'icap_portfolio.manager.analytics' => 'getIcapPortfolio_Manager_AnalyticsService',
            'icap_portfolio.manager.comments' => 'getIcapPortfolio_Manager_CommentsService',
            'icap_portfolio.manager.import' => 'getIcapPortfolio_Manager_ImportService',
            'icap_portfolio.manager.portfolio' => 'getIcapPortfolio_Manager_PortfolioService',
            'icap_portfolio.manager.portfolio_guide' => 'getIcapPortfolio_Manager_PortfolioGuideService',
            'icap_portfolio.manager.widget_type' => 'getIcapPortfolio_Manager_WidgetTypeService',
            'icap_portfolio.manager.widgets' => 'getIcapPortfolio_Manager_WidgetsService',
            'icap_portfolio.repository.widget' => 'getIcapPortfolio_Repository_WidgetService',
            'icap_portfolio.repository.widget_type' => 'getIcapPortfolio_Repository_WidgetTypeService',
            'icap_socialmedia.manager.comment_action' => 'getIcapSocialmedia_Manager_CommentActionService',
            'icap_socialmedia.manager.like_action' => 'getIcapSocialmedia_Manager_LikeActionService',
            'icap_socialmedia.manager.note_action' => 'getIcapSocialmedia_Manager_NoteActionService',
            'icap_socialmedia.manager.share_action' => 'getIcapSocialmedia_Manager_ShareActionService',
            'icap_socialmedia.manager.wall_item' => 'getIcapSocialmedia_Manager_WallItemService',
            'icap_website.repository.page' => 'getIcapWebsite_Repository_PageService',
            'idci_exporter.manager' => 'getIdciExporter_ManagerService',
            'idci_exporter.transformer_twig' => 'getIdciExporter_TransformerTwigService',
            'innova.collecticiel_bundle.library.security.voter.temporary_access_resource_voter' => 'getInnova_CollecticielBundle_Library_Security_Voter_TemporaryAccessResourceVoterService',
            'innova.collecticiel_bundle.listener.dropzone_listener' => 'getInnova_CollecticielBundle_Listener_DropzoneListenerService',
            'innova.collecticiel_bundle.listener.log.log_drop_evaluate_listener' => 'getInnova_CollecticielBundle_Listener_Log_LogDropEvaluateListenerService',
            'innova.listener.document_listener' => 'getInnova_Listener_DocumentListenerService',
            'innova.listener.dropzone.display_log_listener' => 'getInnova_Listener_Dropzone_DisplayLogListenerService',
            'innova.listener.dropzone.notification_listener' => 'getInnova_Listener_Dropzone_NotificationListenerService',
            'innova.manager.collecticiel_manager' => 'getInnova_Manager_CollecticielManagerService',
            'innova.manager.correction_manager' => 'getInnova_Manager_CorrectionManagerService',
            'innova.manager.drop_manager' => 'getInnova_Manager_DropManagerService',
            'innova.manager.drop_voter' => 'getInnova_Manager_DropVoterService',
            'innova.manager.dropzone_manager' => 'getInnova_Manager_DropzoneManagerService',
            'innova.manager.dropzone_voter' => 'getInnova_Manager_DropzoneVoterService',
            'innova.manager.gradingcriteria_manager' => 'getInnova_Manager_GradingcriteriaManagerService',
            'innova.manager.gradingnotation_manager' => 'getInnova_Manager_GradingnotationManagerService',
            'innova.manager.gradingscale_manager' => 'getInnova_Manager_GradingscaleManagerService',
            'innova.manager.returnreceipt_manager' => 'getInnova_Manager_ReturnreceiptManagerService',
            'innova.path_bundle.event_listener.notifications.notification_user_parameters_listener' => 'getInnova_PathBundle_EventListener_Notifications_NotificationUserParametersListenerService',
            'innova.path_bundle.event_listener.resource.path_listener' => 'getInnova_PathBundle_EventListener_Resource_PathListenerService',
            'innova.path_bundle.event_listener.rich_text_format_listener' => 'getInnova_PathBundle_EventListener_RichTextFormatListenerService',
            'innova.path_bundle.event_listener.widget.path_widget_listener' => 'getInnova_PathBundle_EventListener_Widget_PathWidgetListenerService',
            'innova.temporary_access_resource_manager' => 'getInnova_TemporaryAccessResourceManagerService',
            'innova_collecticiel.importer.collecticiel' => 'getInnovaCollecticiel_Importer_CollecticielService',
            'innova_path.controller.manageresults' => 'getInnovaPath_Controller_ManageresultsService',
            'innova_path.controller.path' => 'getInnovaPath_Controller_PathService',
            'innova_path.controller.path_editor' => 'getInnovaPath_Controller_PathEditorService',
            'innova_path.controller.path_player' => 'getInnovaPath_Controller_PathPlayerService',
            'innova_path.controller.path_template' => 'getInnovaPath_Controller_PathTemplateService',
            'innova_path.controller.path_widget' => 'getInnovaPath_Controller_PathWidgetService',
            'innova_path.controller.step_condition' => 'getInnovaPath_Controller_StepConditionService',
            'innova_path.controller.user_progression' => 'getInnovaPath_Controller_UserProgressionService',
            'innova_path.form.type.path' => 'getInnovaPath_Form_Type_PathService',
            'innova_path.form.type.path_template' => 'getInnovaPath_Form_Type_PathTemplateService',
            'innova_path.form.type.path_widget_config' => 'getInnovaPath_Form_Type_PathWidgetConfigService',
            'innova_path.importer.importer' => 'getInnovaPath_Importer_ImporterService',
            'innova_path.listener.notification_listener' => 'getInnovaPath_Listener_NotificationListenerService',
            'innova_path.manager.criteria' => 'getInnovaPath_Manager_CriteriaService',
            'innova_path.manager.path' => 'getInnovaPath_Manager_PathService',
            'innova_path.manager.path_template' => 'getInnovaPath_Manager_PathTemplateService',
            'innova_path.manager.publishing' => 'getInnovaPath_Manager_PublishingService',
            'innova_path.manager.step' => 'getInnovaPath_Manager_StepService',
            'innova_path.manager.step_condition' => 'getInnovaPath_Manager_StepConditionService',
            'innova_path.manager.user_progression' => 'getInnovaPath_Manager_UserProgressionService',
            'jms_aop.interceptor_loader' => 'getJmsAop_InterceptorLoaderService',
            'jms_aop.pointcut_container' => 'getJmsAop_PointcutContainerService',
            'jms_di_extra.controller_resolver' => 'getJmsDiExtra_ControllerResolverService',
            'jms_di_extra.metadata.converter' => 'getJmsDiExtra_Metadata_ConverterService',
            'jms_di_extra.metadata.metadata_factory' => 'getJmsDiExtra_Metadata_MetadataFactoryService',
            'jms_di_extra.metadata_driver' => 'getJmsDiExtra_MetadataDriverService',
            'jms_serializer' => 'getJmsSerializerService',
            'jms_serializer.array_collection_handler' => 'getJmsSerializer_ArrayCollectionHandlerService',
            'jms_serializer.constraint_violation_handler' => 'getJmsSerializer_ConstraintViolationHandlerService',
            'jms_serializer.datetime_handler' => 'getJmsSerializer_DatetimeHandlerService',
            'jms_serializer.doctrine_proxy_subscriber' => 'getJmsSerializer_DoctrineProxySubscriberService',
            'jms_serializer.form_error_handler' => 'getJmsSerializer_FormErrorHandlerService',
            'jms_serializer.handler_registry' => 'getJmsSerializer_HandlerRegistryService',
            'jms_serializer.json_deserialization_visitor' => 'getJmsSerializer_JsonDeserializationVisitorService',
            'jms_serializer.json_serialization_visitor' => 'getJmsSerializer_JsonSerializationVisitorService',
            'jms_serializer.metadata_driver' => 'getJmsSerializer_MetadataDriverService',
            'jms_serializer.naming_strategy' => 'getJmsSerializer_NamingStrategyService',
            'jms_serializer.object_constructor' => 'getJmsSerializer_ObjectConstructorService',
            'jms_serializer.php_collection_handler' => 'getJmsSerializer_PhpCollectionHandlerService',
            'jms_serializer.templating.helper.serializer' => 'getJmsSerializer_Templating_Helper_SerializerService',
            'jms_serializer.unserialize_object_constructor' => 'getJmsSerializer_UnserializeObjectConstructorService',
            'jms_serializer.xml_deserialization_visitor' => 'getJmsSerializer_XmlDeserializationVisitorService',
            'jms_serializer.xml_serialization_visitor' => 'getJmsSerializer_XmlSerializationVisitorService',
            'jms_serializer.yaml_serialization_visitor' => 'getJmsSerializer_YamlSerializationVisitorService',
            'kernel' => 'getKernelService',
            'knp_menu.factory' => 'getKnpMenu_FactoryService',
            'knp_menu.listener.voters' => 'getKnpMenu_Listener_VotersService',
            'knp_menu.matcher' => 'getKnpMenu_MatcherService',
            'knp_menu.menu_provider' => 'getKnpMenu_MenuProviderService',
            'knp_menu.renderer.list' => 'getKnpMenu_Renderer_ListService',
            'knp_menu.renderer.twig' => 'getKnpMenu_Renderer_TwigService',
            'knp_menu.renderer_provider' => 'getKnpMenu_RendererProviderService',
            'knp_menu.voter.router' => 'getKnpMenu_Voter_RouterService',
            'knp_snappy.image' => 'getKnpSnappy_ImageService',
            'knp_snappy.pdf' => 'getKnpSnappy_PdfService',
            'knp_snappy.pdf.internal_generator' => 'getKnpSnappy_Pdf_InternalGeneratorService',
            'locale_listener' => 'getLocaleListenerService',
            'logger' => 'getLoggerService',
            'monolog.handler.main' => 'getMonolog_Handler_MainService',
            'monolog.handler.main.not_found_strategy' => 'getMonolog_Handler_Main_NotFoundStrategyService',
            'monolog.handler.nested' => 'getMonolog_Handler_NestedService',
            'monolog.handler.null_internal' => 'getMonolog_Handler_NullInternalService',
            'monolog.logger.assetic' => 'getMonolog_Logger_AsseticService',
            'monolog.logger.doctrine' => 'getMonolog_Logger_DoctrineService',
            'monolog.logger.php' => 'getMonolog_Logger_PhpService',
            'monolog.logger.request' => 'getMonolog_Logger_RequestService',
            'monolog.logger.router' => 'getMonolog_Logger_RouterService',
            'monolog.logger.security' => 'getMonolog_Logger_SecurityService',
            'monolog.logger.snappy' => 'getMonolog_Logger_SnappyService',
            'monolog.logger.translation' => 'getMonolog_Logger_TranslationService',
            'monolog.processor.psr_log_message' => 'getMonolog_Processor_PsrLogMessageService',
            'pagerfanta.convert_not_valid_current_page_to_not_found_listener' => 'getPagerfanta_ConvertNotValidCurrentPageToNotFoundListenerService',
            'pagerfanta.convert_not_valid_max_per_page_to_not_found_listener' => 'getPagerfanta_ConvertNotValidMaxPerPageToNotFoundListenerService',
            'property_accessor' => 'getPropertyAccessorService',
            'request' => 'getRequestService',
            'request_stack' => 'getRequestStackService',
            'response_listener' => 'getResponseListenerService',
            'router' => 'getRouterService',
            'router.request_context' => 'getRouter_RequestContextService',
            'router_listener' => 'getRouterListenerService',
            'routing.loader' => 'getRouting_LoaderService',
            'security.access.decision_manager' => 'getSecurity_Access_DecisionManagerService',
            'security.access.method_interceptor' => 'getSecurity_Access_MethodInterceptorService',
            'security.access.pointcut' => 'getSecurity_Access_PointcutService',
            'security.access_listener' => 'getSecurity_AccessListenerService',
            'security.access_map' => 'getSecurity_AccessMapService',
            'security.authentication.listener.fos_oauth_server.api' => 'getSecurity_Authentication_Listener_FosOauthServer_ApiService',
            'security.authentication.manager' => 'getSecurity_Authentication_ManagerService',
            'security.authentication.session_strategy' => 'getSecurity_Authentication_SessionStrategyService',
            'security.authentication.sso.authentication_failure_handler' => 'getSecurity_Authentication_Sso_AuthenticationFailureHandlerService',
            'security.authentication.trust_resolver' => 'getSecurity_Authentication_TrustResolverService',
            'security.authentication_utils' => 'getSecurity_AuthenticationUtilsService',
            'security.authorization_checker' => 'getSecurity_AuthorizationCheckerService',
            'security.channel_listener' => 'getSecurity_ChannelListenerService',
            'security.context' => 'getSecurity_ContextService',
            'security.csrf.token_manager' => 'getSecurity_Csrf_TokenManagerService',
            'security.encoder_factory' => 'getSecurity_EncoderFactoryService',
            'security.expressions.compiler' => 'getSecurity_Expressions_CompilerService',
            'security.expressions.handler' => 'getSecurity_Expressions_HandlerService',
            'security.expressions.reverse_interpreter' => 'getSecurity_Expressions_ReverseInterpreterService',
            'security.expressions.service_callback_compiler.0' => 'getSecurity_Expressions_ServiceCallbackCompiler_0Service',
            'security.expressions.service_callback_compiler.1' => 'getSecurity_Expressions_ServiceCallbackCompiler_1Service',
            'security.expressions.service_callback_compiler.2' => 'getSecurity_Expressions_ServiceCallbackCompiler_2Service',
            'security.expressions.service_callback_compiler.3' => 'getSecurity_Expressions_ServiceCallbackCompiler_3Service',
            'security.expressions.service_callback_compiler.4' => 'getSecurity_Expressions_ServiceCallbackCompiler_4Service',
            'security.expressions.service_callback_compiler.5' => 'getSecurity_Expressions_ServiceCallbackCompiler_5Service',
            'security.extra.metadata_driver' => 'getSecurity_Extra_MetadataDriverService',
            'security.extra.metadata_factory' => 'getSecurity_Extra_MetadataFactoryService',
            'security.firewall' => 'getSecurity_FirewallService',
            'security.firewall.map.context.api' => 'getSecurity_Firewall_Map_Context_ApiService',
            'security.firewall.map.context.dev' => 'getSecurity_Firewall_Map_Context_DevService',
            'security.firewall.map.context.install' => 'getSecurity_Firewall_Map_Context_InstallService',
            'security.firewall.map.context.main' => 'getSecurity_Firewall_Map_Context_MainService',
            'security.firewall.map.context.oauth_authorize' => 'getSecurity_Firewall_Map_Context_OauthAuthorizeService',
            'security.firewall.map.context.oauth_token' => 'getSecurity_Firewall_Map_Context_OauthTokenService',
            'security.http_utils' => 'getSecurity_HttpUtilsService',
            'security.logout_url_generator' => 'getSecurity_LogoutUrlGeneratorService',
            'security.password_encoder' => 'getSecurity_PasswordEncoderService',
            'security.rememberme.response_listener' => 'getSecurity_Rememberme_ResponseListenerService',
            'security.role_hierarchy' => 'getSecurity_RoleHierarchyService',
            'security.secure_random' => 'getSecurity_SecureRandomService',
            'security.token_storage' => 'getSecurity_TokenStorageService',
            'security.user.provider.concrete.user_db' => 'getSecurity_User_Provider_Concrete_UserDbService',
            'security.validator.user_password' => 'getSecurity_Validator_UserPasswordService',
            'sensio_framework_extra.cache.listener' => 'getSensioFrameworkExtra_Cache_ListenerService',
            'sensio_framework_extra.controller.listener' => 'getSensioFrameworkExtra_Controller_ListenerService',
            'sensio_framework_extra.converter.datetime' => 'getSensioFrameworkExtra_Converter_DatetimeService',
            'sensio_framework_extra.converter.doctrine.orm' => 'getSensioFrameworkExtra_Converter_Doctrine_OrmService',
            'sensio_framework_extra.converter.listener' => 'getSensioFrameworkExtra_Converter_ListenerService',
            'sensio_framework_extra.converter.manager' => 'getSensioFrameworkExtra_Converter_ManagerService',
            'sensio_framework_extra.security.listener' => 'getSensioFrameworkExtra_Security_ListenerService',
            'sensio_framework_extra.view.guesser' => 'getSensioFrameworkExtra_View_GuesserService',
            'service_container' => 'getServiceContainerService',
            'session' => 'getSessionService',
            'session.handler' => 'getSession_HandlerService',
            'session.save_listener' => 'getSession_SaveListenerService',
            'session.storage.filesystem' => 'getSession_Storage_FilesystemService',
            'session.storage.metadata_bag' => 'getSession_Storage_MetadataBagService',
            'session.storage.native' => 'getSession_Storage_NativeService',
            'session.storage.php_bridge' => 'getSession_Storage_PhpBridgeService',
            'session_listener' => 'getSessionListenerService',
            'stof_doctrine_extensions.event_listener.blame' => 'getStofDoctrineExtensions_EventListener_BlameService',
            'stof_doctrine_extensions.event_listener.locale' => 'getStofDoctrineExtensions_EventListener_LocaleService',
            'stof_doctrine_extensions.listener.blameable' => 'getStofDoctrineExtensions_Listener_BlameableService',
            'stof_doctrine_extensions.listener.translatable' => 'getStofDoctrineExtensions_Listener_TranslatableService',
            'stof_doctrine_extensions.uploadable.manager' => 'getStofDoctrineExtensions_Uploadable_ManagerService',
            'streamed_response_listener' => 'getStreamedResponseListenerService',
            'swiftmailer.email_sender.listener' => 'getSwiftmailer_EmailSender_ListenerService',
            'swiftmailer.mailer.default' => 'getSwiftmailer_Mailer_DefaultService',
            'swiftmailer.mailer.default.transport' => 'getSwiftmailer_Mailer_Default_TransportService',
            'templating' => 'getTemplatingService',
            'templating.filename_parser' => 'getTemplating_FilenameParserService',
            'templating.helper.assets' => 'getTemplating_Helper_AssetsService',
            'templating.helper.logout_url' => 'getTemplating_Helper_LogoutUrlService',
            'templating.helper.router' => 'getTemplating_Helper_RouterService',
            'templating.helper.security' => 'getTemplating_Helper_SecurityService',
            'templating.loader' => 'getTemplating_LoaderService',
            'templating.locator' => 'getTemplating_LocatorService',
            'templating.name_parser' => 'getTemplating_NameParserService',
            'test.client' => 'getTest_ClientService',
            'test.client.cookiejar' => 'getTest_Client_CookiejarService',
            'test.client.history' => 'getTest_Client_HistoryService',
            'test.session.listener' => 'getTest_Session_ListenerService',
            'translation.dumper.csv' => 'getTranslation_Dumper_CsvService',
            'translation.dumper.ini' => 'getTranslation_Dumper_IniService',
            'translation.dumper.json' => 'getTranslation_Dumper_JsonService',
            'translation.dumper.mo' => 'getTranslation_Dumper_MoService',
            'translation.dumper.php' => 'getTranslation_Dumper_PhpService',
            'translation.dumper.po' => 'getTranslation_Dumper_PoService',
            'translation.dumper.qt' => 'getTranslation_Dumper_QtService',
            'translation.dumper.res' => 'getTranslation_Dumper_ResService',
            'translation.dumper.xliff' => 'getTranslation_Dumper_XliffService',
            'translation.dumper.yml' => 'getTranslation_Dumper_YmlService',
            'translation.extractor' => 'getTranslation_ExtractorService',
            'translation.extractor.php' => 'getTranslation_Extractor_PhpService',
            'translation.loader' => 'getTranslation_LoaderService',
            'translation.loader.csv' => 'getTranslation_Loader_CsvService',
            'translation.loader.dat' => 'getTranslation_Loader_DatService',
            'translation.loader.ini' => 'getTranslation_Loader_IniService',
            'translation.loader.json' => 'getTranslation_Loader_JsonService',
            'translation.loader.mo' => 'getTranslation_Loader_MoService',
            'translation.loader.php' => 'getTranslation_Loader_PhpService',
            'translation.loader.po' => 'getTranslation_Loader_PoService',
            'translation.loader.qt' => 'getTranslation_Loader_QtService',
            'translation.loader.res' => 'getTranslation_Loader_ResService',
            'translation.loader.xliff' => 'getTranslation_Loader_XliffService',
            'translation.loader.yml' => 'getTranslation_Loader_YmlService',
            'translation.writer' => 'getTranslation_WriterService',
            'translator.default' => 'getTranslator_DefaultService',
            'translator_listener' => 'getTranslatorListenerService',
            'twig' => 'getTwigService',
            'twig.controller.exception' => 'getTwig_Controller_ExceptionService',
            'twig.controller.preview_error' => 'getTwig_Controller_PreviewErrorService',
            'twig.exception_listener' => 'getTwig_ExceptionListenerService',
            'twig.extension.assets' => 'getTwig_Extension_AssetsService',
            'twig.extension.httpfoundation' => 'getTwig_Extension_HttpfoundationService',
            'twig.extension.stfalcon_tinymce' => 'getTwig_Extension_StfalconTinymceService',
            'twig.extension.text' => 'getTwig_Extension_TextService',
            'twig.loader' => 'getTwig_LoaderService',
            'twig.profile' => 'getTwig_ProfileService',
            'twig.translation.extractor' => 'getTwig_Translation_ExtractorService',
            'twig_js.assetic_filter' => 'getTwigJs_AsseticFilterService',
            'twig_js.compile_request_handler' => 'getTwigJs_CompileRequestHandlerService',
            'u_j_m.exo_bundle.listener.log.display_log_listener' => 'getUJM_ExoBundle_Listener_Log_DisplayLogListenerService',
            'ujm_exo.collection.question_definitions' => 'getUjmExo_Collection_QuestionDefinitionsService',
            'ujm_exo.definition.question_choice' => 'getUjmExo_Definition_QuestionChoiceService',
            'ujm_exo.definition.question_cloze' => 'getUjmExo_Definition_QuestionClozeService',
            'ujm_exo.definition.question_graphic' => 'getUjmExo_Definition_QuestionGraphicService',
            'ujm_exo.definition.question_match' => 'getUjmExo_Definition_QuestionMatchService',
            'ujm_exo.definition.question_open' => 'getUjmExo_Definition_QuestionOpenService',
            'ujm_exo.definition.question_pair' => 'getUjmExo_Definition_QuestionPairService',
            'ujm_exo.definition.question_set' => 'getUjmExo_Definition_QuestionSetService',
            'ujm_exo.definition.question_words' => 'getUjmExo_Definition_QuestionWordsService',
            'ujm_exo.generator.paper' => 'getUjmExo_Generator_PaperService',
            'ujm_exo.importer.exercise' => 'getUjmExo_Importer_ExerciseService',
            'ujm_exo.library.json_schema' => 'getUjmExo_Library_JsonSchemaService',
            'ujm_exo.listener.entity_question' => 'getUjmExo_Listener_EntityQuestionService',
            'ujm_exo.listener.exercise' => 'getUjmExo_Listener_ExerciseService',
            'ujm_exo.listener.question_bank' => 'getUjmExo_Listener_QuestionBankService',
            'ujm_exo.manager.answer' => 'getUjmExo_Manager_AnswerService',
            'ujm_exo.manager.attempt' => 'getUjmExo_Manager_AttemptService',
            'ujm_exo.manager.category' => 'getUjmExo_Manager_CategoryService',
            'ujm_exo.manager.correction' => 'getUjmExo_Manager_CorrectionService',
            'ujm_exo.manager.exercise' => 'getUjmExo_Manager_ExerciseService',
            'ujm_exo.manager.hint' => 'getUjmExo_Manager_HintService',
            'ujm_exo.manager.paper' => 'getUjmExo_Manager_PaperService',
            'ujm_exo.manager.qti' => 'getUjmExo_Manager_QtiService',
            'ujm_exo.manager.question' => 'getUjmExo_Manager_QuestionService',
            'ujm_exo.manager.score' => 'getUjmExo_Manager_ScoreService',
            'ujm_exo.manager.share' => 'getUjmExo_Manager_ShareService',
            'ujm_exo.serializer.answer' => 'getUjmExo_Serializer_AnswerService',
            'ujm_exo.serializer.category' => 'getUjmExo_Serializer_CategoryService',
            'ujm_exo.serializer.content' => 'getUjmExo_Serializer_ContentService',
            'ujm_exo.serializer.exercise' => 'getUjmExo_Serializer_ExerciseService',
            'ujm_exo.serializer.hint' => 'getUjmExo_Serializer_HintService',
            'ujm_exo.serializer.keyword' => 'getUjmExo_Serializer_KeywordService',
            'ujm_exo.serializer.paper' => 'getUjmExo_Serializer_PaperService',
            'ujm_exo.serializer.question' => 'getUjmExo_Serializer_QuestionService',
            'ujm_exo.serializer.question_choice' => 'getUjmExo_Serializer_QuestionChoiceService',
            'ujm_exo.serializer.question_cloze' => 'getUjmExo_Serializer_QuestionClozeService',
            'ujm_exo.serializer.question_graphic' => 'getUjmExo_Serializer_QuestionGraphicService',
            'ujm_exo.serializer.question_match' => 'getUjmExo_Serializer_QuestionMatchService',
            'ujm_exo.serializer.question_open' => 'getUjmExo_Serializer_QuestionOpenService',
            'ujm_exo.serializer.question_pair' => 'getUjmExo_Serializer_QuestionPairService',
            'ujm_exo.serializer.question_set' => 'getUjmExo_Serializer_QuestionSetService',
            'ujm_exo.serializer.question_words' => 'getUjmExo_Serializer_QuestionWordsService',
            'ujm_exo.serializer.resource_content' => 'getUjmExo_Serializer_ResourceContentService',
            'ujm_exo.serializer.step' => 'getUjmExo_Serializer_StepService',
            'ujm_exo.serializer.user' => 'getUjmExo_Serializer_UserService',
            'ujm_exo.validator.answer' => 'getUjmExo_Validator_AnswerService',
            'ujm_exo.validator.answer_choice' => 'getUjmExo_Validator_AnswerChoiceService',
            'ujm_exo.validator.answer_cloze' => 'getUjmExo_Validator_AnswerClozeService',
            'ujm_exo.validator.answer_graphic' => 'getUjmExo_Validator_AnswerGraphicService',
            'ujm_exo.validator.answer_match' => 'getUjmExo_Validator_AnswerMatchService',
            'ujm_exo.validator.answer_open' => 'getUjmExo_Validator_AnswerOpenService',
            'ujm_exo.validator.answer_pair' => 'getUjmExo_Validator_AnswerPairService',
            'ujm_exo.validator.answer_set' => 'getUjmExo_Validator_AnswerSetService',
            'ujm_exo.validator.answer_words' => 'getUjmExo_Validator_AnswerWordsService',
            'ujm_exo.validator.category' => 'getUjmExo_Validator_CategoryService',
            'ujm_exo.validator.content' => 'getUjmExo_Validator_ContentService',
            'ujm_exo.validator.exercise' => 'getUjmExo_Validator_ExerciseService',
            'ujm_exo.validator.hint' => 'getUjmExo_Validator_HintService',
            'ujm_exo.validator.keyword' => 'getUjmExo_Validator_KeywordService',
            'ujm_exo.validator.question' => 'getUjmExo_Validator_QuestionService',
            'ujm_exo.validator.question_choice' => 'getUjmExo_Validator_QuestionChoiceService',
            'ujm_exo.validator.question_cloze' => 'getUjmExo_Validator_QuestionClozeService',
            'ujm_exo.validator.question_graphic' => 'getUjmExo_Validator_QuestionGraphicService',
            'ujm_exo.validator.question_match' => 'getUjmExo_Validator_QuestionMatchService',
            'ujm_exo.validator.question_open' => 'getUjmExo_Validator_QuestionOpenService',
            'ujm_exo.validator.question_pair' => 'getUjmExo_Validator_QuestionPairService',
            'ujm_exo.validator.question_set' => 'getUjmExo_Validator_QuestionSetService',
            'ujm_exo.validator.question_words' => 'getUjmExo_Validator_QuestionWordsService',
            'ujm_exo.validator.step' => 'getUjmExo_Validator_StepService',
            'uri_signer' => 'getUriSignerService',
            'validate_request_listener' => 'getValidateRequestListenerService',
            'validator' => 'getValidatorService',
            'validator.builder' => 'getValidator_BuilderService',
            'validator.email' => 'getValidator_EmailService',
            'validator.expression' => 'getValidator_ExpressionService',
            'white_october_pagerfanta.view_factory' => 'getWhiteOctoberPagerfanta_ViewFactoryService',
            'workspace_role_tool_config_listener' => 'getWorkspaceRoleToolConfigListenerService',
            'zenstruck_form.ajax_entity_controller' => 'getZenstruckForm_AjaxEntityControllerService',
            'zenstruck_form.ajax_entity_manager' => 'getZenstruckForm_AjaxEntityManagerService',
            'zenstruck_form.ajax_entity_type' => 'getZenstruckForm_AjaxEntityTypeService',
            'zenstruck_form.theme_type' => 'getZenstruckForm_ThemeTypeService',
        );
        $this->aliases = array(
            'database_connection' => 'doctrine.dbal.default_connection',
            'doctrine.orm.default_metadata_cache' => 'doctrine_cache.providers.doctrine.orm.default_metadata_cache',
            'doctrine.orm.default_query_cache' => 'doctrine_cache.providers.doctrine.orm.default_query_cache',
            'doctrine.orm.default_result_cache' => 'doctrine_cache.providers.doctrine.orm.default_result_cache',
            'doctrine.orm.entity_manager' => 'doctrine.orm.default_entity_manager',
            'fos_oauth_server.access_token_manager' => 'fos_oauth_server.access_token_manager.default',
            'fos_oauth_server.auth_code_manager' => 'fos_oauth_server.auth_code_manager.default',
            'fos_oauth_server.authorize.form.handler' => 'fos_oauth_server.authorize.form.handler.default',
            'fos_oauth_server.client_manager' => 'fos_oauth_server.client_manager.default',
            'fos_oauth_server.refresh_token_manager' => 'fos_oauth_server.refresh_token_manager.default',
            'fos_rest.exception_handler' => 'fos_rest.view.exception_wrapper_handler',
            'fos_rest.inflector' => 'fos_rest.inflector.doctrine',
            'fos_rest.router' => 'router',
            'fos_rest.serializer' => 'jms_serializer',
            'fos_rest.templating' => 'templating',
            'hwi_oauth.user.provider.entity.main' => 'icap.oauth.user_provider',
            'icap.notification.orm.entity_manager' => 'claroline.persistence.object_manager',
            'mailer' => 'swiftmailer.mailer.default',
            'serializer' => 'jms_serializer',
            'session.storage' => 'session.storage.native',
            'swiftmailer.mailer' => 'swiftmailer.mailer.default',
            'swiftmailer.transport' => 'swiftmailer.mailer.default.transport',
            'translator' => 'translator.default',
        );
    }

    /*
     * {@inheritdoc}
     */
    public function compile()
    {
        throw new LogicException('You cannot compile a dumped frozen container.');
    }

    /*
     * {@inheritdoc}
     */
    public function isFrozen()
    {
        return true;
    }

    /*
     * Gets the '_jms_di_extra.unnamed.service_0' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ScormBundle\Transfert\ScormImporter A Claroline\ScormBundle\Transfert\ScormImporter instance
     */
    protected function getJmsDiExtra_Unnamed_Service0Service()
    {
        return $this->services['_jms_di_extra.unnamed.service_0'] = new \Claroline\ScormBundle\Transfert\ScormImporter($this);
    }

    /*
     * Gets the 'annotation_reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Annotations\FileCacheReader A Doctrine\Common\Annotations\FileCacheReader instance
     */
    protected function getAnnotationReaderService()
    {
        return $this->services['annotation_reader'] = new \Doctrine\Common\Annotations\FileCacheReader(new \Doctrine\Common\Annotations\AnnotationReader(), (__DIR__.'/annotations'), false);
    }

    /*
     * Gets the 'assetic.asset_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Assetic\Factory\LazyAssetManager A Assetic\Factory\LazyAssetManager instance
     */
    protected function getAssetic_AssetManagerService()
    {
        $a = $this->get('templating.loader');

        $this->services['assetic.asset_manager'] = $instance = new \Assetic\Factory\LazyAssetManager($this->get('assetic.asset_factory'), array('twig' => new \Assetic\Factory\Loader\CachedFormulaLoader(new \Assetic\Extension\Twig\TwigFormulaLoader($this->get('twig'), $this->get('monolog.logger.assetic', ContainerInterface::NULL_ON_INVALID_REFERENCE)), new \Assetic\Cache\ConfigCache((__DIR__.'/assetic/config')), false)));

        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FrontEndBundle', ($this->targetDirs[2].'/Resources/FrontEndBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FrontEndBundle', ($this->targetDirs[3].'/vendor/claroline/front-end-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineInstallationBundle', ($this->targetDirs[2].'/Resources/ClarolineInstallationBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineInstallationBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/main/installation/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineMigrationBundle', ($this->targetDirs[2].'/Resources/ClarolineMigrationBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineMigrationBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/main/migration/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineCoreBundle', ($this->targetDirs[2].'/Resources/ClarolineCoreBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineCoreBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineAgendaBundle', ($this->targetDirs[2].'/Resources/ClarolineAgendaBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineAgendaBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FormaLibreReservationBundle', ($this->targetDirs[2].'/Resources/FormaLibreReservationBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FormaLibreReservationBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineImagePlayerBundle', ($this->targetDirs[2].'/Resources/ClarolineImagePlayerBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineImagePlayerBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/image-player/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineMessageBundle', ($this->targetDirs[2].'/Resources/ClarolineMessageBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineMessageBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineForumBundle', ($this->targetDirs[2].'/Resources/ClarolineForumBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineForumBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineTagBundle', ($this->targetDirs[2].'/Resources/ClarolineTagBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineTagBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FormaLibreSupportBundle', ($this->targetDirs[2].'/Resources/FormaLibreSupportBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FormaLibreSupportBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/support/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineRssReaderBundle', ($this->targetDirs[2].'/Resources/ClarolineRssReaderBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineRssReaderBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapNotificationBundle', ($this->targetDirs[2].'/Resources/IcapNotificationBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapNotificationBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/notification/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineSurveyBundle', ($this->targetDirs[2].'/Resources/ClarolineSurveyBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineSurveyBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/survey/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineAnnouncementBundle', ($this->targetDirs[2].'/Resources/ClarolineAnnouncementBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineAnnouncementBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineScormBundle', ($this->targetDirs[2].'/Resources/ClarolineScormBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineScormBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolinePdfPlayerBundle', ($this->targetDirs[2].'/Resources/ClarolinePdfPlayerBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolinePdfPlayerBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-player/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineCursusBundle', ($this->targetDirs[2].'/Resources/ClarolineCursusBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineCursusBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineTeamBundle', ($this->targetDirs[2].'/Resources/ClarolineTeamBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineTeamBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolinePdfGeneratorBundle', ($this->targetDirs[2].'/Resources/ClarolinePdfGeneratorBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolinePdfGeneratorBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-generator/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FormaLibrePresenceBundle', ($this->targetDirs[2].'/Resources/FormaLibrePresenceBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FormaLibrePresenceBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/presence/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineVideoPlayerBundle', ($this->targetDirs[2].'/Resources/ClarolineVideoPlayerBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineVideoPlayerBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineActivityToolBundle', ($this->targetDirs[2].'/Resources/ClarolineActivityToolBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineActivityToolBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineWebResourceBundle', ($this->targetDirs[2].'/Resources/ClarolineWebResourceBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineWebResourceBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/web-resource/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineTextPlayerBundle', ($this->targetDirs[2].'/Resources/ClarolineTextPlayerBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineTextPlayerBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/text-player/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'InnovaCollecticielBundle', ($this->targetDirs[2].'/Resources/InnovaCollecticielBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'InnovaCollecticielBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'HeVinciFavouriteBundle', ($this->targetDirs[2].'/Resources/HeVinciFavouriteBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'HeVinciFavouriteBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/favourite/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'HeVinciCompetencyBundle', ($this->targetDirs[2].'/Resources/HeVinciCompetencyBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'HeVinciCompetencyBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'HeVinciUrlBundle', ($this->targetDirs[2].'/Resources/HeVinciUrlBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'HeVinciUrlBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/url/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapPortfolioBundle', ($this->targetDirs[2].'/Resources/IcapPortfolioBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapPortfolioBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapBadgeBundle', ($this->targetDirs[2].'/Resources/IcapBadgeBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapBadgeBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapBlogBundle', ($this->targetDirs[2].'/Resources/IcapBlogBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapBlogBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapDropzoneBundle', ($this->targetDirs[2].'/Resources/IcapDropzoneBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapDropzoneBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapSocialmediaBundle', ($this->targetDirs[2].'/Resources/IcapSocialmediaBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapSocialmediaBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapWikiBundle', ($this->targetDirs[2].'/Resources/IcapWikiBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapWikiBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapOAuthBundle', ($this->targetDirs[2].'/Resources/IcapOAuthBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapOAuthBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/oauth/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapFormulaPluginBundle', ($this->targetDirs[2].'/Resources/IcapFormulaPluginBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapFormulaPluginBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/formula/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineResultBundle', ($this->targetDirs[2].'/Resources/ClarolineResultBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineResultBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'InnovaPathBundle', ($this->targetDirs[2].'/Resources/InnovaPathBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'InnovaPathBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapWebsiteBundle', ($this->targetDirs[2].'/Resources/IcapWebsiteBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapWebsiteBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineFlashCardBundle', ($this->targetDirs[2].'/Resources/ClarolineFlashCardBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineFlashCardBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/flashcard/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'UJMExoBundle', ($this->targetDirs[2].'/Resources/UJMExoBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'UJMExoBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapLessonBundle', ($this->targetDirs[2].'/Resources/IcapLessonBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IcapLessonBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineChatBundle', ($this->targetDirs[2].'/Resources/ClarolineChatBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineChatBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineDashboardBundle', ($this->targetDirs[2].'/Resources/ClarolineDashboardBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineDashboardBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dashboard/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineClacoFormBundle', ($this->targetDirs[2].'/Resources/ClarolineClacoFormBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineClacoFormBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/claco-form/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FrameworkBundle', ($this->targetDirs[2].'/Resources/FrameworkBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FrameworkBundle', ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SecurityBundle', ($this->targetDirs[2].'/Resources/SecurityBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SecurityBundle', ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'TwigBundle', ($this->targetDirs[2].'/Resources/TwigBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'TwigBundle', ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'JMSAopBundle', ($this->targetDirs[2].'/Resources/JMSAopBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'JMSAopBundle', ($this->targetDirs[3].'/vendor/jms/aop-bundle/JMS/AopBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ZenstruckFormBundle', ($this->targetDirs[2].'/Resources/ZenstruckFormBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ZenstruckFormBundle', ($this->targetDirs[3].'/vendor/zenstruck/form-bundle/Zenstruck/Bundle/FormBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'BazingaJsTranslationBundle', ($this->targetDirs[2].'/Resources/BazingaJsTranslationBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'BazingaJsTranslationBundle', ($this->targetDirs[3].'/vendor/willdurand/js-translation-bundle/Bazinga/Bundle/JsTranslationBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'WhiteOctoberPagerfantaBundle', ($this->targetDirs[2].'/Resources/WhiteOctoberPagerfantaBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'WhiteOctoberPagerfantaBundle', ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SwiftmailerBundle', ($this->targetDirs[2].'/Resources/SwiftmailerBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SwiftmailerBundle', ($this->targetDirs[3].'/vendor/symfony/swiftmailer-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'MonologBundle', ($this->targetDirs[2].'/Resources/MonologBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'MonologBundle', ($this->targetDirs[3].'/vendor/symfony/monolog-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'AsseticBundle', ($this->targetDirs[2].'/Resources/AsseticBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'AsseticBundle', ($this->targetDirs[3].'/vendor/symfony/assetic-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'StofDoctrineExtensionsBundle', ($this->targetDirs[2].'/Resources/StofDoctrineExtensionsBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'StofDoctrineExtensionsBundle', ($this->targetDirs[3].'/vendor/stof/doctrine-extensions-bundle/Stof/DoctrineExtensionsBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'StfalconTinymceBundle', ($this->targetDirs[2].'/Resources/StfalconTinymceBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'StfalconTinymceBundle', ($this->targetDirs[3].'/vendor/stfalcon/tinymce-bundle/Stfalcon/Bundle/TinymceBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SensioFrameworkExtraBundle', ($this->targetDirs[2].'/Resources/SensioFrameworkExtraBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SensioFrameworkExtraBundle', ($this->targetDirs[3].'/vendor/sensio/framework-extra-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'KnpSnappyBundle', ($this->targetDirs[2].'/Resources/KnpSnappyBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'KnpSnappyBundle', ($this->targetDirs[3].'/vendor/knplabs/knp-snappy-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'KnpMenuBundle', ($this->targetDirs[2].'/Resources/KnpMenuBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'KnpMenuBundle', ($this->targetDirs[3].'/vendor/knplabs/knp-menu-bundle/Knp/Bundle/MenuBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'JMSTwigJsBundle', ($this->targetDirs[2].'/Resources/JMSTwigJsBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'JMSTwigJsBundle', ($this->targetDirs[3].'/vendor/jms/twig-js-bundle/JMS/TwigJsBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'JMSSerializerBundle', ($this->targetDirs[2].'/Resources/JMSSerializerBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'JMSSerializerBundle', ($this->targetDirs[3].'/vendor/jms/serializer-bundle/JMS/SerializerBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'JMSDiExtraBundle', ($this->targetDirs[2].'/Resources/JMSDiExtraBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'JMSDiExtraBundle', ($this->targetDirs[3].'/vendor/jms/di-extra-bundle/JMS/DiExtraBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'JMSSecurityExtraBundle', ($this->targetDirs[2].'/Resources/JMSSecurityExtraBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'JMSSecurityExtraBundle', ($this->targetDirs[3].'/vendor/jms/security-extra-bundle/JMS/SecurityExtraBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'InnovaAngularJSBundle', ($this->targetDirs[2].'/Resources/InnovaAngularJSBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'InnovaAngularJSBundle', ($this->targetDirs[3].'/vendor/innova/angular-js-bundle/Innova/AngularJSBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'InnovaAngularUITinyMCEBundle', ($this->targetDirs[2].'/Resources/InnovaAngularUITinyMCEBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'InnovaAngularUITinyMCEBundle', ($this->targetDirs[3].'/vendor/innova/angular-ui-tinymce-bundle/Innova/AngularUITinyMCEBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'InnovaAngularUIResourcePickerBundle', ($this->targetDirs[2].'/Resources/InnovaAngularUIResourcePickerBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'InnovaAngularUIResourcePickerBundle', ($this->targetDirs[3].'/vendor/innova/angular-ui-resource-picker-bundle/Innova/AngularUIResourcePickerBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IDCIExporterBundle', ($this->targetDirs[2].'/Resources/IDCIExporterBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'IDCIExporterBundle', ($this->targetDirs[3].'/vendor/idci/exporter-bundle/IDCI/Bundle/ExporterBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'HWIOAuthBundle', ($this->targetDirs[2].'/Resources/HWIOAuthBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'HWIOAuthBundle', ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'GregwarCaptchaBundle', ($this->targetDirs[2].'/Resources/GregwarCaptchaBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'GregwarCaptchaBundle', ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FOSRestBundle', ($this->targetDirs[2].'/Resources/FOSRestBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FOSRestBundle', ($this->targetDirs[3].'/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FOSOAuthServerBundle', ($this->targetDirs[2].'/Resources/FOSOAuthServerBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FOSOAuthServerBundle', ($this->targetDirs[3].'/vendor/friendsofsymfony/oauth-server-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FOSJsRoutingBundle', ($this->targetDirs[2].'/Resources/FOSJsRoutingBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FOSJsRoutingBundle', ($this->targetDirs[3].'/vendor/friendsofsymfony/jsrouting-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DoctrineBundle', ($this->targetDirs[2].'/Resources/DoctrineBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DoctrineBundle', ($this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'BeSimpleSsoAuthBundle', ($this->targetDirs[2].'/Resources/BeSimpleSsoAuthBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'BeSimpleSsoAuthBundle', ($this->targetDirs[3].'/vendor/besimple/sso-auth-bundle/BeSimple/SsoAuthBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineKernelBundle', ($this->targetDirs[2].'/Resources/ClarolineKernelBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'ClarolineKernelBundle', ($this->targetDirs[3].'/vendor/claroline/distribution/main/kernel/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, '', ($this->targetDirs[2].'/Resources/views'), '/\\.[^.]+\\.twig$/'), 'twig');

        return $instance;
    }

    /*
     * Gets the 'assetic.filter.cssmin' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Assetic\Filter\CssMinFilter A Assetic\Filter\CssMinFilter instance
     */
    protected function getAssetic_Filter_CssminService()
    {
        require_once ($this->targetDirs[2].'/../vendor/natxet/CssMin/src/CssMin.php');

        $this->services['assetic.filter.cssmin'] = $instance = new \Assetic\Filter\CssMinFilter();

        $instance->setFilters(array());
        $instance->setPlugins(array());

        return $instance;
    }

    /*
     * Gets the 'assetic.filter.cssrewrite' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Assetic\Filter\CssRewriteFilter A Assetic\Filter\CssRewriteFilter instance
     */
    protected function getAssetic_Filter_CssrewriteService()
    {
        return $this->services['assetic.filter.cssrewrite'] = new \Assetic\Filter\CssRewriteFilter();
    }

    /*
     * Gets the 'assetic.filter.jsmin' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Assetic\Filter\JSMinFilter A Assetic\Filter\JSMinFilter instance
     */
    protected function getAssetic_Filter_JsminService()
    {
        require_once ($this->targetDirs[2].'/../vendor/werkint/jsmin/JsMin/Minify.php');

        return $this->services['assetic.filter.jsmin'] = new \Assetic\Filter\JSMinFilter();
    }

    /*
     * Gets the 'assetic.filter.less' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Assetic\Filter\LessFilter A Assetic\Filter\LessFilter instance
     */
    protected function getAssetic_Filter_LessService()
    {
        $this->services['assetic.filter.less'] = $instance = new \Assetic\Filter\LessFilter('/usr/bin/node', array(0 => ($this->targetDirs[2].'/../node_modules')));

        $instance->setTimeout(NULL);
        $instance->setCompress(NULL);
        $instance->setLoadPaths(array());

        return $instance;
    }

    /*
     * Gets the 'assetic.filter_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\AsseticBundle\FilterManager A Symfony\Bundle\AsseticBundle\FilterManager instance
     */
    protected function getAssetic_FilterManagerService()
    {
        return $this->services['assetic.filter_manager'] = new \Symfony\Bundle\AsseticBundle\FilterManager($this, array('cssrewrite' => 'assetic.filter.cssrewrite', 'less' => 'assetic.filter.less', 'cssmin' => 'assetic.filter.cssmin', 'jsmin' => 'assetic.filter.jsmin', 'twig_js' => 'twig_js.assetic_filter'));
    }

    /*
     * Gets the 'assets.context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Asset\Context\RequestStackContext A Symfony\Component\Asset\Context\RequestStackContext instance
     */
    protected function getAssets_ContextService()
    {
        return $this->services['assets.context'] = new \Symfony\Component\Asset\Context\RequestStackContext($this->get('request_stack'));
    }

    /*
     * Gets the 'assets.packages' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Asset\Packages A Symfony\Component\Asset\Packages instance
     */
    protected function getAssets_PackagesService()
    {
        return $this->services['assets.packages'] = new \Symfony\Component\Asset\Packages(new \Symfony\Component\Asset\PathPackage('', new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy(), $this->get('assets.context')), array());
    }

    /*
     * Gets the 'bazinga.jstranslation.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Bazinga\Bundle\JsTranslationBundle\Controller\Controller A Bazinga\Bundle\JsTranslationBundle\Controller\Controller instance
     */
    protected function getBazinga_Jstranslation_ControllerService()
    {
        $a = $this->get('translation.loader.xliff');

        $this->services['bazinga.jstranslation.controller'] = $instance = new \Bazinga\Bundle\JsTranslationBundle\Controller\Controller($this->get('translator.default'), $this->get('templating'), $this->get('bazinga.jstranslation.translation_finder'), (__DIR__.'/bazinga-js-translation'), false, 'en', 'messages', '86400');

        $instance->addLoader('php', $this->get('translation.loader.php'));
        $instance->addLoader('yml', $this->get('translation.loader.yml'));
        $instance->addLoader('xlf', $a);
        $instance->addLoader('xliff', $a);
        $instance->addLoader('po', $this->get('translation.loader.po'));
        $instance->addLoader('mo', $this->get('translation.loader.mo'));
        $instance->addLoader('ts', $this->get('translation.loader.qt'));
        $instance->addLoader('csv', $this->get('translation.loader.csv'));
        $instance->addLoader('res', $this->get('translation.loader.res'));
        $instance->addLoader('dat', $this->get('translation.loader.dat'));
        $instance->addLoader('ini', $this->get('translation.loader.ini'));
        $instance->addLoader('json', $this->get('translation.loader.json'));

        return $instance;
    }

    /*
     * Gets the 'bazinga.jstranslation.translation_dumper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Bazinga\Bundle\JsTranslationBundle\Dumper\TranslationDumper A Bazinga\Bundle\JsTranslationBundle\Dumper\TranslationDumper instance
     */
    protected function getBazinga_Jstranslation_TranslationDumperService()
    {
        $a = $this->get('translation.loader.xliff');

        $this->services['bazinga.jstranslation.translation_dumper'] = $instance = new \Bazinga\Bundle\JsTranslationBundle\Dumper\TranslationDumper($this->get('templating'), $this->get('bazinga.jstranslation.translation_finder'), $this->get('router'), $this->get('filesystem'), 'en', 'messages', array(), array());

        $instance->addLoader('php', $this->get('translation.loader.php'));
        $instance->addLoader('yml', $this->get('translation.loader.yml'));
        $instance->addLoader('xlf', $a);
        $instance->addLoader('xliff', $a);
        $instance->addLoader('po', $this->get('translation.loader.po'));
        $instance->addLoader('mo', $this->get('translation.loader.mo'));
        $instance->addLoader('ts', $this->get('translation.loader.qt'));
        $instance->addLoader('csv', $this->get('translation.loader.csv'));
        $instance->addLoader('res', $this->get('translation.loader.res'));
        $instance->addLoader('dat', $this->get('translation.loader.dat'));
        $instance->addLoader('ini', $this->get('translation.loader.ini'));
        $instance->addLoader('json', $this->get('translation.loader.json'));

        return $instance;
    }

    /*
     * Gets the 'bazinga.jstranslation.translation_finder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Bazinga\Bundle\JsTranslationBundle\Finder\TranslationFinder A Bazinga\Bundle\JsTranslationBundle\Finder\TranslationFinder instance
     */
    protected function getBazinga_Jstranslation_TranslationFinderService()
    {
        return $this->services['bazinga.jstranslation.translation_finder'] = new \Bazinga\Bundle\JsTranslationBundle\Finder\TranslationFinder(array('cs' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cs.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.cs.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.cs.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.cs.xliff'), 4 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.cs.yml'), 5 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.cs.yml')), 'sq' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sq.xlf')), 'ar' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ar.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ar.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ar.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.ar.xliff')), 'pt' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt.xlf'), 2 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.pt.xliff')), 'hr' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hr.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hr.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.hr.xlf')), 'ro' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ro.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ro.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ro.xlf'), 3 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.ro.yml'), 4 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.ro.yml')), 'lb' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lb.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lb.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.lb.xlf')), 'lt' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lt.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lt.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.lt.xlf')), 'sr_Cyrl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Cyrl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Cyrl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sr_Cyrl.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.sr_Cyrl.xliff')), 'de' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.de.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.de.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.de.xlf'), 3 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/error.de.yml'), 4 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/validators.de.yml'), 5 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/tools.de.yml'), 6 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/platform.de.yml'), 7 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/theme.de.yml'), 8 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/notification.de.yml'), 9 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/home.de.yml'), 10 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/api.de.yml'), 11 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/resource.de.yml'), 12 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/widget.de.yml'), 13 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/log.de.yml'), 14 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/agenda.de.yml'), 15 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/notification.de.yml'), 16 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.de.xliff'), 17 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.de.yml'), 18 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.de.yml'), 19 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.de.yml'), 20 => ($this->targetDirs[3].'/vendor/friendsofsymfony/oauth-server-bundle/Resources/translations/FOSOAuthServerBundle.de.yml')), 'hu' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hu.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hu.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.hu.xlf'), 3 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.hu.yml')), 'gl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.gl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.gl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.gl.xlf')), 'pl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.pl.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.pl.xliff'), 4 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.pl.yml'), 5 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.pl.yml'), 6 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.pl.yml')), 'id' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.id.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.id.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.id.xlf')), 'eu' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.eu.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.eu.xlf')), 'da' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.da.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.da.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.da.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.da.xliff')), 'tr' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.tr.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.tr.xlf'), 2 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.tr.xliff'), 3 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.tr.yml')), 'zh_TW' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.zh_TW.xlf')), 'sk' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sk.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sk.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sk.xlf')), 'es' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.es.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.es.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.es.xlf'), 3 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/platform.es.yml'), 4 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/log.es.yml'), 5 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/home.es.yml'), 6 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/widget.es.yml'), 7 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/resource.es.yml'), 8 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/api.es.yml'), 9 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/theme.es.yml'), 10 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/tools.es.yml'), 11 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/error.es.yml'), 12 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/validators.es.yml'), 13 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/notification.es.yml'), 14 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/widget.es.yml'), 15 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/tools.es.yml'), 16 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/agenda.es.yml'), 17 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/tools.es.yml'), 18 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/image-player/Resources/translations/plugin_description.es.yml'), 19 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/translations/tools.es.yml'), 20 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/translations/message.es.yml'), 21 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/log.es.yml'), 22 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/widget.es.yml'), 23 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/resource.es.yml'), 24 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/forum.es.yml'), 25 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/plugin_description.es.yml'), 26 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/notification.es.yml'), 27 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/widget.es.yml'), 28 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/validators.es.yml'), 29 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/plugin_description.es.yml'), 30 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/rss_reader.es.yml'), 31 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/log.es.yml'), 32 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/announcement.es.yml'), 33 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/widget.es.yml'), 34 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/resource.es.yml'), 35 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/plugin_description.es.yml'), 36 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-player/Resources/translations/widget.es.yml'), 37 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-player/Resources/translations/plugin_description.es.yml'), 38 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/team.es.yml'), 39 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/resource.es.yml'), 40 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/tools.es.yml'), 41 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/plugin_description.es.yml'), 42 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/translations/tools.es.yml'), 43 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/translations/plugin_description.es.yml'), 44 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/web-resource/Resources/translations/resource.es.yml'), 45 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/log.es.yml'), 46 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/tools.es.yml'), 47 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/icap_badge.es.yml'), 48 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/validators.es.yml'), 49 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/oauth/Resources/translations/icap_oauth.es.yml'), 50 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.es.xliff'), 51 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.es.yml'), 52 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.es.yml'), 53 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.es.yml')), 'az' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.az.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.az.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.az.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.az.xliff')), 'en' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.en.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.en.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.en.xlf'), 3 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/log.en.yml'), 4 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/validators.en.yml'), 5 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/resource.en.yml'), 6 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/notification.en.yml'), 7 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/platform.en.yml'), 8 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/api.en.yml'), 9 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/tools.en.yml'), 10 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/widget.en.yml'), 11 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/home.en.yml'), 12 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/error.en.yml'), 13 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/theme.en.yml'), 14 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/validators.en.yml'), 15 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/agenda.en.yml'), 16 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/tools.en.yml'), 17 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/widget.en.yml'), 18 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/validators.en.yml'), 19 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/reservation.en.yml'), 20 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/tools.en.yml'), 21 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/image-player/Resources/translations/resource.en.yml'), 22 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/image-player/Resources/translations/plugin_description.en.yml'), 23 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/image-player/Resources/translations/widget.en.yml'), 24 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/translations/message.en.yml'), 25 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/translations/tools.en.yml'), 26 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/log.en.yml'), 27 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/forum.en.yml'), 28 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/resource.en.yml'), 29 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/notification.en.yml'), 30 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/plugin_description.en.yml'), 31 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/widget.en.yml'), 32 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/tag.en.yml'), 33 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/resource.en.yml'), 34 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/tools.en.yml'), 35 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/widget.en.yml'), 36 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/support/Resources/translations/support.en.yml'), 37 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/support/Resources/translations/tools.en.yml'), 38 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/validators.en.yml'), 39 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/plugin_description.en.yml'), 40 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/rss_reader.en.yml'), 41 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/widget.en.yml'), 42 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/notification/Resources/translations/notification.en.yml'), 43 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/notification/Resources/translations/tools.en.yml'), 44 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/survey/Resources/translations/log.en.yml'), 45 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/survey/Resources/translations/resource.en.yml'), 46 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/survey/Resources/translations/survey.en.yml'), 47 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/log.en.yml'), 48 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/resource.en.yml'), 49 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/plugin_description.en.yml'), 50 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/widget.en.yml'), 51 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/announcement.en.yml'), 52 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/translations/log.en.yml'), 53 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/translations/resource.en.yml'), 54 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/translations/plugin_description.en.yml'), 55 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/translations/scorm.en.yml'), 56 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-player/Resources/translations/resource.en.yml'), 57 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-player/Resources/translations/plugin_description.en.yml'), 58 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-player/Resources/translations/widget.en.yml'), 59 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/translations/platform.en.yml'), 60 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/translations/tools.en.yml'), 61 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/translations/widget.en.yml'), 62 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/translations/cursus.en.yml'), 63 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/resource.en.yml'), 64 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/team.en.yml'), 65 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/tools.en.yml'), 66 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/presence/Resources/translations/tools.en.yml'), 67 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/presence/Resources/translations/presences.en.yml'), 68 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/resource.en.yml'), 69 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/plugin_description.en.yml'), 70 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/platform.en.yml'), 71 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/videojs.en.yml'), 72 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/widget.en.yml'), 73 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/translations/plugin_description.en.yml'), 74 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/translations/tools.en.yml'), 75 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/web-resource/Resources/translations/resource.en.yml'), 76 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/collecticiel.en.yml'), 77 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/log.en.yml'), 78 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/innova_collecticiel.en.yml'), 79 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/resource.en.yml'), 80 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/notification.en.yml'), 81 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/icap_dropzone.en.yml'), 82 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/favourite/Resources/translations/resource.en.yml'), 83 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/favourite/Resources/translations/widget.en.yml'), 84 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/validators.en.yml'), 85 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/resource.en.yml'), 86 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/platform.en.yml'), 87 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/tools.en.yml'), 88 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/widget.en.yml'), 89 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/competency.en.yml'), 90 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/url/Resources/translations/validators.en.yml'), 91 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/url/Resources/translations/resource.en.yml'), 92 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/log.en.yml'), 93 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/notification.en.yml'), 94 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/tools.en.yml'), 95 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/icap_portfolio.en.yml'), 96 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/analytics.en.yml'), 97 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/log.en.yml'), 98 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/validators.en.yml'), 99 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/notification.en.yml'), 100 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/tools.en.yml'), 101 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/icap_portfolio.en.yml'), 102 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/widget.en.yml'), 103 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/icap_badge.en.yml'), 104 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/log.en.yml'), 105 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/validators.en.yml'), 106 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/resource.en.yml'), 107 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/notification.en.yml'), 108 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/plugin_description.en.yml'), 109 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/icap_blog.en.yml'), 110 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/widget.en.yml'), 111 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/log.en.yml'), 112 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/resource.en.yml'), 113 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/notification.en.yml'), 114 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/icap_dropzone.en.yml'), 115 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/log.en.yml'), 116 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/resource.en.yml'), 117 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/plugin_description.en.yml'), 118 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/icap_socialmedia.en.yml'), 119 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/log.en.yml'), 120 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/resource.en.yml'), 121 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/notification.en.yml'), 122 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/plugin_description.en.yml'), 123 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/messages.en.yml'), 124 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/icap_wiki.en.yml'), 125 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/oauth/Resources/translations/icap_oauth.en.yml'), 126 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/translations/log.en.yml'), 127 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/translations/resource.en.yml'), 128 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/translations/results.en.yml'), 129 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/translations/widget.en.yml'), 130 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/resource.en.yml'), 131 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/notification.en.yml'), 132 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/plugin_description.en.yml'), 133 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/tools.en.yml'), 134 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/messages.en.yml'), 135 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/innova_tools.en.yml'), 136 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/widget.en.yml'), 137 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/path_wizards.en.yml'), 138 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/resource.en.yml'), 139 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/plugin_description.en.yml'), 140 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/icap_website.en.yml'), 141 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/messages.en.yml'), 142 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/flashcard/Resources/translations/resource.en.yml'), 143 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/flashcard/Resources/translations/flashcard.en.yml'), 144 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/log.en.yml'), 145 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/resource.en.yml'), 146 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/plugin_description.en.yml'), 147 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/ujm_exo.en.yml'), 148 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/tools.en.yml'), 149 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/question_types.en.yml'), 150 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/log.en.yml'), 151 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/resource.en.yml'), 152 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/notification.en.yml'), 153 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/icap_lesson.en.yml'), 154 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/resource.en.yml'), 155 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/tools.en.yml'), 156 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/chat.en.yml'), 157 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dashboard/Resources/translations/dashboard.en.yml'), 158 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dashboard/Resources/translations/tools.en.yml'), 159 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/claco-form/Resources/translations/resource.en.yml'), 160 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/claco-form/Resources/translations/clacoform.en.yml'), 161 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/claco-form/Resources/translations/widget.en.yml'), 162 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.en.xliff'), 163 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.en.yml'), 164 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.en.yml'), 165 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.en.yml'), 166 => ($this->targetDirs[3].'/vendor/friendsofsymfony/oauth-server-bundle/Resources/translations/FOSOAuthServerBundle.en.yml')), 'ja' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ja.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ja.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ja.xlf')), 'no' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.no.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.no.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.no.xlf')), 'he' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.he.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.he.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.he.xlf')), 'fi' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fi.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fi.xlf')), 'ru' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ru.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ru.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ru.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.ru.xliff'), 4 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.ru.yml'), 5 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.ru.yml'), 6 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.ru.yml')), 'sl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sl.xlf'), 3 => ($this->targetDirs[3].'/vendor/friendsofsymfony/oauth-server-bundle/Resources/translations/FOSOAuthServerBundle.sl.yml')), 'fr' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fr.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fr.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.fr.xlf'), 3 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/home.fr.yml'), 4 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/notification.fr.yml'), 5 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/resource.fr.yml'), 6 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/error.fr.yml'), 7 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/validators.fr.yml'), 8 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/log.fr.yml'), 9 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/platform.fr.yml'), 10 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/tools.fr.yml'), 11 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/theme.fr.yml'), 12 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/widget.fr.yml'), 13 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/api.fr.yml'), 14 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/validators.fr.yml'), 15 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/agenda.fr.yml'), 16 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/tools.fr.yml'), 17 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/widget.fr.yml'), 18 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/validators.fr.yml'), 19 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/tools.fr.yml'), 20 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/reservation.fr.yml'), 21 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/image-player/Resources/translations/plugin_description.fr.yml'), 22 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/translations/tools.fr.yml'), 23 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/translations/message.fr.yml'), 24 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/notification.fr.yml'), 25 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/resource.fr.yml'), 26 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/log.fr.yml'), 27 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/plugin_description.fr.yml'), 28 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/forum.fr.yml'), 29 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/widget.fr.yml'), 30 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/resource.fr.yml'), 31 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/tools.fr.yml'), 32 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/widget.fr.yml'), 33 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/tag.fr.yml'), 34 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/support/Resources/translations/support.fr.yml'), 35 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/support/Resources/translations/tools.fr.yml'), 36 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/rss_reader.fr.yml'), 37 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/validators.fr.yml'), 38 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/plugin_description.fr.yml'), 39 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/widget.fr.yml'), 40 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/notification/Resources/translations/notification.fr.yml'), 41 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/notification/Resources/translations/tools.fr.yml'), 42 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/survey/Resources/translations/survey.fr.yml'), 43 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/survey/Resources/translations/resource.fr.yml'), 44 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/survey/Resources/translations/log.fr.yml'), 45 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/announcement.fr.yml'), 46 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/resource.fr.yml'), 47 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/log.fr.yml'), 48 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/plugin_description.fr.yml'), 49 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/widget.fr.yml'), 50 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/translations/resource.fr.yml'), 51 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/translations/log.fr.yml'), 52 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/translations/plugin_description.fr.yml'), 53 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/translations/scorm.fr.yml'), 54 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-player/Resources/translations/plugin_description.fr.yml'), 55 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-player/Resources/translations/widget.fr.yml'), 56 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/translations/platform.fr.yml'), 57 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/translations/tools.fr.yml'), 58 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/translations/cursus.fr.yml'), 59 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/translations/widget.fr.yml'), 60 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/resource.fr.yml'), 61 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/tools.fr.yml'), 62 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/team.fr.yml'), 63 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/presence/Resources/translations/presences.fr.yml'), 64 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/presence/Resources/translations/tools.fr.yml'), 65 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/plugin_description.fr.yml'), 66 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/platform.fr.yml'), 67 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/videojs.fr.yml'), 68 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/translations/plugin_description.fr.yml'), 69 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/translations/tools.fr.yml'), 70 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/web-resource/Resources/translations/resource.fr.yml'), 71 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/notification.fr.yml'), 72 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/resource.fr.yml'), 73 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/innova_collecticiel.fr.yml'), 74 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/log.fr.yml'), 75 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/collecticiel.fr.yml'), 76 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/icap_dropzone.fr.yml'), 77 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/favourite/Resources/translations/resource.fr.yml'), 78 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/favourite/Resources/translations/widget.fr.yml'), 79 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/competency.fr.yml'), 80 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/resource.fr.yml'), 81 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/validators.fr.yml'), 82 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/platform.fr.yml'), 83 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/tools.fr.yml'), 84 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/widget.fr.yml'), 85 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/url/Resources/translations/resource.fr.yml'), 86 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/url/Resources/translations/validators.fr.yml'), 87 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/notification.fr.yml'), 88 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/log.fr.yml'), 89 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/analytics.fr.yml'), 90 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/tools.fr.yml'), 91 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/icap_portfolio.fr.yml'), 92 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/notification.fr.yml'), 93 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/validators.fr.yml'), 94 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/log.fr.yml'), 95 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/icap_badge.fr.yml'), 96 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/tools.fr.yml'), 97 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/widget.fr.yml'), 98 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/icap_portfolio.fr.yml'), 99 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/notification.fr.yml'), 100 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/resource.fr.yml'), 101 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/validators.fr.yml'), 102 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/log.fr.yml'), 103 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/icap_blog.fr.yml'), 104 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/plugin_description.fr.yml'), 105 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/widget.fr.yml'), 106 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/notification.fr.yml'), 107 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/resource.fr.yml'), 108 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/log.fr.yml'), 109 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/icap_dropzone.fr.yml'), 110 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/resource.fr.yml'), 111 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/log.fr.yml'), 112 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/plugin_description.fr.yml'), 113 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/icap_socialmedia.fr.yml'), 114 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/messages.fr.yml'), 115 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/icap_wiki.fr.yml'), 116 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/plugin_descrpition.fr.yml'), 117 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/notification.fr.yml'), 118 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/resource.fr.yml'), 119 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/log.fr.yml'), 120 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/oauth/Resources/translations/icap_oauth.fr.yml'), 121 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/translations/resource.fr.yml'), 122 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/translations/log.fr.yml'), 123 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/translations/results.fr.yml'), 124 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/translations/widget.fr.yml'), 125 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/messages.fr.yml'), 126 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/notification.fr.yml'), 127 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/innova_tools.fr.yml'), 128 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/resource.fr.yml'), 129 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/plugin_description.fr.yml'), 130 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/tools.fr.yml'), 131 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/path_wizards.fr.yml'), 132 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/widget.fr.yml'), 133 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/messages.fr.yml'), 134 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/icap_website.fr.yml'), 135 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/resource.fr.yml'), 136 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/plugin_description.fr.yml'), 137 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/flashcard/Resources/translations/resource.fr.yml'), 138 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/flashcard/Resources/translations/flashcard.fr.yml'), 139 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/question_types.fr.yml'), 140 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/resource.fr.yml'), 141 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/ujm_exo.fr.yml'), 142 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/log.fr.yml'), 143 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/plugin_description.fr.yml'), 144 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/tools.fr.yml'), 145 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/icap_lesson.fr.yml'), 146 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/notification.fr.yml'), 147 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/resource.fr.yml'), 148 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/log.fr.yml'), 149 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/resource.fr.yml'), 150 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/tools.fr.yml'), 151 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/chat.fr.yml'), 152 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dashboard/Resources/translations/dashboard.fr.yml'), 153 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dashboard/Resources/translations/tools.fr.yml'), 154 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/claco-form/Resources/translations/resource.fr.yml'), 155 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/claco-form/Resources/translations/clacoform.fr.yml'), 156 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/claco-form/Resources/translations/widget.fr.yml'), 157 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.fr.xliff'), 158 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.fr.yml'), 159 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.fr.yml'), 160 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.fr.yml'), 161 => ($this->targetDirs[3].'/vendor/friendsofsymfony/oauth-server-bundle/Resources/translations/FOSOAuthServerBundle.fr.yml')), 'el' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.el.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.el.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.el.xlf')), 'bg' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.bg.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.bg.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.bg.xlf'), 3 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.bg.yml'), 4 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.bg.yml')), 'et' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.et.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.et.xlf')), 'hy' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hy.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hy.xlf')), 'sr_Latn' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Latn.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Latn.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sr_Latn.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.sr_Latn.xliff')), 'vi' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.vi.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.vi.xlf')), 'ca' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ca.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ca.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ca.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.ca.xliff')), 'pt_BR' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt_BR.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt_BR.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.pt_BR.xlf'), 3 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.pt_BR.yml'), 4 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.pt_BR.yml')), 'it' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.it.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.it.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.it.xlf'), 3 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/widget.it.yml'), 4 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/plugin_description.it.yml'), 5 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.it.xliff'), 6 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.it.yml'), 7 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.it.yml'), 8 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.it.yml')), 'af' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.af.xlf')), 'lv' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lv.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lv.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.lv.xlf')), 'zh_CN' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.zh_CN.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.zh_CN.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.zh_CN.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.zh_CN.xliff'), 4 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.zh_CN.yml'), 5 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.zh_CN.yml')), 'nl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.nl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.nl.xlf'), 3 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/tools.nl.yml'), 4 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/widget.nl.yml'), 5 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/log.nl.yml'), 6 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/notification.nl.yml'), 7 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/error.nl.yml'), 8 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/api.nl.yml'), 9 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/resource.nl.yml'), 10 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/validators.nl.yml'), 11 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/home.nl.yml'), 12 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/platform.nl.yml'), 13 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/theme.nl.yml'), 14 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/tools.nl.yml'), 15 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/widget.nl.yml'), 16 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/agenda.nl.yml'), 17 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/validators.nl.yml'), 18 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/tools.nl.yml'), 19 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/reservation.nl.yml'), 20 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/validators.nl.yml'), 21 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/image-player/Resources/translations/plugin_description.nl.yml'), 22 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/translations/tools.nl.yml'), 23 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/translations/message.nl.yml'), 24 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/plugin_description.nl.yml'), 25 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/widget.nl.yml'), 26 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/forum.nl.yml'), 27 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/log.nl.yml'), 28 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/notification.nl.yml'), 29 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/resource.nl.yml'), 30 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/tools.nl.yml'), 31 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/widget.nl.yml'), 32 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/resource.nl.yml'), 33 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/support/Resources/translations/tools.nl.yml'), 34 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/support/Resources/translations/support.nl.yml'), 35 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/notification/Resources/translations/tools.nl.yml'), 36 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/notification/Resources/translations/notification.nl.yml'), 37 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/plugin_description.nl.yml'), 38 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/widget.nl.yml'), 39 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/announcement.nl.yml'), 40 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/log.nl.yml'), 41 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/resource.nl.yml'), 42 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/tools.nl.yml'), 43 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/team.nl.yml'), 44 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/resource.nl.yml'), 45 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/translations/tools.nl.yml'), 46 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/translations/plugin_description.nl.yml'), 47 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/web-resource/Resources/translations/resource.nl.yml'), 48 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/favourite/Resources/translations/widget.nl.yml'), 49 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/favourite/Resources/translations/resource.nl.yml'), 50 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/competency.nl.yml'), 51 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/url/Resources/translations/resource.nl.yml'), 52 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/url/Resources/translations/validators.nl.yml'), 53 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/tools.nl.yml'), 54 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/widget.nl.yml'), 55 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/log.nl.yml'), 56 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/notification.nl.yml'), 57 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/icap_portfolio.nl.yml'), 58 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/icap_badge.nl.yml'), 59 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/widget.nl.yml'), 60 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/resource.nl.yml'), 61 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/validators.nl.yml'), 62 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/resource.nl.yml'), 63 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/plugin_description.nl.yml'), 64 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/log.nl.yml'), 65 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/resource.nl.yml'), 66 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/icap_socialmedia.nl.yml'), 67 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/log.nl.yml'), 68 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/notification.nl.yml'), 69 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/plugin_descrpition.nl.yml'), 70 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/icap_wiki.nl.yml'), 71 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/resource.nl.yml'), 72 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/oauth/Resources/translations/icap_oauth.nl.yml'), 73 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/plugin_description.nl.yml'), 74 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/plugin_description.nl.yml'), 75 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/resource.nl.yml'), 76 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/icap_website.nl.yml'), 77 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/tools.nl.yml'), 78 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/plugin_description.nl.yml'), 79 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/log.nl.yml'), 80 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/resource.nl.yml'), 81 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/notification.nl.yml'), 82 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/resource.nl.yml'), 83 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/tools.nl.yml'), 84 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/resource.nl.yml'), 85 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/chat.nl.yml'), 86 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dashboard/Resources/translations/tools.nl.yml'), 87 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dashboard/Resources/translations/dashboard.nl.yml'), 88 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.nl.xliff'), 89 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.nl.yml'), 90 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.nl.yml'), 91 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.nl.yml')), 'fa' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fa.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fa.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.fa.xlf'), 3 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.fa.yml')), 'mn' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.mn.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.mn.xlf')), 'sv' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sv.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sv.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sv.xlf')), 'th' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.th.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.th.xlf')), 'nn' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nn.xlf')), 'uk' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.uk.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.uk.xlf'), 2 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.uk.yml'), 3 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.uk.yml'), 4 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.uk.yml')), 'cy' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cy.xlf')), 'pt_PT' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.pt_PT.xlf')), 'ua' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ua.xlf')), 'zh' => array(0 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.zh.yml'))));
    }

    /*
     * Gets the 'be_simple.sso_auth.client' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \BeSimple\SsoAuthBundle\Buzz\AdaptiveClient A BeSimple\SsoAuthBundle\Buzz\AdaptiveClient instance
     */
    protected function getBeSimple_SsoAuth_ClientService()
    {
        return $this->services['be_simple.sso_auth.client'] = new \BeSimple\SsoAuthBundle\Buzz\AdaptiveClient(array(64 => true, 32 => 3, 10004 => ''));
    }

    /*
     * Gets the 'be_simple.sso_auth.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \BeSimple\SsoAuthBundle\Sso\Factory A BeSimple\SsoAuthBundle\Sso\Factory instance
     */
    protected function getBeSimple_SsoAuth_FactoryService()
    {
        $this->services['be_simple.sso_auth.factory'] = $instance = new \BeSimple\SsoAuthBundle\Sso\Factory($this, $this->get('be_simple.sso_auth.client'));

        $instance->addProtocol('cas', 'be_simple.sso_auth.protocol.cas');
        $instance->addServer('cas', 'be_simple.sso_auth.server.cas');

        return $instance;
    }

    /*
     * Gets the 'be_simple.sso_auth.protocol.cas' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \BeSimple\SsoAuthBundle\Sso\Cas\Protocol A BeSimple\SsoAuthBundle\Sso\Cas\Protocol instance
     */
    protected function getBeSimple_SsoAuth_Protocol_CasService()
    {
        return $this->services['be_simple.sso_auth.protocol.cas'] = new \BeSimple\SsoAuthBundle\Sso\Cas\Protocol();
    }

    /*
     * Gets the 'be_simple.sso_auth.server.cas' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \BeSimple\SsoAuthBundle\Sso\Cas\Server A BeSimple\SsoAuthBundle\Sso\Cas\Server instance
     */
    protected function getBeSimple_SsoAuth_Server_CasService()
    {
        return $this->services['be_simple.sso_auth.server.cas'] = new \BeSimple\SsoAuthBundle\Sso\Cas\Server();
    }

    /*
     * Gets the 'cache_clearer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer A Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer instance
     */
    protected function getCacheClearerService()
    {
        return $this->services['cache_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer(array());
    }

    /*
     * Gets the 'cache_warmer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate A Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate instance
     */
    protected function getCacheWarmerService()
    {
        $a = $this->get('kernel');
        $b = $this->get('templating.filename_parser');

        $c = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplateFinder($a, $b, ($this->targetDirs[2].'/Resources'));

        return $this->services['cache_warmer'] = new \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate(array(0 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplatePathsCacheWarmer($c, $this->get('templating.locator')), 1 => new \Symfony\Bundle\AsseticBundle\CacheWarmer\AssetManagerCacheWarmer($this), 2 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TranslationsCacheWarmer($this->get('translator.default')), 3 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer($this->get('router')), 4 => new \Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheCacheWarmer($this, $c), 5 => new \JMS\DiExtraBundle\HttpKernel\ControllerInjectorsWarmer($a, $this->get('jms_di_extra.controller_resolver'), array()), 6 => new \Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer($this->get('doctrine'))));
    }

    /*
     * Gets the 'captcha.type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Gregwar\CaptchaBundle\Type\CaptchaType A Gregwar\CaptchaBundle\Type\CaptchaType instance
     */
    protected function getCaptcha_TypeService()
    {
        return $this->services['captcha.type'] = new \Gregwar\CaptchaBundle\Type\CaptchaType($this->get('session'), $this->get('gregwar_captcha.generator'), $this->get('translator.default'), array('length' => 5, 'width' => 130, 'height' => 50, 'font' => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/DependencyInjection/../Generator/Font/captcha.ttf'), 'keep_value' => false, 'charset' => 'abcdefhjkmnprstuvwxyz23456789', 'as_file' => false, 'as_url' => false, 'reload' => false, 'image_folder' => 'captcha', 'web_path' => ($this->targetDirs[2].'/../web'), 'gc_freq' => 100, 'expiration' => 60, 'quality' => 30, 'invalid_message' => 'Bad code value', 'bypass_code' => NULL, 'whitelist_key' => 'captcha_whitelist_key', 'humanity' => 0, 'distortion' => true, 'max_front_lines' => NULL, 'max_behind_lines' => NULL, 'interpolation' => true, 'text_color' => array(), 'background_color' => array(), 'disabled' => false));
    }

    /*
     * Gets the 'claroline.activity_tool_bundle.listener.tool_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ActivityToolBundle\Listener\ToolListener A Claroline\ActivityToolBundle\Listener\ToolListener instance
     */
    protected function getClaroline_ActivityToolBundle_Listener_ToolListenerService()
    {
        return $this->services['claroline.activity_tool_bundle.listener.tool_listener'] = new \Claroline\ActivityToolBundle\Listener\ToolListener($this->get('doctrine.orm.default_entity_manager'), $this->get('claroline.manager.resource_manager'), $this->get('security.token_storage'), $this->get('templating'), $this->get('claroline.security.utilities'));
    }

    /*
     * Gets the 'claroline.agenda_bundle.listener.agenda_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\AgendaBundle\Listener\AgendaListener A Claroline\AgendaBundle\Listener\AgendaListener instance
     */
    protected function getClaroline_AgendaBundle_Listener_AgendaListenerService()
    {
        return $this->services['claroline.agenda_bundle.listener.agenda_listener'] = new \Claroline\AgendaBundle\Listener\AgendaListener($this->get('templating'), $this->get('security.token_storage'), $this->get('security.authorization_checker'), $this, $this->get('router'), $this->get('request_stack'), $this->get('http_kernel'), $this->get('claroline.manager.agenda_manager'));
    }

    /*
     * Gets the 'claroline.agenda_bundle.validator.constraints.date_range_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\AgendaBundle\Validator\Constraints\DateRangeValidator A Claroline\AgendaBundle\Validator\Constraints\DateRangeValidator instance
     */
    protected function getClaroline_AgendaBundle_Validator_Constraints_DateRangeValidatorService()
    {
        return $this->services['claroline.agenda_bundle.validator.constraints.date_range_validator'] = new \Claroline\AgendaBundle\Validator\Constraints\DateRangeValidator();
    }

    /*
     * Gets the 'claroline.announcement.manager.announcement_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\AnnouncementBundle\Manager\AnnouncementManager A Claroline\AnnouncementBundle\Manager\AnnouncementManager instance
     */
    protected function getClaroline_Announcement_Manager_AnnouncementManagerService()
    {
        return $this->services['claroline.announcement.manager.announcement_manager'] = new \Claroline\AnnouncementBundle\Manager\AnnouncementManager($this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.mail_manager'), $this->get('claroline.event.event_dispatcher'));
    }

    /*
     * Gets the 'claroline.announcement_bundle.listener.announcement_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\AnnouncementBundle\Listener\AnnouncementListener A Claroline\AnnouncementBundle\Listener\AnnouncementListener instance
     */
    protected function getClaroline_AnnouncementBundle_Listener_AnnouncementListenerService()
    {
        return $this->services['claroline.announcement_bundle.listener.announcement_listener'] = new \Claroline\AnnouncementBundle\Listener\AnnouncementListener($this->get('form.factory'), $this->get('http_kernel'), $this->get('claroline.persistence.object_manager'), $this->get('request_stack'), $this->get('claroline.manager.resource_manager'), $this->get('templating'), $this->get('router'));
    }

    /*
     * Gets the 'claroline.announcement_bundle.listener.announcement_widget_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\AnnouncementBundle\Listener\AnnouncementWidgetListener A Claroline\AnnouncementBundle\Listener\AnnouncementWidgetListener instance
     */
    protected function getClaroline_AnnouncementBundle_Listener_AnnouncementWidgetListenerService()
    {
        return $this->services['claroline.announcement_bundle.listener.announcement_widget_listener'] = new \Claroline\AnnouncementBundle\Listener\AnnouncementWidgetListener($this->get('request_stack'), $this->get('http_kernel'));
    }

    /*
     * Gets the 'claroline.authentication_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\AuthenticationSuccessListener A Claroline\CoreBundle\Listener\AuthenticationSuccessListener instance
     */
    protected function getClaroline_AuthenticationHandlerService()
    {
        return $this->services['claroline.authentication_handler'] = new \Claroline\CoreBundle\Listener\AuthenticationSuccessListener($this->get('security.token_storage'), $this->get('security.authorization_checker'), $this->get('claroline.event.event_dispatcher'), $this->get('claroline.config.platform_config_handler'), $this->get('templating'), $this->get('form.factory'), $this->get('claroline.common.terms_of_service_manager'), $this->get('claroline.persistence.object_manager'), $this->get('router'), $this->get('claroline.manager.user_manager'), $this->get('request_stack'));
    }

    /*
     * Gets the 'claroline.authenticator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Security\Authenticator A Claroline\CoreBundle\Library\Security\Authenticator instance
     */
    protected function getClaroline_AuthenticatorService()
    {
        return $this->services['claroline.authenticator'] = new \Claroline\CoreBundle\Library\Security\Authenticator($this->get('claroline.persistence.object_manager'), $this->get('security.token_storage'), $this->get('security.encoder_factory'));
    }

    /*
     * Gets the 'claroline.captcha_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Extension\CaptchaExtension A Claroline\CoreBundle\Form\Extension\CaptchaExtension instance
     */
    protected function getClaroline_CaptchaExtensionService()
    {
        return $this->services['claroline.captcha_extension'] = new \Claroline\CoreBundle\Form\Extension\CaptchaExtension($this);
    }

    /*
     * Gets the 'claroline.chat_bundle.listener.chat_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ChatBundle\Listener\ChatListener A Claroline\ChatBundle\Listener\ChatListener instance
     */
    protected function getClaroline_ChatBundle_Listener_ChatListenerService()
    {
        return $this->services['claroline.chat_bundle.listener.chat_listener'] = new \Claroline\ChatBundle\Listener\ChatListener($this->get('http_kernel'), $this->get('request_stack'), $this->get('router'), $this->get('translator.default'));
    }

    /*
     * Gets the 'claroline.chat_bundle.listener.chat_room_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ChatBundle\Listener\ChatRoomListener A Claroline\ChatBundle\Listener\ChatRoomListener instance
     */
    protected function getClaroline_ChatBundle_Listener_ChatRoomListenerService()
    {
        return $this->services['claroline.chat_bundle.listener.chat_room_listener'] = new \Claroline\ChatBundle\Listener\ChatRoomListener($this->get('claroline.manager.chat_manager'), $this->get('form.factory'), $this->get('http_kernel'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.config.platform_config_handler'), $this->get('request_stack'), $this->get('templating'));
    }

    /*
     * Gets the 'claroline.chat_bundle.listener.user_creation_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ChatBundle\Listener\UserCreationListener A Claroline\ChatBundle\Listener\UserCreationListener instance
     */
    protected function getClaroline_ChatBundle_Listener_UserCreationListenerService()
    {
        return $this->services['claroline.chat_bundle.listener.user_creation_listener'] = new \Claroline\ChatBundle\Listener\UserCreationListener($this->get('claroline.manager.chat_manager'));
    }

    /*
     * Gets the 'claroline.chat_bundle.listener.user_delete_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ChatBundle\Listener\UserDeleteListener A Claroline\ChatBundle\Listener\UserDeleteListener instance
     */
    protected function getClaroline_ChatBundle_Listener_UserDeleteListenerService()
    {
        return $this->services['claroline.chat_bundle.listener.user_delete_listener'] = new \Claroline\ChatBundle\Listener\UserDeleteListener($this->get('claroline.manager.chat_manager'), $this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.chat_bundle.testing.persister' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ChatBundle\Testing\ChatPersister A Claroline\ChatBundle\Testing\ChatPersister instance
     */
    protected function getClaroline_ChatBundle_Testing_PersisterService()
    {
        return $this->services['claroline.chat_bundle.testing.persister'] = new \Claroline\ChatBundle\Testing\ChatPersister($this->get('claroline.persistence.object_manager'), $this);
    }

    /*
     * Gets the 'claroline.claco_form_bundle.listener.claco_form_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ClacoFormBundle\Listener\ClacoFormListener A Claroline\ClacoFormBundle\Listener\ClacoFormListener instance
     */
    protected function getClaroline_ClacoFormBundle_Listener_ClacoFormListenerService()
    {
        return $this->services['claroline.claco_form_bundle.listener.claco_form_listener'] = new \Claroline\ClacoFormBundle\Listener\ClacoFormListener($this->get('claroline.manager.claco_form_manager'), $this->get('form.factory'), $this->get('http_kernel'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.config.platform_config_handler'), $this->get('request_stack'), $this->get('templating'));
    }

    /*
     * Gets the 'claroline.claco_form_bundle.listener.claco_form_widget_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ClacoFormBundle\Listener\ClacoFormWidgetListener A Claroline\ClacoFormBundle\Listener\ClacoFormWidgetListener instance
     */
    protected function getClaroline_ClacoFormBundle_Listener_ClacoFormWidgetListenerService()
    {
        return $this->services['claroline.claco_form_bundle.listener.claco_form_widget_listener'] = new \Claroline\ClacoFormBundle\Listener\ClacoFormWidgetListener($this->get('request_stack'), $this->get('http_kernel'));
    }

    /*
     * Gets the 'claroline.command.update_command' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Command\PlatformUpdateCommand A Claroline\CoreBundle\Command\PlatformUpdateCommand instance
     */
    protected function getClaroline_Command_UpdateCommandService()
    {
        $this->services['claroline.command.update_command'] = $instance = new \Claroline\CoreBundle\Command\PlatformUpdateCommand();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'claroline.common.authentication_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\AuthenticationManager A Claroline\CoreBundle\Manager\AuthenticationManager instance
     */
    protected function getClaroline_Common_AuthenticationManagerService()
    {
        return $this->services['claroline.common.authentication_manager'] = new \Claroline\CoreBundle\Manager\AuthenticationManager($this);
    }

    /*
     * Gets the 'claroline.common.graph_service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Home\GraphService A Claroline\CoreBundle\Library\Home\GraphService instance
     */
    protected function getClaroline_Common_GraphServiceService()
    {
        return $this->services['claroline.common.graph_service'] = new \Claroline\CoreBundle\Library\Home\GraphService();
    }

    /*
     * Gets the 'claroline.common.home_service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Home\HomeService A Claroline\CoreBundle\Library\Home\HomeService instance
     */
    protected function getClaroline_Common_HomeServiceService()
    {
        return $this->services['claroline.common.home_service'] = new \Claroline\CoreBundle\Library\Home\HomeService();
    }

    /*
     * Gets the 'claroline.common.logo_service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Logo\LogoService A Claroline\CoreBundle\Library\Logo\LogoService instance
     */
    protected function getClaroline_Common_LogoServiceService()
    {
        return $this->services['claroline.common.logo_service'] = new \Claroline\CoreBundle\Library\Logo\LogoService(($this->targetDirs[2].'/../web/uploads/logos'));
    }

    /*
     * Gets the 'claroline.common.terms_of_service_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\TermsOfServiceManager A Claroline\CoreBundle\Manager\TermsOfServiceManager instance
     */
    protected function getClaroline_Common_TermsOfServiceManagerService()
    {
        return $this->services['claroline.common.terms_of_service_manager'] = new \Claroline\CoreBundle\Manager\TermsOfServiceManager($this->get('claroline.config.platform_config_handler'), $this, $this->get('claroline.manager.content_manager'), $this->get('claroline.manager.user_manager'), $this->get('claroline.manager.workspace_manager'));
    }

    /*
     * Gets the 'claroline.config.platform_config_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Configuration\PlatformConfigurationHandler A Claroline\CoreBundle\Library\Configuration\PlatformConfigurationHandler instance
     */
    protected function getClaroline_Config_PlatformConfigHandlerService()
    {
        $this->services['claroline.config.platform_config_handler'] = $instance = new \Claroline\CoreBundle\Library\Configuration\PlatformConfigurationHandler(($this->targetDirs[2].'/config/platform_options.yml'), ($this->targetDirs[2].'/config/locked_platform_options.yml'));

        $instance->addDefaultParameters($this->get('claroline.core_bundle.library.configuration.platform_defaults'));
        $instance->addDefaultParameters($this->get('icap.notification_bundle.configuration.default_notification_platform_configuration'));

        return $instance;
    }

    /*
     * Gets the 'claroline.core_bundle.converter.authenticated_user_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Converter\AuthenticatedUserConverter A Claroline\CoreBundle\Converter\AuthenticatedUserConverter instance
     */
    protected function getClaroline_CoreBundle_Converter_AuthenticatedUserConverterService()
    {
        return $this->services['claroline.core_bundle.converter.authenticated_user_converter'] = new \Claroline\CoreBundle\Converter\AuthenticatedUserConverter($this->get('security.token_storage'), $this->get('translator.default'));
    }

    /*
     * Gets the 'claroline.core_bundle.converter.current_user_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Converter\CurrentUserConverter A Claroline\CoreBundle\Converter\CurrentUserConverter instance
     */
    protected function getClaroline_CoreBundle_Converter_CurrentUserConverterService()
    {
        return $this->services['claroline.core_bundle.converter.current_user_converter'] = new \Claroline\CoreBundle\Converter\CurrentUserConverter($this->get('security.token_storage'));
    }

    /*
     * Gets the 'claroline.core_bundle.converter.multiple_ids_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Converter\MultipleIdsConverter A Claroline\CoreBundle\Converter\MultipleIdsConverter instance
     */
    protected function getClaroline_CoreBundle_Converter_MultipleIdsConverterService()
    {
        return $this->services['claroline.core_bundle.converter.multiple_ids_converter'] = new \Claroline\CoreBundle\Converter\MultipleIdsConverter($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.converter.orderable_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Converter\OrderableConverter A Claroline\CoreBundle\Converter\OrderableConverter instance
     */
    protected function getClaroline_CoreBundle_Converter_OrderableConverterService()
    {
        return $this->services['claroline.core_bundle.converter.orderable_converter'] = new \Claroline\CoreBundle\Converter\OrderableConverter();
    }

    /*
     * Gets the 'claroline.core_bundle.converter.strict_id_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Converter\StrictIdConverter A Claroline\CoreBundle\Converter\StrictIdConverter instance
     */
    protected function getClaroline_CoreBundle_Converter_StrictIdConverterService()
    {
        return $this->services['claroline.core_bundle.converter.strict_id_converter'] = new \Claroline\CoreBundle\Converter\StrictIdConverter($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.form.administration.portal_configuration_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Administration\PortalConfigurationType A Claroline\CoreBundle\Form\Administration\PortalConfigurationType instance
     */
    protected function getClaroline_CoreBundle_Form_Administration_PortalConfigurationTypeService()
    {
        return $this->services['claroline.core_bundle.form.administration.portal_configuration_type'] = new \Claroline\CoreBundle\Form\Administration\PortalConfigurationType($this->get('claroline.manager.portal_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.form.field.resource_picker_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Field\ResourcePickerType A Claroline\CoreBundle\Form\Field\ResourcePickerType instance
     */
    protected function getClaroline_CoreBundle_Form_Field_ResourcePickerTypeService()
    {
        return $this->services['claroline.core_bundle.form.field.resource_picker_type'] = new \Claroline\CoreBundle\Form\Field\ResourcePickerType($this->get('claroline.manager.resource_manager'), $this->get('claroline.transformer.resource_picker'));
    }

    /*
     * Gets the 'claroline.core_bundle.library.configuration.platform_defaults' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Configuration\PlatformDefaults A Claroline\CoreBundle\Library\Configuration\PlatformDefaults instance
     */
    protected function getClaroline_CoreBundle_Library_Configuration_PlatformDefaultsService()
    {
        return $this->services['claroline.core_bundle.library.configuration.platform_defaults'] = new \Claroline\CoreBundle\Library\Configuration\PlatformDefaults();
    }

    /*
     * Gets the 'claroline.core_bundle.library.security.authentication.claroline_api_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Security\Authentication\ClarolineApiListener A Claroline\CoreBundle\Library\Security\Authentication\ClarolineApiListener instance
     */
    protected function getClaroline_CoreBundle_Library_Security_Authentication_ClarolineApiListenerService()
    {
        return $this->services['claroline.core_bundle.library.security.authentication.claroline_api_listener'] = new \Claroline\CoreBundle\Library\Security\Authentication\ClarolineApiListener($this->get('security.context'), $this->get('security.authentication.manager'), $this->get('fos_oauth_server.server'), $this->get('security.user.provider.concrete.user_db'), $this->get('security.encoder_factory'));
    }

    /*
     * Gets the 'claroline.core_bundle.library.security.evaluator.admin_tool_access_evaluator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Security\Evaluator\AdminToolAccessEvaluator A Claroline\CoreBundle\Library\Security\Evaluator\AdminToolAccessEvaluator instance
     */
    protected function getClaroline_CoreBundle_Library_Security_Evaluator_AdminToolAccessEvaluatorService()
    {
        return $this->services['claroline.core_bundle.library.security.evaluator.admin_tool_access_evaluator'] = new \Claroline\CoreBundle\Library\Security\Evaluator\AdminToolAccessEvaluator($this->get('security.authorization_checker'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.library.security.evaluator.workspace_access_evaluator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Security\Evaluator\WorkspaceAccessEvaluator A Claroline\CoreBundle\Library\Security\Evaluator\WorkspaceAccessEvaluator instance
     * 
     * @throws InactiveScopeException when the 'claroline.core_bundle.library.security.evaluator.workspace_access_evaluator' service is requested while the 'request' scope is not active
     */
    protected function getClaroline_CoreBundle_Library_Security_Evaluator_WorkspaceAccessEvaluatorService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('claroline.core_bundle.library.security.evaluator.workspace_access_evaluator', 'request');
        }

        return $this->services['claroline.core_bundle.library.security.evaluator.workspace_access_evaluator'] = $this->scopedServices['request']['claroline.core_bundle.library.security.evaluator.workspace_access_evaluator'] = new \Claroline\CoreBundle\Library\Security\Evaluator\WorkspaceAccessEvaluator($this->get('request'), $this->get('security.authorization_checker'));
    }

    /*
     * Gets the 'claroline.core_bundle.library.security.external_authenticator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Security\ExternalAuthenticator A Claroline\CoreBundle\Library\Security\ExternalAuthenticator instance
     */
    protected function getClaroline_CoreBundle_Library_Security_ExternalAuthenticatorService()
    {
        return $this->services['claroline.core_bundle.library.security.external_authenticator'] = new \Claroline\CoreBundle\Library\Security\ExternalAuthenticator($this->get('security.encoder_factory'), $this->get('claroline.common.authentication_manager'), $this->get('claroline.manager.user_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.library.security.voter.administration_tool_voter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Security\Voter\AdministrationToolVoter A Claroline\CoreBundle\Library\Security\Voter\AdministrationToolVoter instance
     */
    protected function getClaroline_CoreBundle_Library_Security_Voter_AdministrationToolVoterService()
    {
        return $this->services['claroline.core_bundle.library.security.voter.administration_tool_voter'] = new \Claroline\CoreBundle\Library\Security\Voter\AdministrationToolVoter($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.library.security.voter.administrator_voter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Security\Voter\AdministratorVoter A Claroline\CoreBundle\Library\Security\Voter\AdministratorVoter instance
     */
    protected function getClaroline_CoreBundle_Library_Security_Voter_AdministratorVoterService()
    {
        return $this->services['claroline.core_bundle.library.security.voter.administrator_voter'] = new \Claroline\CoreBundle\Library\Security\Voter\AdministratorVoter();
    }

    /*
     * Gets the 'claroline.core_bundle.library.security.voter.facet_voter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Security\Voter\FacetVoter A Claroline\CoreBundle\Library\Security\Voter\FacetVoter instance
     */
    protected function getClaroline_CoreBundle_Library_Security_Voter_FacetVoterService()
    {
        return $this->services['claroline.core_bundle.library.security.voter.facet_voter'] = new \Claroline\CoreBundle\Library\Security\Voter\FacetVoter($this->get('doctrine.orm.default_entity_manager'), $this);
    }

    /*
     * Gets the 'claroline.core_bundle.library.security.voter.group_voter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Security\Voter\GroupVoter A Claroline\CoreBundle\Library\Security\Voter\GroupVoter instance
     */
    protected function getClaroline_CoreBundle_Library_Security_Voter_GroupVoterService()
    {
        return $this->services['claroline.core_bundle.library.security.voter.group_voter'] = new \Claroline\CoreBundle\Library\Security\Voter\GroupVoter($this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.group_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.library.security.voter.i_p_white_list_voter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Security\Voter\IPWhiteListVoter A Claroline\CoreBundle\Library\Security\Voter\IPWhiteListVoter instance
     */
    protected function getClaroline_CoreBundle_Library_Security_Voter_IPWhiteListVoterService()
    {
        return $this->services['claroline.core_bundle.library.security.voter.i_p_white_list_voter'] = new \Claroline\CoreBundle\Library\Security\Voter\IPWhiteListVoter($this->get('claroline.manager.ip_white_list_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.library.security.voter.resource_voter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Security\Voter\ResourceVoter A Claroline\CoreBundle\Library\Security\Voter\ResourceVoter instance
     */
    protected function getClaroline_CoreBundle_Library_Security_Voter_ResourceVoterService()
    {
        return $this->services['claroline.core_bundle.library.security.voter.resource_voter'] = new \Claroline\CoreBundle\Library\Security\Voter\ResourceVoter($this->get('doctrine.orm.default_entity_manager'), $this->get('translator.default'), $this->get('claroline.security.utilities'), $this->get('claroline.manager.mask_manager'), $this->get('claroline.manager.resource_manager'), $this->get('claroline.manager.workspace_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.library.security.voter.user_voter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Security\Voter\UserVoter A Claroline\CoreBundle\Library\Security\Voter\UserVoter instance
     */
    protected function getClaroline_CoreBundle_Library_Security_Voter_UserVoterService()
    {
        return $this->services['claroline.core_bundle.library.security.voter.user_voter'] = new \Claroline\CoreBundle\Library\Security\Voter\UserVoter($this->get('claroline.persistence.object_manager'), $this->get('claroline.config.platform_config_handler'), $this->get('claroline.manager.user_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.library.security.voter.widget_voter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Security\Voter\WidgetVoter A Claroline\CoreBundle\Library\Security\Voter\WidgetVoter instance
     */
    protected function getClaroline_CoreBundle_Library_Security_Voter_WidgetVoterService()
    {
        return $this->services['claroline.core_bundle.library.security.voter.widget_voter'] = new \Claroline\CoreBundle\Library\Security\Voter\WidgetVoter($this->get('doctrine.orm.default_entity_manager'), $this->get('translator.default'), $this->get('claroline.manager.workspace_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.library.security.voter.workspace_voter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Security\Voter\WorkspaceVoter A Claroline\CoreBundle\Library\Security\Voter\WorkspaceVoter instance
     */
    protected function getClaroline_CoreBundle_Library_Security_Voter_WorkspaceVoterService()
    {
        return $this->services['claroline.core_bundle.library.security.voter.workspace_voter'] = new \Claroline\CoreBundle\Library\Security\Voter\WorkspaceVoter($this->get('claroline.manager.workspace_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.activity_rule_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\ActivityRuleListener A Claroline\CoreBundle\Listener\ActivityRuleListener instance
     */
    protected function getClaroline_CoreBundle_Listener_ActivityRuleListenerService()
    {
        return $this->services['claroline.core_bundle.listener.activity_rule_listener'] = new \Claroline\CoreBundle\Listener\ActivityRuleListener($this->get('claroline.manager.activity_manager'), $this->get('claroline.rule.validator'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.administration.user_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\Administration\UserListener A Claroline\CoreBundle\Listener\Administration\UserListener instance
     */
    protected function getClaroline_CoreBundle_Listener_Administration_UserListenerService()
    {
        return $this->services['claroline.core_bundle.listener.administration.user_listener'] = new \Claroline\CoreBundle\Listener\Administration\UserListener($this, $this->get('http_kernel'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.administration_tool_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\AdministrationToolListener A Claroline\CoreBundle\Listener\AdministrationToolListener instance
     */
    protected function getClaroline_CoreBundle_Listener_AdministrationToolListenerService()
    {
        return $this->services['claroline.core_bundle.listener.administration_tool_listener'] = new \Claroline\CoreBundle\Listener\AdministrationToolListener($this->get('request_stack'), $this->get('http_kernel'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.ajax_authentication_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\AjaxAuthenticationListener A Claroline\CoreBundle\Listener\AjaxAuthenticationListener instance
     */
    protected function getClaroline_CoreBundle_Listener_AjaxAuthenticationListenerService()
    {
        return $this->services['claroline.core_bundle.listener.ajax_authentication_listener'] = new \Claroline\CoreBundle\Listener\AjaxAuthenticationListener($this->get('templating'), $this->get('session'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.assetic_dump_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\AsseticDumpListener A Claroline\CoreBundle\Listener\AsseticDumpListener instance
     */
    protected function getClaroline_CoreBundle_Listener_AsseticDumpListenerService()
    {
        return $this->services['claroline.core_bundle.listener.assetic_dump_listener'] = new \Claroline\CoreBundle\Listener\AsseticDumpListener($this);
    }

    /*
     * Gets the 'claroline.core_bundle.listener.kernel_terminate_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\KernelTerminateListener A Claroline\CoreBundle\Listener\KernelTerminateListener instance
     */
    protected function getClaroline_CoreBundle_Listener_KernelTerminateListenerService()
    {
        return $this->services['claroline.core_bundle.listener.kernel_terminate_listener'] = new \Claroline\CoreBundle\Listener\KernelTerminateListener();
    }

    /*
     * Gets the 'claroline.core_bundle.listener.log.log_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\Log\LogListener A Claroline\CoreBundle\Listener\Log\LogListener instance
     */
    protected function getClaroline_CoreBundle_Listener_Log_LogListenerService()
    {
        return $this->services['claroline.core_bundle.listener.log.log_listener'] = new \Claroline\CoreBundle\Listener\Log\LogListener($this->get('claroline.persistence.object_manager'), $this->get('security.token_storage'), $this, $this->get('claroline.manager.role_manager'), $this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.log.log_widget_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\Log\LogWidgetListener A Claroline\CoreBundle\Listener\Log\LogWidgetListener instance
     */
    protected function getClaroline_CoreBundle_Listener_Log_LogWidgetListenerService()
    {
        return $this->services['claroline.core_bundle.listener.log.log_widget_listener'] = new \Claroline\CoreBundle\Listener\Log\LogWidgetListener($this->get('claroline.log.manager'), $this->get('claroline.manager.workspace_manager'), $this->get('templating'), $this->get('form.factory'), $this->get('claroline.form.logworkspacewidgetconfig'), $this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.login_page_authentication_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\LoginPageAuthenticationListener A Claroline\CoreBundle\Listener\LoginPageAuthenticationListener instance
     */
    protected function getClaroline_CoreBundle_Listener_LoginPageAuthenticationListenerService()
    {
        return $this->services['claroline.core_bundle.listener.login_page_authentication_listener'] = new \Claroline\CoreBundle\Listener\LoginPageAuthenticationListener($this->get('templating'), $this->get('claroline.manager.oauth_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.notification.notification_user_parameters_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\Notification\NotificationUserParametersListener A Claroline\CoreBundle\Listener\Notification\NotificationUserParametersListener instance
     */
    protected function getClaroline_CoreBundle_Listener_Notification_NotificationUserParametersListenerService()
    {
        return $this->services['claroline.core_bundle.listener.notification.notification_user_parameters_listener'] = new \Claroline\CoreBundle\Listener\Notification\NotificationUserParametersListener();
    }

    /*
     * Gets the 'claroline.core_bundle.listener.on_request_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\OnRequestListener A Claroline\CoreBundle\Listener\OnRequestListener instance
     */
    protected function getClaroline_CoreBundle_Listener_OnRequestListenerService()
    {
        return $this->services['claroline.core_bundle.listener.on_request_listener'] = new \Claroline\CoreBundle\Listener\OnRequestListener($this);
    }

    /*
     * Gets the 'claroline.core_bundle.listener.profile_widget_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\ProfileWidgetListener A Claroline\CoreBundle\Listener\ProfileWidgetListener instance
     */
    protected function getClaroline_CoreBundle_Listener_ProfileWidgetListenerService()
    {
        return $this->services['claroline.core_bundle.listener.profile_widget_listener'] = new \Claroline\CoreBundle\Listener\ProfileWidgetListener($this->get('request_stack'), $this->get('http_kernel'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.resource.activity_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\Resource\ActivityListener A Claroline\CoreBundle\Listener\Resource\ActivityListener instance
     */
    protected function getClaroline_CoreBundle_Listener_Resource_ActivityListenerService()
    {
        return $this->services['claroline.core_bundle.listener.resource.activity_listener'] = new \Claroline\CoreBundle\Listener\Resource\ActivityListener($this->get('router'), $this->get('form.factory'), $this->get('templating'), $this->get('request_stack'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.activity_manager'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.resource.directory_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\Resource\DirectoryListener A Claroline\CoreBundle\Listener\Resource\DirectoryListener instance
     */
    protected function getClaroline_CoreBundle_Listener_Resource_DirectoryListenerService()
    {
        return $this->services['claroline.core_bundle.listener.resource.directory_listener'] = new \Claroline\CoreBundle\Listener\Resource\DirectoryListener($this->get('claroline.manager.role_manager'), $this->get('claroline.manager.resource_manager'), $this->get('claroline.manager.rights_manager'), $this->get('claroline.manager.mask_manager'), $this->get('claroline.event.event_dispatcher'), $this->get('form.factory'), $this->get('templating'), $this);
    }

    /*
     * Gets the 'claroline.core_bundle.listener.resource.text_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\Resource\TextListener A Claroline\CoreBundle\Listener\Resource\TextListener instance
     */
    protected function getClaroline_CoreBundle_Listener_Resource_TextListenerService()
    {
        $this->services['claroline.core_bundle.listener.resource.text_listener'] = $instance = new \Claroline\CoreBundle\Listener\Resource\TextListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'claroline.core_bundle.listener.resources_widget_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\ResourcesWidgetListener A Claroline\CoreBundle\Listener\ResourcesWidgetListener instance
     */
    protected function getClaroline_CoreBundle_Listener_ResourcesWidgetListenerService()
    {
        return $this->services['claroline.core_bundle.listener.resources_widget_listener'] = new \Claroline\CoreBundle\Listener\ResourcesWidgetListener($this->get('http_kernel'), $this->get('request_stack'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.simple_text_widget_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\SimpleTextWidgetListener A Claroline\CoreBundle\Listener\SimpleTextWidgetListener instance
     */
    protected function getClaroline_CoreBundle_Listener_SimpleTextWidgetListenerService()
    {
        return $this->services['claroline.core_bundle.listener.simple_text_widget_listener'] = new \Claroline\CoreBundle\Listener\SimpleTextWidgetListener($this->get('claroline.manager.simple_text_manager'), $this->get('form.factory'), $this->get('templating'), $this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.tool.home_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\Tool\HomeListener A Claroline\CoreBundle\Listener\Tool\HomeListener instance
     */
    protected function getClaroline_CoreBundle_Listener_Tool_HomeListenerService()
    {
        return $this->services['claroline.core_bundle.listener.tool.home_listener'] = new \Claroline\CoreBundle\Listener\Tool\HomeListener($this, $this->get('http_kernel'), $this->get('claroline.manager.home_tab_manager'), $this->get('templating'), $this->get('claroline.manager.workspace_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.tool.my_contacts_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\Tool\MyContactsListener A Claroline\CoreBundle\Listener\Tool\MyContactsListener instance
     */
    protected function getClaroline_CoreBundle_Listener_Tool_MyContactsListenerService()
    {
        return $this->services['claroline.core_bundle.listener.tool.my_contacts_listener'] = new \Claroline\CoreBundle\Listener\Tool\MyContactsListener($this->get('http_kernel'), $this->get('request_stack'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.tool.resource_manager_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\Tool\ResourceManagerListener A Claroline\CoreBundle\Listener\Tool\ResourceManagerListener instance
     */
    protected function getClaroline_CoreBundle_Listener_Tool_ResourceManagerListenerService()
    {
        $a = $this->get('claroline.manager.resource_manager');

        return $this->services['claroline.core_bundle.listener.tool.resource_manager_listener'] = new \Claroline\CoreBundle\Listener\Tool\ResourceManagerListener($this->get('doctrine.orm.default_entity_manager'), $this->get('claroline.event.event_dispatcher'), $this->get('templating'), $a, $this->get('security.token_storage'), $this->get('security.authorization_checker'), $this->get('request_stack'), $a, $this->get('claroline.manager.rights_manager'), $this->get('claroline.manager.role_manager'), $this->get('claroline.manager.user_manager'), $this->get('claroline.manager.workspace_manager'), $this->get('claroline.manager.workspace_tag_manager'), $this->get('claroline.manager.mask_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.tool_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\ToolListener A Claroline\CoreBundle\Listener\ToolListener instance
     */
    protected function getClaroline_CoreBundle_Listener_ToolListenerService()
    {
        return $this->services['claroline.core_bundle.listener.tool_listener'] = new \Claroline\CoreBundle\Listener\ToolListener($this, $this->get('http_kernel'), $this->get('claroline.manager.rights_manager'), $this->get('router'), $this->get('security.token_storage'), $this->get('templating'), $this->get('claroline.manager.tool_manager'), $this->get('translator.default'), $this->get('claroline.manager.workspace_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.transfer.img_format_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\Transfer\ImgFormatListener A Claroline\CoreBundle\Listener\Transfer\ImgFormatListener instance
     */
    protected function getClaroline_CoreBundle_Listener_Transfer_ImgFormatListenerService()
    {
        return $this->services['claroline.core_bundle.listener.transfer.img_format_listener'] = new \Claroline\CoreBundle\Listener\Transfer\ImgFormatListener($this->get('router'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.importer.rich_text_formatter'), $this->get('claroline.manager.resource_manager'), $this->get('claroline.manager.mask_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.unavailable_platform_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\UnavailablePlatformListener A Claroline\CoreBundle\Listener\UnavailablePlatformListener instance
     */
    protected function getClaroline_CoreBundle_Listener_UnavailablePlatformListenerService()
    {
        return $this->services['claroline.core_bundle.listener.unavailable_platform_listener'] = new \Claroline\CoreBundle\Listener\UnavailablePlatformListener($this->get('templating'), $this->get('claroline.config.platform_config_handler'), $this->get('security.token_storage'), $this->get('kernel'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.user_password_encoder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\UserPasswordEncoder A Claroline\CoreBundle\Listener\UserPasswordEncoder instance
     */
    protected function getClaroline_CoreBundle_Listener_UserPasswordEncoderService()
    {
        return $this->services['claroline.core_bundle.listener.user_password_encoder'] = new \Claroline\CoreBundle\Listener\UserPasswordEncoder($this->get('security.encoder_factory'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.view_as_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\ViewAsListener A Claroline\CoreBundle\Listener\ViewAsListener instance
     */
    protected function getClaroline_CoreBundle_Listener_ViewAsListenerService()
    {
        return $this->services['claroline.core_bundle.listener.view_as_listener'] = new \Claroline\CoreBundle\Listener\ViewAsListener($this->get('security.token_storage'), $this->get('security.authorization_checker'), $this->get('doctrine.orm.default_entity_manager'), $this->get('claroline.manager.role_manager'), $this->get('claroline.security.token_updater'));
    }

    /*
     * Gets the 'claroline.core_bundle.listener.workspace_widget_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\WorkspaceWidgetListener A Claroline\CoreBundle\Listener\WorkspaceWidgetListener instance
     */
    protected function getClaroline_CoreBundle_Listener_WorkspaceWidgetListenerService()
    {
        return $this->services['claroline.core_bundle.listener.workspace_widget_listener'] = new \Claroline\CoreBundle\Listener\WorkspaceWidgetListener($this->get('security.authorization_checker'), $this->get('templating'), $this->get('security.token_storage'), $this->get('claroline.security.utilities'), $this->get('claroline.manager.workspace_manager'), $this->get('claroline.manager.workspace_tag_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.rule.constraints.action_constraint' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Rule\Constraints\ActionConstraint A Claroline\CoreBundle\Rule\Constraints\ActionConstraint instance
     */
    protected function getClaroline_CoreBundle_Rule_Constraints_ActionConstraintService()
    {
        return $this->services['claroline.core_bundle.rule.constraints.action_constraint'] = new \Claroline\CoreBundle\Rule\Constraints\ActionConstraint();
    }

    /*
     * Gets the 'claroline.core_bundle.rule.constraints.doer_constraint' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Rule\Constraints\DoerConstraint A Claroline\CoreBundle\Rule\Constraints\DoerConstraint instance
     */
    protected function getClaroline_CoreBundle_Rule_Constraints_DoerConstraintService()
    {
        return $this->services['claroline.core_bundle.rule.constraints.doer_constraint'] = new \Claroline\CoreBundle\Rule\Constraints\DoerConstraint();
    }

    /*
     * Gets the 'claroline.core_bundle.rule.constraints.occurence_constraint' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Rule\Constraints\OccurenceConstraint A Claroline\CoreBundle\Rule\Constraints\OccurenceConstraint instance
     */
    protected function getClaroline_CoreBundle_Rule_Constraints_OccurenceConstraintService()
    {
        return $this->services['claroline.core_bundle.rule.constraints.occurence_constraint'] = new \Claroline\CoreBundle\Rule\Constraints\OccurenceConstraint();
    }

    /*
     * Gets the 'claroline.core_bundle.rule.constraints.receiver_constraint' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Rule\Constraints\ReceiverConstraint A Claroline\CoreBundle\Rule\Constraints\ReceiverConstraint instance
     */
    protected function getClaroline_CoreBundle_Rule_Constraints_ReceiverConstraintService()
    {
        return $this->services['claroline.core_bundle.rule.constraints.receiver_constraint'] = new \Claroline\CoreBundle\Rule\Constraints\ReceiverConstraint();
    }

    /*
     * Gets the 'claroline.core_bundle.rule.constraints.resource_constraint' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Rule\Constraints\ResourceConstraint A Claroline\CoreBundle\Rule\Constraints\ResourceConstraint instance
     */
    protected function getClaroline_CoreBundle_Rule_Constraints_ResourceConstraintService()
    {
        return $this->services['claroline.core_bundle.rule.constraints.resource_constraint'] = new \Claroline\CoreBundle\Rule\Constraints\ResourceConstraint();
    }

    /*
     * Gets the 'claroline.core_bundle.rule.constraints.result_constraint' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Rule\Constraints\ResultConstraint A Claroline\CoreBundle\Rule\Constraints\ResultConstraint instance
     */
    protected function getClaroline_CoreBundle_Rule_Constraints_ResultConstraintService()
    {
        return $this->services['claroline.core_bundle.rule.constraints.result_constraint'] = new \Claroline\CoreBundle\Rule\Constraints\ResultConstraint();
    }

    /*
     * Gets the 'claroline.core_bundle.rule.constraints.rule_active_date_constraint' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Rule\Constraints\RuleActiveDateConstraint A Claroline\CoreBundle\Rule\Constraints\RuleActiveDateConstraint instance
     */
    protected function getClaroline_CoreBundle_Rule_Constraints_RuleActiveDateConstraintService()
    {
        return $this->services['claroline.core_bundle.rule.constraints.rule_active_date_constraint'] = new \Claroline\CoreBundle\Rule\Constraints\RuleActiveDateConstraint();
    }

    /*
     * Gets the 'claroline.core_bundle.twig.base_uri_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\BaseUriExtension A Claroline\CoreBundle\Twig\BaseUriExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_BaseUriExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.base_uri_extension'] = new \Claroline\CoreBundle\Twig\BaseUriExtension($this->get('templating.helper.assets'));
    }

    /*
     * Gets the 'claroline.core_bundle.twig.composer_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\ComposerExtension A Claroline\CoreBundle\Twig\ComposerExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_ComposerExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.composer_extension'] = new \Claroline\CoreBundle\Twig\ComposerExtension($this->get('kernel'));
    }

    /*
     * Gets the 'claroline.core_bundle.twig.content_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\ContentExtension A Claroline\CoreBundle\Twig\ContentExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_ContentExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.content_extension'] = new \Claroline\CoreBundle\Twig\ContentExtension($this->get('claroline.manager.content_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.twig.date_formatter_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\DateFormatterExtension A Claroline\CoreBundle\Twig\DateFormatterExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_DateFormatterExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.date_formatter_extension'] = new \Claroline\CoreBundle\Twig\DateFormatterExtension($this->get('claroline.utilities.misc'));
    }

    /*
     * Gets the 'claroline.core_bundle.twig.escaper_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\EscaperExtension A Claroline\CoreBundle\Twig\EscaperExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_EscaperExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.escaper_extension'] = new \Claroline\CoreBundle\Twig\EscaperExtension();
    }

    /*
     * Gets the 'claroline.core_bundle.twig.file_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\FileExtension A Claroline\CoreBundle\Twig\FileExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_FileExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.file_extension'] = new \Claroline\CoreBundle\Twig\FileExtension();
    }

    /*
     * Gets the 'claroline.core_bundle.twig.has_role_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\HasRoleExtension A Claroline\CoreBundle\Twig\HasRoleExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_HasRoleExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.has_role_extension'] = new \Claroline\CoreBundle\Twig\HasRoleExtension($this->get('security.token_storage'));
    }

    /*
     * Gets the 'claroline.core_bundle.twig.listener_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\ListenerExtension A Claroline\CoreBundle\Twig\ListenerExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_ListenerExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.listener_extension'] = new \Claroline\CoreBundle\Twig\ListenerExtension($this->get('event_dispatcher'));
    }

    /*
     * Gets the 'claroline.core_bundle.twig.mailer_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\MailerExtension A Claroline\CoreBundle\Twig\MailerExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_MailerExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.mailer_extension'] = new \Claroline\CoreBundle\Twig\MailerExtension($this);
    }

    /*
     * Gets the 'claroline.core_bundle.twig.maintenance_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\MaintenanceExtension A Claroline\CoreBundle\Twig\MaintenanceExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_MaintenanceExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.maintenance_extension'] = new \Claroline\CoreBundle\Twig\MaintenanceExtension();
    }

    /*
     * Gets the 'claroline.core_bundle.twig.pcre_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\PcreExtension A Claroline\CoreBundle\Twig\PcreExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_PcreExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.pcre_extension'] = new \Claroline\CoreBundle\Twig\PcreExtension();
    }

    /*
     * Gets the 'claroline.core_bundle.twig.platform_configuration_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\PlatformConfigurationExtension A Claroline\CoreBundle\Twig\PlatformConfigurationExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_PlatformConfigurationExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.platform_configuration_extension'] = new \Claroline\CoreBundle\Twig\PlatformConfigurationExtension($this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'claroline.core_bundle.twig.resource_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\ResourceExtension A Claroline\CoreBundle\Twig\ResourceExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_ResourceExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.resource_extension'] = new \Claroline\CoreBundle\Twig\ResourceExtension($this->get('claroline.manager.resource_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.twig.router_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\RouterExtension A Claroline\CoreBundle\Twig\RouterExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_RouterExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.router_extension'] = new \Claroline\CoreBundle\Twig\RouterExtension($this);
    }

    /*
     * Gets the 'claroline.core_bundle.twig.send_datas_confirm_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\SendDatasConfirmExtension A Claroline\CoreBundle\Twig\SendDatasConfirmExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_SendDatasConfirmExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.send_datas_confirm_extension'] = new \Claroline\CoreBundle\Twig\SendDatasConfirmExtension($this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'claroline.core_bundle.twig.serializer_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\SerializerExtension A Claroline\CoreBundle\Twig\SerializerExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_SerializerExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.serializer_extension'] = new \Claroline\CoreBundle\Twig\SerializerExtension($this);
    }

    /*
     * Gets the 'claroline.core_bundle.twig.theme_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\ThemeExtension A Claroline\CoreBundle\Twig\ThemeExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_ThemeExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.theme_extension'] = new \Claroline\CoreBundle\Twig\ThemeExtension($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.twig.url_auto_detector_twig_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\UrlAutoDetectorTwigExtension A Claroline\CoreBundle\Twig\UrlAutoDetectorTwigExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_UrlAutoDetectorTwigExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.url_auto_detector_twig_extension'] = new \Claroline\CoreBundle\Twig\UrlAutoDetectorTwigExtension();
    }

    /*
     * Gets the 'claroline.core_bundle.twig.var_type_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\VarTypeExtension A Claroline\CoreBundle\Twig\VarTypeExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_VarTypeExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.var_type_extension'] = new \Claroline\CoreBundle\Twig\VarTypeExtension();
    }

    /*
     * Gets the 'claroline.core_bundle.twig.version_compare_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\VersionCompareExtension A Claroline\CoreBundle\Twig\VersionCompareExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_VersionCompareExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.version_compare_extension'] = new \Claroline\CoreBundle\Twig\VersionCompareExtension();
    }

    /*
     * Gets the 'claroline.core_bundle.twig.workspace_access_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\WorkspaceAccessExtension A Claroline\CoreBundle\Twig\WorkspaceAccessExtension instance
     */
    protected function getClaroline_CoreBundle_Twig_WorkspaceAccessExtensionService()
    {
        return $this->services['claroline.core_bundle.twig.workspace_access_extension'] = new \Claroline\CoreBundle\Twig\WorkspaceAccessExtension($this->get('claroline.manager.workspace_manager'), $this->get('doctrine.orm.default_entity_manager'), $this->get('security.authorization_checker'), $this->get('claroline.security.utilities'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'claroline.core_bundle.validator.constraints.admin_workspace_tag_unique_name_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Validator\Constraints\AdminWorkspaceTagUniqueNameValidator A Claroline\CoreBundle\Validator\Constraints\AdminWorkspaceTagUniqueNameValidator instance
     */
    protected function getClaroline_CoreBundle_Validator_Constraints_AdminWorkspaceTagUniqueNameValidatorService()
    {
        $this->services['claroline.core_bundle.validator.constraints.admin_workspace_tag_unique_name_validator'] = $instance = new \Claroline\CoreBundle\Validator\Constraints\AdminWorkspaceTagUniqueNameValidator();

        $instance->setEntityManager($this->get('doctrine.orm.default_entity_manager'));

        return $instance;
    }

    /*
     * Gets the 'claroline.core_bundle.validator.constraints.csv_directory_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Validator\Constraints\CsvDirectoryValidator A Claroline\CoreBundle\Validator\Constraints\CsvDirectoryValidator instance
     */
    protected function getClaroline_CoreBundle_Validator_Constraints_CsvDirectoryValidatorService()
    {
        return $this->services['claroline.core_bundle.validator.constraints.csv_directory_validator'] = new \Claroline\CoreBundle\Validator\Constraints\CsvDirectoryValidator($this->get('translator.default'), $this->get('claroline.manager.workspace_manager'), $this->get('claroline.utilities.misc'), $this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.validator.constraints.csv_home_tab_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Validator\Constraints\CsvHomeTabValidator A Claroline\CoreBundle\Validator\Constraints\CsvHomeTabValidator instance
     */
    protected function getClaroline_CoreBundle_Validator_Constraints_CsvHomeTabValidatorService()
    {
        return $this->services['claroline.core_bundle.validator.constraints.csv_home_tab_validator'] = new \Claroline\CoreBundle\Validator\Constraints\CsvHomeTabValidator($this->get('translator.default'), $this->get('claroline.manager.workspace_manager'), $this->get('claroline.utilities.misc'), $this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.validator.constraints.csv_home_text_widget_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Validator\Constraints\CsvHomeTextWidgetValidator A Claroline\CoreBundle\Validator\Constraints\CsvHomeTextWidgetValidator instance
     */
    protected function getClaroline_CoreBundle_Validator_Constraints_CsvHomeTextWidgetValidatorService()
    {
        return $this->services['claroline.core_bundle.validator.constraints.csv_home_text_widget_validator'] = new \Claroline\CoreBundle\Validator\Constraints\CsvHomeTextWidgetValidator($this->get('translator.default'), $this->get('claroline.utilities.misc'), $this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.core_bundle.validator.constraints.csv_user_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Validator\Constraints\CsvUserValidator A Claroline\CoreBundle\Validator\Constraints\CsvUserValidator instance
     */
    protected function getClaroline_CoreBundle_Validator_Constraints_CsvUserValidatorService()
    {
        return $this->services['claroline.core_bundle.validator.constraints.csv_user_validator'] = new \Claroline\CoreBundle\Validator\Constraints\CsvUserValidator($this->get('claroline.common.authentication_manager'), $this->get('claroline.persistence.object_manager'), $this->get('translator.default'), $this->get('claroline.manager.user_manager'), $this->get('validator'), $this->get('claroline.utilities.misc'), $this->get('claroline.manager.group_manager'), $this->get('claroline.manager.role_manager'), $this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'claroline.core_bundle.validator.constraints.csv_workspace_user_import_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Validator\Constraints\CsvWorkspaceUserImportValidator A Claroline\CoreBundle\Validator\Constraints\CsvWorkspaceUserImportValidator instance
     */
    protected function getClaroline_CoreBundle_Validator_Constraints_CsvWorkspaceUserImportValidatorService()
    {
        return $this->services['claroline.core_bundle.validator.constraints.csv_workspace_user_import_validator'] = new \Claroline\CoreBundle\Validator\Constraints\CsvWorkspaceUserImportValidator($this->get('claroline.manager.role_manager'), $this->get('translator.default'), $this->get('claroline.manager.user_manager'), $this->get('validator'), $this->get('claroline.utilities.misc'));
    }

    /*
     * Gets the 'claroline.core_bundle.validator.constraints.csv_workspace_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Validator\Constraints\CsvWorkspaceValidator A Claroline\CoreBundle\Validator\Constraints\CsvWorkspaceValidator instance
     */
    protected function getClaroline_CoreBundle_Validator_Constraints_CsvWorkspaceValidatorService()
    {
        return $this->services['claroline.core_bundle.validator.constraints.csv_workspace_validator'] = new \Claroline\CoreBundle\Validator\Constraints\CsvWorkspaceValidator($this->get('translator.default'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.utilities.misc'));
    }

    /*
     * Gets the 'claroline.core_bundle.validator.constraints.domain_name_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Validator\Constraints\DomainNameValidator A Claroline\CoreBundle\Validator\Constraints\DomainNameValidator instance
     */
    protected function getClaroline_CoreBundle_Validator_Constraints_DomainNameValidatorService()
    {
        return $this->services['claroline.core_bundle.validator.constraints.domain_name_validator'] = new \Claroline\CoreBundle\Validator\Constraints\DomainNameValidator();
    }

    /*
     * Gets the 'claroline.core_bundle.validator.constraints.file_size_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Validator\Constraints\FileSizeValidator A Claroline\CoreBundle\Validator\Constraints\FileSizeValidator instance
     */
    protected function getClaroline_CoreBundle_Validator_Constraints_FileSizeValidatorService()
    {
        return $this->services['claroline.core_bundle.validator.constraints.file_size_validator'] = new \Claroline\CoreBundle\Validator\Constraints\FileSizeValidator();
    }

    /*
     * Gets the 'claroline.core_bundle.validator.constraints.ics_file_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Validator\Constraints\IcsFileValidator A Claroline\CoreBundle\Validator\Constraints\IcsFileValidator instance
     */
    protected function getClaroline_CoreBundle_Validator_Constraints_IcsFileValidatorService()
    {
        return $this->services['claroline.core_bundle.validator.constraints.ics_file_validator'] = new \Claroline\CoreBundle\Validator\Constraints\IcsFileValidator();
    }

    /*
     * Gets the 'claroline.core_bundle.validator.constraints.import_users_in_group_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Validator\Constraints\ImportUsersInGroupValidator A Claroline\CoreBundle\Validator\Constraints\ImportUsersInGroupValidator instance
     */
    protected function getClaroline_CoreBundle_Validator_Constraints_ImportUsersInGroupValidatorService()
    {
        return $this->services['claroline.core_bundle.validator.constraints.import_users_in_group_validator'] = new \Claroline\CoreBundle\Validator\Constraints\ImportUsersInGroupValidator($this->get('claroline.manager.user_manager'), $this->get('translator.default'), $this->get('claroline.utilities.misc'));
    }

    /*
     * Gets the 'claroline.core_bundle.validator.constraints.profile_pics_file_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Validator\Constraints\ProfilePicsFileValidator A Claroline\CoreBundle\Validator\Constraints\ProfilePicsFileValidator instance
     */
    protected function getClaroline_CoreBundle_Validator_Constraints_ProfilePicsFileValidatorService()
    {
        return $this->services['claroline.core_bundle.validator.constraints.profile_pics_file_validator'] = new \Claroline\CoreBundle\Validator\Constraints\ProfilePicsFileValidator($this->get('claroline.manager.user_manager'), $this->get('translator.default'));
    }

    /*
     * Gets the 'claroline.core_bundle.validator.constraints.role_name_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Validator\Constraints\RoleNameValidator A Claroline\CoreBundle\Validator\Constraints\RoleNameValidator instance
     */
    protected function getClaroline_CoreBundle_Validator_Constraints_RoleNameValidatorService()
    {
        return $this->services['claroline.core_bundle.validator.constraints.role_name_validator'] = new \Claroline\CoreBundle\Validator\Constraints\RoleNameValidator($this->get('doctrine.orm.default_entity_manager'), $this->get('translator.default'));
    }

    /*
     * Gets the 'claroline.core_bundle.validator.constraints.user_administrative_code_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Validator\Constraints\UserAdministrativeCodeValidator A Claroline\CoreBundle\Validator\Constraints\UserAdministrativeCodeValidator instance
     */
    protected function getClaroline_CoreBundle_Validator_Constraints_UserAdministrativeCodeValidatorService()
    {
        $this->services['claroline.core_bundle.validator.constraints.user_administrative_code_validator'] = $instance = new \Claroline\CoreBundle\Validator\Constraints\UserAdministrativeCodeValidator();

        $instance->setServices($this->get('claroline.config.platform_config_handler'), $this->get('claroline.persistence.object_manager'), $this->get('translator.default'));

        return $instance;
    }

    /*
     * Gets the 'claroline.core_bundle.validator.constraints.username_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Validator\Constraints\UsernameValidator A Claroline\CoreBundle\Validator\Constraints\UsernameValidator instance
     */
    protected function getClaroline_CoreBundle_Validator_Constraints_UsernameValidatorService()
    {
        $this->services['claroline.core_bundle.validator.constraints.username_validator'] = $instance = new \Claroline\CoreBundle\Validator\Constraints\UsernameValidator();

        $instance->setEntityManager($this->get('claroline.config.platform_config_handler'), $this->get('claroline.persistence.object_manager'), $this->get('translator.default'));

        return $instance;
    }

    /*
     * Gets the 'claroline.core_bundle.validator.constraints.workspace_unique_code_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Validator\Constraints\WorkspaceUniqueCodeValidator A Claroline\CoreBundle\Validator\Constraints\WorkspaceUniqueCodeValidator instance
     */
    protected function getClaroline_CoreBundle_Validator_Constraints_WorkspaceUniqueCodeValidatorService()
    {
        $this->services['claroline.core_bundle.validator.constraints.workspace_unique_code_validator'] = $instance = new \Claroline\CoreBundle\Validator\Constraints\WorkspaceUniqueCodeValidator();

        $instance->setEntityManager($this->get('doctrine.orm.default_entity_manager'));

        return $instance;
    }

    /*
     * Gets the 'claroline.cursus_bundle.listener.cursus_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CursusBundle\Listener\CursusListener A Claroline\CursusBundle\Listener\CursusListener instance
     */
    protected function getClaroline_CursusBundle_Listener_CursusListenerService()
    {
        return $this->services['claroline.cursus_bundle.listener.cursus_listener'] = new \Claroline\CursusBundle\Listener\CursusListener($this->get('http_kernel'), $this->get('request_stack'), $this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.cursus_bundle.listener.cursus_registration_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CursusBundle\Listener\CursusRegistrationListener A Claroline\CursusBundle\Listener\CursusRegistrationListener instance
     */
    protected function getClaroline_CursusBundle_Listener_CursusRegistrationListenerService()
    {
        return $this->services['claroline.cursus_bundle.listener.cursus_registration_listener'] = new \Claroline\CursusBundle\Listener\CursusRegistrationListener($this->get('claroline.manager.cursus_manager'), $this->get('http_kernel'), $this->get('request_stack'), $this->get('router'), $this->get('translator.default'));
    }

    /*
     * Gets the 'claroline.cursus_bundle.listener.cursus_widget_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CursusBundle\Listener\CursusWidgetListener A Claroline\CursusBundle\Listener\CursusWidgetListener instance
     */
    protected function getClaroline_CursusBundle_Listener_CursusWidgetListenerService()
    {
        return $this->services['claroline.cursus_bundle.listener.cursus_widget_listener'] = new \Claroline\CursusBundle\Listener\CursusWidgetListener($this->get('request_stack'), $this->get('http_kernel'));
    }

    /*
     * Gets the 'claroline.dashboard_bundle.listener.dashboard_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\DashboardBundle\Listener\DashboardListener A Claroline\DashboardBundle\Listener\DashboardListener instance
     */
    protected function getClaroline_DashboardBundle_Listener_DashboardListenerService()
    {
        return $this->services['claroline.dashboard_bundle.listener.dashboard_listener'] = new \Claroline\DashboardBundle\Listener\DashboardListener($this->get('templating'), $this->get('security.token_storage'), $this->get('security.authorization_checker'), $this, $this->get('router'), $this->get('request_stack'), $this->get('http_kernel'), $this->get('claroline.manager.agenda_manager'));
    }

    /*
     * Gets the 'claroline.doctrine.debug' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\DoctrineDebug A Claroline\CoreBundle\Listener\DoctrineDebug instance
     */
    protected function getClaroline_Doctrine_DebugService()
    {
        return $this->services['claroline.doctrine.debug'] = new \Claroline\CoreBundle\Listener\DoctrineDebug();
    }

    /*
     * Gets the 'claroline.doctrine.entity_listener_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Doctrine\EntityListenerResolver A Claroline\CoreBundle\Doctrine\EntityListenerResolver instance
     */
    protected function getClaroline_Doctrine_EntityListenerResolverService()
    {
        $this->services['claroline.doctrine.entity_listener_resolver'] = $instance = new \Claroline\CoreBundle\Doctrine\EntityListenerResolver($this);

        $instance->addMapping('Icap\\BadgeBundle\\Listener\\LocaleSetterListener', 'icap_badge.entity_listener.badge');
        $instance->addMapping('Icap\\BlogBundle\\Listener\\PostListener', 'icap.blog_bundle.entity_listener.post');
        $instance->addMapping('Icap\\BlogBundle\\Listener\\CommentListener', 'icap.blog_bundle.entity_listener.comment');
        $instance->addMapping('Icap\\WikiBundle\\Listener\\ContributionListener', 'icap.wiki_bundle.entity_listener.contribution');
        $instance->addMapping('UJM\\ExoBundle\\Listener\\Entity\\QuestionListener', 'ujm_exo.listener.entity_question');
        $instance->addMapping('Icap\\LessonBundle\\Listener\\ChapterListener', 'icap.lesson_bundle.entity_listener.chapter');

        return $instance;
    }

    /*
     * Gets the 'claroline.doctrine_fixture_executor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\DataFixtures\Executor\ORMExecutor A Doctrine\Common\DataFixtures\Executor\ORMExecutor instance
     */
    protected function getClaroline_DoctrineFixtureExecutorService()
    {
        return $this->services['claroline.doctrine_fixture_executor'] = new \Doctrine\Common\DataFixtures\Executor\ORMExecutor($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'claroline.event.event_dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Event\StrictDispatcher A Claroline\CoreBundle\Event\StrictDispatcher instance
     */
    protected function getClaroline_Event_EventDispatcherService()
    {
        return $this->services['claroline.event.event_dispatcher'] = new \Claroline\CoreBundle\Event\StrictDispatcher($this->get('event_dispatcher'));
    }

    /*
     * Gets the 'claroline.event.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\EventManager A Claroline\CoreBundle\Manager\EventManager instance
     */
    protected function getClaroline_Event_ManagerService()
    {
        return $this->services['claroline.event.manager'] = new \Claroline\CoreBundle\Manager\EventManager($this->get('kernel'), $this->get('claroline.persistence.object_manager'), $this->get('translator.default'));
    }

    /*
     * Gets the 'claroline.exporter.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Exporter\Csv A Claroline\CoreBundle\Library\Exporter\Csv instance
     */
    protected function getClaroline_Exporter_CsvService()
    {
        return $this->services['claroline.exporter.csv'] = new \Claroline\CoreBundle\Library\Exporter\Csv(($this->targetDirs[2].'/config/tmp_files'), $this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'claroline.exporter.xls' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Exporter\Excel A Claroline\CoreBundle\Library\Exporter\Excel instance
     */
    protected function getClaroline_Exporter_XlsService()
    {
        return $this->services['claroline.exporter.xls'] = new \Claroline\CoreBundle\Library\Exporter\Excel(($this->targetDirs[2].'/config/tmp_files'), $this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'claroline.extension.webpack' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\WebpackExtension A Claroline\CoreBundle\Twig\WebpackExtension instance
     */
    protected function getClaroline_Extension_WebpackService()
    {
        return $this->services['claroline.extension.webpack'] = new \Claroline\CoreBundle\Twig\WebpackExtension($this->get('twig.extension.assets'), 'prod', $this->targetDirs[2]);
    }

    /*
     * Gets the 'claroline.flashcard.card_learning_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\FlashCardBundle\Manager\CardLearningManager A Claroline\FlashCardBundle\Manager\CardLearningManager instance
     */
    protected function getClaroline_Flashcard_CardLearningManagerService()
    {
        return $this->services['claroline.flashcard.card_learning_manager'] = new \Claroline\FlashCardBundle\Manager\CardLearningManager($this->get('claroline.persistence.object_manager'), $this->get('templating'));
    }

    /*
     * Gets the 'claroline.flashcard.card_log_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\FlashCardBundle\Manager\CardLogManager A Claroline\FlashCardBundle\Manager\CardLogManager instance
     */
    protected function getClaroline_Flashcard_CardLogManagerService()
    {
        return $this->services['claroline.flashcard.card_log_manager'] = new \Claroline\FlashCardBundle\Manager\CardLogManager($this->get('claroline.persistence.object_manager'), $this->get('templating'));
    }

    /*
     * Gets the 'claroline.flashcard.card_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\FlashCardBundle\Manager\CardManager A Claroline\FlashCardBundle\Manager\CardManager instance
     */
    protected function getClaroline_Flashcard_CardManagerService()
    {
        return $this->services['claroline.flashcard.card_manager'] = new \Claroline\FlashCardBundle\Manager\CardManager($this->get('claroline.persistence.object_manager'), $this->get('templating'));
    }

    /*
     * Gets the 'claroline.flashcard.deck_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\FlashCardBundle\Listener\DeckListener A Claroline\FlashCardBundle\Listener\DeckListener instance
     */
    protected function getClaroline_Flashcard_DeckListenerService()
    {
        return $this->services['claroline.flashcard.deck_listener'] = new \Claroline\FlashCardBundle\Listener\DeckListener($this->get('request_stack'), $this->get('http_kernel'), $this->get('claroline.flashcard.deck_manager'), $this->get('claroline.form_handler'), $this->get('security.context'));
    }

    /*
     * Gets the 'claroline.flashcard.deck_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\FlashCardBundle\Manager\DeckManager A Claroline\FlashCardBundle\Manager\DeckManager instance
     */
    protected function getClaroline_Flashcard_DeckManagerService()
    {
        return $this->services['claroline.flashcard.deck_manager'] = new \Claroline\FlashCardBundle\Manager\DeckManager($this->get('claroline.persistence.object_manager'), $this->get('templating'));
    }

    /*
     * Gets the 'claroline.flashcard.note_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\FlashCardBundle\Manager\NoteManager A Claroline\FlashCardBundle\Manager\NoteManager instance
     */
    protected function getClaroline_Flashcard_NoteManagerService()
    {
        return $this->services['claroline.flashcard.note_manager'] = new \Claroline\FlashCardBundle\Manager\NoteManager($this->get('claroline.persistence.object_manager'), $this->get('templating'));
    }

    /*
     * Gets the 'claroline.flashcard.note_type_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\FlashCardBundle\Manager\NoteTypeManager A Claroline\FlashCardBundle\Manager\NoteTypeManager instance
     */
    protected function getClaroline_Flashcard_NoteTypeManagerService()
    {
        return $this->services['claroline.flashcard.note_type_manager'] = new \Claroline\FlashCardBundle\Manager\NoteTypeManager($this->get('claroline.persistence.object_manager'), $this->get('templating'));
    }

    /*
     * Gets the 'claroline.flashcard.session_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\FlashCardBundle\Manager\SessionManager A Claroline\FlashCardBundle\Manager\SessionManager instance
     */
    protected function getClaroline_Flashcard_SessionManagerService()
    {
        return $this->services['claroline.flashcard.session_manager'] = new \Claroline\FlashCardBundle\Manager\SessionManager($this->get('claroline.persistence.object_manager'), $this->get('templating'));
    }

    /*
     * Gets the 'claroline.form.adminlogfilter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Log\AdminLogFilterType A Claroline\CoreBundle\Form\Log\AdminLogFilterType instance
     */
    protected function getClaroline_Form_AdminlogfilterService()
    {
        return $this->services['claroline.form.adminlogfilter'] = new \Claroline\CoreBundle\Form\Log\AdminLogFilterType($this->get('claroline.event.manager'));
    }

    /*
     * Gets the 'claroline.form.agenda' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\AgendaBundle\Form\AgendaType A Claroline\AgendaBundle\Form\AgendaType instance
     */
    protected function getClaroline_Form_AgendaService()
    {
        return $this->services['claroline.form.agenda'] = new \Claroline\AgendaBundle\Form\AgendaType($this->get('translator.default'), $this->get('claroline.persistence.object_manager'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'claroline.form.base_content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Field\BaseContentType A Claroline\CoreBundle\Form\Field\BaseContentType instance
     */
    protected function getClaroline_Form_BaseContentService()
    {
        return $this->services['claroline.form.base_content'] = new \Claroline\CoreBundle\Form\Field\BaseContentType();
    }

    /*
     * Gets the 'claroline.form.buttongroupselect' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Field\ButtonGroupSelectType A Claroline\CoreBundle\Form\Field\ButtonGroupSelectType instance
     */
    protected function getClaroline_Form_ButtongroupselectService()
    {
        return $this->services['claroline.form.buttongroupselect'] = new \Claroline\CoreBundle\Form\Field\ButtonGroupSelectType();
    }

    /*
     * Gets the 'claroline.form.content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Field\ContentType A Claroline\CoreBundle\Form\Field\ContentType instance
     */
    protected function getClaroline_Form_ContentService()
    {
        return $this->services['claroline.form.content'] = new \Claroline\CoreBundle\Form\Field\ContentType($this->get('claroline.manager.locale_manager'), $this->get('claroline.manager.content_manager'));
    }

    /*
     * Gets the 'claroline.form.datepicker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Field\DatePickerType A Claroline\CoreBundle\Form\Field\DatePickerType instance
     */
    protected function getClaroline_Form_DatepickerService()
    {
        return $this->services['claroline.form.datepicker'] = new \Claroline\CoreBundle\Form\Field\DatePickerType($this->get('claroline.manager.locale_manager'), $this);
    }

    /*
     * Gets the 'claroline.form.daterange' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Field\DateRangeType A Claroline\CoreBundle\Form\Field\DateRangeType instance
     */
    protected function getClaroline_Form_DaterangeService()
    {
        return $this->services['claroline.form.daterange'] = new \Claroline\CoreBundle\Form\Field\DateRangeType($this->get('translator.default'));
    }

    /*
     * Gets the 'claroline.form.datetimepicker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Field\DateTimePickerType A Claroline\CoreBundle\Form\Field\DateTimePickerType instance
     */
    protected function getClaroline_Form_DatetimepickerService()
    {
        return $this->services['claroline.form.datetimepicker'] = new \Claroline\CoreBundle\Form\Field\DateTimePickerType();
    }

    /*
     * Gets the 'claroline.form.honeypot' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Field\HoneypotType A Claroline\CoreBundle\Form\Field\HoneypotType instance
     */
    protected function getClaroline_Form_HoneypotService()
    {
        return $this->services['claroline.form.honeypot'] = new \Claroline\CoreBundle\Form\Field\HoneypotType($this->get('request_stack'), $this->get('translator.default'));
    }

    /*
     * Gets the 'claroline.form.logworkspacewidgetconfig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Log\LogWorkspaceWidgetConfigType A Claroline\CoreBundle\Form\Log\LogWorkspaceWidgetConfigType instance
     */
    protected function getClaroline_Form_LogworkspacewidgetconfigService()
    {
        return $this->services['claroline.form.logworkspacewidgetconfig'] = new \Claroline\CoreBundle\Form\Log\LogWorkspaceWidgetConfigType($this->get('claroline.event.manager'));
    }

    /*
     * Gets the 'claroline.form.resourcelogfilter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Log\ResourceLogFilterType A Claroline\CoreBundle\Form\Log\ResourceLogFilterType instance
     */
    protected function getClaroline_Form_ResourcelogfilterService()
    {
        return $this->services['claroline.form.resourcelogfilter'] = new \Claroline\CoreBundle\Form\Log\ResourceLogFilterType($this->get('claroline.event.manager'));
    }

    /*
     * Gets the 'claroline.form.scroll' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Field\ScrollType A Claroline\CoreBundle\Form\Field\ScrollType instance
     */
    protected function getClaroline_Form_ScrollService()
    {
        return $this->services['claroline.form.scroll'] = new \Claroline\CoreBundle\Form\Field\ScrollType();
    }

    /*
     * Gets the 'claroline.form.select2' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Field\Select2Type A Claroline\CoreBundle\Form\Field\Select2Type instance
     */
    protected function getClaroline_Form_Select2Service()
    {
        return $this->services['claroline.form.select2'] = new \Claroline\CoreBundle\Form\Field\Select2Type();
    }

    /*
     * Gets the 'claroline.form.simpleautocomplete' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Field\SimpleAutoCompleteType A Claroline\CoreBundle\Form\Field\SimpleAutoCompleteType instance
     */
    protected function getClaroline_Form_SimpleautocompleteService()
    {
        return $this->services['claroline.form.simpleautocomplete'] = new \Claroline\CoreBundle\Form\Field\SimpleAutoCompleteType();
    }

    /*
     * Gets the 'claroline.form.tinymce' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Field\TinymceType A Claroline\CoreBundle\Form\Field\TinymceType instance
     */
    protected function getClaroline_Form_TinymceService()
    {
        return $this->services['claroline.form.tinymce'] = new \Claroline\CoreBundle\Form\Field\TinymceType();
    }

    /*
     * Gets the 'claroline.form.twolevelselect' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Field\TwoLevelSelectType A Claroline\CoreBundle\Form\Field\TwoLevelSelectType instance
     */
    protected function getClaroline_Form_TwolevelselectService()
    {
        return $this->services['claroline.form.twolevelselect'] = new \Claroline\CoreBundle\Form\Field\TwoLevelSelectType();
    }

    /*
     * Gets the 'claroline.form.user_picker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Field\UserPickerType A Claroline\CoreBundle\Form\Field\UserPickerType instance
     */
    protected function getClaroline_Form_UserPickerService()
    {
        return $this->services['claroline.form.user_picker'] = new \Claroline\CoreBundle\Form\Field\UserPickerType($this->get('translator.default'), $this->get('claroline.manager.user_manager'), $this->get('claroline.transformer.user_picker'));
    }

    /*
     * Gets the 'claroline.form.workspacelogfilter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Log\WorkspaceLogFilterType A Claroline\CoreBundle\Form\Log\WorkspaceLogFilterType instance
     */
    protected function getClaroline_Form_WorkspacelogfilterService()
    {
        return $this->services['claroline.form.workspacelogfilter'] = new \Claroline\CoreBundle\Form\Log\WorkspaceLogFilterType($this->get('claroline.event.manager'));
    }

    /*
     * Gets the 'claroline.form_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Handler\FormHandler A Claroline\CoreBundle\Form\Handler\FormHandler instance
     */
    protected function getClaroline_FormHandlerService()
    {
        return $this->services['claroline.form_handler'] = new \Claroline\CoreBundle\Form\Handler\FormHandler($this->get('form.factory'));
    }

    /*
     * Gets the 'claroline.forum_bundle.listener.forum_widget_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ForumBundle\Listener\ForumWidgetListener A Claroline\ForumBundle\Listener\ForumWidgetListener instance
     */
    protected function getClaroline_ForumBundle_Listener_ForumWidgetListenerService()
    {
        return $this->services['claroline.forum_bundle.listener.forum_widget_listener'] = new \Claroline\ForumBundle\Listener\ForumWidgetListener($this->get('form.factory'), $this->get('claroline.manager.forum_manager'), $this->get('request_stack'), $this->get('templating'));
    }

    /*
     * Gets the 'claroline.forum_bundle.listener.notification_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ForumBundle\Listener\NotificationListener A Claroline\ForumBundle\Listener\NotificationListener instance
     */
    protected function getClaroline_ForumBundle_Listener_NotificationListenerService()
    {
        return $this->services['claroline.forum_bundle.listener.notification_listener'] = new \Claroline\ForumBundle\Listener\NotificationListener($this->get('templating'));
    }

    /*
     * Gets the 'claroline.forum_bundle.listener.notification_user_parameters_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ForumBundle\Listener\NotificationUserParametersListener A Claroline\ForumBundle\Listener\NotificationUserParametersListener instance
     */
    protected function getClaroline_ForumBundle_Listener_NotificationUserParametersListenerService()
    {
        return $this->services['claroline.forum_bundle.listener.notification_user_parameters_listener'] = new \Claroline\ForumBundle\Listener\NotificationUserParametersListener();
    }

    /*
     * Gets the 'claroline.honeypot_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\Extension\HoneypotExtension A Claroline\CoreBundle\Form\Extension\HoneypotExtension instance
     */
    protected function getClaroline_HoneypotExtensionService()
    {
        return $this->services['claroline.honeypot_extension'] = new \Claroline\CoreBundle\Form\Extension\HoneypotExtension($this);
    }

    /*
     * Gets the 'claroline.importer.announcement_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\AnnouncementBundle\Transfer\AnnouncementImporter A Claroline\AnnouncementBundle\Transfer\AnnouncementImporter instance
     */
    protected function getClaroline_Importer_AnnouncementImporterService()
    {
        return $this->services['claroline.importer.announcement_importer'] = new \Claroline\AnnouncementBundle\Transfer\AnnouncementImporter($this->get('claroline.persistence.object_manager'), $this, $this->get('security.token_storage'));
    }

    /*
     * Gets the 'claroline.importer.forum_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ForumBundle\Transfert\ForumImporter A Claroline\ForumBundle\Transfert\ForumImporter instance
     */
    protected function getClaroline_Importer_ForumImporterService()
    {
        return $this->services['claroline.importer.forum_importer'] = new \Claroline\ForumBundle\Transfert\ForumImporter($this->get('claroline.persistence.object_manager'), $this);
    }

    /*
     * Gets the 'claroline.importer.groups_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\GroupsImporter A Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\GroupsImporter instance
     */
    protected function getClaroline_Importer_GroupsImporterService()
    {
        return $this->services['claroline.importer.groups_importer'] = new \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\GroupsImporter($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.importer.icap_blog_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Transfer\BlogImporter A Icap\BlogBundle\Transfer\BlogImporter instance
     */
    protected function getClaroline_Importer_IcapBlogImporterService()
    {
        return $this->services['claroline.importer.icap_blog_importer'] = new \Icap\BlogBundle\Transfer\BlogImporter($this->get('icap_blog.manager.blog'));
    }

    /*
     * Gets the 'claroline.importer.icap_lesson_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\LessonBundle\Transfert\LessonImporter A Icap\LessonBundle\Transfert\LessonImporter instance
     */
    protected function getClaroline_Importer_IcapLessonImporterService()
    {
        return $this->services['claroline.importer.icap_lesson_importer'] = new \Icap\LessonBundle\Transfert\LessonImporter($this->get('icap.lesson.manager'), $this->get('claroline.persistence.object_manager'), $this);
    }

    /*
     * Gets the 'claroline.importer.icap_website_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WebsiteBundle\Transfert\WebsiteImporter A Icap\WebsiteBundle\Transfert\WebsiteImporter instance
     */
    protected function getClaroline_Importer_IcapWebsiteImporterService()
    {
        return $this->services['claroline.importer.icap_website_importer'] = new \Icap\WebsiteBundle\Transfert\WebsiteImporter($this->get('icap.website.manager'), $this);
    }

    /*
     * Gets the 'claroline.importer.icap_wiki_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WikiBundle\Transfert\WikiImporter A Icap\WikiBundle\Transfert\WikiImporter instance
     */
    protected function getClaroline_Importer_IcapWikiImporterService()
    {
        return $this->services['claroline.importer.icap_wiki_importer'] = new \Icap\WikiBundle\Transfert\WikiImporter($this->get('icap.wiki.manager'), $this, $this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.importer.merger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Transfert\Resolver A Claroline\CoreBundle\Library\Transfert\Resolver instance
     */
    protected function getClaroline_Importer_MergerService()
    {
        return $this->services['claroline.importer.merger'] = new \Claroline\CoreBundle\Library\Transfert\Resolver();
    }

    /*
     * Gets the 'claroline.importer.properties_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\WorkspacePropertiesImporter A Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\WorkspacePropertiesImporter instance
     */
    protected function getClaroline_Importer_PropertiesImporterService()
    {
        return $this->services['claroline.importer.properties_importer'] = new \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\WorkspacePropertiesImporter($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.importer.rich_text_formatter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Transfert\RichTextFormatter A Claroline\CoreBundle\Library\Transfert\RichTextFormatter instance
     */
    protected function getClaroline_Importer_RichTextFormatterService()
    {
        $this->services['claroline.importer.rich_text_formatter'] = $instance = new \Claroline\CoreBundle\Library\Transfert\RichTextFormatter($this->get('router'), $this->get('claroline.manager.resource_manager'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.transfer_manager'), $this->get('claroline.manager.mask_manager'), $this->get('claroline.event.event_dispatcher'), $this->get('claroline.config.platform_config_handler'));

        $instance->addImporter($this->get('innova_collecticiel.importer.collecticiel'));
        $instance->addImporter($this->get('innova_path.importer.importer'));
        $instance->addImporter($this->get('claroline.importer.tools_importer'));
        $instance->addImporter($this->get('claroline.importer.users_importer'));
        $instance->addImporter($this->get('claroline.importer.properties_importer'));
        $instance->addImporter($this->get('claroline.tool.resource_manager_importer'));
        $instance->addImporter($this->get('claroline.tool.home_importer'));
        $instance->addImporter($this->get('claroline.tool.resources.file_importer'));
        $instance->addImporter($this->get('claroline.tool.resources.activity_importer'));
        $instance->addImporter($this->get('claroline.tool.resources.text_importer'));
        $instance->addImporter($this->get('claroline.widget.text_importer'));
        $instance->addImporter($this->get('claroline.importer.role_importer'));
        $instance->addImporter($this->get('claroline.importer.groups_importer'));
        $instance->addImporter($this->get('claroline.importer.forum_importer'));
        $instance->addImporter($this->get('claroline.importer.announcement_importer'));
        $instance->addImporter($this->get('claroline.tool.resources.scorm12_importer'));
        $instance->addImporter($this->get('claroline.tool.resources.scorm2004_importer'));
        $instance->addImporter($this->get('claroline.tool.resources.web_resource'));
        $instance->addImporter($this->get('claroline.importer.icap_blog_importer'));
        $instance->addImporter($this->get('claroline.importer.icap_wiki_importer'));
        $instance->addImporter($this->get('claroline.importer.icap_website_importer'));
        $instance->addImporter($this->get('ujm_exo.importer.exercise'));
        $instance->addImporter($this->get('claroline.importer.icap_lesson_importer'));

        return $instance;
    }

    /*
     * Gets the 'claroline.importer.role_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\RolesImporter A Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\RolesImporter instance
     */
    protected function getClaroline_Importer_RoleImporterService()
    {
        return $this->services['claroline.importer.role_importer'] = new \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\RolesImporter($this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.role_manager'));
    }

    /*
     * Gets the 'claroline.importer.tools_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\ToolsImporter A Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\ToolsImporter instance
     */
    protected function getClaroline_Importer_ToolsImporterService()
    {
        return $this->services['claroline.importer.tools_importer'] = new \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\ToolsImporter($this->get('claroline.manager.tool_manager'), $this->get('claroline.manager.tool_rights_manager'), $this->get('claroline.manager.role_manager'), $this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.importer.users_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\UsersImporter A Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\UsersImporter instance
     */
    protected function getClaroline_Importer_UsersImporterService()
    {
        return $this->services['claroline.importer.users_importer'] = new \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\UsersImporter($this->get('claroline.persistence.object_manager'), $this);
    }

    /*
     * Gets the 'claroline.installation.fixture_loader' service.
     *
     * @return \Claroline\InstallationBundle\Fixtures\FixtureLoader A Claroline\InstallationBundle\Fixtures\FixtureLoader instance
     */
    protected function getClaroline_Installation_FixtureLoaderService()
    {
        return new \Claroline\InstallationBundle\Fixtures\FixtureLoader($this, $this->get('claroline.doctrine_fixture_executor'));
    }

    /*
     * Gets the 'claroline.installation.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\KernelBundle\Routing\DynamicLoader A Claroline\KernelBundle\Routing\DynamicLoader instance
     */
    protected function getClaroline_Installation_LoaderService()
    {
        return $this->services['claroline.installation.loader'] = new \Claroline\KernelBundle\Routing\DynamicLoader();
    }

    /*
     * Gets the 'claroline.installation.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\InstallationBundle\Manager\InstallationManager A Claroline\InstallationBundle\Manager\InstallationManager instance
     */
    protected function getClaroline_Installation_ManagerService()
    {
        return $this->services['claroline.installation.manager'] = new \Claroline\InstallationBundle\Manager\InstallationManager($this, $this->get('claroline.migration.manager'), new \Claroline\InstallationBundle\Fixtures\FixtureLoader($this, $this->get('claroline.doctrine_fixture_executor')), 'prod');
    }

    /*
     * Gets the 'claroline.installation.operation_executor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Installation\OperationExecutor A Claroline\CoreBundle\Library\Installation\OperationExecutor instance
     */
    protected function getClaroline_Installation_OperationExecutorService()
    {
        return $this->services['claroline.installation.operation_executor'] = new \Claroline\CoreBundle\Library\Installation\OperationExecutor($this->get('kernel'), $this->get('claroline.installation.manager'), $this->get('claroline.plugin.installer'), $this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.installation.platform_installer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Installation\PlatformInstaller A Claroline\CoreBundle\Library\Installation\PlatformInstaller instance
     */
    protected function getClaroline_Installation_PlatformInstallerService()
    {
        return $this->services['claroline.installation.platform_installer'] = new \Claroline\CoreBundle\Library\Installation\PlatformInstaller($this->get('claroline.installation.operation_executor'), $this->get('claroline.installation.manager'), $this->get('claroline.plugin.installer'), $this->get('claroline.installation.refresher'), $this->get('kernel'), $this);
    }

    /*
     * Gets the 'claroline.installation.refresher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Installation\Refresher A Claroline\CoreBundle\Library\Installation\Refresher instance
     */
    protected function getClaroline_Installation_RefresherService()
    {
        return $this->services['claroline.installation.refresher'] = new \Claroline\CoreBundle\Library\Installation\Refresher($this);
    }

    /*
     * Gets the 'claroline.library.scorm_12' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ScormBundle\Library\Scorm12 A Claroline\ScormBundle\Library\Scorm12 instance
     */
    protected function getClaroline_Library_Scorm12Service()
    {
        return $this->services['claroline.library.scorm_12'] = new \Claroline\ScormBundle\Library\Scorm12();
    }

    /*
     * Gets the 'claroline.library.scorm_2004' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ScormBundle\Library\Scorm2004 A Claroline\ScormBundle\Library\Scorm2004 instance
     */
    protected function getClaroline_Library_Scorm2004Service()
    {
        return $this->services['claroline.library.scorm_2004'] = new \Claroline\ScormBundle\Library\Scorm2004();
    }

    /*
     * Gets the 'claroline.library.testing.cursuspersister' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CursusBundle\Library\Testing\CursusPersister A Claroline\CursusBundle\Library\Testing\CursusPersister instance
     */
    protected function getClaroline_Library_Testing_CursuspersisterService()
    {
        return $this->services['claroline.library.testing.cursuspersister'] = new \Claroline\CursusBundle\Library\Testing\CursusPersister($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.library.testing.persister' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Testing\Persister A Claroline\CoreBundle\Library\Testing\Persister instance
     */
    protected function getClaroline_Library_Testing_PersisterService()
    {
        return $this->services['claroline.library.testing.persister'] = new \Claroline\CoreBundle\Library\Testing\Persister($this->get('claroline.persistence.object_manager'), $this);
    }

    /*
     * Gets the 'claroline.library.view.serializer.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\View\Serializer\Csv A Claroline\CoreBundle\Library\View\Serializer\Csv instance
     */
    protected function getClaroline_Library_View_Serializer_CsvService()
    {
        return $this->services['claroline.library.view.serializer.csv'] = new \Claroline\CoreBundle\Library\View\Serializer\Csv(($this->targetDirs[2].'/config/tmp_files'), $this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'claroline.library.view.serializer.serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\View\Serializer\Serializer A Claroline\CoreBundle\Library\View\Serializer\Serializer instance
     */
    protected function getClaroline_Library_View_Serializer_SerializerService()
    {
        return $this->services['claroline.library.view.serializer.serializer'] = new \Claroline\CoreBundle\Library\View\Serializer\Serializer($this->get('claroline.persistence.object_manager'), $this->get('translator.default'), $this);
    }

    /*
     * Gets the 'claroline.library.view.serializer.xls' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\View\Serializer\Excel A Claroline\CoreBundle\Library\View\Serializer\Excel instance
     */
    protected function getClaroline_Library_View_Serializer_XlsService()
    {
        return $this->services['claroline.library.view.serializer.xls'] = new \Claroline\CoreBundle\Library\View\Serializer\Excel(($this->targetDirs[2].'/config/tmp_files'), $this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'claroline.listener.core.notification_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\Notification\NotificationListener A Claroline\CoreBundle\Listener\Notification\NotificationListener instance
     */
    protected function getClaroline_Listener_Core_NotificationListenerService()
    {
        $this->services['claroline.listener.core.notification_listener'] = $instance = new \Claroline\CoreBundle\Listener\Notification\NotificationListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'claroline.listener.file_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\Resource\FileListener A Claroline\CoreBundle\Listener\Resource\FileListener instance
     */
    protected function getClaroline_Listener_FileListenerService()
    {
        $this->services['claroline.listener.file_listener'] = $instance = new \Claroline\CoreBundle\Listener\Resource\FileListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'claroline.listener.forum_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ForumBundle\Listener\ForumListener A Claroline\ForumBundle\Listener\ForumListener instance
     */
    protected function getClaroline_Listener_ForumListenerService()
    {
        $this->services['claroline.listener.forum_listener'] = $instance = new \Claroline\ForumBundle\Listener\ForumListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'claroline.listener.image_player_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ImagePlayerBundle\Listener\ImagePlayerListener A Claroline\ImagePlayerBundle\Listener\ImagePlayerListener instance
     */
    protected function getClaroline_Listener_ImagePlayerListenerService()
    {
        $this->services['claroline.listener.image_player_listener'] = $instance = new \Claroline\ImagePlayerBundle\Listener\ImagePlayerListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'claroline.listener.pdf_player_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\PdfPlayerBundle\Listener\PdfPlayerListener A Claroline\PdfPlayerBundle\Listener\PdfPlayerListener instance
     */
    protected function getClaroline_Listener_PdfPlayerListenerService()
    {
        $this->services['claroline.listener.pdf_player_listener'] = $instance = new \Claroline\PdfPlayerBundle\Listener\PdfPlayerListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'claroline.listener.video_player_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\VideoPlayerBundle\Listener\VideoPlayerListener A Claroline\VideoPlayerBundle\Listener\VideoPlayerListener instance
     */
    protected function getClaroline_Listener_VideoPlayerListenerService()
    {
        return $this->services['claroline.listener.video_player_listener'] = new \Claroline\VideoPlayerBundle\Listener\VideoPlayerListener(($this->targetDirs[2].'/../files'), $this->get('templating'), $this->get('claroline.config.platform_config_handler'), $this);
    }

    /*
     * Gets the 'claroline.listener.web_resource_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\WebResourceBundle\Listener\WebResourceListener A Claroline\WebResourceBundle\Listener\WebResourceListener instance
     */
    protected function getClaroline_Listener_WebResourceListenerService()
    {
        return $this->services['claroline.listener.web_resource_listener'] = new \Claroline\WebResourceBundle\Listener\WebResourceListener($this);
    }

    /*
     * Gets the 'claroline.locale_setter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\LocaleSetter A Claroline\CoreBundle\Listener\LocaleSetter instance
     */
    protected function getClaroline_LocaleSetterService()
    {
        return $this->services['claroline.locale_setter'] = new \Claroline\CoreBundle\Listener\LocaleSetter($this->get('claroline.manager.locale_manager'));
    }

    /*
     * Gets the 'claroline.log.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\LogManager A Claroline\CoreBundle\Manager\LogManager instance
     */
    protected function getClaroline_Log_ManagerService()
    {
        return $this->services['claroline.log.manager'] = new \Claroline\CoreBundle\Manager\LogManager($this, $this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'claroline.mailing.transport_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Mailing\TransportFactory A Claroline\CoreBundle\Library\Mailing\TransportFactory instance
     */
    protected function getClaroline_Mailing_TransportFactoryService()
    {
        return $this->services['claroline.mailing.transport_factory'] = new \Claroline\CoreBundle\Library\Mailing\TransportFactory($this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'claroline.manager.activity_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\ActivityManager A Claroline\CoreBundle\Manager\ActivityManager instance
     */
    protected function getClaroline_Manager_ActivityManagerService()
    {
        return $this->services['claroline.manager.activity_manager'] = new \Claroline\CoreBundle\Manager\ActivityManager($this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.rights_manager'), $this->get('security.token_storage'), $this->get('claroline.event.event_dispatcher'));
    }

    /*
     * Gets the 'claroline.manager.administration_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\AdministrationManager A Claroline\CoreBundle\Manager\AdministrationManager instance
     */
    protected function getClaroline_Manager_AdministrationManagerService()
    {
        return $this->services['claroline.manager.administration_manager'] = new \Claroline\CoreBundle\Manager\AdministrationManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.agenda_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\AgendaBundle\Manager\AgendaManager A Claroline\AgendaBundle\Manager\AgendaManager instance
     */
    protected function getClaroline_Manager_AgendaManagerService()
    {
        return $this->services['claroline.manager.agenda_manager'] = new \Claroline\AgendaBundle\Manager\AgendaManager($this->get('claroline.persistence.object_manager'), $this->targetDirs[2], $this->get('security.token_storage'), $this->get('security.authorization_checker'), $this->get('claroline.manager.role_manager'), $this->get('translator.default'), $this->get('claroline.security.utilities'), $this);
    }

    /*
     * Gets the 'claroline.manager.analytics_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\AnalyticsManager A Claroline\CoreBundle\Manager\AnalyticsManager instance
     */
    protected function getClaroline_Manager_AnalyticsManagerService()
    {
        return $this->services['claroline.manager.analytics_manager'] = new \Claroline\CoreBundle\Manager\AnalyticsManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.api_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\ApiManager A Claroline\CoreBundle\Manager\ApiManager instance
     */
    protected function getClaroline_Manager_ApiManagerService()
    {
        return $this->services['claroline.manager.api_manager'] = new \Claroline\CoreBundle\Manager\ApiManager($this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.oauth_manager'), $this->get('claroline.manager.curl_manager'), $this->get('fos_rest.view_handler'), $this);
    }

    /*
     * Gets the 'claroline.manager.cache_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\CacheManager A Claroline\CoreBundle\Manager\CacheManager instance
     */
    protected function getClaroline_Manager_CacheManagerService()
    {
        return $this->services['claroline.manager.cache_manager'] = new \Claroline\CoreBundle\Manager\CacheManager($this->get('claroline.event.event_dispatcher'), $this->targetDirs[2], $this->get('claroline.manager.ini_file_manager'));
    }

    /*
     * Gets the 'claroline.manager.calendar.event_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\Calendar\EventManager A Claroline\CoreBundle\Manager\Calendar\EventManager instance
     */
    protected function getClaroline_Manager_Calendar_EventManagerService()
    {
        return $this->services['claroline.manager.calendar.event_manager'] = new \Claroline\CoreBundle\Manager\Calendar\EventManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.calendar.leave_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\Calendar\LeaveManager A Claroline\CoreBundle\Manager\Calendar\LeaveManager instance
     */
    protected function getClaroline_Manager_Calendar_LeaveManagerService()
    {
        return $this->services['claroline.manager.calendar.leave_manager'] = new \Claroline\CoreBundle\Manager\Calendar\LeaveManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.calendar.period_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\Calendar\PeriodManager A Claroline\CoreBundle\Manager\Calendar\PeriodManager instance
     */
    protected function getClaroline_Manager_Calendar_PeriodManagerService()
    {
        return $this->services['claroline.manager.calendar.period_manager'] = new \Claroline\CoreBundle\Manager\Calendar\PeriodManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.calendar.schedule_template_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\Calendar\ScheduleTemplateManager A Claroline\CoreBundle\Manager\Calendar\ScheduleTemplateManager instance
     */
    protected function getClaroline_Manager_Calendar_ScheduleTemplateManagerService()
    {
        return $this->services['claroline.manager.calendar.schedule_template_manager'] = new \Claroline\CoreBundle\Manager\Calendar\ScheduleTemplateManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.calendar.time_slot_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\Calendar\TimeSlotManager A Claroline\CoreBundle\Manager\Calendar\TimeSlotManager instance
     */
    protected function getClaroline_Manager_Calendar_TimeSlotManagerService()
    {
        return $this->services['claroline.manager.calendar.time_slot_manager'] = new \Claroline\CoreBundle\Manager\Calendar\TimeSlotManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.calendar.year_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\Calendar\YearManager A Claroline\CoreBundle\Manager\Calendar\YearManager instance
     */
    protected function getClaroline_Manager_Calendar_YearManagerService()
    {
        return $this->services['claroline.manager.calendar.year_manager'] = new \Claroline\CoreBundle\Manager\Calendar\YearManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.chat_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ChatBundle\Manager\ChatManager A Claroline\ChatBundle\Manager\ChatManager instance
     */
    protected function getClaroline_Manager_ChatManagerService()
    {
        return $this->services['claroline.manager.chat_manager'] = new \Claroline\ChatBundle\Manager\ChatManager($this->get('claroline.persistence.object_manager'), $this->get('claroline.pager.pager_factory'), $this->get('claroline.utilities.misc'), $this->get('claroline.config.platform_config_handler'), $this->get('claroline.manager.curl_manager'), $this->get('translator.default'));
    }

    /*
     * Gets the 'claroline.manager.claco_form_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ClacoFormBundle\Manager\ClacoFormManager A Claroline\ClacoFormBundle\Manager\ClacoFormManager instance
     */
    protected function getClaroline_Manager_ClacoFormManagerService()
    {
        return $this->services['claroline.manager.claco_form_manager'] = new \Claroline\ClacoFormBundle\Manager\ClacoFormManager($this->get('security.authorization_checker'), $this->get('event_dispatcher'), $this->get('claroline.manager.facet_manager'), $this->get('claroline.manager.message_manager'), $this->get('claroline.persistence.object_manager'), $this->get('router'), $this->get('security.token_storage'), $this->get('translator.default'));
    }

    /*
     * Gets the 'claroline.manager.contact_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\ContactManager A Claroline\CoreBundle\Manager\ContactManager instance
     */
    protected function getClaroline_Manager_ContactManagerService()
    {
        return $this->services['claroline.manager.contact_manager'] = new \Claroline\CoreBundle\Manager\ContactManager($this->get('claroline.persistence.object_manager'), $this->get('claroline.pager.pager_factory'));
    }

    /*
     * Gets the 'claroline.manager.content_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\ContentManager A Claroline\CoreBundle\Manager\ContentManager instance
     */
    protected function getClaroline_Manager_ContentManagerService()
    {
        return $this->services['claroline.manager.content_manager'] = new \Claroline\CoreBundle\Manager\ContentManager($this->get('doctrine'), $this->get('request_stack'), $this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.curl_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\CurlManager A Claroline\CoreBundle\Manager\CurlManager instance
     */
    protected function getClaroline_Manager_CurlManagerService()
    {
        return $this->services['claroline.manager.curl_manager'] = new \Claroline\CoreBundle\Manager\CurlManager();
    }

    /*
     * Gets the 'claroline.manager.cursus_api_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CursusBundle\Manager\CursusApiManager A Claroline\CursusBundle\Manager\CursusApiManager instance
     */
    protected function getClaroline_Manager_CursusApiManagerService()
    {
        return $this->services['claroline.manager.cursus_api_manager'] = new \Claroline\CursusBundle\Manager\CursusApiManager($this->get('claroline.manager.api_manager'), $this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.cursus_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CursusBundle\Manager\CursusManager A Claroline\CursusBundle\Manager\CursusManager instance
     */
    protected function getClaroline_Manager_CursusManagerService()
    {
        return $this->services['claroline.manager.cursus_manager'] = new \Claroline\CursusBundle\Manager\CursusManager($this->get('security.authorization_checker'), $this, $this->get('claroline.manager.content_manager'), $this->get('event_dispatcher'), $this->get('claroline.manager.mail_manager'), $this->get('claroline.manager.message_manager'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.pager.pager_factory'), $this->get('claroline.config.platform_config_handler'), $this->get('claroline.manager.role_manager'), $this->get('router'), $this->get('jms_serializer'), ($this->targetDirs[2].'/../vendor/claroline/distribution/main/core/Resources/template/default.zip'), $this->get('templating'), $this->get('security.token_storage'), $this->get('claroline.manager.tool_manager'), $this->get('translator.default'), $this->get('claroline.manager.user_manager'), $this->get('claroline.utilities.misc'), $this->get('claroline.security.utilities'), $this->get('claroline.manager.workspace_manager'), $this->get('claroline.manager.pdf_manager'), $this->get('claroline.event.event_dispatcher'));
    }

    /*
     * Gets the 'claroline.manager.dashboard_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\DashboardBundle\Manager\DashboardManager A Claroline\DashboardBundle\Manager\DashboardManager instance
     */
    protected function getClaroline_Manager_DashboardManagerService()
    {
        return $this->services['claroline.manager.dashboard_manager'] = new \Claroline\DashboardBundle\Manager\DashboardManager($this->get('doctrine.orm.default_entity_manager'), $this->get('claroline.manager.workspace_manager'));
    }

    /*
     * Gets the 'claroline.manager.exporter_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\ExporterManager A Claroline\CoreBundle\Manager\ExporterManager instance
     */
    protected function getClaroline_Manager_ExporterManagerService()
    {
        return $this->services['claroline.manager.exporter_manager'] = new \Claroline\CoreBundle\Manager\ExporterManager($this->get('claroline.persistence.object_manager'), $this->get('translator.default'));
    }

    /*
     * Gets the 'claroline.manager.facet_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\FacetManager A Claroline\CoreBundle\Manager\FacetManager instance
     */
    protected function getClaroline_Manager_FacetManagerService()
    {
        return $this->services['claroline.manager.facet_manager'] = new \Claroline\CoreBundle\Manager\FacetManager($this->get('security.token_storage'), $this->get('security.authorization_checker'), $this->get('claroline.persistence.object_manager'), $this->get('translator.default'), $this);
    }

    /*
     * Gets the 'claroline.manager.file_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\FileManager A Claroline\CoreBundle\Manager\FileManager instance
     */
    protected function getClaroline_Manager_FileManagerService()
    {
        return $this->services['claroline.manager.file_manager'] = new \Claroline\CoreBundle\Manager\FileManager($this->get('claroline.persistence.object_manager'), ($this->targetDirs[2].'/../files'), $this->get('claroline.utilities.misc'), $this->get('claroline.manager.resource_manager'), $this->get('claroline.event.event_dispatcher'), ($this->targetDirs[2].'/../web/uploads'), $this->get('security.token_storage'), $this->get('claroline.manager.workspace_manager'));
    }

    /*
     * Gets the 'claroline.manager.forum_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ForumBundle\Manager\Manager A Claroline\ForumBundle\Manager\Manager instance
     */
    protected function getClaroline_Manager_ForumManagerService()
    {
        return $this->services['claroline.manager.forum_manager'] = new \Claroline\ForumBundle\Manager\Manager($this->get('security.authorization_checker'), $this, $this->get('event_dispatcher'), $this->get('claroline.manager.mail_manager'), $this->get('claroline.manager.mask_manager'), $this->get('claroline.manager.message_manager'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.pager.pager_factory'), $this->get('claroline.manager.resource_manager'), $this->get('claroline.manager.rights_manager'), $this->get('router'), $this->get('claroline.security.utilities'), $this->get('security.token_storage'), $this->get('translator.default'), $this->get('claroline.manager.workspace_manager'));
    }

    /*
     * Gets the 'claroline.manager.group_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\GroupManager A Claroline\CoreBundle\Manager\GroupManager instance
     */
    protected function getClaroline_Manager_GroupManagerService()
    {
        return $this->services['claroline.manager.group_manager'] = new \Claroline\CoreBundle\Manager\GroupManager($this->get('claroline.persistence.object_manager'), $this->get('claroline.pager.pager_factory'), $this->get('translator.default'), $this->get('claroline.event.event_dispatcher'), $this->get('claroline.manager.role_manager'), $this);
    }

    /*
     * Gets the 'claroline.manager.home_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\HomeManager A Claroline\CoreBundle\Manager\HomeManager instance
     */
    protected function getClaroline_Manager_HomeManagerService()
    {
        return $this->services['claroline.manager.home_manager'] = new \Claroline\CoreBundle\Manager\HomeManager($this->get('claroline.common.graph_service'), $this->get('claroline.common.home_service'), $this->get('doctrine'), $this->get('claroline.manager.content_manager'), $this->get('claroline.persistence.object_manager'), $this->get('form.factory'), $this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'claroline.manager.home_tab_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\HomeTabManager A Claroline\CoreBundle\Manager\HomeTabManager instance
     */
    protected function getClaroline_Manager_HomeTabManagerService()
    {
        return $this->services['claroline.manager.home_tab_manager'] = new \Claroline\CoreBundle\Manager\HomeTabManager($this, $this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.icon_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\IconManager A Claroline\CoreBundle\Manager\IconManager instance
     */
    protected function getClaroline_Manager_IconManagerService()
    {
        return $this->services['claroline.manager.icon_manager'] = new \Claroline\CoreBundle\Manager\IconManager($this->get('claroline.utilities.thumbnail_creator'), ($this->targetDirs[2].'/../files'), ($this->targetDirs[2].'/../web/uploads/thumbnails'), $this->targetDirs[2], $this->get('claroline.utilities.misc'), $this->get('claroline.persistence.object_manager'), 'uploads/thumbnails');
    }

    /*
     * Gets the 'claroline.manager.import_csv_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\ImportCsvManager A Claroline\CoreBundle\Manager\ImportCsvManager instance
     */
    protected function getClaroline_Manager_ImportCsvManagerService()
    {
        return $this->services['claroline.manager.import_csv_manager'] = new \Claroline\CoreBundle\Manager\ImportCsvManager($this->get('claroline.persistence.object_manager'), $this->get('translator.default'), $this->get('claroline.manager.group_manager'), $this->get('claroline.manager.role_manager'), $this->get('claroline.manager.user_manager'), $this->get('claroline.manager.workspace_manager'), $this->get('claroline.utilities.misc'));
    }

    /*
     * Gets the 'claroline.manager.ini_file_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\IniFileManager A Claroline\CoreBundle\Manager\IniFileManager instance
     */
    protected function getClaroline_Manager_IniFileManagerService()
    {
        return $this->services['claroline.manager.ini_file_manager'] = new \Claroline\CoreBundle\Manager\IniFileManager();
    }

    /*
     * Gets the 'claroline.manager.ip_white_list_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\IPWhiteListManager A Claroline\CoreBundle\Manager\IPWhiteListManager instance
     */
    protected function getClaroline_Manager_IpWhiteListManagerService()
    {
        return $this->services['claroline.manager.ip_white_list_manager'] = new \Claroline\CoreBundle\Manager\IPWhiteListManager(($this->targetDirs[2].'/config/ip_white_list.yml'), ($this->targetDirs[2].'/config/white_list_ip_range.yml'));
    }

    /*
     * Gets the 'claroline.manager.locale_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\LocaleManager A Claroline\CoreBundle\Manager\LocaleManager instance
     */
    protected function getClaroline_Manager_LocaleManagerService()
    {
        return $this->services['claroline.manager.locale_manager'] = new \Claroline\CoreBundle\Manager\LocaleManager($this->get('claroline.config.platform_config_handler'), $this->get('claroline.manager.user_manager'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'claroline.manager.mail_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\MailManager A Claroline\CoreBundle\Manager\MailManager instance
     */
    protected function getClaroline_Manager_MailManagerService()
    {
        return $this->services['claroline.manager.mail_manager'] = new \Claroline\CoreBundle\Manager\MailManager($this->get('swiftmailer.mailer.default'), $this->get('router'), $this->get('translator.default'), $this->get('claroline.config.platform_config_handler'), $this, $this->get('claroline.manager.cache_manager'), $this->get('claroline.manager.content_manager'));
    }

    /*
     * Gets the 'claroline.manager.mask_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\MaskManager A Claroline\CoreBundle\Manager\MaskManager instance
     */
    protected function getClaroline_Manager_MaskManagerService()
    {
        return $this->services['claroline.manager.mask_manager'] = new \Claroline\CoreBundle\Manager\MaskManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.message_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\MessageBundle\Manager\MessageManager A Claroline\MessageBundle\Manager\MessageManager instance
     */
    protected function getClaroline_Manager_MessageManagerService()
    {
        return $this->services['claroline.manager.message_manager'] = new \Claroline\MessageBundle\Manager\MessageManager($this->get('claroline.manager.mail_manager'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.pager.pager_factory'));
    }

    /*
     * Gets the 'claroline.manager.migration_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\MigrationManager A Claroline\CoreBundle\Manager\MigrationManager instance
     */
    protected function getClaroline_Manager_MigrationManagerService()
    {
        return $this->services['claroline.manager.migration_manager'] = new \Claroline\CoreBundle\Manager\MigrationManager($this->get('doctrine.dbal.default_connection'));
    }

    /*
     * Gets the 'claroline.manager.oauth_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\OauthManager A Claroline\CoreBundle\Manager\OauthManager instance
     */
    protected function getClaroline_Manager_OauthManagerService()
    {
        $this->services['claroline.manager.oauth_manager'] = $instance = new \Claroline\CoreBundle\Manager\OauthManager($this->get('fos_oauth_server.entity_manager'), 'Claroline\\CoreBundle\\Entity\\Oauth\\Client');

        $instance->curlManager = $this->get('claroline.manager.curl_manager');
        $instance->om = $this->get('claroline.persistence.object_manager');
        $instance->container = $this;

        return $instance;
    }

    /*
     * Gets the 'claroline.manager.organization.location_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\Organization\LocationManager A Claroline\CoreBundle\Manager\Organization\LocationManager instance
     */
    protected function getClaroline_Manager_Organization_LocationManagerService()
    {
        return $this->services['claroline.manager.organization.location_manager'] = new \Claroline\CoreBundle\Manager\Organization\LocationManager($this->get('claroline.persistence.object_manager'), $this->get('claroline.config.platform_config_handler'), $this->get('claroline.manager.curl_manager'));
    }

    /*
     * Gets the 'claroline.manager.organization.organization_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\Organization\OrganizationManager A Claroline\CoreBundle\Manager\Organization\OrganizationManager instance
     */
    protected function getClaroline_Manager_Organization_OrganizationManagerService()
    {
        return $this->services['claroline.manager.organization.organization_manager'] = new \Claroline\CoreBundle\Manager\Organization\OrganizationManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.pdf_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\PdfGeneratorBundle\Manager\PdfManager A Claroline\PdfGeneratorBundle\Manager\PdfManager instance
     */
    protected function getClaroline_Manager_PdfManagerService()
    {
        return $this->services['claroline.manager.pdf_manager'] = new \Claroline\PdfGeneratorBundle\Manager\PdfManager($this->get('claroline.persistence.object_manager'), $this->get('knp_snappy.pdf'), ($this->targetDirs[2].'/../files/pdf'), $this->get('claroline.utilities.misc'));
    }

    /*
     * Gets the 'claroline.manager.plugin_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\PluginManager A Claroline\CoreBundle\Manager\PluginManager instance
     */
    protected function getClaroline_Manager_PluginManagerService()
    {
        return $this->services['claroline.manager.plugin_manager'] = new \Claroline\CoreBundle\Manager\PluginManager($this->get('claroline.manager.ini_file_manager'), $this->targetDirs[2], $this->get('claroline.persistence.object_manager'), $this->get('kernel'));
    }

    /*
     * Gets the 'claroline.manager.portal_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\PortalManager A Claroline\CoreBundle\Manager\PortalManager instance
     */
    protected function getClaroline_Manager_PortalManagerService()
    {
        return $this->services['claroline.manager.portal_manager'] = new \Claroline\CoreBundle\Manager\PortalManager($this->get('claroline.persistence.object_manager'), $this->get('translator.default'), $this->get('claroline.config.platform_config_handler'), $this->get('claroline.repository.portal'), $this->get('claroline.manager.plugin_manager'));
    }

    /*
     * Gets the 'claroline.manager.profile_property_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\ProfilePropertyManager A Claroline\CoreBundle\Manager\ProfilePropertyManager instance
     */
    protected function getClaroline_Manager_ProfilePropertyManagerService()
    {
        return $this->services['claroline.manager.profile_property_manager'] = new \Claroline\CoreBundle\Manager\ProfilePropertyManager($this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.role_manager'), $this->get('claroline.security.utilities'), $this);
    }

    /*
     * Gets the 'claroline.manager.resource_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\ResourceManager A Claroline\CoreBundle\Manager\ResourceManager instance
     */
    protected function getClaroline_Manager_ResourceManagerService()
    {
        return $this->services['claroline.manager.resource_manager'] = new \Claroline\CoreBundle\Manager\ResourceManager($this->get('claroline.manager.role_manager'), $this->get('claroline.manager.icon_manager'), $this, $this->get('claroline.manager.rights_manager'), $this->get('claroline.event.event_dispatcher'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.utilities.misc'), $this->get('claroline.security.utilities'), $this->get('claroline.manager.mask_manager'), $this->get('translator.default'), $this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'claroline.manager.resources_widget_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\ResourcesWidgetManager A Claroline\CoreBundle\Manager\ResourcesWidgetManager instance
     */
    protected function getClaroline_Manager_ResourcesWidgetManagerService()
    {
        return $this->services['claroline.manager.resources_widget_manager'] = new \Claroline\CoreBundle\Manager\ResourcesWidgetManager($this->get('security.authorization_checker'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.resource_manager'), $this->get('claroline.manager.tag_manager'), $this->get('security.token_storage'), $this->get('claroline.security.utilities'));
    }

    /*
     * Gets the 'claroline.manager.rights_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\RightsManager A Claroline\CoreBundle\Manager\RightsManager instance
     */
    protected function getClaroline_Manager_RightsManagerService()
    {
        return $this->services['claroline.manager.rights_manager'] = new \Claroline\CoreBundle\Manager\RightsManager($this->get('translator.default'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.event.event_dispatcher'), $this->get('claroline.manager.role_manager'), $this->get('claroline.manager.mask_manager'), $this);
    }

    /*
     * Gets the 'claroline.manager.role_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\RoleManager A Claroline\CoreBundle\Manager\RoleManager instance
     */
    protected function getClaroline_Manager_RoleManagerService()
    {
        return $this->services['claroline.manager.role_manager'] = new \Claroline\CoreBundle\Manager\RoleManager($this->get('claroline.persistence.object_manager'), $this->get('claroline.event.event_dispatcher'), $this, $this->get('translator.default'), $this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'claroline.manager.rss_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\RssReaderBundle\Library\RssManager A Claroline\RssReaderBundle\Library\RssManager instance
     */
    protected function getClaroline_Manager_RssManagerService()
    {
        return $this->services['claroline.manager.rss_manager'] = new \Claroline\RssReaderBundle\Library\RssManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.scorm_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ScormBundle\Manager\ScormManager A Claroline\ScormBundle\Manager\ScormManager instance
     */
    protected function getClaroline_Manager_ScormManagerService()
    {
        return $this->services['claroline.manager.scorm_manager'] = new \Claroline\ScormBundle\Manager\ScormManager($this->get('claroline.persistence.object_manager'), $this, $this->get('claroline.library.scorm_12'), $this->get('claroline.library.scorm_2004'));
    }

    /*
     * Gets the 'claroline.manager.security_token_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\SecurityTokenManager A Claroline\CoreBundle\Manager\SecurityTokenManager instance
     */
    protected function getClaroline_Manager_SecurityTokenManagerService()
    {
        return $this->services['claroline.manager.security_token_manager'] = new \Claroline\CoreBundle\Manager\SecurityTokenManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.simple_text_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\SimpleTextManager A Claroline\CoreBundle\Manager\SimpleTextManager instance
     */
    protected function getClaroline_Manager_SimpleTextManagerService()
    {
        return $this->services['claroline.manager.simple_text_manager'] = new \Claroline\CoreBundle\Manager\SimpleTextManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.survey_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\SurveyBundle\Manager\SurveyManager A Claroline\SurveyBundle\Manager\SurveyManager instance
     */
    protected function getClaroline_Manager_SurveyManagerService()
    {
        return $this->services['claroline.manager.survey_manager'] = new \Claroline\SurveyBundle\Manager\SurveyManager($this->get('event_dispatcher'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.pager.pager_factory'));
    }

    /*
     * Gets the 'claroline.manager.tag_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\TagBundle\Manager\TagManager A Claroline\TagBundle\Manager\TagManager instance
     */
    protected function getClaroline_Manager_TagManagerService()
    {
        return $this->services['claroline.manager.tag_manager'] = new \Claroline\TagBundle\Manager\TagManager($this->get('claroline.persistence.object_manager'), $this->get('claroline.pager.pager_factory'));
    }

    /*
     * Gets the 'claroline.manager.team_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\TeamBundle\Manager\TeamManager A Claroline\TeamBundle\Manager\TeamManager instance
     */
    protected function getClaroline_Manager_TeamManagerService()
    {
        return $this->services['claroline.manager.team_manager'] = new \Claroline\TeamBundle\Manager\TeamManager($this->get('claroline.persistence.object_manager'), $this->get('claroline.pager.pager_factory'), $this->get('claroline.manager.resource_manager'), $this->get('claroline.manager.rights_manager'), $this->get('claroline.manager.role_manager'), $this->get('translator.default'));
    }

    /*
     * Gets the 'claroline.manager.text_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\TextManager A Claroline\CoreBundle\Manager\TextManager instance
     */
    protected function getClaroline_Manager_TextManagerService()
    {
        return $this->services['claroline.manager.text_manager'] = new \Claroline\CoreBundle\Manager\TextManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.theme_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\ThemeManager A Claroline\CoreBundle\Manager\ThemeManager instance
     */
    protected function getClaroline_Manager_ThemeManagerService()
    {
        return $this->services['claroline.manager.theme_manager'] = new \Claroline\CoreBundle\Manager\ThemeManager($this->get('claroline.persistence.object_manager'), $this->get('claroline.config.platform_config_handler'), $this->targetDirs[2]);
    }

    /*
     * Gets the 'claroline.manager.tool_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\ToolManager A Claroline\CoreBundle\Manager\ToolManager instance
     */
    protected function getClaroline_Manager_ToolManagerService()
    {
        return $this->services['claroline.manager.tool_manager'] = new \Claroline\CoreBundle\Manager\ToolManager($this->get('claroline.event.event_dispatcher'), $this->get('claroline.utilities.misc'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.role_manager'), $this->get('claroline.manager.tool_mask_decoder_manager'), $this->get('claroline.manager.tool_rights_manager'), $this);
    }

    /*
     * Gets the 'claroline.manager.tool_mask_decoder_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\ToolMaskDecoderManager A Claroline\CoreBundle\Manager\ToolMaskDecoderManager instance
     */
    protected function getClaroline_Manager_ToolMaskDecoderManagerService()
    {
        return $this->services['claroline.manager.tool_mask_decoder_manager'] = new \Claroline\CoreBundle\Manager\ToolMaskDecoderManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.manager.tool_rights_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\ToolRightsManager A Claroline\CoreBundle\Manager\ToolRightsManager instance
     */
    protected function getClaroline_Manager_ToolRightsManagerService()
    {
        return $this->services['claroline.manager.tool_rights_manager'] = new \Claroline\CoreBundle\Manager\ToolRightsManager($this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.tool_mask_decoder_manager'), $this->get('claroline.manager.resource_manager'), $this->get('claroline.manager.rights_manager'));
    }

    /*
     * Gets the 'claroline.manager.transfer_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\TransferManager A Claroline\CoreBundle\Manager\TransferManager instance
     */
    protected function getClaroline_Manager_TransferManagerService()
    {
        $this->services['claroline.manager.transfer_manager'] = $instance = new \Claroline\CoreBundle\Manager\TransferManager($this->get('claroline.persistence.object_manager'), $this);

        $instance->addImporter($this->get('innova_collecticiel.importer.collecticiel'));
        $instance->addImporter($this->get('innova_path.importer.importer'));
        $instance->addImporter($this->get('claroline.importer.tools_importer'));
        $instance->addImporter($this->get('claroline.importer.users_importer'));
        $instance->addImporter($this->get('claroline.importer.properties_importer'));
        $instance->addImporter($this->get('claroline.tool.resource_manager_importer'));
        $instance->addImporter($this->get('claroline.tool.home_importer'));
        $instance->addImporter($this->get('claroline.tool.resources.file_importer'));
        $instance->addImporter($this->get('claroline.tool.resources.activity_importer'));
        $instance->addImporter($this->get('claroline.tool.resources.text_importer'));
        $instance->addImporter($this->get('claroline.widget.text_importer'));
        $instance->addImporter($this->get('claroline.importer.role_importer'));
        $instance->addImporter($this->get('claroline.importer.groups_importer'));
        $instance->addImporter($this->get('claroline.importer.forum_importer'));
        $instance->addImporter($this->get('claroline.importer.announcement_importer'));
        $instance->addImporter($this->get('claroline.tool.resources.scorm12_importer'));
        $instance->addImporter($this->get('claroline.tool.resources.scorm2004_importer'));
        $instance->addImporter($this->get('claroline.tool.resources.web_resource'));
        $instance->addImporter($this->get('claroline.importer.icap_blog_importer'));
        $instance->addImporter($this->get('claroline.importer.icap_wiki_importer'));
        $instance->addImporter($this->get('claroline.importer.icap_website_importer'));
        $instance->addImporter($this->get('ujm_exo.importer.exercise'));
        $instance->addImporter($this->get('claroline.importer.icap_lesson_importer'));

        return $instance;
    }

    /*
     * Gets the 'claroline.manager.user_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\UserManager A Claroline\CoreBundle\Manager\UserManager instance
     */
    protected function getClaroline_Manager_UserManagerService()
    {
        return $this->services['claroline.manager.user_manager'] = new \Claroline\CoreBundle\Manager\UserManager($this, $this->get('claroline.manager.group_manager'), $this->get('claroline.manager.mail_manager'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.organization.organization_manager'), $this->get('claroline.pager.pager_factory'), ($this->targetDirs[2].'/../vendor/claroline/distribution/main/core/Resources/template/personal.zip'), $this->get('claroline.config.platform_config_handler'), $this->get('claroline.manager.role_manager'), $this->get('claroline.event.event_dispatcher'), $this->get('security.token_storage'), $this->get('claroline.manager.tool_manager'), $this->get('claroline.manager.transfer_manager'), $this->get('translator.default'), ($this->targetDirs[2].'/../web/uploads'), $this->get('validator'), $this->get('claroline.manager.workspace_manager'));
    }

    /*
     * Gets the 'claroline.manager.video_player_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\VideoPlayerBundle\Manager\VideoPlayerManager A Claroline\VideoPlayerBundle\Manager\VideoPlayerManager instance
     */
    protected function getClaroline_Manager_VideoPlayerManagerService()
    {
        return $this->services['claroline.manager.video_player_manager'] = new \Claroline\VideoPlayerBundle\Manager\VideoPlayerManager($this->get('claroline.persistence.object_manager'), ($this->targetDirs[2].'/../files'), $this->get('claroline.utilities.misc'), $this->get('claroline.manager.file_manager'));
    }

    /*
     * Gets the 'claroline.manager.widget_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\WidgetManager A Claroline\CoreBundle\Manager\WidgetManager instance
     */
    protected function getClaroline_Manager_WidgetManagerService()
    {
        return $this->services['claroline.manager.widget_manager'] = new \Claroline\CoreBundle\Manager\WidgetManager($this->get('claroline.persistence.object_manager'), $this->get('router'), $this->get('translator.default'), $this);
    }

    /*
     * Gets the 'claroline.manager.workspace_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\WorkspaceManager A Claroline\CoreBundle\Manager\WorkspaceManager instance
     */
    protected function getClaroline_Manager_WorkspaceManagerService()
    {
        return $this->services['claroline.manager.workspace_manager'] = new \Claroline\CoreBundle\Manager\WorkspaceManager($this->get('claroline.manager.home_tab_manager'), $this->get('claroline.manager.role_manager'), $this->get('claroline.manager.mask_manager'), $this->get('claroline.manager.resource_manager'), $this->get('claroline.event.event_dispatcher'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.utilities.misc'), $this->get('claroline.security.utilities'), $this->get('claroline.pager.pager_factory'), $this);
    }

    /*
     * Gets the 'claroline.manager.workspace_model_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\WorkspaceModelManager A Claroline\CoreBundle\Manager\WorkspaceModelManager instance
     */
    protected function getClaroline_Manager_WorkspaceModelManagerService()
    {
        return $this->services['claroline.manager.workspace_model_manager'] = new \Claroline\CoreBundle\Manager\WorkspaceModelManager($this->get('claroline.event.event_dispatcher'), $this->get('claroline.manager.home_tab_manager'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.resource_manager'), $this->get('claroline.manager.rights_manager'), $this->get('claroline.manager.role_manager'), $this->get('claroline.manager.tool_manager'), $this->get('claroline.manager.tool_rights_manager'), $this->get('security.token_storage'), $this->get('claroline.manager.widget_manager'));
    }

    /*
     * Gets the 'claroline.manager.workspace_tag_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\WorkspaceTagManager A Claroline\CoreBundle\Manager\WorkspaceTagManager instance
     */
    protected function getClaroline_Manager_WorkspaceTagManagerService()
    {
        return $this->services['claroline.manager.workspace_tag_manager'] = new \Claroline\CoreBundle\Manager\WorkspaceTagManager($this->get('claroline.manager.role_manager'), $this->get('claroline.manager.workspace_manager'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.pager.pager_factory'));
    }

    /*
     * Gets the 'claroline.manager.workspace_user_queue_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Manager\WorkspaceUserQueueManager A Claroline\CoreBundle\Manager\WorkspaceUserQueueManager instance
     */
    protected function getClaroline_Manager_WorkspaceUserQueueManagerService()
    {
        return $this->services['claroline.manager.workspace_user_queue_manager'] = new \Claroline\CoreBundle\Manager\WorkspaceUserQueueManager($this->get('claroline.event.event_dispatcher'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.pager.pager_factory'), $this->get('claroline.manager.role_manager'), $this->get('claroline.manager.workspace_manager'));
    }

    /*
     * Gets the 'claroline.menu.contact_additional_actions_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Menu\ContactAdditionalActionsMenu A Claroline\CoreBundle\Menu\ContactAdditionalActionsMenu instance
     */
    protected function getClaroline_Menu_ContactAdditionalActionsRendererService()
    {
        return $this->services['claroline.menu.contact_additional_actions_renderer'] = new \Claroline\CoreBundle\Menu\ContactAdditionalActionsMenu($this->get('knp_menu.matcher'), array(), 'UTF-8');
    }

    /*
     * Gets the 'claroline.menu.desktop_parameters_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Menu\DesktopParametersMenu A Claroline\CoreBundle\Menu\DesktopParametersMenu instance
     */
    protected function getClaroline_Menu_DesktopParametersRendererService()
    {
        return $this->services['claroline.menu.desktop_parameters_renderer'] = new \Claroline\CoreBundle\Menu\DesktopParametersMenu($this->get('knp_menu.matcher'), array(), 'UTF-8');
    }

    /*
     * Gets the 'claroline.menu.exception_actions_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Menu\ExceptionActionsMenu A Claroline\CoreBundle\Menu\ExceptionActionsMenu instance
     */
    protected function getClaroline_Menu_ExceptionActionsRendererService()
    {
        return $this->services['claroline.menu.exception_actions_renderer'] = new \Claroline\CoreBundle\Menu\ExceptionActionsMenu($this->get('knp_menu.matcher'), array(), 'UTF-8');
    }

    /*
     * Gets the 'claroline.menu.external_authentication_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Menu\ExternalAuthenticationRenderer A Claroline\CoreBundle\Menu\ExternalAuthenticationRenderer instance
     */
    protected function getClaroline_Menu_ExternalAuthenticationRendererService()
    {
        return $this->services['claroline.menu.external_authentication_renderer'] = new \Claroline\CoreBundle\Menu\ExternalAuthenticationRenderer($this->get('knp_menu.matcher'), array(), 'UTF-8');
    }

    /*
     * Gets the 'claroline.menu.group_additional_actions_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Menu\GroupAdditionalActionsMenu A Claroline\CoreBundle\Menu\GroupAdditionalActionsMenu instance
     */
    protected function getClaroline_Menu_GroupAdditionalActionsRendererService()
    {
        return $this->services['claroline.menu.group_additional_actions_renderer'] = new \Claroline\CoreBundle\Menu\GroupAdditionalActionsMenu($this->get('knp_menu.matcher'), array(), 'UTF-8');
    }

    /*
     * Gets the 'claroline.menu.top_bar_left_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Menu\TopBarLeftRenderer A Claroline\CoreBundle\Menu\TopBarLeftRenderer instance
     */
    protected function getClaroline_Menu_TopBarLeftRendererService()
    {
        return $this->services['claroline.menu.top_bar_left_renderer'] = new \Claroline\CoreBundle\Menu\TopBarLeftRenderer($this->get('knp_menu.matcher'), array(), 'UTF-8');
    }

    /*
     * Gets the 'claroline.menu.top_bar_right_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Menu\TopBarRightRenderer A Claroline\CoreBundle\Menu\TopBarRightRenderer instance
     */
    protected function getClaroline_Menu_TopBarRightRendererService()
    {
        return $this->services['claroline.menu.top_bar_right_renderer'] = new \Claroline\CoreBundle\Menu\TopBarRightRenderer($this->get('knp_menu.matcher'), array(), 'UTF-8');
    }

    /*
     * Gets the 'claroline.menu.user_additional_actions_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Menu\UserAdditionalActionsMenu A Claroline\CoreBundle\Menu\UserAdditionalActionsMenu instance
     */
    protected function getClaroline_Menu_UserAdditionalActionsRendererService()
    {
        return $this->services['claroline.menu.user_additional_actions_renderer'] = new \Claroline\CoreBundle\Menu\UserAdditionalActionsMenu($this->get('knp_menu.matcher'), array(), 'UTF-8');
    }

    /*
     * Gets the 'claroline.menu.workspace_additional_actions_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Menu\WorkspaceAdditionalActionsMenu A Claroline\CoreBundle\Menu\WorkspaceAdditionalActionsMenu instance
     */
    protected function getClaroline_Menu_WorkspaceAdditionalActionsRendererService()
    {
        return $this->services['claroline.menu.workspace_additional_actions_renderer'] = new \Claroline\CoreBundle\Menu\WorkspaceAdditionalActionsMenu($this->get('knp_menu.matcher'), array(), 'UTF-8');
    }

    /*
     * Gets the 'claroline.menu.workspace_user_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Menu\WorkspaceUsersRenderer A Claroline\CoreBundle\Menu\WorkspaceUsersRenderer instance
     */
    protected function getClaroline_Menu_WorkspaceUserRendererService()
    {
        return $this->services['claroline.menu.workspace_user_renderer'] = new \Claroline\CoreBundle\Menu\WorkspaceUsersRenderer($this->get('knp_menu.matcher'), array(), 'UTF-8');
    }

    /*
     * Gets the 'claroline.message_bundle.listener.message_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\MessageBundle\Listener\MessageListener A Claroline\MessageBundle\Listener\MessageListener instance
     */
    protected function getClaroline_MessageBundle_Listener_MessageListenerService()
    {
        return $this->services['claroline.message_bundle.listener.message_listener'] = new \Claroline\MessageBundle\Listener\MessageListener($this->get('claroline.manager.message_manager'), $this->get('router'), $this->get('security.token_storage'), $this->get('translator.default'), $this->get('request_stack'), $this->get('http_kernel'));
    }

    /*
     * Gets the 'claroline.message_bundle.validator.constraints.send_to_names_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\MessageBundle\Validator\Constraints\SendToNamesValidator A Claroline\MessageBundle\Validator\Constraints\SendToNamesValidator instance
     */
    protected function getClaroline_MessageBundle_Validator_Constraints_SendToNamesValidatorService()
    {
        $this->services['claroline.message_bundle.validator.constraints.send_to_names_validator'] = $instance = new \Claroline\MessageBundle\Validator\Constraints\SendToNamesValidator();

        $instance->setEntityManager($this->get('doctrine.orm.default_entity_manager'));

        return $instance;
    }

    /*
     * Gets the 'claroline.migration.doctrine_schema_tool' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ORM\Tools\SchemaTool A Doctrine\ORM\Tools\SchemaTool instance
     */
    protected function getClaroline_Migration_DoctrineSchemaToolService()
    {
        return $this->services['claroline.migration.doctrine_schema_tool'] = new \Doctrine\ORM\Tools\SchemaTool($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'claroline.migration.generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\MigrationBundle\Generator\Generator A Claroline\MigrationBundle\Generator\Generator instance
     */
    protected function getClaroline_Migration_GeneratorService()
    {
        return $this->services['claroline.migration.generator'] = new \Claroline\MigrationBundle\Generator\Generator($this->get('doctrine.orm.default_entity_manager'), $this->get('claroline.migration.doctrine_schema_tool'));
    }

    /*
     * Gets the 'claroline.migration.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\MigrationBundle\Manager\Manager A Claroline\MigrationBundle\Manager\Manager instance
     */
    protected function getClaroline_Migration_ManagerService()
    {
        return $this->services['claroline.migration.manager'] = new \Claroline\MigrationBundle\Manager\Manager($this->get('claroline.migration.generator'), $this->get('claroline.migration.writer'), $this->get('claroline.migration.migrator'));
    }

    /*
     * Gets the 'claroline.migration.migrator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\MigrationBundle\Migrator\Migrator A Claroline\MigrationBundle\Migrator\Migrator instance
     */
    protected function getClaroline_Migration_MigratorService()
    {
        return $this->services['claroline.migration.migrator'] = new \Claroline\MigrationBundle\Migrator\Migrator($this->get('doctrine.dbal.default_connection'));
    }

    /*
     * Gets the 'claroline.migration.writer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\MigrationBundle\Generator\Writer A Claroline\MigrationBundle\Generator\Writer instance
     */
    protected function getClaroline_Migration_WriterService()
    {
        return $this->services['claroline.migration.writer'] = new \Claroline\MigrationBundle\Generator\Writer($this->get('filesystem'), $this->get('twig'), $this->get('templating'));
    }

    /*
     * Gets the 'claroline.pager.pager_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Pager\PagerFactory A Claroline\CoreBundle\Pager\PagerFactory instance
     */
    protected function getClaroline_Pager_PagerFactoryService()
    {
        return $this->services['claroline.pager.pager_factory'] = new \Claroline\CoreBundle\Pager\PagerFactory();
    }

    /*
     * Gets the 'claroline.pdf_generator_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\PdfGeneratorBundle\DependencyInjection\Factory\KnpSnappyFactory A Claroline\PdfGeneratorBundle\DependencyInjection\Factory\KnpSnappyFactory instance
     */
    protected function getClaroline_PdfGeneratorFactoryService()
    {
        return $this->services['claroline.pdf_generator_factory'] = new \Claroline\PdfGeneratorBundle\DependencyInjection\Factory\KnpSnappyFactory($this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'claroline.persistence.object_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Persistence\ObjectManager A Claroline\CoreBundle\Persistence\ObjectManager instance
     */
    protected function getClaroline_Persistence_ObjectManagerService()
    {
        return $this->services['claroline.persistence.object_manager'] = new \Claroline\CoreBundle\Persistence\ObjectManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'claroline.plugin.config_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Installation\Plugin\ConfigurationChecker A Claroline\CoreBundle\Library\Installation\Plugin\ConfigurationChecker instance
     */
    protected function getClaroline_Plugin_ConfigCheckerService()
    {
        return $this->services['claroline.plugin.config_checker'] = new \Claroline\CoreBundle\Library\Installation\Plugin\ConfigurationChecker($this->get('claroline.symfony_yaml'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'claroline.plugin.installer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Installation\Plugin\Installer A Claroline\CoreBundle\Library\Installation\Plugin\Installer instance
     */
    protected function getClaroline_Plugin_InstallerService()
    {
        return $this->services['claroline.plugin.installer'] = new \Claroline\CoreBundle\Library\Installation\Plugin\Installer($this->get('claroline.plugin.validator'), $this->get('claroline.plugin.recorder'), $this->get('claroline.installation.manager'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.plugin_manager'), $this->get('translator.default'));
    }

    /*
     * Gets the 'claroline.plugin.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Installation\Plugin\Loader A Claroline\CoreBundle\Library\Installation\Plugin\Loader instance
     */
    protected function getClaroline_Plugin_LoaderService()
    {
        return $this->services['claroline.plugin.loader'] = new \Claroline\CoreBundle\Library\Installation\Plugin\Loader();
    }

    /*
     * Gets the 'claroline.plugin.recorder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Installation\Plugin\Recorder A Claroline\CoreBundle\Library\Installation\Plugin\Recorder instance
     */
    protected function getClaroline_Plugin_RecorderService()
    {
        return $this->services['claroline.plugin.recorder'] = new \Claroline\CoreBundle\Library\Installation\Plugin\Recorder($this->get('claroline.plugin.recorder_database_writer'));
    }

    /*
     * Gets the 'claroline.plugin.recorder_database_writer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Installation\Plugin\DatabaseWriter A Claroline\CoreBundle\Library\Installation\Plugin\DatabaseWriter instance
     */
    protected function getClaroline_Plugin_RecorderDatabaseWriterService()
    {
        return $this->services['claroline.plugin.recorder_database_writer'] = new \Claroline\CoreBundle\Library\Installation\Plugin\DatabaseWriter($this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.icon_manager'), $this->get('filesystem'), $this->get('kernel'), $this->get('claroline.manager.mask_manager'), $this->get('claroline.manager.tool_manager'), $this->get('claroline.manager.tool_mask_decoder_manager'));
    }

    /*
     * Gets the 'claroline.plugin.routing_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Installation\Plugin\RoutingChecker A Claroline\CoreBundle\Library\Installation\Plugin\RoutingChecker instance
     */
    protected function getClaroline_Plugin_RoutingCheckerService()
    {
        return $this->services['claroline.plugin.routing_checker'] = new \Claroline\CoreBundle\Library\Installation\Plugin\RoutingChecker($this->get('router'), $this->get('claroline.symfony_yaml'));
    }

    /*
     * Gets the 'claroline.plugin.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Installation\Plugin\Validator A Claroline\CoreBundle\Library\Installation\Plugin\Validator instance
     */
    protected function getClaroline_Plugin_ValidatorService()
    {
        return $this->services['claroline.plugin.validator'] = new \Claroline\CoreBundle\Library\Installation\Plugin\Validator(array('routing' => $this->get('claroline.plugin.routing_checker'), 'config' => $this->get('claroline.plugin.config_checker')));
    }

    /*
     * Gets the 'claroline.repository.log' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Repository\Log\LogRepository A Claroline\CoreBundle\Repository\Log\LogRepository instance
     */
    protected function getClaroline_Repository_LogService()
    {
        return $this->services['claroline.repository.log'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Claroline\\CoreBundle\\Entity\\Log\\Log');
    }

    /*
     * Gets the 'claroline.repository.portal' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Repository\PortalRepository A Claroline\CoreBundle\Repository\PortalRepository instance
     */
    protected function getClaroline_Repository_PortalService()
    {
        return $this->services['claroline.repository.portal'] = new \Claroline\CoreBundle\Repository\PortalRepository($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'claroline.repository.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Repository\UserRepository A Claroline\CoreBundle\Repository\UserRepository instance
     */
    protected function getClaroline_Repository_UserService()
    {
        return $this->services['claroline.repository.user'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Claroline\\CoreBundle\\Entity\\User');
    }

    /*
     * Gets the 'claroline.result.log_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ResultBundle\Listener\LogListener A Claroline\ResultBundle\Listener\LogListener instance
     */
    protected function getClaroline_Result_LogListenerService()
    {
        return $this->services['claroline.result.log_listener'] = new \Claroline\ResultBundle\Listener\LogListener($this->get('templating'));
    }

    /*
     * Gets the 'claroline.result.result_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ResultBundle\Listener\ResultListener A Claroline\ResultBundle\Listener\ResultListener instance
     */
    protected function getClaroline_Result_ResultListenerService()
    {
        return $this->services['claroline.result.result_listener'] = new \Claroline\ResultBundle\Listener\ResultListener($this->get('request_stack'), $this->get('http_kernel'), $this->get('claroline.result.result_manager'), $this->get('claroline.form_handler'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'claroline.result.result_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ResultBundle\Manager\ResultManager A Claroline\ResultBundle\Manager\ResultManager instance
     */
    protected function getClaroline_Result_ResultManagerService()
    {
        return $this->services['claroline.result.result_manager'] = new \Claroline\ResultBundle\Manager\ResultManager($this->get('claroline.persistence.object_manager'), $this->get('templating'), $this->get('claroline.utilities.misc'), $this->get('event_dispatcher'));
    }

    /*
     * Gets the 'claroline.rss_reader.atom_reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\RssReaderBundle\Library\Reader\AtomReader A Claroline\RssReaderBundle\Library\Reader\AtomReader instance
     */
    protected function getClaroline_RssReader_AtomReaderService()
    {
        return $this->services['claroline.rss_reader.atom_reader'] = new \Claroline\RssReaderBundle\Library\Reader\AtomReader();
    }

    /*
     * Gets the 'claroline.rss_reader.provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\RssReaderBundle\Library\ReaderProvider A Claroline\RssReaderBundle\Library\ReaderProvider instance
     */
    protected function getClaroline_RssReader_ProviderService()
    {
        return $this->services['claroline.rss_reader.provider'] = new \Claroline\RssReaderBundle\Library\ReaderProvider(array(0 => $this->get('claroline.rss_reader.rss_reader'), 1 => $this->get('claroline.rss_reader.atom_reader')));
    }

    /*
     * Gets the 'claroline.rss_reader.rss_reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\RssReaderBundle\Library\Reader\RssReader A Claroline\RssReaderBundle\Library\Reader\RssReader instance
     */
    protected function getClaroline_RssReader_RssReaderService()
    {
        return $this->services['claroline.rss_reader.rss_reader'] = new \Claroline\RssReaderBundle\Library\Reader\RssReader();
    }

    /*
     * Gets the 'claroline.rss_reader_bundle.listener.rss_reader_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\RssReaderBundle\Listener\RssReaderListener A Claroline\RssReaderBundle\Listener\RssReaderListener instance
     */
    protected function getClaroline_RssReaderBundle_Listener_RssReaderListenerService()
    {
        return $this->services['claroline.rss_reader_bundle.listener.rss_reader_listener'] = new \Claroline\RssReaderBundle\Listener\RssReaderListener($this->get('claroline.manager.rss_manager'), $this->get('form.factory'), $this->get('templating'), $this->get('claroline.rss_reader.provider'), $this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.rule.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Rule\Validator A Claroline\CoreBundle\Rule\Validator instance
     */
    protected function getClaroline_Rule_ValidatorService()
    {
        $this->services['claroline.rule.validator'] = $instance = new \Claroline\CoreBundle\Rule\Validator($this->get('claroline.repository.log'));

        $instance->addConstraint($this->get('claroline.core_bundle.rule.constraints.receiver_constraint'));
        $instance->addConstraint($this->get('claroline.core_bundle.rule.constraints.rule_active_date_constraint'));
        $instance->addConstraint($this->get('claroline.core_bundle.rule.constraints.occurence_constraint'));
        $instance->addConstraint($this->get('claroline.core_bundle.rule.constraints.doer_constraint'));
        $instance->addConstraint($this->get('claroline.core_bundle.rule.constraints.result_constraint'));
        $instance->addConstraint($this->get('claroline.core_bundle.rule.constraints.action_constraint'));
        $instance->addConstraint($this->get('claroline.core_bundle.rule.constraints.resource_constraint'));
        $instance->addConstraint($this->get('icap.badge_bundle.rule.constraints.badge_constraint'));

        return $instance;
    }

    /*
     * Gets the 'claroline.scorm.export_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ScormBundle\Manager\ExportManager A Claroline\ScormBundle\Manager\ExportManager instance
     */
    protected function getClaroline_Scorm_ExportManagerService()
    {
        return $this->services['claroline.scorm.export_manager'] = new \Claroline\ScormBundle\Manager\ExportManager(($this->targetDirs[2].'/config/tmp_files'), $this->targetDirs[2], ($this->targetDirs[2].'/../files'), $this->get('router'), $this->get('fos_js_routing.controller'), $this->get('claroline.event.event_dispatcher'), $this->get('claroline.utilities.misc'), $this->get('claroline.manager.resource_manager'), $this->get('claroline.extension.webpack'));
    }

    /*
     * Gets the 'claroline.scorm.rich_text_exporter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ScormBundle\Library\Export\RichTextExporter A Claroline\ScormBundle\Library\Export\RichTextExporter instance
     */
    protected function getClaroline_Scorm_RichTextExporterService()
    {
        return $this->services['claroline.scorm.rich_text_exporter'] = new \Claroline\ScormBundle\Library\Export\RichTextExporter($this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.resource_manager'));
    }

    /*
     * Gets the 'claroline.scorm_bundle.listener.scorm12_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ScormBundle\Listener\Scorm12Listener A Claroline\ScormBundle\Listener\Scorm12Listener instance
     */
    protected function getClaroline_ScormBundle_Listener_Scorm12ListenerService()
    {
        return $this->services['claroline.scorm_bundle.listener.scorm12_listener'] = new \Claroline\ScormBundle\Listener\Scorm12Listener($this, $this->get('form.factory'), $this->get('http_kernel'), $this->get('claroline.persistence.object_manager'), $this->get('request_stack'), $this->get('router'), $this->get('templating'), $this->get('translator.default'));
    }

    /*
     * Gets the 'claroline.scorm_bundle.listener.scorm2004_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ScormBundle\Listener\Scorm2004Listener A Claroline\ScormBundle\Listener\Scorm2004Listener instance
     */
    protected function getClaroline_ScormBundle_Listener_Scorm2004ListenerService()
    {
        return $this->services['claroline.scorm_bundle.listener.scorm2004_listener'] = new \Claroline\ScormBundle\Listener\Scorm2004Listener($this, $this->get('form.factory'), $this->get('http_kernel'), $this->get('claroline.persistence.object_manager'), $this->get('request_stack'), $this->get('router'), $this->get('templating'), $this->get('translator.default'));
    }

    /*
     * Gets the 'claroline.security.token_updater' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Security\TokenUpdater A Claroline\CoreBundle\Library\Security\TokenUpdater instance
     */
    protected function getClaroline_Security_TokenUpdaterService()
    {
        return $this->services['claroline.security.token_updater'] = new \Claroline\CoreBundle\Library\Security\TokenUpdater($this->get('security.token_storage'), $this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'claroline.security.utilities' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Security\Utilities A Claroline\CoreBundle\Library\Security\Utilities instance
     */
    protected function getClaroline_Security_UtilitiesService()
    {
        return $this->services['claroline.security.utilities'] = new \Claroline\CoreBundle\Library\Security\Utilities($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'claroline.session.database_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Session\DatabaseSessionValidator A Claroline\CoreBundle\Library\Session\DatabaseSessionValidator instance
     */
    protected function getClaroline_Session_DatabaseValidatorService()
    {
        return $this->services['claroline.session.database_validator'] = new \Claroline\CoreBundle\Library\Session\DatabaseSessionValidator();
    }

    /*
     * Gets the 'claroline.session.handler_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Session\SessionHandlerFactory A Claroline\CoreBundle\Library\Session\SessionHandlerFactory instance
     */
    protected function getClaroline_Session_HandlerFactoryService()
    {
        return $this->services['claroline.session.handler_factory'] = new \Claroline\CoreBundle\Library\Session\SessionHandlerFactory($this->get('claroline.config.platform_config_handler'), ($this->targetDirs[2].'/sessions'), 'root', 'admin339', 'claroline');
    }

    /*
     * Gets the 'claroline.session.storage_options' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \stdClass A stdClass instance
     */
    protected function getClaroline_Session_StorageOptionsService()
    {
        return $this->services['claroline.session.storage_options'] = $this->get('claroline.session.storage_options_factory')->getOptions();
    }

    /*
     * Gets the 'claroline.session.storage_options_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Session\SessionStorageOptionsFactory A Claroline\CoreBundle\Library\Session\SessionStorageOptionsFactory instance
     */
    protected function getClaroline_Session_StorageOptionsFactoryService()
    {
        return $this->services['claroline.session.storage_options_factory'] = new \Claroline\CoreBundle\Library\Session\SessionStorageOptionsFactory($this->get('claroline.config.platform_config_handler'), array('gc_probability' => 1));
    }

    /*
     * Gets the 'claroline.survey_bundle.listener.survey_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\SurveyBundle\Listener\SurveyListener A Claroline\SurveyBundle\Listener\SurveyListener instance
     */
    protected function getClaroline_SurveyBundle_Listener_SurveyListenerService()
    {
        return $this->services['claroline.survey_bundle.listener.survey_listener'] = new \Claroline\SurveyBundle\Listener\SurveyListener($this->get('form.factory'), $this->get('http_kernel'), $this->get('claroline.persistence.object_manager'), $this->get('request_stack'), $this->get('router'), $this->get('claroline.manager.survey_manager'), $this->get('templating'));
    }

    /*
     * Gets the 'claroline.symfony_fixture_loader' service.
     *
     * @return \Symfony\Bridge\Doctrine\DataFixtures\ContainerAwareLoader A Symfony\Bridge\Doctrine\DataFixtures\ContainerAwareLoader instance
     */
    protected function getClaroline_SymfonyFixtureLoaderService()
    {
        return new \Symfony\Bridge\Doctrine\DataFixtures\ContainerAwareLoader($this);
    }

    /*
     * Gets the 'claroline.tag_bundle.listener.tag_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\TagBundle\Listener\TagListener A Claroline\TagBundle\Listener\TagListener instance
     */
    protected function getClaroline_TagBundle_Listener_TagListenerService()
    {
        return $this->services['claroline.tag_bundle.listener.tag_listener'] = new \Claroline\TagBundle\Listener\TagListener($this->get('http_kernel'), $this->get('request_stack'), $this->get('router'), $this->get('claroline.manager.tag_manager'), $this->get('translator.default'));
    }

    /*
     * Gets the 'claroline.tag_bundle.listener.tag_tool_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\TagBundle\Listener\TagToolListener A Claroline\TagBundle\Listener\TagToolListener instance
     */
    protected function getClaroline_TagBundle_Listener_TagToolListenerService()
    {
        return $this->services['claroline.tag_bundle.listener.tag_tool_listener'] = new \Claroline\TagBundle\Listener\TagToolListener($this->get('http_kernel'), $this->get('request_stack'));
    }

    /*
     * Gets the 'claroline.tag_bundle.listener.tag_widget_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\TagBundle\Listener\TagWidgetListener A Claroline\TagBundle\Listener\TagWidgetListener instance
     */
    protected function getClaroline_TagBundle_Listener_TagWidgetListenerService()
    {
        return $this->services['claroline.tag_bundle.listener.tag_widget_listener'] = new \Claroline\TagBundle\Listener\TagWidgetListener($this->get('request_stack'), $this->get('http_kernel'));
    }

    /*
     * Gets the 'claroline.team_bundle.listener.team_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\TeamBundle\Listener\TeamListener A Claroline\TeamBundle\Listener\TeamListener instance
     */
    protected function getClaroline_TeamBundle_Listener_TeamListenerService()
    {
        return $this->services['claroline.team_bundle.listener.team_listener'] = new \Claroline\TeamBundle\Listener\TeamListener($this->get('http_kernel'), $this->get('request_stack'));
    }

    /*
     * Gets the 'claroline.temporary_access_resource_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\DropzoneBundle\Manager\TemporaryAccessResourceManager A Icap\DropzoneBundle\Manager\TemporaryAccessResourceManager instance
     */
    protected function getClaroline_TemporaryAccessResourceManagerService()
    {
        return $this->services['claroline.temporary_access_resource_manager'] = new \Icap\DropzoneBundle\Manager\TemporaryAccessResourceManager($this);
    }

    /*
     * Gets the 'claroline.text_player_bundle.listener.text_player_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\TextPlayerBundle\Listener\TextPlayerListener A Claroline\TextPlayerBundle\Listener\TextPlayerListener instance
     */
    protected function getClaroline_TextPlayerBundle_Listener_TextPlayerListenerService()
    {
        return $this->services['claroline.text_player_bundle.listener.text_player_listener'] = new \Claroline\TextPlayerBundle\Listener\TextPlayerListener($this);
    }

    /*
     * Gets the 'claroline.tool.home_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\HomeImporter A Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\HomeImporter instance
     */
    protected function getClaroline_Tool_HomeImporterService()
    {
        return $this->services['claroline.tool.home_importer'] = new \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\HomeImporter($this->get('claroline.persistence.object_manager'), $this);
    }

    /*
     * Gets the 'claroline.tool.resource_manager_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\ResourceManagerImporter A Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\ResourceManagerImporter instance
     */
    protected function getClaroline_Tool_ResourceManagerImporterService()
    {
        return $this->services['claroline.tool.resource_manager_importer'] = new \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\ResourceManagerImporter($this->get('claroline.manager.rights_manager'), $this->get('claroline.manager.mask_manager'), $this->get('claroline.manager.resource_manager'), $this->get('claroline.manager.role_manager'), $this->get('claroline.persistence.object_manager'), $this);
    }

    /*
     * Gets the 'claroline.tool.resources.activity_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\Resources\ActivityImporter A Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\Resources\ActivityImporter instance
     */
    protected function getClaroline_Tool_Resources_ActivityImporterService()
    {
        return $this->services['claroline.tool.resources.activity_importer'] = new \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\Resources\ActivityImporter($this);
    }

    /*
     * Gets the 'claroline.tool.resources.file_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\Resources\FileImporter A Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\Resources\FileImporter instance
     */
    protected function getClaroline_Tool_Resources_FileImporterService()
    {
        return $this->services['claroline.tool.resources.file_importer'] = new \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\Resources\FileImporter($this);
    }

    /*
     * Gets the 'claroline.tool.resources.scorm12_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ScormBundle\Transfert\Scorm12Importer A Claroline\ScormBundle\Transfert\Scorm12Importer instance
     */
    protected function getClaroline_Tool_Resources_Scorm12ImporterService()
    {
        return $this->services['claroline.tool.resources.scorm12_importer'] = new \Claroline\ScormBundle\Transfert\Scorm12Importer($this, $this);
    }

    /*
     * Gets the 'claroline.tool.resources.scorm2004_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ScormBundle\Transfert\Scorm2004Importer A Claroline\ScormBundle\Transfert\Scorm2004Importer instance
     */
    protected function getClaroline_Tool_Resources_Scorm2004ImporterService()
    {
        return $this->services['claroline.tool.resources.scorm2004_importer'] = new \Claroline\ScormBundle\Transfert\Scorm2004Importer($this, $this);
    }

    /*
     * Gets the 'claroline.tool.resources.text_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\Resources\TextImporter A Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\Resources\TextImporter instance
     */
    protected function getClaroline_Tool_Resources_TextImporterService()
    {
        return $this->services['claroline.tool.resources.text_importer'] = new \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\Resources\TextImporter($this);
    }

    /*
     * Gets the 'claroline.tool.resources.web_resource' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\WebResourceBundle\Transfer\WebResourceImporter A Claroline\WebResourceBundle\Transfer\WebResourceImporter instance
     */
    protected function getClaroline_Tool_Resources_WebResourceService()
    {
        return $this->services['claroline.tool.resources.web_resource'] = new \Claroline\WebResourceBundle\Transfer\WebResourceImporter($this);
    }

    /*
     * Gets the 'claroline.transformer.resource_picker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\DataTransformer\ResourcePickerTransformer A Claroline\CoreBundle\Form\DataTransformer\ResourcePickerTransformer instance
     */
    protected function getClaroline_Transformer_ResourcePickerService()
    {
        return $this->services['claroline.transformer.resource_picker'] = new \Claroline\CoreBundle\Form\DataTransformer\ResourcePickerTransformer($this->get('claroline.manager.resource_manager'));
    }

    /*
     * Gets the 'claroline.transformer.user_picker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Form\DataTransformer\UserPickerTransfromer A Claroline\CoreBundle\Form\DataTransformer\UserPickerTransfromer instance
     */
    protected function getClaroline_Transformer_UserPickerService()
    {
        return $this->services['claroline.transformer.user_picker'] = new \Claroline\CoreBundle\Form\DataTransformer\UserPickerTransfromer($this->get('claroline.manager.user_manager'));
    }

    /*
     * Gets the 'claroline.twig.home_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Twig\HomeExtension A Claroline\CoreBundle\Twig\HomeExtension instance
     */
    protected function getClaroline_Twig_HomeExtensionService()
    {
        return $this->services['claroline.twig.home_extension'] = new \Claroline\CoreBundle\Twig\HomeExtension($this->get('kernel'), $this);
    }

    /*
     * Gets the 'claroline.utilities.lipsum_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Utilities\LipsumGenerator A Claroline\CoreBundle\Library\Utilities\LipsumGenerator instance
     */
    protected function getClaroline_Utilities_LipsumGeneratorService()
    {
        return $this->services['claroline.utilities.lipsum_generator'] = new \Claroline\CoreBundle\Library\Utilities\LipsumGenerator();
    }

    /*
     * Gets the 'claroline.utilities.mime_type_guesser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Utilities\MimeTypeGuesser A Claroline\CoreBundle\Library\Utilities\MimeTypeGuesser instance
     */
    protected function getClaroline_Utilities_MimeTypeGuesserService()
    {
        return $this->services['claroline.utilities.mime_type_guesser'] = new \Claroline\CoreBundle\Library\Utilities\MimeTypeGuesser();
    }

    /*
     * Gets the 'claroline.utilities.misc' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Utilities\ClaroUtilities A Claroline\CoreBundle\Library\Utilities\ClaroUtilities instance
     */
    protected function getClaroline_Utilities_MiscService()
    {
        return $this->services['claroline.utilities.misc'] = new \Claroline\CoreBundle\Library\Utilities\ClaroUtilities($this);
    }

    /*
     * Gets the 'claroline.utilities.thumbnail_creator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Utilities\ThumbnailCreator A Claroline\CoreBundle\Library\Utilities\ThumbnailCreator instance
     */
    protected function getClaroline_Utilities_ThumbnailCreatorService()
    {
        return $this->services['claroline.utilities.thumbnail_creator'] = new \Claroline\CoreBundle\Library\Utilities\ThumbnailCreator($this->targetDirs[2], ($this->targetDirs[2].'/../web/uploads/thumbnails'), $this->get('claroline.utilities.misc'));
    }

    /*
     * Gets the 'claroline.video_player_bundle.twig.video_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\VideoPlayerBundle\Twig\VideoExtension A Claroline\VideoPlayerBundle\Twig\VideoExtension instance
     */
    protected function getClaroline_VideoPlayerBundle_Twig_VideoExtensionService()
    {
        return $this->services['claroline.video_player_bundle.twig.video_extension'] = new \Claroline\VideoPlayerBundle\Twig\VideoExtension($this->get('claroline.manager.video_player_manager'));
    }

    /*
     * Gets the 'claroline.view_handler.exporter.class' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\View\ExporterViewHandler A Claroline\CoreBundle\Library\View\ExporterViewHandler instance
     */
    protected function getClaroline_ViewHandler_Exporter_ClassService()
    {
        return $this->services['claroline.view_handler.exporter.class'] = new \Claroline\CoreBundle\Library\View\ExporterViewHandler();
    }

    /*
     * Gets the 'claroline.widget.text_importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\Widgets\TextImporter A Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\Widgets\TextImporter instance
     */
    protected function getClaroline_Widget_TextImporterService()
    {
        return $this->services['claroline.widget.text_importer'] = new \Claroline\CoreBundle\Library\Transfert\ConfigurationBuilders\Tools\Widgets\TextImporter($this->get('claroline.persistence.object_manager'), $this);
    }

    /*
     * Gets the 'claroline_form_deck' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\FlashCardBundle\Form\DeckType A Claroline\FlashCardBundle\Form\DeckType instance
     */
    protected function getClarolineFormDeckService()
    {
        return $this->services['claroline_form_deck'] = new \Claroline\FlashCardBundle\Form\DeckType();
    }

    /*
     * Gets the 'claroline_form_result' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\ResultBundle\Form\ResultType A Claroline\ResultBundle\Form\ResultType instance
     */
    protected function getClarolineFormResultService()
    {
        return $this->services['claroline_form_result'] = new \Claroline\ResultBundle\Form\ResultType();
    }

    /*
     * Gets the 'debug.debug_handlers_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener A Symfony\Component\HttpKernel\EventListener\DebugHandlersListener instance
     */
    protected function getDebug_DebugHandlersListenerService()
    {
        return $this->services['debug.debug_handlers_listener'] = new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, NULL, NULL, NULL, true, NULL);
    }

    /*
     * Gets the 'debug.stopwatch' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Stopwatch\Stopwatch A Symfony\Component\Stopwatch\Stopwatch instance
     */
    protected function getDebug_StopwatchService()
    {
        return $this->services['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch();
    }

    /*
     * Gets the 'doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Registry A Doctrine\Bundle\DoctrineBundle\Registry instance
     */
    protected function getDoctrineService()
    {
        return $this->services['doctrine'] = new \Doctrine\Bundle\DoctrineBundle\Registry($this, array('default' => 'doctrine.dbal.default_connection'), array('default' => 'doctrine.orm.default_entity_manager'), 'default', 'default');
    }

    /*
     * Gets the 'doctrine.dbal.connection_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ConnectionFactory A Doctrine\Bundle\DoctrineBundle\ConnectionFactory instance
     */
    protected function getDoctrine_Dbal_ConnectionFactoryService()
    {
        return $this->services['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory(array());
    }

    /*
     * Gets the 'doctrine.dbal.default_connection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\DBAL\Connection A Doctrine\DBAL\Connection instance
     */
    protected function getDoctrine_Dbal_DefaultConnectionService()
    {
        $a = $this->get('annotation_reader');

        $b = new \Gedmo\Sluggable\SluggableListener();
        $b->setAnnotationReader($a);

        $c = new \Claroline\CoreBundle\Listener\TimestampableListener();
        $c->setAnnotationReader($a);

        $d = new \Gedmo\Tree\TreeListener();
        $d->setAnnotationReader($a);

        $e = new \Gedmo\SoftDeleteable\SoftDeleteableListener();
        $e->setAnnotationReader($a);

        $f = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
        $f->addEventSubscriber($b);
        $f->addEventSubscriber($this->get('stof_doctrine_extensions.listener.blameable'));
        $f->addEventSubscriber($c);
        $f->addEventSubscriber($d);
        $f->addEventSubscriber($e);
        $f->addEventSubscriber($this->get('stof_doctrine_extensions.listener.translatable'));
        $f->addEventListener(array(0 => 'onFlush'), $this->get('claroline.doctrine.debug'));
        $f->addEventListener(array(0 => 'preRemove'), $this->get('icap.listener.document_listener'));
        $f->addEventListener(array(0 => 'preRemove'), $this->get('innova.listener.document_listener'));
        $f->addEventListener(array(0 => 'loadClassMetadata'), $this->get('doctrine.orm.default_listeners.attach_entity_listeners'));
        $f->addEventListener(array(0 => 'prePersist', 1 => 'preUpdate'), 'claroline.core_bundle.listener.user_password_encoder');

        return $this->services['doctrine.dbal.default_connection'] = $this->get('doctrine.dbal.connection_factory')->createConnection(array('driver' => 'pdo_mysql', 'host' => 'localhost', 'dbname' => 'claroline', 'user' => 'root', 'password' => 'admin339', 'charset' => 'UTF8', 'port' => NULL, 'driverOptions' => array(), 'defaultTableOptions' => array()), new \Doctrine\DBAL\Configuration(), $f, array());
    }

    /*
     * Gets the 'doctrine.orm.default_entity_listener_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ORM\Mapping\DefaultEntityListenerResolver A Doctrine\ORM\Mapping\DefaultEntityListenerResolver instance
     */
    protected function getDoctrine_Orm_DefaultEntityListenerResolverService()
    {
        return $this->services['doctrine.orm.default_entity_listener_resolver'] = new \Doctrine\ORM\Mapping\DefaultEntityListenerResolver();
    }

    /*
     * Gets the 'doctrine.orm.default_entity_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EntityManager591e162dda016_546a8d27f194334ee012bfe64f629947b07e4919\__CG__\Doctrine\ORM\EntityManager A EntityManager591e162dda016_546a8d27f194334ee012bfe64f629947b07e4919\__CG__\Doctrine\ORM\EntityManager instance
     */
    protected function getDoctrine_Orm_DefaultEntityManagerService()
    {
        require_once (__DIR__.'/jms_diextra/doctrine/EntityManager_591e162dda016.php');

        return $this->services['doctrine.orm.default_entity_manager'] = new \EntityManager591e162dda016_546a8d27f194334ee012bfe64f629947b07e4919\__CG__\Doctrine\ORM\EntityManager($this->get('doctrine.orm.default_entity_manager.delegate'), $this);
    }

    /*
     * Gets the 'doctrine.orm.default_listeners.attach_entity_listeners' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ORM\Tools\AttachEntityListenersListener A Doctrine\ORM\Tools\AttachEntityListenersListener instance
     */
    protected function getDoctrine_Orm_DefaultListeners_AttachEntityListenersService()
    {
        return $this->services['doctrine.orm.default_listeners.attach_entity_listeners'] = new \Doctrine\ORM\Tools\AttachEntityListenersListener();
    }

    /*
     * Gets the 'doctrine.orm.default_manager_configurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator A Doctrine\Bundle\DoctrineBundle\ManagerConfigurator instance
     */
    protected function getDoctrine_Orm_DefaultManagerConfiguratorService()
    {
        return $this->services['doctrine.orm.default_manager_configurator'] = new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator(array(0 => 'softdeleteable'), array());
    }

    /*
     * Gets the 'doctrine.orm.validator.unique' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator A Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator instance
     */
    protected function getDoctrine_Orm_Validator_UniqueService()
    {
        return $this->services['doctrine.orm.validator.unique'] = new \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator($this->get('doctrine'));
    }

    /*
     * Gets the 'doctrine.orm.validator_initializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer A Symfony\Bridge\Doctrine\Validator\DoctrineInitializer instance
     */
    protected function getDoctrine_Orm_ValidatorInitializerService()
    {
        return $this->services['doctrine.orm.validator_initializer'] = new \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer($this->get('doctrine'));
    }

    /*
     * Gets the 'doctrine_cache.providers.doctrine.orm.default_metadata_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache A Doctrine\Common\Cache\ArrayCache instance
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_metadata_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf2orm_default_21bb68d20107c1454c2cc305f5489bf6196899cfcced8f43d4e937a4e42bc5ef');

        return $instance;
    }

    /*
     * Gets the 'doctrine_cache.providers.doctrine.orm.default_query_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache A Doctrine\Common\Cache\ArrayCache instance
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_query_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf2orm_default_21bb68d20107c1454c2cc305f5489bf6196899cfcced8f43d4e937a4e42bc5ef');

        return $instance;
    }

    /*
     * Gets the 'doctrine_cache.providers.doctrine.orm.default_result_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache A Doctrine\Common\Cache\ArrayCache instance
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_result_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf2orm_default_21bb68d20107c1454c2cc305f5489bf6196899cfcced8f43d4e937a4e42bc5ef');

        return $instance;
    }

    /*
     * Gets the 'event_dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher A Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher instance
     */
    protected function getEventDispatcherService()
    {
        $this->services['event_dispatcher'] = $instance = new \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher($this);

        $instance->addListenerService('create_notification_item_workspace-role-change_right', array(0 => 'claroline.listener.core.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_workspace-role-subscribe_user', array(0 => 'claroline.listener.core.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_workspace-role-subscribe_group', array(0 => 'claroline.listener.core.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_role-subscribe_user', array(0 => 'claroline.listener.core.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_role-subscribe_group', array(0 => 'claroline.listener.core.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-create', array(0 => 'claroline.listener.core.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-publish', array(0 => 'claroline.listener.core.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_role-subscribe-queue', array(0 => 'claroline.listener.core.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-text-update', array(0 => 'claroline.listener.core.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('play_file_image', array(0 => 'claroline.listener.image_player_listener', 1 => 'onOpenImage'), 0);
        $instance->addListenerService('export_scorm_file_image', array(0 => 'claroline.listener.image_player_listener', 1 => 'onExportScorm'), 0);
        $instance->addListenerService('create_form_claroline_forum', array(0 => 'claroline.listener.forum_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_claroline_forum', array(0 => 'claroline.listener.forum_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('open_claroline_forum', array(0 => 'claroline.listener.forum_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('copy_claroline_forum', array(0 => 'claroline.listener.forum_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('delete_claroline_forum', array(0 => 'claroline.listener.forum_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('plugin_options_clarolineforum', array(0 => 'claroline.listener.forum_listener', 1 => 'onAdministrate'), 0);
        $instance->addListenerService('resource_claroline_forum_to_template', array(0 => 'claroline.listener.forum_listener', 1 => 'onExportTemplate'), 0);
        $instance->addListenerService('resource_claroline_forum_from_template', array(0 => 'claroline.listener.forum_listener', 1 => 'onImportTemplate'), 0);
        $instance->addListenerService('delete_user', array(0 => 'claroline.listener.forum_listener', 1 => 'onDeleteUser'), 0);
        $instance->addListenerService('resource_created_claroline_forum', array(0 => 'claroline.listener.forum_listener', 1 => 'onResourceCreated'), 0);
        $instance->addListenerService('play_file_application_pdf', array(0 => 'claroline.listener.pdf_player_listener', 1 => 'onOpenPdf'), 0);
        $instance->addListenerService('export_scorm_file_application_pdf', array(0 => 'claroline.listener.pdf_player_listener', 1 => 'onExportScorm'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-dropzone_configure', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-criterion_create', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-criterion_update', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-criterion_delete', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-drop_start', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-drop_end', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-document_create', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-document_delete', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-document_open', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-correction_start', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-correction_end', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-correction_update', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-correction_delete', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-correction_validation_change', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-drop_evaluate', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-drop_report', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-correction_report', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-drop_grade_available', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_collecticiel-dropzone_manual_state_changed', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_collecticiel-dropzone_add_comment', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_collecticiel-dropzone_add_document', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_collecticiel-dropzone_validate_document', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_dropzone-dropzone_manual_request_sent', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-innova_collecticiel-dropzone_return_receipt', array(0 => 'innova.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_notification_item_resource-innova_dropzone-drop_report', array(0 => 'innova.listener.dropzone.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-innova_dropzone-correction_report', array(0 => 'innova.listener.dropzone.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-innova_dropzone-drop_grade_available', array(0 => 'innova.listener.dropzone.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-innova_collecticiel-dropzone_manual_state_changed', array(0 => 'innova.listener.dropzone.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-innova_collecticiel-dropzone_add_comment', array(0 => 'innova.listener.dropzone.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-innova_collecticiel-dropzone_add_document', array(0 => 'innova.listener.dropzone.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-innova_collecticiel-dropzone_validate_document', array(0 => 'innova.listener.dropzone.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-innova_dropzone-dropzone_manual_request_sent', array(0 => 'innova.listener.dropzone.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-innova_dropzone-drop_end', array(0 => 'innova.listener.dropzone.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-innova_collecticiel-dropzone_return_receipt', array(0 => 'innova.listener.dropzone.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_portfolio-remove_guide', array(0 => 'icap.listener.portfolio.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_portfolio-add_guide', array(0 => 'icap.listener.portfolio.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_portfolio-add_viewer', array(0 => 'icap.listener.portfolio.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_log_details_portfolio-remove_guide', array(0 => 'icap.listener.portfolio.log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_portfolio-add_guide', array(0 => 'icap.listener.portfolio.log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_portfolio-add_viewer', array(0 => 'icap.listener.portfolio.log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_list_item_portfolio-remove_guide', array(0 => 'icap.listener.portfolio.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_portfolio-add_guide', array(0 => 'icap.listener.portfolio.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_portfolio-add_viewer', array(0 => 'icap.listener.portfolio.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_portfolio-view', array(0 => 'icap.listener.portfolio.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_notification_item_badge-awarding', array(0 => 'icap_badge.listener.core.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_form_icap_blog', array(0 => 'icap.listener.blog_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_icap_blog', array(0 => 'icap.listener.blog_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('open_icap_blog', array(0 => 'icap.listener.blog_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('delete_icap_blog', array(0 => 'icap.listener.blog_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('copy_icap_blog', array(0 => 'icap.listener.blog_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('configure_blog_icap_blog', array(0 => 'icap.listener.blog_listener', 1 => 'onConfigure'), 0);
        $instance->addListenerService('create_log_details_resource-icap_blog-configure', array(0 => 'icap.listener.blog.log_listener', 1 => 'onPostCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_blog-configure_banner', array(0 => 'icap.listener.blog.log_listener', 1 => 'onPostCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_blog-post_create', array(0 => 'icap.listener.blog.log_listener', 1 => 'onPostCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_blog-post_read', array(0 => 'icap.listener.blog.log_listener', 1 => 'onPostCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_blog-post_update', array(0 => 'icap.listener.blog.log_listener', 1 => 'onPostCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_blog-post_delete', array(0 => 'icap.listener.blog.log_listener', 1 => 'onPostCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_blog-post_publish', array(0 => 'icap.listener.blog.log_listener', 1 => 'onPostCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_blog-comment_create', array(0 => 'icap.listener.blog.log_listener', 1 => 'onPostCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_blog-comment_delete', array(0 => 'icap.listener.blog.log_listener', 1 => 'onPostCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_blog-comment_update', array(0 => 'icap.listener.blog.log_listener', 1 => 'onPostCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_blog-comment_publish', array(0 => 'icap.listener.blog.log_listener', 1 => 'onPostCreateLogDetails'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_blog-configure', array(0 => 'icap.listener.blog.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_blog-configure_banner', array(0 => 'icap.listener.blog.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_blog-post_create', array(0 => 'icap.listener.blog.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_blog-post_read', array(0 => 'icap.listener.blog.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_blog-post_update', array(0 => 'icap.listener.blog.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_blog-post_publish', array(0 => 'icap.listener.blog.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_blog-post_delete', array(0 => 'icap.listener.blog.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_blog-comment_create', array(0 => 'icap.listener.blog.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_blog-comment_delete', array(0 => 'icap.listener.blog.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_blog-comment_update', array(0 => 'icap.listener.blog.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_blog-comment_publish', array(0 => 'icap.listener.blog.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-dropzone_configure', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-criterion_create', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-criterion_update', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-criterion_delete', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-drop_start', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-drop_end', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-document_create', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-document_delete', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-document_open', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-correction_start', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-correction_end', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-correction_update', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-correction_delete', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-correction_validation_change', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-drop_evaluate', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-drop_report', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-correction_report', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-drop_grade_available', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_dropzone-dropzone_manual_state_changed', array(0 => 'icap.listener.dropzone.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_dropzone-drop_report', array(0 => 'icap.listener.dropzone.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_dropzone-correction_report', array(0 => 'icap.listener.dropzone.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_dropzone-drop_grade_available', array(0 => 'icap.listener.dropzone.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_dropzone-dropzone_manual_state_changed', array(0 => 'icap.listener.dropzone.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_dropzone-drop_end', array(0 => 'icap.listener.dropzone.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_log_details_resource-icap_wiki-section_create', array(0 => 'icap.listener.wiki.log_listener', 1 => 'onSectionCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_wiki-section_move', array(0 => 'icap.listener.wiki.log_listener', 1 => 'onSectionCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_wiki-section_update', array(0 => 'icap.listener.wiki.log_listener', 1 => 'onSectionCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_wiki-section_delete', array(0 => 'icap.listener.wiki.log_listener', 1 => 'onSectionCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_wiki-section_restore', array(0 => 'icap.listener.wiki.log_listener', 1 => 'onSectionCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_wiki-section_remove', array(0 => 'icap.listener.wiki.log_listener', 1 => 'onSectionCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_wiki-contribution_create', array(0 => 'icap.listener.wiki.log_listener', 1 => 'onSectionCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_wiki-configure', array(0 => 'icap.listener.wiki.log_listener', 1 => 'onSectionCreateLogDetails'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_wiki-section_create', array(0 => 'icap.listener.wiki.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_wiki-section_move', array(0 => 'icap.listener.wiki.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_wiki-section_update', array(0 => 'icap.listener.wiki.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_wiki-section_delete', array(0 => 'icap.listener.wiki.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_wiki-section_restore', array(0 => 'icap.listener.wiki.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_wiki-section_remove', array(0 => 'icap.listener.wiki.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_wiki-contribution_create', array(0 => 'icap.listener.wiki.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_wiki-configure', array(0 => 'icap.listener.wiki.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_wiki-section_create', array(0 => 'icap.listener.wiki.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_wiki-contribution_create', array(0 => 'icap.listener.wiki.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_wiki-user_tagged', array(0 => 'icap.listener.wiki.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-innova_path-step_unlock', array(0 => 'innova_path.listener.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-innova_path-step_unlockdone', array(0 => 'innova_path.listener.notification_listener', 1 => 'onCreateNotificationUnlockDone'), 0);
        $instance->addListenerService('create_form_icap_lesson', array(0 => 'icap.listener.lesson_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_icap_lesson', array(0 => 'icap.listener.lesson_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('delete_icap_lesson', array(0 => 'icap.listener.lesson_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('copy_icap_lesson', array(0 => 'icap.listener.lesson_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('open_icap_lesson', array(0 => 'icap.listener.lesson_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_lesson-chapter_create', array(0 => 'icap.listener.lesson_log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_lesson-chapter_read', array(0 => 'icap.listener.lesson_log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_lesson-chapter_update', array(0 => 'icap.listener.lesson_log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_lesson-chapter_delete', array(0 => 'icap.listener.lesson_log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_lesson-chapter_move', array(0 => 'icap.listener.lesson_log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_details_resource-icap_lesson-chapter_create', array(0 => 'icap.listener.lesson_log_listener', 1 => 'onChapterCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_lesson-chapter_read', array(0 => 'icap.listener.lesson_log_listener', 1 => 'onChapterCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_lesson-chapter_update', array(0 => 'icap.listener.lesson_log_listener', 1 => 'onChapterCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_lesson-chapter_delete', array(0 => 'icap.listener.lesson_log_listener', 1 => 'onChapterCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_lesson-chapter_move', array(0 => 'icap.listener.lesson_log_listener', 1 => 'onChapterCreateLogDetails'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'knp_menu.listener.voters', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'fos_rest.mime_type_listener', 1 => 'onKernelRequest'), 200);
        $instance->addListenerService('kernel.controller', array(0 => 'fos_rest.view_response_listener', 1 => 'onKernelController'), -10);
        $instance->addListenerService('kernel.view', array(0 => 'fos_rest.view_response_listener', 1 => 'onKernelView'), 100);
        $instance->addListenerService('kernel.request', array(0 => 'fos_rest.body_listener', 1 => 'onKernelRequest'), 10);
        $instance->addListenerService('kernel.controller', array(0 => 'fos_rest.param_fetcher_listener', 1 => 'onKernelController'), 5);
        $instance->addListenerService('refresh_cache', array(0 => 'claroline.manager.mail_manager', 1 => 'refreshCache'), 0);
        $instance->addListenerService('kernel.terminate', array(0 => 'claroline.core_bundle.listener.kernel_terminate_listener', 1 => 'onKernelTerminate'), 0);
        $instance->addListenerService('widget_my_workspaces', array(0 => 'claroline.core_bundle.listener.workspace_widget_listener', 1 => 'onDisplay'), 0);
        $instance->addListenerService('widget_simple_text', array(0 => 'claroline.core_bundle.listener.simple_text_widget_listener', 1 => 'onDisplay'), 0);
        $instance->addListenerService('widget_simple_text_configuration', array(0 => 'claroline.core_bundle.listener.simple_text_widget_listener', 1 => 'onConfig'), 0);
        $instance->addListenerService('copy_widget_config_simple_text', array(0 => 'claroline.core_bundle.listener.simple_text_widget_listener', 1 => 'onCopyWidgetConfiguration'), 0);
        $instance->addListenerService('security.interactive_login', array(0 => 'claroline.authentication_handler', 1 => 'onLoginSuccess'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'claroline.authentication_handler', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('kernel.response', array(0 => 'claroline.authentication_handler', 1 => 'onKernelResponse'), 1);
        $instance->addListenerService('log', array(0 => 'claroline.core_bundle.listener.log.log_listener', 1 => 'onLog'), 0);
        $instance->addListenerService('widget_core_resource_logger', array(0 => 'claroline.core_bundle.listener.log.log_widget_listener', 1 => 'onDisplay'), 0);
        $instance->addListenerService('widget_core_resource_logger_configuration', array(0 => 'claroline.core_bundle.listener.log.log_widget_listener', 1 => 'onConfigure'), 0);
        $instance->addListenerService('copy_widget_config_core_resource_logger', array(0 => 'claroline.core_bundle.listener.log.log_widget_listener', 1 => 'onCopyWidgetConfiguration'), 0);
        $instance->addListenerService('render_external_authentication_button', array(0 => 'claroline.core_bundle.listener.login_page_authentication_listener', 1 => 'onRenderButton'), 0);
        $instance->addListenerService('kernel.response', array(0 => 'claroline.core_bundle.listener.unavailable_platform_listener', 1 => 'onKernelResponse'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'claroline.core_bundle.listener.on_request_listener', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('administration_tool_user_management', array(0 => 'claroline.core_bundle.listener.administration_tool_listener', 1 => 'onOpenUserManagement'), 0);
        $instance->addListenerService('administration_tool_platform_parameters', array(0 => 'claroline.core_bundle.listener.administration_tool_listener', 1 => 'onOpenPlatformParameters'), 0);
        $instance->addListenerService('administration_tool_workspace_management', array(0 => 'claroline.core_bundle.listener.administration_tool_listener', 1 => 'onOpenWorkspaceManagement'), 0);
        $instance->addListenerService('administration_tool_registration_to_workspace', array(0 => 'claroline.core_bundle.listener.administration_tool_listener', 1 => 'onOpenRegistrationToWorkspace'), 0);
        $instance->addListenerService('administration_tool_desktop_and_home', array(0 => 'claroline.core_bundle.listener.administration_tool_listener', 1 => 'opDesktopAndHome'), 0);
        $instance->addListenerService('administration_tool_desktop_tools', array(0 => 'claroline.core_bundle.listener.administration_tool_listener', 1 => 'onOpenDesktopTools'), 0);
        $instance->addListenerService('administration_tool_platform_logs', array(0 => 'claroline.core_bundle.listener.administration_tool_listener', 1 => 'onOpenPlatformLogs'), 0);
        $instance->addListenerService('administration_tool_platform_analytics', array(0 => 'claroline.core_bundle.listener.administration_tool_listener', 1 => 'onOpenPlatformAnalytics'), 0);
        $instance->addListenerService('administration_tool_roles_management', array(0 => 'claroline.core_bundle.listener.administration_tool_listener', 1 => 'onOpenRolesManagement'), 0);
        $instance->addListenerService('administration_tool_widgets_management', array(0 => 'claroline.core_bundle.listener.administration_tool_listener', 1 => 'onOpenWidgetsManagement'), 0);
        $instance->addListenerService('administration_tool_organization_management', array(0 => 'claroline.core_bundle.listener.administration_tool_listener', 1 => 'onOpenOrganizationManagement'), 0);
        $instance->addListenerService('widget_my_profile', array(0 => 'claroline.core_bundle.listener.profile_widget_listener', 1 => 'onDisplay'), 0);
        $instance->addListenerService('rich_text_format_event_export', array(0 => 'claroline.core_bundle.listener.transfer.img_format_listener', 1 => 'export'), 0);
        $instance->addListenerService('rich_text_format_event_import', array(0 => 'claroline.core_bundle.listener.transfer.img_format_listener', 1 => 'import'), 0);
        $instance->addListenerService('claroline.log.create', array(0 => 'claroline.core_bundle.listener.activity_rule_listener', 1 => 'onLog'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'claroline.locale_setter', 1 => 'onKernelRequest'), 17);
        $instance->addListenerService('kernel.exception', array(0 => 'claroline.core_bundle.listener.ajax_authentication_listener', 1 => 'onCoreException'), 1);
        $instance->addListenerService('open_tool_workspace_parameters', array(0 => 'claroline.core_bundle.listener.tool_listener', 1 => 'onDisplayWorkspaceParameters'), 0);
        $instance->addListenerService('open_tool_workspace_logs', array(0 => 'claroline.core_bundle.listener.tool_listener', 1 => 'onDisplayWorkspaceLogs'), 0);
        $instance->addListenerService('open_tool_workspace_analytics', array(0 => 'claroline.core_bundle.listener.tool_listener', 1 => 'onDisplayWorkspaceAnalytics'), 0);
        $instance->addListenerService('open_tool_desktop_parameters', array(0 => 'claroline.core_bundle.listener.tool_listener', 1 => 'onDisplayDesktopParameters'), 0);
        $instance->addListenerService('claroline_top_bar_left_menu_configure_desktop_tool', array(0 => 'claroline.core_bundle.listener.tool_listener', 1 => 'onTopBarLeftMenuConfigureDesktopTool'), 0);
        $instance->addListenerService('claroline_top_bar_right_menu_configure_desktop_tool', array(0 => 'claroline.core_bundle.listener.tool_listener', 1 => 'onTopBarRightMenuConfigureDesktopTool'), 0);
        $instance->addListenerService('claroline_top_bar_left_menu_configure_desktop_tool_parameters', array(0 => 'claroline.core_bundle.listener.tool_listener', 1 => 'onTopBarLeftMenuConfigureParameters'), 0);
        $instance->addListenerService('console.command', array(0 => 'claroline.core_bundle.listener.assetic_dump_listener', 1 => 'onExecute'), 0);
        $instance->addListenerService('widget_resources_widget', array(0 => 'claroline.core_bundle.listener.resources_widget_listener', 1 => 'onDisplay'), 0);
        $instance->addListenerService('widget_resources_widget_configuration', array(0 => 'claroline.core_bundle.listener.resources_widget_listener', 1 => 'onConfig'), 0);
        $instance->addListenerService('create_form_text', array(0 => 'claroline.core_bundle.listener.resource.text_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_text', array(0 => 'claroline.core_bundle.listener.resource.text_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('copy_text', array(0 => 'claroline.core_bundle.listener.resource.text_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('open_text', array(0 => 'claroline.core_bundle.listener.resource.text_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('export_scorm_text', array(0 => 'claroline.core_bundle.listener.resource.text_listener', 1 => 'onExportScorm'), 0);
        $instance->addListenerService('delete_text', array(0 => 'claroline.core_bundle.listener.resource.text_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('create_form_directory', array(0 => 'claroline.core_bundle.listener.resource.directory_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_directory', array(0 => 'claroline.core_bundle.listener.resource.directory_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('open_directory', array(0 => 'claroline.core_bundle.listener.resource.directory_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('delete_directory', array(0 => 'claroline.core_bundle.listener.resource.directory_listener', 1 => 'delete'), 0);
        $instance->addListenerService('copy_directory', array(0 => 'claroline.core_bundle.listener.resource.directory_listener', 1 => 'copy'), 0);
        $instance->addListenerService('create_form_activity', array(0 => 'claroline.core_bundle.listener.resource.activity_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_activity', array(0 => 'claroline.core_bundle.listener.resource.activity_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('delete_activity', array(0 => 'claroline.core_bundle.listener.resource.activity_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('copy_activity', array(0 => 'claroline.core_bundle.listener.resource.activity_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('open_activity', array(0 => 'claroline.core_bundle.listener.resource.activity_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('compose_activity', array(0 => 'claroline.core_bundle.listener.resource.activity_listener', 1 => 'onCompose'), 0);
        $instance->addListenerService('create_form_file', array(0 => 'claroline.listener.file_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_file', array(0 => 'claroline.listener.file_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('create_api_file', array(0 => 'claroline.listener.file_listener', 1 => 'onApiCreate'), 0);
        $instance->addListenerService('delete_file', array(0 => 'claroline.listener.file_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('copy_file', array(0 => 'claroline.listener.file_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('download_file', array(0 => 'claroline.listener.file_listener', 1 => 'onDownload'), 0);
        $instance->addListenerService('open_file', array(0 => 'claroline.listener.file_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('export_scorm_file', array(0 => 'claroline.listener.file_listener', 1 => 'onExportScorm'), 0);
        $instance->addListenerService('update_file_file', array(0 => 'claroline.listener.file_listener', 1 => 'onUpdateFile'), 0);
        $instance->addListenerService('admin_user_action_edit', array(0 => 'claroline.core_bundle.listener.administration.user_listener', 1 => 'onEditUser'), 0);
        $instance->addListenerService('admin_user_action_show_workspaces', array(0 => 'claroline.core_bundle.listener.administration.user_listener', 1 => 'onOpenWorkspaceUser'), 0);
        $instance->addListenerService('icap_notification_user_parameters_event', array(0 => 'claroline.core_bundle.listener.notification.notification_user_parameters_listener', 1 => 'onGetTypesForParameters'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'claroline.core_bundle.listener.view_as_listener', 1 => 'onViewAs'), 0);
        $instance->addListenerService('open_tool_workspace_users', array(0 => 'workspace_role_tool_config_listener', 1 => 'onDisplay'), 0);
        $instance->addListenerService('open_tool_desktop_my_contacts', array(0 => 'claroline.core_bundle.listener.tool.my_contacts_listener', 1 => 'onDisplayDesktopContactTool'), 0);
        $instance->addListenerService('open_tool_workspace_resource_manager', array(0 => 'claroline.core_bundle.listener.tool.resource_manager_listener', 1 => 'onDisplayWorkspaceResourceManager'), 0);
        $instance->addListenerService('configure_workspace_tool_resource_manager', array(0 => 'claroline.core_bundle.listener.tool.resource_manager_listener', 1 => 'onDisplayWorkspaceResourceConfiguration'), 0);
        $instance->addListenerService('open_tool_desktop_resource_manager', array(0 => 'claroline.core_bundle.listener.tool.resource_manager_listener', 1 => 'onDisplayDesktopResourceManager'), 0);
        $instance->addListenerService('open_tool_desktop_home', array(0 => 'claroline.core_bundle.listener.tool.home_listener', 1 => 'onDisplayDesktopHome'), 0);
        $instance->addListenerService('open_tool_workspace_home', array(0 => 'claroline.core_bundle.listener.tool.home_listener', 1 => 'onDisplayWorkspaceHome'), 0);
        $instance->addListenerService('widget_agenda_', array(0 => 'claroline.agenda_bundle.listener.agenda_listener', 1 => 'onDisplay'), 0);
        $instance->addListenerService('widget_agenda_task', array(0 => 'claroline.agenda_bundle.listener.agenda_listener', 1 => 'onTaskDisplay'), 0);
        $instance->addListenerService('open_tool_workspace_agenda_', array(0 => 'claroline.agenda_bundle.listener.agenda_listener', 1 => 'onDisplayWorkspaceAgenda'), 0);
        $instance->addListenerService('open_tool_desktop_agenda_', array(0 => 'claroline.agenda_bundle.listener.agenda_listener', 1 => 'onDisplayDesktopAgenda'), 0);
        $instance->addListenerService('administration_tool_formalibre_reservation_tool', array(0 => 'forma_libre.reservation_bundle.listener.reservation_tool_listener', 1 => 'onOpenEvent'), 0);
        $instance->addListenerService('open_tool_desktop_formalibre_reservation_agenda', array(0 => 'forma_libre.reservation_bundle.listener.reservation_tool_listener', 1 => 'onDisplayDesktopReservationAgenda'), 0);
        $instance->addListenerService('formalibre_delete_event_from_resource', array(0 => 'forma_libre.reservation_bundle.listener.reservation_tool_listener', 1 => 'onResourceDeleted'), 0);
        $instance->addListenerService('claroline_top_bar_left_menu_configure_desktop_tool_message', array(0 => 'claroline.message_bundle.listener.message_listener', 1 => 'onTopBarLeftMenuConfigureMessage'), 0);
        $instance->addListenerService('claroline_workspace_users_action', array(0 => 'claroline.message_bundle.listener.message_listener', 1 => 'onWorkspaceUsersConfigureMessage'), 0);
        $instance->addListenerService('claroline_message_sending', array(0 => 'claroline.message_bundle.listener.message_listener', 1 => 'onMessageSending'), 0);
        $instance->addListenerService('claroline_message_sending_to_users', array(0 => 'claroline.message_bundle.listener.message_listener', 1 => 'onMessageSendingToUsers'), 0);
        $instance->addListenerService('claroline_contact_additional_action', array(0 => 'claroline.message_bundle.listener.message_listener', 1 => 'onContactActionMenuRender'), 0);
        $instance->addListenerService('open_tool_desktop_message', array(0 => 'claroline.message_bundle.listener.message_listener', 1 => 'onOpenDesktopTool'), 0);
        $instance->addListenerService('widget_claroline_forum_widget', array(0 => 'claroline.forum_bundle.listener.forum_widget_listener', 1 => 'onDisplay'), 0);
        $instance->addListenerService('widget_claroline_forum_widget_configuration', array(0 => 'claroline.forum_bundle.listener.forum_widget_listener', 1 => 'onConfigure'), 0);
        $instance->addListenerService('create_notification_item_resource-claroline_forum-create_message', array(0 => 'claroline.forum_bundle.listener.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('icap_notification_user_parameters_event', array(0 => 'claroline.forum_bundle.listener.notification_user_parameters_listener', 1 => 'onGetTypesForParameters'), 0);
        $instance->addListenerService('claroline_tag_object', array(0 => 'claroline.tag_bundle.listener.tag_listener', 1 => 'onObjectTag'), 0);
        $instance->addListenerService('claroline_retrieve_tagged_objects', array(0 => 'claroline.tag_bundle.listener.tag_listener', 1 => 'onRetrieveObjectsByTag'), 0);
        $instance->addListenerService('claroline_retrieve_tags', array(0 => 'claroline.tag_bundle.listener.tag_listener', 1 => 'onRetrieveTags'), 0);
        $instance->addListenerService('resource_action_tag_action', array(0 => 'claroline.tag_bundle.listener.tag_listener', 1 => 'onResourceTagAction'), 0);
        $instance->addListenerService('claroline_group_additional_action', array(0 => 'claroline.tag_bundle.listener.tag_listener', 1 => 'onGroupActionMenuRender'), 0);
        $instance->addListenerService('claroline_user_additional_action', array(0 => 'claroline.tag_bundle.listener.tag_listener', 1 => 'onUserActionMenuRender'), 0);
        $instance->addListenerService('claroline_workspace_additional_action', array(0 => 'claroline.tag_bundle.listener.tag_listener', 1 => 'onWorkspaceActionMenuRender'), 0);
        $instance->addListenerService('claroline_retrieve_user_workspaces_by_tag', array(0 => 'claroline.tag_bundle.listener.tag_listener', 1 => 'onRetrieveUserWorkspacesByTag'), 0);
        $instance->addListenerService('claroline_users_delete', array(0 => 'claroline.tag_bundle.listener.tag_listener', 1 => 'onUsersDelete'), 0);
        $instance->addListenerService('claroline_groups_delete', array(0 => 'claroline.tag_bundle.listener.tag_listener', 1 => 'onGroupsDelete'), 0);
        $instance->addListenerService('claroline_workspaces_delete', array(0 => 'claroline.tag_bundle.listener.tag_listener', 1 => 'onWorkspacesDelete'), 0);
        $instance->addListenerService('claroline_resources_delete', array(0 => 'claroline.tag_bundle.listener.tag_listener', 1 => 'onResourcesDelete'), 0);
        $instance->addListenerService('administration_tool_claroline_tag_admin_tool', array(0 => 'claroline.tag_bundle.listener.tag_tool_listener', 1 => 'onAdministrationToolOpen'), 0);
        $instance->addListenerService('widget_claroline_tag_resources_widget', array(0 => 'claroline.tag_bundle.listener.tag_widget_listener', 1 => 'onResourcesTagsWidgetDisplay'), 0);
        $instance->addListenerService('widget_claroline_tag_resources_widget_configuration', array(0 => 'claroline.tag_bundle.listener.tag_widget_listener', 1 => 'onResourcesTagsWidgetConfigure'), 0);
        $instance->addListenerService('administration_tool_formalibre_support_management_tool', array(0 => 'forma_libre.support_bundle.listener.support_listener', 1 => 'onAdministrationToolOpen'), 0);
        $instance->addListenerService('open_tool_desktop_formalibre_support_tool', array(0 => 'forma_libre.support_bundle.listener.support_listener', 1 => 'onDesktopToolOpen'), 0);
        $instance->addListenerService('plugin_options_supportbundle', array(0 => 'forma_libre.support_bundle.listener.support_listener', 1 => 'onPluginOptionsOpen'), 0);
        $instance->addListenerService('claroline_exception_action', array(0 => 'forma_libre.support_bundle.listener.support_listener', 1 => 'onExceptionActionMenuRender'), 0);
        $instance->addListenerService('widget_claroline_rssreader', array(0 => 'claroline.rss_reader_bundle.listener.rss_reader_listener', 1 => 'onDisplay'), 0);
        $instance->addListenerService('widget_claroline_rssreader_configuration', array(0 => 'claroline.rss_reader_bundle.listener.rss_reader_listener', 1 => 'onConfigure'), 0);
        $instance->addListenerService('copy_widget_config_claroline_rssreader', array(0 => 'claroline.rss_reader_bundle.listener.rss_reader_listener', 1 => 'onCopyWidgetConfiguration'), 0);
        $instance->addListenerService('claroline_top_bar_left_menu_configure', array(0 => 'icap.notification_bundle.listener.configure_menu_listener', 1 => 'onTopBarLeftMenuConfigure'), 0);
        $instance->addListenerService('claroline_desktop_parameters_menu_configure', array(0 => 'icap.notification_bundle.listener.configure_menu_listener', 1 => 'onDesktopParametersMenuConfigure'), 0);
        $instance->addListenerService('administration_tool_notification_configuration', array(0 => 'icap.notification_bundle.listener.administration_tool_listener', 1 => 'onNotificationConfiguration'), 0);
        $instance->addListenerService('log', array(0 => 'icap.notification_bundle.listener.log_listener', 1 => 'onLog'), 0);
        $instance->addListenerService('create_form_claroline_survey', array(0 => 'claroline.survey_bundle.listener.survey_listener', 1 => 'onCreationForm'), 0);
        $instance->addListenerService('create_claroline_survey', array(0 => 'claroline.survey_bundle.listener.survey_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('open_claroline_survey', array(0 => 'claroline.survey_bundle.listener.survey_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('copy_claroline_survey', array(0 => 'claroline.survey_bundle.listener.survey_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('delete_claroline_survey', array(0 => 'claroline.survey_bundle.listener.survey_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('widget_claroline_announcement_widget', array(0 => 'claroline.announcement_bundle.listener.announcement_widget_listener', 1 => 'onDisplay'), 0);
        $instance->addListenerService('widget_claroline_announcement_widget_configuration', array(0 => 'claroline.announcement_bundle.listener.announcement_widget_listener', 1 => 'onConfig'), 0);
        $instance->addListenerService('create_form_claroline_announcement_aggregate', array(0 => 'claroline.announcement_bundle.listener.announcement_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_claroline_announcement_aggregate', array(0 => 'claroline.announcement_bundle.listener.announcement_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('delete_claroline_announcement_aggregate', array(0 => 'claroline.announcement_bundle.listener.announcement_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('open_claroline_announcement_aggregate', array(0 => 'claroline.announcement_bundle.listener.announcement_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('copy_claroline_announcement_aggregate', array(0 => 'claroline.announcement_bundle.listener.announcement_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('create_form_claroline_scorm_12', array(0 => 'claroline.scorm_bundle.listener.scorm12_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_claroline_scorm_12', array(0 => 'claroline.scorm_bundle.listener.scorm12_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('open_claroline_scorm_12', array(0 => 'claroline.scorm_bundle.listener.scorm12_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('delete_claroline_scorm_12', array(0 => 'claroline.scorm_bundle.listener.scorm12_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('copy_claroline_scorm_12', array(0 => 'claroline.scorm_bundle.listener.scorm12_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('download_claroline_scorm_12', array(0 => 'claroline.scorm_bundle.listener.scorm12_listener', 1 => 'onDownload'), 0);
        $instance->addListenerService('create_form_claroline_scorm_2004', array(0 => 'claroline.scorm_bundle.listener.scorm2004_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_claroline_scorm_2004', array(0 => 'claroline.scorm_bundle.listener.scorm2004_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('open_claroline_scorm_2004', array(0 => 'claroline.scorm_bundle.listener.scorm2004_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('delete_claroline_scorm_2004', array(0 => 'claroline.scorm_bundle.listener.scorm2004_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('copy_claroline_scorm_2004', array(0 => 'claroline.scorm_bundle.listener.scorm2004_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('download_claroline_scorm_2004', array(0 => 'claroline.scorm_bundle.listener.scorm2004_listener', 1 => 'onDownload'), 0);
        $instance->addListenerService('administration_tool_claroline_cursus_tool_registration', array(0 => 'claroline.cursus_bundle.listener.cursus_registration_listener', 1 => 'onAdministrationToolOpen'), 0);
        $instance->addListenerService('claroline.log.create', array(0 => 'claroline.cursus_bundle.listener.cursus_registration_listener', 1 => 'onLog'), 0);
        $instance->addListenerService('claroline_user_additional_action', array(0 => 'claroline.cursus_bundle.listener.cursus_registration_listener', 1 => 'onUserActionMenuRender'), 0);
        $instance->addListenerService('claroline_group_additional_action', array(0 => 'claroline.cursus_bundle.listener.cursus_registration_listener', 1 => 'onGroupActionMenuRender'), 0);
        $instance->addListenerService('widget_claroline_cursus_courses_registration_widget', array(0 => 'claroline.cursus_bundle.listener.cursus_widget_listener', 1 => 'onCoursesRegistrationWidgetDisplay'), 0);
        $instance->addListenerService('widget_claroline_cursus_my_courses', array(0 => 'claroline.cursus_bundle.listener.cursus_widget_listener', 1 => 'onMyCoursesWidgetDisplay'), 0);
        $instance->addListenerService('widget_claroline_cursus_courses_registration_widget_configuration', array(0 => 'claroline.cursus_bundle.listener.cursus_widget_listener', 1 => 'onConfigure'), 0);
        $instance->addListenerService('widget_claroline_cursus_my_courses_configuration', array(0 => 'claroline.cursus_bundle.listener.cursus_widget_listener', 1 => 'onMyCoursesConfigure'), 0);
        $instance->addListenerService('administration_tool_claroline_cursus_tool', array(0 => 'claroline.cursus_bundle.listener.cursus_listener', 1 => 'onAdministrationToolOpen'), 0);
        $instance->addListenerService('plugin_options_cursusbundle', array(0 => 'claroline.cursus_bundle.listener.cursus_listener', 1 => 'onPluginOptionsOpen'), 0);
        $instance->addListenerService('open_tool_workspace_claroline_team_tool', array(0 => 'claroline.team_bundle.listener.team_listener', 1 => 'onWorkspaceToolOpen'), 0);
        $instance->addListenerService('administration_tool_formalibre_presence_admin_tool', array(0 => 'forma_libre.presence_bundle.listener.presence_listener', 1 => 'onAdministrationToolOpen'), 0);
        $instance->addListenerService('open_tool_desktop_formalibre_presence_tool', array(0 => 'forma_libre.presence_bundle.listener.presence_listener', 1 => 'onToolOpen'), 0);
        $instance->addListenerService('play_file_video', array(0 => 'claroline.listener.video_player_listener', 1 => 'onOpenVideo'), 0);
        $instance->addListenerService('play_file_audio', array(0 => 'claroline.listener.video_player_listener', 1 => 'onOpenVideo'), 0);
        $instance->addListenerService('plugin_options_videoplayerbundle', array(0 => 'claroline.listener.video_player_listener', 1 => 'onOpenAdministration'), 0);
        $instance->addListenerService('inject_javascript_layout', array(0 => 'claroline.listener.video_player_listener', 1 => 'onInjectJs'), 0);
        $instance->addListenerService('export_scorm_file_video', array(0 => 'claroline.listener.video_player_listener', 1 => 'onExportScorm'), 0);
        $instance->addListenerService('export_scorm_file_audio', array(0 => 'claroline.listener.video_player_listener', 1 => 'onExportScorm'), 0);
        $instance->addListenerService('open_tool_desktop_claroline_activity_tool', array(0 => 'claroline.activity_tool_bundle.listener.tool_listener', 1 => 'onDesktopOpen'), 0);
        $instance->addListenerService('open_tool_workspace_claroline_activity_tool', array(0 => 'claroline.activity_tool_bundle.listener.tool_listener', 1 => 'onWorkspaceOpen'), 0);
        $instance->addListenerService('create_form_claroline_web_resource', array(0 => 'claroline.listener.web_resource_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_claroline_web_resource', array(0 => 'claroline.listener.web_resource_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('open_claroline_web_resource', array(0 => 'claroline.listener.web_resource_listener', 1 => 'onOpenWebResource'), 0);
        $instance->addListenerService('export_scorm_claroline_web_resource', array(0 => 'claroline.listener.web_resource_listener', 1 => 'onExportScorm'), 0);
        $instance->addListenerService('delete_claroline_web_resource', array(0 => 'claroline.listener.web_resource_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('copy_claroline_web_resource', array(0 => 'claroline.listener.web_resource_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('download_claroline_web_resource', array(0 => 'claroline.listener.web_resource_listener', 1 => 'onDownload'), 0);
        $instance->addListenerService('play_file_text_plain', array(0 => 'claroline.text_player_bundle.listener.text_player_listener', 1 => 'onOpenText'), 0);
        $instance->addListenerService('log', array(0 => 'innova.collecticiel_bundle.listener.log.log_drop_evaluate_listener', 1 => 'onLog'), 0);
        $instance->addListenerService('badge-resource-icap_dropzone-correction_delete-generate_validation_link', array(0 => 'icap.listener.dropzone.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_dropzone-correction_end-generate_validation_link', array(0 => 'icap.listener.dropzone.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_dropzone-correction_start-generate_validation_link', array(0 => 'icap.listener.dropzone.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_dropzone-correction_update-generate_validation_link', array(0 => 'icap.listener.dropzone.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_dropzone-correction_validation_change-generate_validation_link', array(0 => 'icap.listener.dropzone.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_dropzone-criterion_create-generate_validation_link', array(0 => 'icap.listener.dropzone.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_dropzone-criterion_delete-generate_validation_link', array(0 => 'icap.listener.dropzone.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_dropzone-criterion_update-generate_validation_link', array(0 => 'icap.listener.dropzone.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_dropzone-document_create-generate_validation_link', array(0 => 'icap.listener.dropzone.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_dropzone-document_delete-generate_validation_link', array(0 => 'icap.listener.dropzone.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_dropzone-document_open-generate_validation_link', array(0 => 'icap.listener.dropzone.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_dropzone-drop_end-generate_validation_link', array(0 => 'icap.listener.dropzone.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_dropzone-drop_evaluate-generate_validation_link', array(0 => 'icap.listener.dropzone.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_dropzone-drop_start-generate_validation_link', array(0 => 'icap.listener.dropzone.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_dropzone-dropzone_configure-generate_validation_link', array(0 => 'icap.listener.dropzone.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('create_form_innova_collecticiel', array(0 => 'innova.collecticiel_bundle.listener.dropzone_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_innova_collecticiel', array(0 => 'innova.collecticiel_bundle.listener.dropzone_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('open_innova_collecticiel', array(0 => 'innova.collecticiel_bundle.listener.dropzone_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('open_dropzone_innova_collecticiel', array(0 => 'innova.collecticiel_bundle.listener.dropzone_listener', 1 => 'onOpenCustom'), 0);
        $instance->addListenerService('edit_dropzone_innova_collecticiel', array(0 => 'innova.collecticiel_bundle.listener.dropzone_listener', 1 => 'onEdit'), 0);
        $instance->addListenerService('delete_innova_collecticiel', array(0 => 'innova.collecticiel_bundle.listener.dropzone_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('plugin_options_innovacollecticiel', array(0 => 'innova.collecticiel_bundle.listener.dropzone_listener', 1 => 'onAdministrate'), 0);
        $instance->addListenerService('copy_innova_collecticiel', array(0 => 'innova.collecticiel_bundle.listener.dropzone_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('resource_action_hevinci_favourite', array(0 => 'he_vinci.favourite_bundle.listener.favourite_listener', 1 => 'onFavoriteAction'), 0);
        $instance->addListenerService('widget_hevinci_favourite_widget', array(0 => 'he_vinci.favourite_bundle.listener.favourite_listener', 1 => 'onDisplay'), 0);
        $instance->addListenerService('activity_evaluation', array(0 => 'hevinci.competency.activity_listener', 1 => 'onActivityEvaluation'), 0);
        $instance->addListenerService('administration_tool_competencies', array(0 => 'hevinci.competency.plugin_listener', 1 => 'onOpenCompetencyTool'), 0);
        $instance->addListenerService('administration_tool_learning-objectives', array(0 => 'hevinci.competency.plugin_listener', 1 => 'onOpenLearningObjectivesTool'), 0);
        $instance->addListenerService('open_tool_desktop_my-learning-objectives', array(0 => 'hevinci.competency.plugin_listener', 1 => 'onOpenMyLearningObjectivesTool'), 0);
        $instance->addListenerService('manage-competencies_activity', array(0 => 'hevinci.competency.plugin_listener', 1 => 'onOpenActivityCompetencies'), 0);
        $instance->addListenerService('widget_my-learning-objectives', array(0 => 'hevinci.competency.plugin_listener', 1 => 'onDisplayObjectivesWidget'), 0);
        $instance->addListenerService('create_form_hevinci_url', array(0 => 'he_vinci.url_bundle.listener.url_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_hevinci_url', array(0 => 'he_vinci.url_bundle.listener.url_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('open_hevinci_url', array(0 => 'he_vinci.url_bundle.listener.url_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('delete_hevinci_url', array(0 => 'he_vinci.url_bundle.listener.url_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('copy_hevinci_url', array(0 => 'he_vinci.url_bundle.listener.url_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('change_url_menu_hevinci_url', array(0 => 'he_vinci.url_bundle.listener.url_listener', 1 => 'onChangeAction'), 0);
        $instance->addListenerService('claroline_top_bar_right_menu_configure_desktop_tool_my_portfolios', array(0 => 'icap.portfolio_bundle.listener.configure_top_menu_listener', 1 => 'onRightMenuConfigure'), 0);
        $instance->addListenerService('claroline_top_bar_left_menu_configure_desktop_tool_my_portfolios', array(0 => 'icap.portfolio_bundle.listener.configure_top_menu_listener', 1 => 'onLeftMenuConfigure'), 0);
        $instance->addListenerService('administration_analytics_platform_content_item_add', array(0 => 'icap.portfolio_bundle.listener.administration_analytics_listener', 1 => 'onPlatformContentItemAdd'), 0);
        $instance->addListenerService('administration_analytics_platform_content_item_details_portfolio', array(0 => 'icap.portfolio_bundle.listener.administration_analytics_listener', 1 => 'onPlatformContentItemDetailsPortfolio'), 0);
        $instance->addListenerService('icap_portfolio_widget_form_view_userInformation', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetFormView'), 0);
        $instance->addListenerService('icap_portfolio_widget_form_view_text', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetFormView'), 0);
        $instance->addListenerService('icap_portfolio_widget_form_view_skills', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetFormView'), 0);
        $instance->addListenerService('icap_portfolio_widget_form_view_formations', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetFormView'), 0);
        $instance->addListenerService('icap_portfolio_widget_form_view_experience', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetFormView'), 0);
        $instance->addListenerService('icap_portfolio_widget_data_userInformation', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetData'), 0);
        $instance->addListenerService('icap_portfolio_widget_data_text', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetData'), 0);
        $instance->addListenerService('icap_portfolio_widget_data_skills', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetData'), 0);
        $instance->addListenerService('icap_portfolio_widget_data_formations', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetData'), 0);
        $instance->addListenerService('icap_portfolio_widget_data_experience', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetData'), 0);
        $instance->addListenerService('icap_portfolio_widget_view_userInformation', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetView'), 0);
        $instance->addListenerService('icap_portfolio_widget_view_text', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetView'), 0);
        $instance->addListenerService('icap_portfolio_widget_view_skills', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetView'), 0);
        $instance->addListenerService('icap_portfolio_widget_view_formations', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetView'), 0);
        $instance->addListenerService('icap_portfolio_widget_view_experience', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetView'), 0);
        $instance->addListenerService('icap_portfolio_widget_form_userInformation', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetForm'), 0);
        $instance->addListenerService('icap_portfolio_widget_form_text', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetForm'), 0);
        $instance->addListenerService('icap_portfolio_widget_form_skills', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetForm'), 0);
        $instance->addListenerService('icap_portfolio_widget_form_formations', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetForm'), 0);
        $instance->addListenerService('icap_portfolio_widget_form_experience', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetForm'), 0);
        $instance->addListenerService('icap_portfolio_widget_find_userInformation', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetFind'), 0);
        $instance->addListenerService('icap_portfolio_widget_find_text', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetFind'), 0);
        $instance->addListenerService('icap_portfolio_widget_find_skills', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetFind'), 0);
        $instance->addListenerService('icap_portfolio_widget_find_formations', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetFind'), 0);
        $instance->addListenerService('icap_portfolio_widget_find_experience', array(0 => 'icap.portfolio_bundle.listener.widget_listener', 1 => 'onWidgetFind'), 0);
        $instance->addListenerService('icap_notification_user_parameters_event', array(0 => 'icap.portfolio_bundle.listener.notification_user_parameters_listener', 1 => 'onGetTypesForParameters'), 0);
        $instance->addListenerService('widget_badge_usage', array(0 => 'icap.badge_bundle.listener.widget.badge_usage_widget_listener', 1 => 'onDisplay'), 0);
        $instance->addListenerService('widget_badge_usage_configuration', array(0 => 'icap.badge_bundle.listener.widget.badge_usage_widget_listener', 1 => 'onConfig'), 0);
        $instance->addListenerService('administration_tool_badges_management', array(0 => 'icap.badge_bundle.listener.administration_tool_listener', 1 => 'onOpenBadgesManagement'), 0);
        $instance->addListenerService('icap_portfolio_widget_form_view_badges', array(0 => 'icap.badge_bundle.listener.portfolio.widget_listener', 1 => 'onWidgetFormView'), 0);
        $instance->addListenerService('icap_portfolio_widget_data_badges', array(0 => 'icap.badge_bundle.listener.portfolio.widget_listener', 1 => 'onWidgetData'), 0);
        $instance->addListenerService('icap_portfolio_widget_view_badges', array(0 => 'icap.badge_bundle.listener.portfolio.widget_listener', 1 => 'onWidgetView'), 0);
        $instance->addListenerService('icap_portfolio_widget_form_badges', array(0 => 'icap.badge_bundle.listener.portfolio.widget_listener', 1 => 'onWidgetForm'), 0);
        $instance->addListenerService('icap_portfolio_widget_type_create', array(0 => 'icap.badge_bundle.listener.portfolio.widget_listener', 1 => 'onWidgetTypeCreate'), 0);
        $instance->addListenerService('icap_portfolio_widget_find_badges', array(0 => 'icap.badge_bundle.listener.portfolio.widget_listener', 1 => 'onWidgetFind'), 0);
        $instance->addListenerService('claroline.log.create', array(0 => 'icap.badge_bundle.listener.badge_listener', 1 => 'onLog'), 0);
        $instance->addListenerService('open_tool_workspace_badges', array(0 => 'icap.badge_bundle.listener.badge_listener', 1 => 'onWorkspaceOpenBadges'), 0);
        $instance->addListenerService('open_tool_workspace_my_badges', array(0 => 'icap.badge_bundle.listener.badge_listener', 1 => 'onWorkspaceOpenMybadges'), 0);
        $instance->addListenerService('open_tool_desktop_all_my_badges', array(0 => 'icap.badge_bundle.listener.badge_listener', 1 => 'onDesktopToolMenuConfigure'), 0);
        $instance->addListenerService('list_all_my_badges', array(0 => 'icap.badge_bundle.listener.badge_listener', 1 => 'onListAllMyBadges'), 0);
        $instance->addListenerService('widget_blog_list', array(0 => 'icap.blog_bundle.listener.widget_listener', 1 => 'onWidgetListDisplay'), 0);
        $instance->addListenerService('widget_blog_list_configuration', array(0 => 'icap.blog_bundle.listener.widget_listener', 1 => 'onWidgetListConfigure'), 0);
        $instance->addListenerService('widget_blog', array(0 => 'icap.blog_bundle.listener.widget_listener', 1 => 'onWidgetBlogDisplay'), 0);
        $instance->addListenerService('widget_blog_configuration', array(0 => 'icap.blog_bundle.listener.widget_listener', 1 => 'onWidgetBlogConfigure'), 0);
        $instance->addListenerService('widget_tag_list', array(0 => 'icap.blog_bundle.listener.widget_listener', 1 => 'onWidgetTagListDisplay'), 0);
        $instance->addListenerService('widget_tag_list_configuration', array(0 => 'icap.blog_bundle.listener.widget_listener', 1 => 'onWidgetTagListConfiguration'), 0);
        $instance->addListenerService('badge-resource-icap_blog-post_create-generate_validation_link', array(0 => 'icap.listener.blog.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_blog-post_delete-generate_validation_link', array(0 => 'icap.listener.blog.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_blog-post_read-generate_validation_link', array(0 => 'icap.listener.blog.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_blog-post_update-generate_validation_link', array(0 => 'icap.listener.blog.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_blog-comment_create-generate_validation_link', array(0 => 'icap.listener.blog.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_blog-comment_delete-generate_validation_link', array(0 => 'icap.listener.blog.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_blog-post_create', array(0 => 'icap.blog_bundle.listener.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_blog-post_update', array(0 => 'icap.blog_bundle.listener.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_blog-post_publish', array(0 => 'icap.blog_bundle.listener.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_blog-comment_create', array(0 => 'icap.blog_bundle.listener.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_blog-comment_update', array(0 => 'icap.blog_bundle.listener.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_blog-comment_publish', array(0 => 'icap.blog_bundle.listener.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_blog-post-user_tagged', array(0 => 'icap.blog_bundle.listener.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_blog-comment-user_tagged', array(0 => 'icap.blog_bundle.listener.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('icap_notification_user_parameters_event', array(0 => 'icap.blog_bundle.listener.notification_user_parameters_listener', 1 => 'onGetTypesForParameters'), 0);
        $instance->addListenerService('log', array(0 => 'icap.dropzone_bundle.listener.log.log_drop_evaluate_listener', 1 => 'onLog'), 0);
        $instance->addListenerService('create_form_icap_dropzone', array(0 => 'icap.dropzone_bundle.listener.dropzone_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_icap_dropzone', array(0 => 'icap.dropzone_bundle.listener.dropzone_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('open_icap_dropzone', array(0 => 'icap.dropzone_bundle.listener.dropzone_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('open_dropzone_icap_dropzone', array(0 => 'icap.dropzone_bundle.listener.dropzone_listener', 1 => 'onOpenCustom'), 0);
        $instance->addListenerService('edit_dropzone_icap_dropzone', array(0 => 'icap.dropzone_bundle.listener.dropzone_listener', 1 => 'onEdit'), 0);
        $instance->addListenerService('list_dropzone_icap_dropzone', array(0 => 'icap.dropzone_bundle.listener.dropzone_listener', 1 => 'onList'), 0);
        $instance->addListenerService('delete_icap_dropzone', array(0 => 'icap.dropzone_bundle.listener.dropzone_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('plugin_options_icapdropzone', array(0 => 'icap.dropzone_bundle.listener.dropzone_listener', 1 => 'onAdministrate'), 0);
        $instance->addListenerService('copy_icap_dropzone', array(0 => 'icap.dropzone_bundle.listener.dropzone_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('icap_notification_user_parameters_event', array(0 => 'icap.dropzone_bundle.listener.notification_user_parameters_listener', 1 => 'onGetTypesForParameters'), 0);
        $instance->addListenerService('profile_link_event', array(0 => 'icap.socialmedia_bundle.listener.profile_link_listener', 1 => 'onProfileLinkEvent'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_socialmedia-like_action', array(0 => 'icap.socialmedia_bundle.listener.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_socialmedia-share_action', array(0 => 'icap.socialmedia_bundle.listener.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-icap_socialmedia-comment_action', array(0 => 'icap.socialmedia_bundle.listener.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_details_resource-icap_socialmedia-like_action', array(0 => 'icap.socialmedia_bundle.listener.log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_socialmedia-share_action', array(0 => 'icap.socialmedia_bundle.listener.log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-icap_socialmedia-comment_action', array(0 => 'icap.socialmedia_bundle.listener.log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('resource_action_like_action', array(0 => 'icap.socialmedia_bundle.listener.resource_actions_listener', 1 => 'onLikeAction'), 0);
        $instance->addListenerService('resource_action_share_action', array(0 => 'icap.socialmedia_bundle.listener.resource_actions_listener', 1 => 'onShareAction'), 0);
        $instance->addListenerService('resource_action_comment_action', array(0 => 'icap.socialmedia_bundle.listener.resource_actions_listener', 1 => 'onCommentAction'), 0);
        $instance->addListenerService('resource_action_note_action', array(0 => 'icap.socialmedia_bundle.listener.resource_actions_listener', 1 => 'onNoteAction'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_socialmedia-comment_action', array(0 => 'icap.socialmedia_bundle.listener.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_socialmedia-like_action', array(0 => 'icap.socialmedia_bundle.listener.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_socialmedia-share_action', array(0 => 'icap.socialmedia_bundle.listener.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('icap_notification_user_parameters_event', array(0 => 'icap.socialmedia_bundle.listener.notification_user_parameters_listener', 1 => 'onGetTypesForParameters'), 0);
        $instance->addListenerService('badge-resource-icap_wiki-section_create-generate_validation_link', array(0 => 'icap.listener.wiki.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_wiki-section_delete-generate_validation_link', array(0 => 'icap.listener.wiki.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_wiki-section_move-generate_validation_link', array(0 => 'icap.listener.wiki.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_wiki-section_remove-generate_validation_link', array(0 => 'icap.listener.wiki.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_wiki-section_restore-generate_validation_link', array(0 => 'icap.listener.wiki.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_wiki-section_update-generate_validation_link', array(0 => 'icap.listener.wiki.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_wiki-contribution_create-generate_validation_link', array(0 => 'icap.listener.wiki.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('icap_notification_user_parameters_event', array(0 => 'icap.wiki_bundle.listener.notification_user_parameters_listener', 1 => 'onGetTypesForParameters'), 0);
        $instance->addListenerService('create_form_icap_wiki', array(0 => 'icap.wiki_bundle.listener.wiki_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_icap_wiki', array(0 => 'icap.wiki_bundle.listener.wiki_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('open_icap_wiki', array(0 => 'icap.wiki_bundle.listener.wiki_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('delete_icap_wiki', array(0 => 'icap.wiki_bundle.listener.wiki_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('copy_icap_wiki', array(0 => 'icap.wiki_bundle.listener.wiki_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('refresh_cache', array(0 => 'icap.oauth.manager', 1 => 'refreshCache'), 0);
        $instance->addListenerService('claroline_external_authentication_menu_configure', array(0 => 'icap.o_auth_bundle.listener.configure_menu_listener', 1 => 'onTopBarLeftMenuConfigure'), 0);
        $instance->addListenerService('render_external_authentication_button', array(0 => 'icap.o_auth_bundle.listener.external_authentication_listener', 1 => 'onRenderButton'), 0);
        $instance->addListenerService('log', array(0 => 'icap.o_auth_bundle.listener.external_authentication_listener', 1 => 'onDeleteUser'), 0);
        $instance->addListenerService('inject_javascript_layout', array(0 => 'icap.formula_plugin_bundle.listener.formula_plugin_listener', 1 => 'onInjectJs'), 0);
        $instance->addListenerService('create_log_list_item_resource-claroline_result-mark_added', array(0 => 'claroline.result.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_list_item_resource-claroline_result-mark_deleted', array(0 => 'claroline.result.log_listener', 1 => 'onCreateLogListItem'), 0);
        $instance->addListenerService('create_log_details_resource-claroline_result-mark_added', array(0 => 'claroline.result.log_listener', 1 => 'onMarkEventLogDetails'), 0);
        $instance->addListenerService('create_log_details_resource-claroline_result-mark_deleted', array(0 => 'claroline.result.log_listener', 1 => 'onMarkEventLogDetails'), 0);
        $instance->addListenerService('create_form_claroline_result', array(0 => 'claroline.result.result_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_claroline_result', array(0 => 'claroline.result.result_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('open_claroline_result', array(0 => 'claroline.result.result_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('delete_claroline_result', array(0 => 'claroline.result.result_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('widget_claroline_result', array(0 => 'claroline.result.result_listener', 1 => 'onDisplayWidget'), 0);
        $instance->addListenerService('widget_innova_path_widget', array(0 => 'innova.path_bundle.event_listener.widget.path_widget_listener', 1 => 'onDisplay'), 0);
        $instance->addListenerService('widget_innova_path_widget_configuration', array(0 => 'innova.path_bundle.event_listener.widget.path_widget_listener', 1 => 'onConfigure'), 0);
        $instance->addListenerService('rich_text_format_event_export', array(0 => 'innova.path_bundle.event_listener.rich_text_format_listener', 1 => 'export'), 0);
        $instance->addListenerService('rich_text_format_event_import', array(0 => 'innova.path_bundle.event_listener.rich_text_format_listener', 1 => 'import'), 0);
        $instance->addListenerService('open_innova_path', array(0 => 'innova.path_bundle.event_listener.resource.path_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('administrate_innova_path', array(0 => 'innova.path_bundle.event_listener.resource.path_listener', 1 => 'onAdministrate'), 0);
        $instance->addListenerService('create_form_innova_path', array(0 => 'innova.path_bundle.event_listener.resource.path_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_innova_path', array(0 => 'innova.path_bundle.event_listener.resource.path_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('delete_innova_path', array(0 => 'innova.path_bundle.event_listener.resource.path_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('copy_innova_path', array(0 => 'innova.path_bundle.event_listener.resource.path_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('export_scorm_innova_path', array(0 => 'innova.path_bundle.event_listener.resource.path_listener', 1 => 'onExportScorm'), 0);
        $instance->addListenerService('unlock_innova_path', array(0 => 'innova.path_bundle.event_listener.resource.path_listener', 1 => 'onUnlock'), 0);
        $instance->addListenerService('manageresults_innova_path', array(0 => 'innova.path_bundle.event_listener.resource.path_listener', 1 => 'onManageresults'), 0);
        $instance->addListenerService('icap_notification_user_parameters_event', array(0 => 'innova.path_bundle.event_listener.notifications.notification_user_parameters_listener', 1 => 'onGetTypesForParameters'), 0);
        $instance->addListenerService('create_form_icap_website', array(0 => 'icap.website_bundle.listener.website_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_icap_website', array(0 => 'icap.website_bundle.listener.website_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('open_icap_website', array(0 => 'icap.website_bundle.listener.website_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('delete_icap_website', array(0 => 'icap.website_bundle.listener.website_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('copy_icap_website', array(0 => 'icap.website_bundle.listener.website_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('create_form_claroline_flashcard', array(0 => 'claroline.flashcard.deck_listener', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_claroline_flashcard', array(0 => 'claroline.flashcard.deck_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('open_claroline_flashcard', array(0 => 'claroline.flashcard.deck_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('delete_claroline_flashcard', array(0 => 'claroline.flashcard.deck_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('create_log_details_resource-ujm_exercise-exercise_evaluated', array(0 => 'u_j_m.exo_bundle.listener.log.display_log_listener', 1 => 'onCreateLogDetails'), 0);
        $instance->addListenerService('create_form_ujm_exercise', array(0 => 'ujm_exo.listener.exercise', 1 => 'onCreateForm'), 0);
        $instance->addListenerService('create_ujm_exercise', array(0 => 'ujm_exo.listener.exercise', 1 => 'onCreate'), 0);
        $instance->addListenerService('open_ujm_exercise', array(0 => 'ujm_exo.listener.exercise', 1 => 'onOpen'), 0);
        $instance->addListenerService('delete_ujm_exercise', array(0 => 'ujm_exo.listener.exercise', 1 => 'onDelete'), 0);
        $instance->addListenerService('copy_ujm_exercise', array(0 => 'ujm_exo.listener.exercise', 1 => 'onCopy'), 0);
        $instance->addListenerService('publication_change_ujm_exercise', array(0 => 'ujm_exo.listener.exercise', 1 => 'onPublicationChange'), 0);
        $instance->addListenerService('export_scorm_ujm_exercise', array(0 => 'ujm_exo.listener.exercise', 1 => 'onExportScorm'), 0);
        $instance->addListenerService('open_tool_desktop_ujm_questions', array(0 => 'ujm_exo.listener.question_bank', 1 => 'onDisplayDesktop'), 0);
        $instance->addListenerService('badge-resource-icap_lesson-chapter_create-generate_validation_link', array(0 => 'icap.listener.lesson.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_lesson-chapter_delete-generate_validation_link', array(0 => 'icap.listener.lesson.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_lesson-chapter_move-generate_validation_link', array(0 => 'icap.listener.lesson.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_lesson-chapter_read-generate_validation_link', array(0 => 'icap.listener.lesson.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('badge-resource-icap_lesson-chapter_update-generate_validation_link', array(0 => 'icap.listener.lesson.badge_listener', 1 => 'onBagdeCreateValidationLink'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_lesson-chapter_create', array(0 => 'icap.lesson_bundle.listener.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_lesson-chapter_update', array(0 => 'icap.lesson_bundle.listener.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('create_notification_item_resource-icap_lesson-user_tagged', array(0 => 'icap.lesson_bundle.listener.notification_listener', 1 => 'onCreateNotificationItem'), 0);
        $instance->addListenerService('icap_notification_user_parameters_event', array(0 => 'icap.lesson_bundle.listener.notification_user_parameters_listener', 1 => 'onGetTypesForParameters'), 0);
        $instance->addListenerService('user_created_event', array(0 => 'claroline.chat_bundle.listener.user_creation_listener', 1 => 'onUserCreated'), 0);
        $instance->addListenerService('administration_tool_claroline_chat_management_admin_tool', array(0 => 'claroline.chat_bundle.listener.chat_listener', 1 => 'onChatManagementAdministrationToolOpen'), 0);
        $instance->addListenerService('claroline_contact_additional_action', array(0 => 'claroline.chat_bundle.listener.chat_listener', 1 => 'onContactActionMenuRender'), 0);
        $instance->addListenerService('delete_user', array(0 => 'claroline.chat_bundle.listener.user_delete_listener', 1 => 'onUserDelete'), 0);
        $instance->addListenerService('create_form_claroline_chat_room', array(0 => 'claroline.chat_bundle.listener.chat_room_listener', 1 => 'onCreationForm'), 0);
        $instance->addListenerService('create_claroline_chat_room', array(0 => 'claroline.chat_bundle.listener.chat_room_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('open_claroline_chat_room', array(0 => 'claroline.chat_bundle.listener.chat_room_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('copy_claroline_chat_room', array(0 => 'claroline.chat_bundle.listener.chat_room_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('delete_claroline_chat_room', array(0 => 'claroline.chat_bundle.listener.chat_room_listener', 1 => 'onDelete'), 0);
        $instance->addListenerService('open_tool_desktop_dashboard', array(0 => 'claroline.dashboard_bundle.listener.dashboard_listener', 1 => 'onDesktopOpen'), 0);
        $instance->addListenerService('widget_claroline_claco_form_widget', array(0 => 'claroline.claco_form_bundle.listener.claco_form_widget_listener', 1 => 'onClacoFormWidgetDisplay'), 0);
        $instance->addListenerService('widget_claroline_claco_form_widget_configuration', array(0 => 'claroline.claco_form_bundle.listener.claco_form_widget_listener', 1 => 'onClacoFormWidgetConfigure'), 0);
        $instance->addListenerService('create_form_claroline_claco_form', array(0 => 'claroline.claco_form_bundle.listener.claco_form_listener', 1 => 'onCreationForm'), 0);
        $instance->addListenerService('create_claroline_claco_form', array(0 => 'claroline.claco_form_bundle.listener.claco_form_listener', 1 => 'onCreate'), 0);
        $instance->addListenerService('open_claroline_claco_form', array(0 => 'claroline.claco_form_bundle.listener.claco_form_listener', 1 => 'onOpen'), 0);
        $instance->addListenerService('copy_claroline_claco_form', array(0 => 'claroline.claco_form_bundle.listener.claco_form_listener', 1 => 'onCopy'), 0);
        $instance->addListenerService('delete_claroline_claco_form', array(0 => 'claroline.claco_form_bundle.listener.claco_form_listener', 1 => 'onDelete'), 0);
        $instance->addSubscriberService('response_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener');
        $instance->addSubscriberService('streamed_response_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener');
        $instance->addSubscriberService('locale_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener');
        $instance->addSubscriberService('translator_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\TranslatorListener');
        $instance->addSubscriberService('validate_request_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener');
        $instance->addSubscriberService('test.session.listener', 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\TestSessionListener');
        $instance->addSubscriberService('session_listener', 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SessionListener');
        $instance->addSubscriberService('session.save_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener');
        $instance->addSubscriberService('router_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener');
        $instance->addSubscriberService('debug.debug_handlers_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener');
        $instance->addSubscriberService('security.firewall', 'Symfony\\Component\\Security\\Http\\Firewall');
        $instance->addSubscriberService('security.rememberme.response_listener', 'Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener');
        $instance->addSubscriberService('twig.exception_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener');
        $instance->addSubscriberService('swiftmailer.email_sender.listener', 'Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener');
        $instance->addSubscriberService('stof_doctrine_extensions.event_listener.locale', 'Stof\\DoctrineExtensionsBundle\\EventListener\\LocaleListener');
        $instance->addSubscriberService('stof_doctrine_extensions.event_listener.blame', 'Stof\\DoctrineExtensionsBundle\\EventListener\\BlameListener');
        $instance->addSubscriberService('sensio_framework_extra.controller.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener');
        $instance->addSubscriberService('sensio_framework_extra.converter.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener');
        $instance->addSubscriberService('sensio_framework_extra.cache.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener');
        $instance->addSubscriberService('sensio_framework_extra.security.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\SecurityListener');

        return $instance;
    }

    /*
     * Gets the 'file_locator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Config\FileLocator A Symfony\Component\HttpKernel\Config\FileLocator instance
     */
    protected function getFileLocatorService()
    {
        return $this->services['file_locator'] = new \Symfony\Component\HttpKernel\Config\FileLocator($this->get('kernel'), ($this->targetDirs[2].'/Resources'));
    }

    /*
     * Gets the 'filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Filesystem\Filesystem A Symfony\Component\Filesystem\Filesystem instance
     */
    protected function getFilesystemService()
    {
        return $this->services['filesystem'] = new \Symfony\Component\Filesystem\Filesystem();
    }

    /*
     * Gets the 'form.csrf_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Csrf\CsrfProvider\CsrfTokenManagerAdapter A Symfony\Component\Form\Extension\Csrf\CsrfProvider\CsrfTokenManagerAdapter instance
     */
    protected function getForm_CsrfProviderService()
    {
        return $this->services['form.csrf_provider'] = new \Symfony\Component\Form\Extension\Csrf\CsrfProvider\CsrfTokenManagerAdapter($this->get('security.csrf.token_manager'));
    }

    /*
     * Gets the 'form.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\FormFactory A Symfony\Component\Form\FormFactory instance
     */
    protected function getForm_FactoryService()
    {
        return $this->services['form.factory'] = new \Symfony\Component\Form\FormFactory($this->get('form.registry'), $this->get('form.resolved_type_factory'));
    }

    /*
     * Gets the 'form.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\FormRegistry A Symfony\Component\Form\FormRegistry instance
     */
    protected function getForm_RegistryService()
    {
        return $this->services['form.registry'] = new \Symfony\Component\Form\FormRegistry(array(0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension($this, array('tags' => 'icap.blog.type.tags', 'listWidgetBlog' => 'icap.blog.form.type.listwidgetblog', 'innova_path' => 'innova_path.form.type.path', 'innova_path_template' => 'innova_path.form.type.path_template', 'innova_path_widget_config' => 'innova_path.form.type.path_widget_config', 'form' => 'form.type.form', 'birthday' => 'form.type.birthday', 'checkbox' => 'form.type.checkbox', 'choice' => 'form.type.choice', 'collection' => 'form.type.collection', 'country' => 'form.type.country', 'date' => 'form.type.date', 'datetime' => 'form.type.datetime', 'email' => 'form.type.email', 'file' => 'form.type.file', 'hidden' => 'form.type.hidden', 'integer' => 'form.type.integer', 'language' => 'form.type.language', 'locale' => 'form.type.locale', 'money' => 'form.type.money', 'number' => 'form.type.number', 'password' => 'form.type.password', 'percent' => 'form.type.percent', 'radio' => 'form.type.radio', 'repeated' => 'form.type.repeated', 'search' => 'form.type.search', 'textarea' => 'form.type.textarea', 'text' => 'form.type.text', 'time' => 'form.type.time', 'timezone' => 'form.type.timezone', 'url' => 'form.type.url', 'button' => 'form.type.button', 'submit' => 'form.type.submit', 'reset' => 'form.type.reset', 'currency' => 'form.type.currency', 'zenstruck_ajax_entity' => 'zenstruck_form.ajax_entity_type', 'captcha' => 'captcha.type', 'fos_oauth_server_authorize' => 'fos_oauth_server.authorize.form.type', 'entity' => 'form.type.entity', 'resourcePicker' => 'claroline.core_bundle.form.field.resource_picker_type', 'datetimepicker' => 'claroline.form.datetimepicker', 'content' => 'claroline.form.content', 'base_content' => 'claroline.form.base_content', 'tinymce' => 'claroline.form.tinymce', 'userpicker' => 'claroline.form.user_picker', 'twolevelselect' => 'claroline.form.twolevelselect', 'datepicker' => 'claroline.form.datepicker', 'daterange' => 'claroline.form.daterange', 'select2' => 'claroline.form.select2', 'honeypot' => 'claroline.form.honeypot', 'simpleautocomplete' => 'claroline.form.simpleautocomplete', 'buttongroupselect' => 'claroline.form.buttongroupselect', 'scroll' => 'claroline.form.scroll', 'portal_configuration_form' => 'claroline.core_bundle.form.administration.portal_configuration_type', 'icap_notification_type_pluginConfiguration' => 'icap.notification_bundle.form.notification_plugin_configuration_type', 'hevinci_form_ability' => 'hevinci_form_ability', 'hevinci_form_ability_import' => 'hevinci_form_ability_import', 'scale_levels' => 'he_vinci.competency_bundle.form.field.levels_type', 'hevinci_form_framework' => 'hevinci_form_framework', 'hevinci_form_import_framework' => 'hevinci_form_import_framework', 'hevinci_form_competency' => 'hevinci_form_competency', 'hevinci_form_objective' => 'hevinci_form_objective', 'hevinci_form_scale' => 'hevinci_form_scale', 'icap_portfolio_guide_form' => 'icap.portfolio_bundle.form.type.portfolio_guide_type', 'icap_portfolio_portfolio_comment_form' => 'icap.portfolio_bundle.form.type.portfolio_comment_type', 'icap_portfolio_import_form' => 'icap.portfolio_bundle.form.type.portfolio_import', 'icap_portfolio_title_form' => 'icap.portfolio_bundle.form.type.portfolio_title_type', 'icap_portfolio_visible_user_form' => 'icap.portfolio_bundle.form.type.portfolio_user_type', 'icap_portfolio_visible_team_form' => 'icap.portfolio_bundle.form.type.portfolio_team_type', 'icap_portfolio_portfolio_form' => 'icap.portfolio_bundle.form.type.portfolio_type', 'icap_portfolio_rename_form' => 'icap.portfolio_bundle.form.type.rename_portfolio_type', 'icap_portfolio_portfolio_widget_form' => 'icap.portfolio_bundle.form.type.portfolio_widget_type', 'icap_portfolio_guides_form' => 'icap.portfolio_bundle.form.type.guides_portfolio_type', 'icap_portfolio_widget_form_skills' => 'icap.portfolio_bundle.form.type.widgets.skills_type', 'icap_portfolio_widget_form_skills_skill' => 'icap.portfolio_bundle.form.type.widgets.skills_skill_type', 'icap_portfolio_widget_form_experience' => 'icap.portfolio_bundle.form.type.widgets.experience_type', 'icap_portfolio_widget_form_text' => 'icap.portfolio_bundle.form.type.widgets.text_type', 'icap_portfolio_widget_form_formations' => 'icap.portfolio_bundle.form.type.widgets.formations_type', 'icap_portfolio_widget_form_formations_formation' => 'icap.portfolio_bundle.form.type.widgets.formations_formation_type', 'icap_portfolio_widget_form_userInformation' => 'icap.portfolio_bundle.form.type.widgets.user_information_type', 'icap_portfolio_visible_group_form' => 'icap.portfolio_bundle.form.type.portfolio_group_type', 'icap_portfolio_visibility_form' => 'icap.portfolio_bundle.form.type.visibility_portfolio_type', 'badge_form' => 'icap.badge_bundle.form.type.badge_type', 'badge_usage_widget_config' => 'icap.badge_bundle.form.type.widget.badge_usage_config_type', 'icap_badge_portfolio_widget_form_badges_badge' => 'icap.badge_bundle.form.type.portfolio.badges_badge_type', 'icap_badge_portfolio_widget_form_badges' => 'icap.badge_bundle.form.type.portfolio.badges_type', 'badge_form_workspace' => 'icap.badge_bundle.form.type.tool.workspace.badge_type', 'badgepicker' => 'icap_badge.form.badgepicker', 'blog_widget_blog_form' => 'icap_blog.form.widget_blog', 'blog_widget_list_blog_form' => 'icap_blog.form.widget_list_blog', 'blog_widget_tag_list_blog_form' => 'icap_blog.form.widget_tag_list_blog', 'blog_widget_list_form' => 'icap_blog.form.widget_list', 'claroline_form_result' => 'claroline_form_result', 'claroline_form_deck' => 'claroline_form_deck'), array('form' => array(0 => 'claroline.captcha_extension', 1 => 'claroline.honeypot_extension', 2 => 'form.type_extension.form.http_foundation', 3 => 'form.type_extension.form.validator', 4 => 'form.type_extension.upload.validator', 5 => 'form.type_extension.csrf', 6 => 'zenstruck_form.theme_type', 7 => 'fos_rest.form.extension.csrf_disable'), 'repeated' => array(0 => 'form.type_extension.repeated.validator'), 'submit' => array(0 => 'form.type_extension.submit.validator')), array(0 => 'form.type_guesser.validator', 1 => 'form.type_guesser.doctrine'))), $this->get('form.resolved_type_factory'));
    }

    /*
     * Gets the 'form.resolved_type_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\ResolvedFormTypeFactory A Symfony\Component\Form\ResolvedFormTypeFactory instance
     */
    protected function getForm_ResolvedTypeFactoryService()
    {
        return $this->services['form.resolved_type_factory'] = new \Symfony\Component\Form\ResolvedFormTypeFactory();
    }

    /*
     * Gets the 'form.type.birthday' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\BirthdayType A Symfony\Component\Form\Extension\Core\Type\BirthdayType instance
     */
    protected function getForm_Type_BirthdayService()
    {
        return $this->services['form.type.birthday'] = new \Symfony\Component\Form\Extension\Core\Type\BirthdayType();
    }

    /*
     * Gets the 'form.type.button' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ButtonType A Symfony\Component\Form\Extension\Core\Type\ButtonType instance
     */
    protected function getForm_Type_ButtonService()
    {
        return $this->services['form.type.button'] = new \Symfony\Component\Form\Extension\Core\Type\ButtonType();
    }

    /*
     * Gets the 'form.type.checkbox' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CheckboxType A Symfony\Component\Form\Extension\Core\Type\CheckboxType instance
     */
    protected function getForm_Type_CheckboxService()
    {
        return $this->services['form.type.checkbox'] = new \Symfony\Component\Form\Extension\Core\Type\CheckboxType();
    }

    /*
     * Gets the 'form.type.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ChoiceType A Symfony\Component\Form\Extension\Core\Type\ChoiceType instance
     */
    protected function getForm_Type_ChoiceService()
    {
        return $this->services['form.type.choice'] = new \Symfony\Component\Form\Extension\Core\Type\ChoiceType(new \Symfony\Component\Form\ChoiceList\Factory\CachingFactoryDecorator(new \Symfony\Component\Form\ChoiceList\Factory\PropertyAccessDecorator(new \Symfony\Component\Form\ChoiceList\Factory\DefaultChoiceListFactory(), $this->get('property_accessor'))));
    }

    /*
     * Gets the 'form.type.collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CollectionType A Symfony\Component\Form\Extension\Core\Type\CollectionType instance
     */
    protected function getForm_Type_CollectionService()
    {
        return $this->services['form.type.collection'] = new \Symfony\Component\Form\Extension\Core\Type\CollectionType();
    }

    /*
     * Gets the 'form.type.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CountryType A Symfony\Component\Form\Extension\Core\Type\CountryType instance
     */
    protected function getForm_Type_CountryService()
    {
        return $this->services['form.type.country'] = new \Symfony\Component\Form\Extension\Core\Type\CountryType();
    }

    /*
     * Gets the 'form.type.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CurrencyType A Symfony\Component\Form\Extension\Core\Type\CurrencyType instance
     */
    protected function getForm_Type_CurrencyService()
    {
        return $this->services['form.type.currency'] = new \Symfony\Component\Form\Extension\Core\Type\CurrencyType();
    }

    /*
     * Gets the 'form.type.date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateType A Symfony\Component\Form\Extension\Core\Type\DateType instance
     */
    protected function getForm_Type_DateService()
    {
        return $this->services['form.type.date'] = new \Symfony\Component\Form\Extension\Core\Type\DateType();
    }

    /*
     * Gets the 'form.type.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateTimeType A Symfony\Component\Form\Extension\Core\Type\DateTimeType instance
     */
    protected function getForm_Type_DatetimeService()
    {
        return $this->services['form.type.datetime'] = new \Symfony\Component\Form\Extension\Core\Type\DateTimeType();
    }

    /*
     * Gets the 'form.type.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\EmailType A Symfony\Component\Form\Extension\Core\Type\EmailType instance
     */
    protected function getForm_Type_EmailService()
    {
        return $this->services['form.type.email'] = new \Symfony\Component\Form\Extension\Core\Type\EmailType();
    }

    /*
     * Gets the 'form.type.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\Type\EntityType A Symfony\Bridge\Doctrine\Form\Type\EntityType instance
     */
    protected function getForm_Type_EntityService()
    {
        return $this->services['form.type.entity'] = new \Symfony\Bridge\Doctrine\Form\Type\EntityType($this->get('doctrine'));
    }

    /*
     * Gets the 'form.type.file' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FileType A Symfony\Component\Form\Extension\Core\Type\FileType instance
     */
    protected function getForm_Type_FileService()
    {
        return $this->services['form.type.file'] = new \Symfony\Component\Form\Extension\Core\Type\FileType();
    }

    /*
     * Gets the 'form.type.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FormType A Symfony\Component\Form\Extension\Core\Type\FormType instance
     */
    protected function getForm_Type_FormService()
    {
        return $this->services['form.type.form'] = new \Symfony\Component\Form\Extension\Core\Type\FormType($this->get('property_accessor'));
    }

    /*
     * Gets the 'form.type.hidden' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\HiddenType A Symfony\Component\Form\Extension\Core\Type\HiddenType instance
     */
    protected function getForm_Type_HiddenService()
    {
        return $this->services['form.type.hidden'] = new \Symfony\Component\Form\Extension\Core\Type\HiddenType();
    }

    /*
     * Gets the 'form.type.integer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\IntegerType A Symfony\Component\Form\Extension\Core\Type\IntegerType instance
     */
    protected function getForm_Type_IntegerService()
    {
        return $this->services['form.type.integer'] = new \Symfony\Component\Form\Extension\Core\Type\IntegerType();
    }

    /*
     * Gets the 'form.type.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LanguageType A Symfony\Component\Form\Extension\Core\Type\LanguageType instance
     */
    protected function getForm_Type_LanguageService()
    {
        return $this->services['form.type.language'] = new \Symfony\Component\Form\Extension\Core\Type\LanguageType();
    }

    /*
     * Gets the 'form.type.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LocaleType A Symfony\Component\Form\Extension\Core\Type\LocaleType instance
     */
    protected function getForm_Type_LocaleService()
    {
        return $this->services['form.type.locale'] = new \Symfony\Component\Form\Extension\Core\Type\LocaleType();
    }

    /*
     * Gets the 'form.type.money' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\MoneyType A Symfony\Component\Form\Extension\Core\Type\MoneyType instance
     */
    protected function getForm_Type_MoneyService()
    {
        return $this->services['form.type.money'] = new \Symfony\Component\Form\Extension\Core\Type\MoneyType();
    }

    /*
     * Gets the 'form.type.number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\NumberType A Symfony\Component\Form\Extension\Core\Type\NumberType instance
     */
    protected function getForm_Type_NumberService()
    {
        return $this->services['form.type.number'] = new \Symfony\Component\Form\Extension\Core\Type\NumberType();
    }

    /*
     * Gets the 'form.type.password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PasswordType A Symfony\Component\Form\Extension\Core\Type\PasswordType instance
     */
    protected function getForm_Type_PasswordService()
    {
        return $this->services['form.type.password'] = new \Symfony\Component\Form\Extension\Core\Type\PasswordType();
    }

    /*
     * Gets the 'form.type.percent' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PercentType A Symfony\Component\Form\Extension\Core\Type\PercentType instance
     */
    protected function getForm_Type_PercentService()
    {
        return $this->services['form.type.percent'] = new \Symfony\Component\Form\Extension\Core\Type\PercentType();
    }

    /*
     * Gets the 'form.type.radio' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RadioType A Symfony\Component\Form\Extension\Core\Type\RadioType instance
     */
    protected function getForm_Type_RadioService()
    {
        return $this->services['form.type.radio'] = new \Symfony\Component\Form\Extension\Core\Type\RadioType();
    }

    /*
     * Gets the 'form.type.repeated' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RepeatedType A Symfony\Component\Form\Extension\Core\Type\RepeatedType instance
     */
    protected function getForm_Type_RepeatedService()
    {
        return $this->services['form.type.repeated'] = new \Symfony\Component\Form\Extension\Core\Type\RepeatedType();
    }

    /*
     * Gets the 'form.type.reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ResetType A Symfony\Component\Form\Extension\Core\Type\ResetType instance
     */
    protected function getForm_Type_ResetService()
    {
        return $this->services['form.type.reset'] = new \Symfony\Component\Form\Extension\Core\Type\ResetType();
    }

    /*
     * Gets the 'form.type.search' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SearchType A Symfony\Component\Form\Extension\Core\Type\SearchType instance
     */
    protected function getForm_Type_SearchService()
    {
        return $this->services['form.type.search'] = new \Symfony\Component\Form\Extension\Core\Type\SearchType();
    }

    /*
     * Gets the 'form.type.submit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SubmitType A Symfony\Component\Form\Extension\Core\Type\SubmitType instance
     */
    protected function getForm_Type_SubmitService()
    {
        return $this->services['form.type.submit'] = new \Symfony\Component\Form\Extension\Core\Type\SubmitType();
    }

    /*
     * Gets the 'form.type.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextType A Symfony\Component\Form\Extension\Core\Type\TextType instance
     */
    protected function getForm_Type_TextService()
    {
        return $this->services['form.type.text'] = new \Symfony\Component\Form\Extension\Core\Type\TextType();
    }

    /*
     * Gets the 'form.type.textarea' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextareaType A Symfony\Component\Form\Extension\Core\Type\TextareaType instance
     */
    protected function getForm_Type_TextareaService()
    {
        return $this->services['form.type.textarea'] = new \Symfony\Component\Form\Extension\Core\Type\TextareaType();
    }

    /*
     * Gets the 'form.type.time' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimeType A Symfony\Component\Form\Extension\Core\Type\TimeType instance
     */
    protected function getForm_Type_TimeService()
    {
        return $this->services['form.type.time'] = new \Symfony\Component\Form\Extension\Core\Type\TimeType();
    }

    /*
     * Gets the 'form.type.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimezoneType A Symfony\Component\Form\Extension\Core\Type\TimezoneType instance
     */
    protected function getForm_Type_TimezoneService()
    {
        return $this->services['form.type.timezone'] = new \Symfony\Component\Form\Extension\Core\Type\TimezoneType();
    }

    /*
     * Gets the 'form.type.url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\UrlType A Symfony\Component\Form\Extension\Core\Type\UrlType instance
     */
    protected function getForm_Type_UrlService()
    {
        return $this->services['form.type.url'] = new \Symfony\Component\Form\Extension\Core\Type\UrlType();
    }

    /*
     * Gets the 'form.type_extension.csrf' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension A Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension instance
     */
    protected function getForm_TypeExtension_CsrfService()
    {
        return $this->services['form.type_extension.csrf'] = new \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension($this->get('security.csrf.token_manager'), true, '_token', $this->get('translator.default'), 'validators', $this->get('form.server_params'));
    }

    /*
     * Gets the 'form.type_extension.form.http_foundation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension A Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension instance
     */
    protected function getForm_TypeExtension_Form_HttpFoundationService()
    {
        return $this->services['form.type_extension.form.http_foundation'] = new \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension(new \Symfony\Component\Form\Extension\HttpFoundation\HttpFoundationRequestHandler($this->get('form.server_params')));
    }

    /*
     * Gets the 'form.type_extension.form.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension instance
     */
    protected function getForm_TypeExtension_Form_ValidatorService()
    {
        return $this->services['form.type_extension.form.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension($this->get('validator'));
    }

    /*
     * Gets the 'form.type_extension.repeated.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension instance
     */
    protected function getForm_TypeExtension_Repeated_ValidatorService()
    {
        return $this->services['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension();
    }

    /*
     * Gets the 'form.type_extension.submit.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension instance
     */
    protected function getForm_TypeExtension_Submit_ValidatorService()
    {
        return $this->services['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension();
    }

    /*
     * Gets the 'form.type_extension.upload.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\UploadValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\UploadValidatorExtension instance
     */
    protected function getForm_TypeExtension_Upload_ValidatorService()
    {
        return $this->services['form.type_extension.upload.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\UploadValidatorExtension($this->get('translator.default'), 'validators');
    }

    /*
     * Gets the 'form.type_guesser.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser A Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser instance
     */
    protected function getForm_TypeGuesser_DoctrineService()
    {
        return $this->services['form.type_guesser.doctrine'] = new \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser($this->get('doctrine'));
    }

    /*
     * Gets the 'form.type_guesser.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser A Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser instance
     */
    protected function getForm_TypeGuesser_ValidatorService()
    {
        return $this->services['form.type_guesser.validator'] = new \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser($this->get('validator'));
    }

    /*
     * Gets the 'forma_libre.presence_bundle.listener.presence_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FormaLibre\PresenceBundle\Listener\PresenceListener A FormaLibre\PresenceBundle\Listener\PresenceListener instance
     */
    protected function getFormaLibre_PresenceBundle_Listener_PresenceListenerService()
    {
        return $this->services['forma_libre.presence_bundle.listener.presence_listener'] = new \FormaLibre\PresenceBundle\Listener\PresenceListener($this->get('http_kernel'), $this->get('request_stack'));
    }

    /*
     * Gets the 'forma_libre.reservation_bundle.listener.reservation_tool_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FormaLibre\ReservationBundle\Listener\ReservationToolListener A FormaLibre\ReservationBundle\Listener\ReservationToolListener instance
     */
    protected function getFormaLibre_ReservationBundle_Listener_ReservationToolListenerService()
    {
        return $this->services['forma_libre.reservation_bundle.listener.reservation_tool_listener'] = new \FormaLibre\ReservationBundle\Listener\ReservationToolListener($this->get('request_stack'), $this->get('http_kernel'), $this->get('templating'), $this->get('doctrine.orm.default_entity_manager'), $this->get('formalibre.manager.reservation_manager'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'forma_libre.reservation_bundle.validator.constraints.csv_resource_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FormaLibre\ReservationBundle\Validator\Constraints\CsvResourceValidator A FormaLibre\ReservationBundle\Validator\Constraints\CsvResourceValidator instance
     */
    protected function getFormaLibre_ReservationBundle_Validator_Constraints_CsvResourceValidatorService()
    {
        return $this->services['forma_libre.reservation_bundle.validator.constraints.csv_resource_validator'] = new \FormaLibre\ReservationBundle\Validator\Constraints\CsvResourceValidator($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'forma_libre.reservation_bundle.validator.constraints.date_range_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FormaLibre\ReservationBundle\Validator\Constraints\DateRangeValidator A FormaLibre\ReservationBundle\Validator\Constraints\DateRangeValidator instance
     */
    protected function getFormaLibre_ReservationBundle_Validator_Constraints_DateRangeValidatorService()
    {
        return $this->services['forma_libre.reservation_bundle.validator.constraints.date_range_validator'] = new \FormaLibre\ReservationBundle\Validator\Constraints\DateRangeValidator();
    }

    /*
     * Gets the 'forma_libre.reservation_bundle.validator.constraints.duration_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FormaLibre\ReservationBundle\Validator\Constraints\DurationValidator A FormaLibre\ReservationBundle\Validator\Constraints\DurationValidator instance
     */
    protected function getFormaLibre_ReservationBundle_Validator_Constraints_DurationValidatorService()
    {
        return $this->services['forma_libre.reservation_bundle.validator.constraints.duration_validator'] = new \FormaLibre\ReservationBundle\Validator\Constraints\DurationValidator($this->get('formalibre.manager.reservation_manager'));
    }

    /*
     * Gets the 'forma_libre.reservation_bundle.validator.constraints.reservation_modify_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FormaLibre\ReservationBundle\Validator\Constraints\ReservationModifyValidator A FormaLibre\ReservationBundle\Validator\Constraints\ReservationModifyValidator instance
     */
    protected function getFormaLibre_ReservationBundle_Validator_Constraints_ReservationModifyValidatorService()
    {
        return $this->services['forma_libre.reservation_bundle.validator.constraints.reservation_modify_validator'] = new \FormaLibre\ReservationBundle\Validator\Constraints\ReservationModifyValidator($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'forma_libre.reservation_bundle.validator.constraints.reservation_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FormaLibre\ReservationBundle\Validator\Constraints\ReservationValidator A FormaLibre\ReservationBundle\Validator\Constraints\ReservationValidator instance
     */
    protected function getFormaLibre_ReservationBundle_Validator_Constraints_ReservationValidatorService()
    {
        return $this->services['forma_libre.reservation_bundle.validator.constraints.reservation_validator'] = new \FormaLibre\ReservationBundle\Validator\Constraints\ReservationValidator($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'forma_libre.support_bundle.listener.support_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FormaLibre\SupportBundle\Listener\SupportListener A FormaLibre\SupportBundle\Listener\SupportListener instance
     */
    protected function getFormaLibre_SupportBundle_Listener_SupportListenerService()
    {
        return $this->services['forma_libre.support_bundle.listener.support_listener'] = new \FormaLibre\SupportBundle\Listener\SupportListener($this->get('http_kernel'), $this->get('request_stack'), $this->get('router'), $this->get('translator.default'));
    }

    /*
     * Gets the 'formalibre.form.reservation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FormaLibre\ReservationBundle\Form\ReservationType A FormaLibre\ReservationBundle\Form\ReservationType instance
     */
    protected function getFormalibre_Form_ReservationService()
    {
        return $this->services['formalibre.form.reservation'] = new \FormaLibre\ReservationBundle\Form\ReservationType($this->get('formalibre.manager.reservation_manager'), $this->get('doctrine.orm.default_entity_manager'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'formalibre.form.reservation_import_resources_form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FormaLibre\ReservationBundle\Form\ImportResourcesViaCsvFileType A FormaLibre\ReservationBundle\Form\ImportResourcesViaCsvFileType instance
     */
    protected function getFormalibre_Form_ReservationImportResourcesFormService()
    {
        return $this->services['formalibre.form.reservation_import_resources_form'] = new \FormaLibre\ReservationBundle\Form\ImportResourcesViaCsvFileType();
    }

    /*
     * Gets the 'formalibre.form.resource' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FormaLibre\ReservationBundle\Form\ResourceType A FormaLibre\ReservationBundle\Form\ResourceType instance
     */
    protected function getFormalibre_Form_ResourceService()
    {
        return $this->services['formalibre.form.resource'] = new \FormaLibre\ReservationBundle\Form\ResourceType($this->get('doctrine.orm.default_entity_manager'), $this->get('translator.default'));
    }

    /*
     * Gets the 'formalibre.form.resourcetype' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FormaLibre\ReservationBundle\Form\ResourceTypeType A FormaLibre\ReservationBundle\Form\ResourceTypeType instance
     */
    protected function getFormalibre_Form_ResourcetypeService()
    {
        return $this->services['formalibre.form.resourcetype'] = new \FormaLibre\ReservationBundle\Form\ResourceTypeType($this->get('translator.default'));
    }

    /*
     * Gets the 'formalibre.manager.presence_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FormaLibre\PresenceBundle\Manager\PresenceManager A FormaLibre\PresenceBundle\Manager\PresenceManager instance
     */
    protected function getFormalibre_Manager_PresenceManagerService()
    {
        return $this->services['formalibre.manager.presence_manager'] = new \FormaLibre\PresenceBundle\Manager\PresenceManager($this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.role_manager'), $this->get('security.authorization_checker'));
    }

    /*
     * Gets the 'formalibre.manager.reservation_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FormaLibre\ReservationBundle\Manager\ReservationManager A FormaLibre\ReservationBundle\Manager\ReservationManager instance
     */
    protected function getFormalibre_Manager_ReservationManagerService()
    {
        return $this->services['formalibre.manager.reservation_manager'] = new \FormaLibre\ReservationBundle\Manager\ReservationManager($this->get('claroline.persistence.object_manager'), $this->targetDirs[2], $this->get('security.token_storage'), $this->get('translator.default'), $this->get('doctrine.orm.default_entity_manager'), $this->get('claroline.event.event_dispatcher'));
    }

    /*
     * Gets the 'formalibre.manager.support_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FormaLibre\SupportBundle\Manager\SupportManager A FormaLibre\SupportBundle\Manager\SupportManager instance
     */
    protected function getFormalibre_Manager_SupportManagerService()
    {
        return $this->services['formalibre.manager.support_manager'] = new \FormaLibre\SupportBundle\Manager\SupportManager($this->get('claroline.manager.mail_manager'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.pager.pager_factory'), $this->get('router'), $this->get('translator.default'), $this->get('claroline.manager.user_manager'));
    }

    /*
     * Gets the 'fos_js_routing.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\JsRoutingBundle\Controller\Controller A FOS\JsRoutingBundle\Controller\Controller instance
     */
    protected function getFosJsRouting_ControllerService()
    {
        return $this->services['fos_js_routing.controller'] = new \FOS\JsRoutingBundle\Controller\Controller($this->get('fos_js_routing.serializer'), $this->get('fos_js_routing.extractor'), array('enabled' => false), false);
    }

    /*
     * Gets the 'fos_js_routing.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\JsRoutingBundle\Extractor\ExposedRoutesExtractor A FOS\JsRoutingBundle\Extractor\ExposedRoutesExtractor instance
     */
    protected function getFosJsRouting_ExtractorService()
    {
        return $this->services['fos_js_routing.extractor'] = new \FOS\JsRoutingBundle\Extractor\ExposedRoutesExtractor($this->get('router'), array(), __DIR__, array('FrontEndBundle' => 'Claroline\\Bundle\\FrontEndBundle\\FrontEndBundle', 'ClarolineInstallationBundle' => 'Claroline\\InstallationBundle\\ClarolineInstallationBundle', 'ClarolineMigrationBundle' => 'Claroline\\MigrationBundle\\ClarolineMigrationBundle', 'ClarolineCoreBundle' => 'Claroline\\CoreBundle\\ClarolineCoreBundle', 'ClarolineAgendaBundle' => 'Claroline\\AgendaBundle\\ClarolineAgendaBundle', 'FormaLibreReservationBundle' => 'FormaLibre\\ReservationBundle\\FormaLibreReservationBundle', 'ClarolineImagePlayerBundle' => 'Claroline\\ImagePlayerBundle\\ClarolineImagePlayerBundle', 'ClarolineMessageBundle' => 'Claroline\\MessageBundle\\ClarolineMessageBundle', 'ClarolineForumBundle' => 'Claroline\\ForumBundle\\ClarolineForumBundle', 'ClarolineTagBundle' => 'Claroline\\TagBundle\\ClarolineTagBundle', 'FormaLibreSupportBundle' => 'FormaLibre\\SupportBundle\\FormaLibreSupportBundle', 'ClarolineRssReaderBundle' => 'Claroline\\RssReaderBundle\\ClarolineRssReaderBundle', 'IcapNotificationBundle' => 'Icap\\NotificationBundle\\IcapNotificationBundle', 'ClarolineSurveyBundle' => 'Claroline\\SurveyBundle\\ClarolineSurveyBundle', 'ClarolineAnnouncementBundle' => 'Claroline\\AnnouncementBundle\\ClarolineAnnouncementBundle', 'ClarolineScormBundle' => 'Claroline\\ScormBundle\\ClarolineScormBundle', 'ClarolinePdfPlayerBundle' => 'Claroline\\PdfPlayerBundle\\ClarolinePdfPlayerBundle', 'ClarolineCursusBundle' => 'Claroline\\CursusBundle\\ClarolineCursusBundle', 'ClarolineTeamBundle' => 'Claroline\\TeamBundle\\ClarolineTeamBundle', 'ClarolinePdfGeneratorBundle' => 'Claroline\\PdfGeneratorBundle\\ClarolinePdfGeneratorBundle', 'FormaLibrePresenceBundle' => 'FormaLibre\\PresenceBundle\\FormaLibrePresenceBundle', 'ClarolineVideoPlayerBundle' => 'Claroline\\VideoPlayerBundle\\ClarolineVideoPlayerBundle', 'ClarolineActivityToolBundle' => 'Claroline\\ActivityToolBundle\\ClarolineActivityToolBundle', 'ClarolineWebResourceBundle' => 'Claroline\\WebResourceBundle\\ClarolineWebResourceBundle', 'ClarolineTextPlayerBundle' => 'Claroline\\TextPlayerBundle\\ClarolineTextPlayerBundle', 'InnovaCollecticielBundle' => 'Innova\\CollecticielBundle\\InnovaCollecticielBundle', 'HeVinciFavouriteBundle' => 'HeVinci\\FavouriteBundle\\HeVinciFavouriteBundle', 'HeVinciCompetencyBundle' => 'HeVinci\\CompetencyBundle\\HeVinciCompetencyBundle', 'HeVinciUrlBundle' => 'HeVinci\\UrlBundle\\HeVinciUrlBundle', 'IcapPortfolioBundle' => 'Icap\\PortfolioBundle\\IcapPortfolioBundle', 'IcapBadgeBundle' => 'Icap\\BadgeBundle\\IcapBadgeBundle', 'IcapBlogBundle' => 'Icap\\BlogBundle\\IcapBlogBundle', 'IcapDropzoneBundle' => 'Icap\\DropzoneBundle\\IcapDropzoneBundle', 'IcapSocialmediaBundle' => 'Icap\\SocialmediaBundle\\IcapSocialmediaBundle', 'IcapWikiBundle' => 'Icap\\WikiBundle\\IcapWikiBundle', 'IcapOAuthBundle' => 'Icap\\OAuthBundle\\IcapOAuthBundle', 'IcapFormulaPluginBundle' => 'Icap\\FormulaPluginBundle\\IcapFormulaPluginBundle', 'ClarolineResultBundle' => 'Claroline\\ResultBundle\\ClarolineResultBundle', 'InnovaPathBundle' => 'Innova\\PathBundle\\InnovaPathBundle', 'IcapWebsiteBundle' => 'Icap\\WebsiteBundle\\IcapWebsiteBundle', 'ClarolineFlashCardBundle' => 'Claroline\\FlashCardBundle\\ClarolineFlashCardBundle', 'UJMExoBundle' => 'UJM\\ExoBundle\\UJMExoBundle', 'IcapLessonBundle' => 'Icap\\LessonBundle\\IcapLessonBundle', 'ClarolineChatBundle' => 'Claroline\\ChatBundle\\ClarolineChatBundle', 'ClarolineDashboardBundle' => 'Claroline\\DashboardBundle\\ClarolineDashboardBundle', 'ClarolineClacoFormBundle' => 'Claroline\\ClacoFormBundle\\ClarolineClacoFormBundle', 'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle', 'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle', 'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle', 'JMSAopBundle' => 'JMS\\AopBundle\\JMSAopBundle', 'ZenstruckFormBundle' => 'Zenstruck\\Bundle\\FormBundle\\ZenstruckFormBundle', 'BazingaJsTranslationBundle' => 'Bazinga\\Bundle\\JsTranslationBundle\\BazingaJsTranslationBundle', 'WhiteOctoberPagerfantaBundle' => 'WhiteOctober\\PagerfantaBundle\\WhiteOctoberPagerfantaBundle', 'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle', 'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle', 'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle', 'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle', 'StfalconTinymceBundle' => 'Stfalcon\\Bundle\\TinymceBundle\\StfalconTinymceBundle', 'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle', 'KnpSnappyBundle' => 'Knp\\Bundle\\SnappyBundle\\KnpSnappyBundle', 'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle', 'JMSTwigJsBundle' => 'JMS\\TwigJsBundle\\JMSTwigJsBundle', 'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle', 'JMSDiExtraBundle' => 'JMS\\DiExtraBundle\\JMSDiExtraBundle', 'JMSSecurityExtraBundle' => 'JMS\\SecurityExtraBundle\\JMSSecurityExtraBundle', 'InnovaAngularJSBundle' => 'Innova\\AngularJSBundle\\InnovaAngularJSBundle', 'InnovaAngularUITinyMCEBundle' => 'Innova\\AngularUITinyMCEBundle\\InnovaAngularUITinyMCEBundle', 'InnovaAngularUIResourcePickerBundle' => 'Innova\\AngularUIResourcePickerBundle\\InnovaAngularUIResourcePickerBundle', 'IDCIExporterBundle' => 'IDCI\\Bundle\\ExporterBundle\\IDCIExporterBundle', 'HWIOAuthBundle' => 'HWI\\Bundle\\OAuthBundle\\HWIOAuthBundle', 'GregwarCaptchaBundle' => 'Gregwar\\CaptchaBundle\\GregwarCaptchaBundle', 'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle', 'FOSOAuthServerBundle' => 'FOS\\OAuthServerBundle\\FOSOAuthServerBundle', 'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle', 'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle', 'BeSimpleSsoAuthBundle' => 'BeSimple\\SsoAuthBundle\\BeSimpleSsoAuthBundle', 'ClarolineKernelBundle' => 'Claroline\\KernelBundle\\ClarolineKernelBundle'));
    }

    /*
     * Gets the 'fos_js_routing.serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Serializer\Serializer A Symfony\Component\Serializer\Serializer instance
     */
    protected function getFosJsRouting_SerializerService()
    {
        return $this->services['fos_js_routing.serializer'] = new \Symfony\Component\Serializer\Serializer(array(0 => new \Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer()), array('json' => new \Symfony\Component\Serializer\Encoder\JsonEncoder()));
    }

    /*
     * Gets the 'fos_oauth_server.access_token_manager.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\OAuthServerBundle\Entity\AccessTokenManager A FOS\OAuthServerBundle\Entity\AccessTokenManager instance
     */
    protected function getFosOauthServer_AccessTokenManager_DefaultService()
    {
        return $this->services['fos_oauth_server.access_token_manager.default'] = new \FOS\OAuthServerBundle\Entity\AccessTokenManager($this->get('fos_oauth_server.entity_manager'), 'Claroline\\CoreBundle\\Entity\\Oauth\\AccessToken');
    }

    /*
     * Gets the 'fos_oauth_server.auth_code_manager.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\OAuthServerBundle\Entity\AuthCodeManager A FOS\OAuthServerBundle\Entity\AuthCodeManager instance
     */
    protected function getFosOauthServer_AuthCodeManager_DefaultService()
    {
        return $this->services['fos_oauth_server.auth_code_manager.default'] = new \FOS\OAuthServerBundle\Entity\AuthCodeManager($this->get('fos_oauth_server.entity_manager'), 'Claroline\\CoreBundle\\Entity\\Oauth\\AuthCode');
    }

    /*
     * Gets the 'fos_oauth_server.authorize.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance
     */
    protected function getFosOauthServer_Authorize_FormService()
    {
        return $this->services['fos_oauth_server.authorize.form'] = $this->get('form.factory')->createNamed('fos_oauth_server_authorize_form', 'fos_oauth_server_authorize', NULL, array('validation_groups' => array(0 => 'Authorize', 1 => 'Default')));
    }

    /*
     * Gets the 'fos_oauth_server.authorize.form.handler.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\OAuthServerBundle\Form\Handler\AuthorizeFormHandler A FOS\OAuthServerBundle\Form\Handler\AuthorizeFormHandler instance
     */
    protected function getFosOauthServer_Authorize_Form_Handler_DefaultService()
    {
        return $this->services['fos_oauth_server.authorize.form.handler.default'] = new \FOS\OAuthServerBundle\Form\Handler\AuthorizeFormHandler($this->get('fos_oauth_server.authorize.form'), $this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /*
     * Gets the 'fos_oauth_server.authorize.form.type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\OAuthServerBundle\Form\Type\AuthorizeFormType A FOS\OAuthServerBundle\Form\Type\AuthorizeFormType instance
     */
    protected function getFosOauthServer_Authorize_Form_TypeService()
    {
        return $this->services['fos_oauth_server.authorize.form.type'] = new \FOS\OAuthServerBundle\Form\Type\AuthorizeFormType();
    }

    /*
     * Gets the 'fos_oauth_server.client_manager.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\OAuthServerBundle\Entity\ClientManager A FOS\OAuthServerBundle\Entity\ClientManager instance
     */
    protected function getFosOauthServer_ClientManager_DefaultService()
    {
        return $this->services['fos_oauth_server.client_manager.default'] = new \FOS\OAuthServerBundle\Entity\ClientManager($this->get('fos_oauth_server.entity_manager'), 'Claroline\\CoreBundle\\Entity\\Oauth\\Client');
    }

    /*
     * Gets the 'fos_oauth_server.controller.token' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\OAuthServerBundle\Controller\TokenController A FOS\OAuthServerBundle\Controller\TokenController instance
     */
    protected function getFosOauthServer_Controller_TokenService()
    {
        return $this->services['fos_oauth_server.controller.token'] = new \FOS\OAuthServerBundle\Controller\TokenController($this->get('fos_oauth_server.server'));
    }

    /*
     * Gets the 'fos_oauth_server.refresh_token_manager.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\OAuthServerBundle\Entity\RefreshTokenManager A FOS\OAuthServerBundle\Entity\RefreshTokenManager instance
     */
    protected function getFosOauthServer_RefreshTokenManager_DefaultService()
    {
        return $this->services['fos_oauth_server.refresh_token_manager.default'] = new \FOS\OAuthServerBundle\Entity\RefreshTokenManager($this->get('fos_oauth_server.entity_manager'), 'Claroline\\CoreBundle\\Entity\\Oauth\\RefreshToken');
    }

    /*
     * Gets the 'fos_oauth_server.server' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \OAuth2\OAuth2 A OAuth2\OAuth2 instance
     */
    protected function getFosOauthServer_ServerService()
    {
        return $this->services['fos_oauth_server.server'] = new \OAuth2\OAuth2($this->get('fos_oauth_server.storage'), array('access_token_lifetime' => 3600, 'refresh_token_lifetime' => 1209600, 'auth_code_lifetime' => 30, 'supported_scopes' => 'user admin'));
    }

    /*
     * Gets the 'fos_oauth_server.storage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\OAuthServerBundle\Storage\OAuthStorage A FOS\OAuthServerBundle\Storage\OAuthStorage instance
     */
    protected function getFosOauthServer_StorageService()
    {
        return $this->services['fos_oauth_server.storage'] = new \FOS\OAuthServerBundle\Storage\OAuthStorage($this->get('fos_oauth_server.client_manager.default'), $this->get('fos_oauth_server.access_token_manager.default'), $this->get('fos_oauth_server.refresh_token_manager.default'), $this->get('fos_oauth_server.auth_code_manager.default'), $this->get('security.user.provider.concrete.user_db', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.encoder_factory'));
    }

    /*
     * Gets the 'fos_rest.body_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\EventListener\BodyListener A FOS\RestBundle\EventListener\BodyListener instance
     */
    protected function getFosRest_BodyListenerService()
    {
        $this->services['fos_rest.body_listener'] = $instance = new \FOS\RestBundle\EventListener\BodyListener($this->get('fos_rest.decoder_provider'), false);

        $instance->setDefaultFormat(NULL);

        return $instance;
    }

    /*
     * Gets the 'fos_rest.converter.request_body' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Request\RequestBodyParamConverter A FOS\RestBundle\Request\RequestBodyParamConverter instance
     */
    protected function getFosRest_Converter_RequestBodyService()
    {
        return $this->services['fos_rest.converter.request_body'] = new \FOS\RestBundle\Request\RequestBodyParamConverter($this->get('jms_serializer'), array(), '', NULL, 'validationErrors');
    }

    /*
     * Gets the 'fos_rest.decoder.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Decoder\JsonDecoder A FOS\RestBundle\Decoder\JsonDecoder instance
     */
    protected function getFosRest_Decoder_JsonService()
    {
        return $this->services['fos_rest.decoder.json'] = new \FOS\RestBundle\Decoder\JsonDecoder();
    }

    /*
     * Gets the 'fos_rest.decoder.jsontoform' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Decoder\JsonToFormDecoder A FOS\RestBundle\Decoder\JsonToFormDecoder instance
     */
    protected function getFosRest_Decoder_JsontoformService()
    {
        return $this->services['fos_rest.decoder.jsontoform'] = new \FOS\RestBundle\Decoder\JsonToFormDecoder();
    }

    /*
     * Gets the 'fos_rest.decoder.xml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Decoder\XmlDecoder A FOS\RestBundle\Decoder\XmlDecoder instance
     */
    protected function getFosRest_Decoder_XmlService()
    {
        return $this->services['fos_rest.decoder.xml'] = new \FOS\RestBundle\Decoder\XmlDecoder();
    }

    /*
     * Gets the 'fos_rest.decoder_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Decoder\ContainerDecoderProvider A FOS\RestBundle\Decoder\ContainerDecoderProvider instance
     */
    protected function getFosRest_DecoderProviderService()
    {
        $this->services['fos_rest.decoder_provider'] = $instance = new \FOS\RestBundle\Decoder\ContainerDecoderProvider(array('json' => 'fos_rest.decoder.json', 'xml' => 'fos_rest.decoder.xml'));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'fos_rest.exception_format_negotiator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Util\FormatNegotiator A FOS\RestBundle\Util\FormatNegotiator instance
     */
    protected function getFosRest_ExceptionFormatNegotiatorService()
    {
        return $this->services['fos_rest.exception_format_negotiator'] = new \FOS\RestBundle\Util\FormatNegotiator();
    }

    /*
     * Gets the 'fos_rest.form.extension.csrf_disable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Form\Extension\DisableCSRFExtension A FOS\RestBundle\Form\Extension\DisableCSRFExtension instance
     */
    protected function getFosRest_Form_Extension_CsrfDisableService()
    {
        return $this->services['fos_rest.form.extension.csrf_disable'] = new \FOS\RestBundle\Form\Extension\DisableCSRFExtension($this->get('security.token_storage'), 'ROLE_API', $this->get('security.authorization_checker'));
    }

    /*
     * Gets the 'fos_rest.format_negotiator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Util\FormatNegotiator A FOS\RestBundle\Util\FormatNegotiator instance
     */
    protected function getFosRest_FormatNegotiatorService()
    {
        return $this->services['fos_rest.format_negotiator'] = new \FOS\RestBundle\Util\FormatNegotiator();
    }

    /*
     * Gets the 'fos_rest.inflector.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Util\Inflector\DoctrineInflector A FOS\RestBundle\Util\Inflector\DoctrineInflector instance
     */
    protected function getFosRest_Inflector_DoctrineService()
    {
        return $this->services['fos_rest.inflector.doctrine'] = new \FOS\RestBundle\Util\Inflector\DoctrineInflector();
    }

    /*
     * Gets the 'fos_rest.mime_type_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\EventListener\MimeTypeListener A FOS\RestBundle\EventListener\MimeTypeListener instance
     */
    protected function getFosRest_MimeTypeListenerService()
    {
        return $this->services['fos_rest.mime_type_listener'] = new \FOS\RestBundle\EventListener\MimeTypeListener(array('enabled' => true, 'formats' => array('csv' => array(0 => 'text/plain', 1 => 'text/csv'), 'xls' => array(0 => 'text/plain', 1 => 'application/excel')), 'service' => NULL), $this->get('fos_rest.format_negotiator'));
    }

    /*
     * Gets the 'fos_rest.normalizer.camel_keys' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Normalizer\CamelKeysNormalizer A FOS\RestBundle\Normalizer\CamelKeysNormalizer instance
     */
    protected function getFosRest_Normalizer_CamelKeysService()
    {
        return $this->services['fos_rest.normalizer.camel_keys'] = new \FOS\RestBundle\Normalizer\CamelKeysNormalizer();
    }

    /*
     * Gets the 'fos_rest.normalizer.camel_keys_with_leading_underscore' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Normalizer\CamelKeysNormalizerWithLeadingUnderscore A FOS\RestBundle\Normalizer\CamelKeysNormalizerWithLeadingUnderscore instance
     */
    protected function getFosRest_Normalizer_CamelKeysWithLeadingUnderscoreService()
    {
        return $this->services['fos_rest.normalizer.camel_keys_with_leading_underscore'] = new \FOS\RestBundle\Normalizer\CamelKeysNormalizerWithLeadingUnderscore();
    }

    /*
     * Gets the 'fos_rest.param_fetcher_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\EventListener\ParamFetcherListener A FOS\RestBundle\EventListener\ParamFetcherListener instance
     */
    protected function getFosRest_ParamFetcherListenerService()
    {
        return $this->services['fos_rest.param_fetcher_listener'] = new \FOS\RestBundle\EventListener\ParamFetcherListener($this, false);
    }

    /*
     * Gets the 'fos_rest.request.param_fetcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Request\ParamFetcher A FOS\RestBundle\Request\ParamFetcher instance
     */
    protected function getFosRest_Request_ParamFetcherService()
    {
        return $this->services['fos_rest.request.param_fetcher'] = new \FOS\RestBundle\Request\ParamFetcher($this->get('fos_rest.request.param_fetcher.reader'), $this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('fos_rest.violation_formatter'), $this->get('validator', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /*
     * Gets the 'fos_rest.request.param_fetcher.reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Request\ParamReader A FOS\RestBundle\Request\ParamReader instance
     */
    protected function getFosRest_Request_ParamFetcher_ReaderService()
    {
        return $this->services['fos_rest.request.param_fetcher.reader'] = new \FOS\RestBundle\Request\ParamReader($this->get('annotation_reader'));
    }

    /*
     * Gets the 'fos_rest.routing.loader.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestRouteLoader A FOS\RestBundle\Routing\Loader\RestRouteLoader instance
     */
    protected function getFosRest_Routing_Loader_ControllerService()
    {
        return $this->services['fos_rest.routing.loader.controller'] = new \FOS\RestBundle\Routing\Loader\RestRouteLoader($this, $this->get('file_locator'), $this->get('controller_name_converter'), $this->get('fos_rest.routing.loader.reader.controller'), NULL);
    }

    /*
     * Gets the 'fos_rest.routing.loader.processor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestRouteProcessor A FOS\RestBundle\Routing\Loader\RestRouteProcessor instance
     */
    protected function getFosRest_Routing_Loader_ProcessorService()
    {
        return $this->services['fos_rest.routing.loader.processor'] = new \FOS\RestBundle\Routing\Loader\RestRouteProcessor();
    }

    /*
     * Gets the 'fos_rest.routing.loader.reader.action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\Reader\RestActionReader A FOS\RestBundle\Routing\Loader\Reader\RestActionReader instance
     */
    protected function getFosRest_Routing_Loader_Reader_ActionService()
    {
        return $this->services['fos_rest.routing.loader.reader.action'] = new \FOS\RestBundle\Routing\Loader\Reader\RestActionReader($this->get('annotation_reader'), $this->get('fos_rest.request.param_fetcher.reader'), $this->get('fos_rest.inflector.doctrine'), true, array('json' => false, 'xml' => false, 'csv' => false, 'xls' => false, 'html' => true));
    }

    /*
     * Gets the 'fos_rest.routing.loader.reader.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\Reader\RestControllerReader A FOS\RestBundle\Routing\Loader\Reader\RestControllerReader instance
     */
    protected function getFosRest_Routing_Loader_Reader_ControllerService()
    {
        return $this->services['fos_rest.routing.loader.reader.controller'] = new \FOS\RestBundle\Routing\Loader\Reader\RestControllerReader($this->get('fos_rest.routing.loader.reader.action'), $this->get('annotation_reader'));
    }

    /*
     * Gets the 'fos_rest.routing.loader.xml_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader A FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader instance
     */
    protected function getFosRest_Routing_Loader_XmlCollectionService()
    {
        return $this->services['fos_rest.routing.loader.xml_collection'] = new \FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader($this->get('file_locator'), $this->get('fos_rest.routing.loader.processor'), true, array('json' => false, 'xml' => false, 'csv' => false, 'xls' => false, 'html' => true), NULL);
    }

    /*
     * Gets the 'fos_rest.routing.loader.yaml_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader A FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader instance
     */
    protected function getFosRest_Routing_Loader_YamlCollectionService()
    {
        return $this->services['fos_rest.routing.loader.yaml_collection'] = new \FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader($this->get('file_locator'), $this->get('fos_rest.routing.loader.processor'), true, array('json' => false, 'xml' => false, 'csv' => false, 'xls' => false, 'html' => true), NULL);
    }

    /*
     * Gets the 'fos_rest.serializer.exception_wrapper_normalizer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Serializer\ExceptionWrapperNormalizer A FOS\RestBundle\Serializer\ExceptionWrapperNormalizer instance
     */
    protected function getFosRest_Serializer_ExceptionWrapperNormalizerService()
    {
        return $this->services['fos_rest.serializer.exception_wrapper_normalizer'] = new \FOS\RestBundle\Serializer\ExceptionWrapperNormalizer($this->get('translator.default'));
    }

    /*
     * Gets the 'fos_rest.serializer.exception_wrapper_serialize_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Serializer\ExceptionWrapperSerializeHandler A FOS\RestBundle\Serializer\ExceptionWrapperSerializeHandler instance
     */
    protected function getFosRest_Serializer_ExceptionWrapperSerializeHandlerService()
    {
        return $this->services['fos_rest.serializer.exception_wrapper_serialize_handler'] = new \FOS\RestBundle\Serializer\ExceptionWrapperSerializeHandler();
    }

    /*
     * Gets the 'fos_rest.view.exception_wrapper_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\View\ExceptionWrapperHandler A FOS\RestBundle\View\ExceptionWrapperHandler instance
     */
    protected function getFosRest_View_ExceptionWrapperHandlerService()
    {
        return $this->services['fos_rest.view.exception_wrapper_handler'] = new \FOS\RestBundle\View\ExceptionWrapperHandler();
    }

    /*
     * Gets the 'fos_rest.view_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\View\ViewHandler A Claroline\CoreBundle\Library\View\ViewHandler instance
     */
    protected function getFosRest_ViewHandlerService()
    {
        $a = $this->get('claroline.view_handler.exporter.class');

        $this->services['fos_rest.view_handler'] = $instance = new \Claroline\CoreBundle\Library\View\ViewHandler(array('json' => false, 'xml' => false, 'csv' => false, 'xls' => false, 'html' => true), 400, 204, false, array('html' => 302), 'twig');

        $instance->setExclusionStrategyGroups(array());
        $instance->setExclusionStrategyVersion('');
        $instance->setSerializeNullStrategy(false);
        $instance->setContainer($this);
        $instance->registerHandler('csv', array(0 => $a, 1 => 'createResponse'));
        $instance->registerHandler('xls', array(0 => $a, 1 => 'createResponse'));

        return $instance;
    }

    /*
     * Gets the 'fos_rest.view_response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\EventListener\ViewResponseListener A FOS\RestBundle\EventListener\ViewResponseListener instance
     */
    protected function getFosRest_ViewResponseListenerService()
    {
        return $this->services['fos_rest.view_response_listener'] = new \FOS\RestBundle\EventListener\ViewResponseListener($this);
    }

    /*
     * Gets the 'fos_rest.violation_formatter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Util\ViolationFormatter A FOS\RestBundle\Util\ViolationFormatter instance
     */
    protected function getFosRest_ViolationFormatterService()
    {
        return $this->services['fos_rest.violation_formatter'] = new \FOS\RestBundle\Util\ViolationFormatter();
    }

    /*
     * Gets the 'fragment.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler A Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler instance
     */
    protected function getFragment_HandlerService()
    {
        $this->services['fragment.handler'] = $instance = new \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler($this, false, $this->get('request_stack'));

        $instance->addRendererService('inline', 'fragment.renderer.inline');
        $instance->addRendererService('hinclude', 'fragment.renderer.hinclude');
        $instance->addRendererService('hinclude', 'fragment.renderer.hinclude');
        $instance->addRendererService('esi', 'fragment.renderer.esi');
        $instance->addRendererService('ssi', 'fragment.renderer.ssi');

        return $instance;
    }

    /*
     * Gets the 'fragment.renderer.esi' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer A Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer instance
     */
    protected function getFragment_Renderer_EsiService()
    {
        $this->services['fragment.renderer.esi'] = $instance = new \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer(NULL, $this->get('fragment.renderer.inline'), $this->get('uri_signer'));

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /*
     * Gets the 'fragment.renderer.hinclude' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer A Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer instance
     */
    protected function getFragment_Renderer_HincludeService()
    {
        $this->services['fragment.renderer.hinclude'] = $instance = new \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer($this->get('twig'), $this->get('uri_signer'), NULL);

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /*
     * Gets the 'fragment.renderer.inline' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer A Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer instance
     */
    protected function getFragment_Renderer_InlineService()
    {
        $this->services['fragment.renderer.inline'] = $instance = new \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer($this->get('http_kernel'), $this->get('event_dispatcher'));

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /*
     * Gets the 'fragment.renderer.ssi' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer A Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer instance
     */
    protected function getFragment_Renderer_SsiService()
    {
        $this->services['fragment.renderer.ssi'] = $instance = new \Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer(NULL, $this->get('fragment.renderer.inline'), $this->get('uri_signer'));

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /*
     * Gets the 'gregwar_captcha.captcha_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Gregwar\Captcha\CaptchaBuilder A Gregwar\Captcha\CaptchaBuilder instance
     */
    protected function getGregwarCaptcha_CaptchaBuilderService()
    {
        return $this->services['gregwar_captcha.captcha_builder'] = new \Gregwar\Captcha\CaptchaBuilder();
    }

    /*
     * Gets the 'gregwar_captcha.generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Gregwar\CaptchaBundle\Generator\CaptchaGenerator A Gregwar\CaptchaBundle\Generator\CaptchaGenerator instance
     */
    protected function getGregwarCaptcha_GeneratorService()
    {
        return $this->services['gregwar_captcha.generator'] = new \Gregwar\CaptchaBundle\Generator\CaptchaGenerator($this->get('router'), $this->get('gregwar_captcha.captcha_builder'), $this->get('gregwar_captcha.phrase_builder'), $this->get('gregwar_captcha.image_file_handler'));
    }

    /*
     * Gets the 'gregwar_captcha.image_file_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Gregwar\CaptchaBundle\Generator\ImageFileHandler A Gregwar\CaptchaBundle\Generator\ImageFileHandler instance
     */
    protected function getGregwarCaptcha_ImageFileHandlerService()
    {
        return $this->services['gregwar_captcha.image_file_handler'] = new \Gregwar\CaptchaBundle\Generator\ImageFileHandler('captcha', ($this->targetDirs[2].'/../web'), 100, 60);
    }

    /*
     * Gets the 'gregwar_captcha.phrase_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Gregwar\Captcha\PhraseBuilder A Gregwar\Captcha\PhraseBuilder instance
     */
    protected function getGregwarCaptcha_PhraseBuilderService()
    {
        return $this->services['gregwar_captcha.phrase_builder'] = new \Gregwar\Captcha\PhraseBuilder();
    }

    /*
     * Gets the 'he_vinci.competency_bundle.form.field.levels_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Form\Field\LevelsType A HeVinci\CompetencyBundle\Form\Field\LevelsType instance
     */
    protected function getHeVinci_CompetencyBundle_Form_Field_LevelsTypeService()
    {
        return $this->services['he_vinci.competency_bundle.form.field.levels_type'] = new \HeVinci\CompetencyBundle\Form\Field\LevelsType();
    }

    /*
     * Gets the 'he_vinci.competency_bundle.security.admin_tool_access_evaluator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Security\AdminToolAccessEvaluator A HeVinci\CompetencyBundle\Security\AdminToolAccessEvaluator instance
     */
    protected function getHeVinci_CompetencyBundle_Security_AdminToolAccessEvaluatorService()
    {
        return $this->services['he_vinci.competency_bundle.security.admin_tool_access_evaluator'] = new \HeVinci\CompetencyBundle\Security\AdminToolAccessEvaluator($this->get('security.context'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'he_vinci.competency_bundle.twig.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Twig\Extension A HeVinci\CompetencyBundle\Twig\Extension instance
     */
    protected function getHeVinci_CompetencyBundle_Twig_ExtensionService()
    {
        return $this->services['he_vinci.competency_bundle.twig.extension'] = new \HeVinci\CompetencyBundle\Twig\Extension();
    }

    /*
     * Gets the 'he_vinci.competency_bundle.validator.existing_ability_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Validator\ExistingAbilityValidator A HeVinci\CompetencyBundle\Validator\ExistingAbilityValidator instance
     */
    protected function getHeVinci_CompetencyBundle_Validator_ExistingAbilityValidatorService()
    {
        return $this->services['he_vinci.competency_bundle.validator.existing_ability_validator'] = new \HeVinci\CompetencyBundle\Validator\ExistingAbilityValidator($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'he_vinci.competency_bundle.validator.importable_framework_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Validator\ImportableFrameworkValidator A HeVinci\CompetencyBundle\Validator\ImportableFrameworkValidator instance
     */
    protected function getHeVinci_CompetencyBundle_Validator_ImportableFrameworkValidatorService()
    {
        return $this->services['he_vinci.competency_bundle.validator.importable_framework_validator'] = new \HeVinci\CompetencyBundle\Validator\ImportableFrameworkValidator($this->get('hevinci.competency.transfer_validator'));
    }

    /*
     * Gets the 'he_vinci.competency_bundle.validator.unique_competency_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Validator\UniqueCompetencyValidator A HeVinci\CompetencyBundle\Validator\UniqueCompetencyValidator instance
     */
    protected function getHeVinci_CompetencyBundle_Validator_UniqueCompetencyValidatorService()
    {
        return $this->services['he_vinci.competency_bundle.validator.unique_competency_validator'] = new \HeVinci\CompetencyBundle\Validator\UniqueCompetencyValidator($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'he_vinci.favourite_bundle.listener.favourite_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\FavouriteBundle\Listener\FavouriteListener A HeVinci\FavouriteBundle\Listener\FavouriteListener instance
     */
    protected function getHeVinci_FavouriteBundle_Listener_FavouriteListenerService()
    {
        return $this->services['he_vinci.favourite_bundle.listener.favourite_listener'] = new \HeVinci\FavouriteBundle\Listener\FavouriteListener($this->get('claroline.persistence.object_manager'), $this->get('security.token_storage'), $this->get('router'), $this->get('templating'));
    }

    /*
     * Gets the 'he_vinci.favourite_bundle.twig.resource_path_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\FavouriteBundle\Twig\ResourcePathExtension A HeVinci\FavouriteBundle\Twig\ResourcePathExtension instance
     */
    protected function getHeVinci_FavouriteBundle_Twig_ResourcePathExtensionService()
    {
        return $this->services['he_vinci.favourite_bundle.twig.resource_path_extension'] = new \HeVinci\FavouriteBundle\Twig\ResourcePathExtension($this->get('doctrine'), $this->get('router'));
    }

    /*
     * Gets the 'he_vinci.url_bundle.listener.url_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\UrlBundle\Listener\UrlListener A HeVinci\UrlBundle\Listener\UrlListener instance
     */
    protected function getHeVinci_UrlBundle_Listener_UrlListenerService()
    {
        return $this->services['he_vinci.url_bundle.listener.url_listener'] = new \HeVinci\UrlBundle\Listener\UrlListener($this->get('form.factory'), $this->get('claroline.persistence.object_manager'), $this->get('request_stack'), $this->get('templating'), $this->get('claroline.manager.resource_manager'), $this->get('hevinci_url.manager.url'));
    }

    /*
     * Gets the 'he_vinci.url_bundle.validator.constraints.reachable_url_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\UrlBundle\Validator\Constraints\ReachableUrlValidator A HeVinci\UrlBundle\Validator\Constraints\ReachableUrlValidator instance
     */
    protected function getHeVinci_UrlBundle_Validator_Constraints_ReachableUrlValidatorService()
    {
        return $this->services['he_vinci.url_bundle.validator.constraints.reachable_url_validator'] = new \HeVinci\UrlBundle\Validator\Constraints\ReachableUrlValidator();
    }

    /*
     * Gets the 'hevinci.competency.activity_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Listener\ActivityListener A HeVinci\CompetencyBundle\Listener\ActivityListener instance
     */
    protected function getHevinci_Competency_ActivityListenerService()
    {
        return $this->services['hevinci.competency.activity_listener'] = new \HeVinci\CompetencyBundle\Listener\ActivityListener($this->get('hevinci.competency.progress_manager'));
    }

    /*
     * Gets the 'hevinci.competency.activity_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Manager\ActivityManager A HeVinci\CompetencyBundle\Manager\ActivityManager instance
     */
    protected function getHevinci_Competency_ActivityManagerService()
    {
        return $this->services['hevinci.competency.activity_manager'] = new \HeVinci\CompetencyBundle\Manager\ActivityManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'hevinci.competency.competency_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Manager\CompetencyManager A HeVinci\CompetencyBundle\Manager\CompetencyManager instance
     */
    protected function getHevinci_Competency_CompetencyManagerService()
    {
        return $this->services['hevinci.competency.competency_manager'] = new \HeVinci\CompetencyBundle\Manager\CompetencyManager($this->get('claroline.persistence.object_manager'), $this->get('translator.default'), $this->get('hevinci.competency.transfer_converter'));
    }

    /*
     * Gets the 'hevinci.competency.data_conflict_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Transfer\Validator\DataConflictValidator A HeVinci\CompetencyBundle\Transfer\Validator\DataConflictValidator instance
     */
    protected function getHevinci_Competency_DataConflictValidatorService()
    {
        return $this->services['hevinci.competency.data_conflict_validator'] = new \HeVinci\CompetencyBundle\Transfer\Validator\DataConflictValidator($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'hevinci.competency.data_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Transfer\Validator\DataConstraintValidator A HeVinci\CompetencyBundle\Transfer\Validator\DataConstraintValidator instance
     */
    protected function getHevinci_Competency_DataValidatorService()
    {
        return $this->services['hevinci.competency.data_validator'] = new \HeVinci\CompetencyBundle\Transfer\Validator\DataConstraintValidator();
    }

    /*
     * Gets the 'hevinci.competency.json_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Transfer\Validator\JsonValidator A HeVinci\CompetencyBundle\Transfer\Validator\JsonValidator instance
     */
    protected function getHevinci_Competency_JsonValidatorService()
    {
        return $this->services['hevinci.competency.json_validator'] = new \HeVinci\CompetencyBundle\Transfer\Validator\JsonValidator();
    }

    /*
     * Gets the 'hevinci.competency.objective_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Manager\ObjectiveManager A HeVinci\CompetencyBundle\Manager\ObjectiveManager instance
     */
    protected function getHevinci_Competency_ObjectiveManagerService()
    {
        return $this->services['hevinci.competency.objective_manager'] = new \HeVinci\CompetencyBundle\Manager\ObjectiveManager($this->get('claroline.persistence.object_manager'), $this->get('hevinci.competency.competency_manager'), $this->get('hevinci.competency.progress_manager'), $this->get('claroline.pager.pager_factory'));
    }

    /*
     * Gets the 'hevinci.competency.plugin_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Listener\PluginListener A HeVinci\CompetencyBundle\Listener\PluginListener instance
     */
    protected function getHevinci_Competency_PluginListenerService()
    {
        return $this->services['hevinci.competency.plugin_listener'] = new \HeVinci\CompetencyBundle\Listener\PluginListener($this->get('request_stack'), $this->get('http_kernel'));
    }

    /*
     * Gets the 'hevinci.competency.progress_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Manager\ProgressManager A HeVinci\CompetencyBundle\Manager\ProgressManager instance
     */
    protected function getHevinci_Competency_ProgressManagerService()
    {
        return $this->services['hevinci.competency.progress_manager'] = new \HeVinci\CompetencyBundle\Manager\ProgressManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'hevinci.competency.transfer_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Transfer\Converter A HeVinci\CompetencyBundle\Transfer\Converter instance
     */
    protected function getHevinci_Competency_TransferConverterService()
    {
        return $this->services['hevinci.competency.transfer_converter'] = new \HeVinci\CompetencyBundle\Transfer\Converter($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'hevinci.competency.transfer_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Transfer\Validator A HeVinci\CompetencyBundle\Transfer\Validator instance
     */
    protected function getHevinci_Competency_TransferValidatorService()
    {
        return $this->services['hevinci.competency.transfer_validator'] = new \HeVinci\CompetencyBundle\Transfer\Validator($this->get('hevinci.competency.json_validator'), $this->get('hevinci.competency.data_validator'), $this->get('hevinci.competency.data_conflict_validator'));
    }

    /*
     * Gets the 'hevinci.form.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Form\Handler\FormHandler A HeVinci\CompetencyBundle\Form\Handler\FormHandler instance
     */
    protected function getHevinci_Form_HandlerService()
    {
        return $this->services['hevinci.form.handler'] = new \HeVinci\CompetencyBundle\Form\Handler\FormHandler($this->get('form.factory'));
    }

    /*
     * Gets the 'hevinci_form_ability' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Form\AbilityType A HeVinci\CompetencyBundle\Form\AbilityType instance
     */
    protected function getHevinciFormAbilityService()
    {
        return $this->services['hevinci_form_ability'] = new \HeVinci\CompetencyBundle\Form\AbilityType();
    }

    /*
     * Gets the 'hevinci_form_ability_import' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Form\AbilityImportType A HeVinci\CompetencyBundle\Form\AbilityImportType instance
     */
    protected function getHevinciFormAbilityImportService()
    {
        return $this->services['hevinci_form_ability_import'] = new \HeVinci\CompetencyBundle\Form\AbilityImportType($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'hevinci_form_competency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Form\CompetencyType A HeVinci\CompetencyBundle\Form\CompetencyType instance
     */
    protected function getHevinciFormCompetencyService()
    {
        return $this->services['hevinci_form_competency'] = new \HeVinci\CompetencyBundle\Form\CompetencyType();
    }

    /*
     * Gets the 'hevinci_form_framework' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Form\FrameworkType A HeVinci\CompetencyBundle\Form\FrameworkType instance
     */
    protected function getHevinciFormFrameworkService()
    {
        return $this->services['hevinci_form_framework'] = new \HeVinci\CompetencyBundle\Form\FrameworkType();
    }

    /*
     * Gets the 'hevinci_form_import_framework' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Form\FrameworkImportType A HeVinci\CompetencyBundle\Form\FrameworkImportType instance
     */
    protected function getHevinciFormImportFrameworkService()
    {
        return $this->services['hevinci_form_import_framework'] = new \HeVinci\CompetencyBundle\Form\FrameworkImportType();
    }

    /*
     * Gets the 'hevinci_form_objective' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Form\ObjectiveType A HeVinci\CompetencyBundle\Form\ObjectiveType instance
     */
    protected function getHevinciFormObjectiveService()
    {
        return $this->services['hevinci_form_objective'] = new \HeVinci\CompetencyBundle\Form\ObjectiveType();
    }

    /*
     * Gets the 'hevinci_form_scale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\CompetencyBundle\Form\ScaleType A HeVinci\CompetencyBundle\Form\ScaleType instance
     */
    protected function getHevinciFormScaleService()
    {
        return $this->services['hevinci_form_scale'] = new \HeVinci\CompetencyBundle\Form\ScaleType();
    }

    /*
     * Gets the 'hevinci_url.manager.url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HeVinci\UrlBundle\Manager\UrlManager A HeVinci\UrlBundle\Manager\UrlManager instance
     */
    protected function getHevinciUrl_Manager_UrlService()
    {
        return $this->services['hevinci_url.manager.url'] = new \HeVinci\UrlBundle\Manager\UrlManager($this->get('claroline.persistence.object_manager'), $this->get('request_stack'));
    }

    /*
     * Gets the 'http_kernel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel A Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel instance
     */
    protected function getHttpKernelService()
    {
        return $this->services['http_kernel'] = new \Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel($this->get('event_dispatcher'), $this, $this->get('jms_di_extra.controller_resolver'), $this->get('request_stack'), false);
    }

    /*
     * Gets the 'hwi_oauth.http_client' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Buzz\Client\Curl A Buzz\Client\Curl instance
     */
    protected function getHwiOauth_HttpClientService()
    {
        $this->services['hwi_oauth.http_client'] = $instance = new \Buzz\Client\Curl();

        $instance->setVerifyPeer(true);
        $instance->setTimeout(5);
        $instance->setMaxRedirects(5);
        $instance->setIgnoreErrors(true);

        return $instance;
    }

    /*
     * Gets the 'hwi_oauth.resource_owner.facebook' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FacebookResourceOwner A FacebookResourceOwner instance
     */
    protected function getHwiOauth_ResourceOwner_FacebookService()
    {
        return $this->services['hwi_oauth.resource_owner.facebook'] = $this->get('icap.oauth.hwi.resource_owner_factory')->getFacebookResourceOwner();
    }

    /*
     * Gets the 'hwi_oauth.resource_owner.google' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \GoogleResourceOwner A GoogleResourceOwner instance
     */
    protected function getHwiOauth_ResourceOwner_GoogleService()
    {
        return $this->services['hwi_oauth.resource_owner.google'] = $this->get('icap.oauth.hwi.resource_owner_factory')->getGoogleResourceOwner();
    }

    /*
     * Gets the 'hwi_oauth.resource_owner.linkedin' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \LinkedinResourceOwner A LinkedinResourceOwner instance
     */
    protected function getHwiOauth_ResourceOwner_LinkedinService()
    {
        return $this->services['hwi_oauth.resource_owner.linkedin'] = $this->get('icap.oauth.hwi.resource_owner_factory')->getLinkedinResourceOwner();
    }

    /*
     * Gets the 'hwi_oauth.resource_owner.office_365' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Office365ResourceOwner A Office365ResourceOwner instance
     */
    protected function getHwiOauth_ResourceOwner_Office365Service()
    {
        return $this->services['hwi_oauth.resource_owner.office_365'] = $this->get('icap.oauth.hwi.resource_owner_factory')->getOffice365ResourceOwner();
    }

    /*
     * Gets the 'hwi_oauth.resource_owner.twitter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \TwitterResourceOwner A TwitterResourceOwner instance
     */
    protected function getHwiOauth_ResourceOwner_TwitterService()
    {
        return $this->services['hwi_oauth.resource_owner.twitter'] = $this->get('icap.oauth.hwi.resource_owner_factory')->getTwitterResourceOwner();
    }

    /*
     * Gets the 'hwi_oauth.resource_owner.windows_live' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \WindowsLiveResourceOwner A WindowsLiveResourceOwner instance
     */
    protected function getHwiOauth_ResourceOwner_WindowsLiveService()
    {
        return $this->services['hwi_oauth.resource_owner.windows_live'] = $this->get('icap.oauth.hwi.resource_owner_factory')->getWindowsLiveResourceOwner();
    }

    /*
     * Gets the 'hwi_oauth.resource_ownermap.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HWI\Bundle\OAuthBundle\Security\Http\ResourceOwnerMap A HWI\Bundle\OAuthBundle\Security\Http\ResourceOwnerMap instance
     */
    protected function getHwiOauth_ResourceOwnermap_MainService()
    {
        $this->services['hwi_oauth.resource_ownermap.main'] = $instance = new \HWI\Bundle\OAuthBundle\Security\Http\ResourceOwnerMap($this->get('security.http_utils'), array('facebook' => 'facebook', 'twitter' => 'twitter', 'google' => 'google', 'linkedin' => 'linkedin', 'windows_live' => 'windows_live', 'office_365' => 'office_365'), array('facebook' => '/login/check-facebook', 'twitter' => '/login/check-twitter', 'google' => '/login/check-google', 'linkedin' => '/login/check-linkedin', 'windows_live' => '/login/check-windows', 'office_365' => '/login/check-o365'));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'hwi_oauth.security.oauth_utils' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HWI\Bundle\OAuthBundle\Security\OAuthUtils A HWI\Bundle\OAuthBundle\Security\OAuthUtils instance
     */
    protected function getHwiOauth_Security_OauthUtilsService()
    {
        $this->services['hwi_oauth.security.oauth_utils'] = $instance = new \HWI\Bundle\OAuthBundle\Security\OAuthUtils($this->get('security.http_utils'), $this->get('security.authorization_checker'), false);

        $instance->addResourceOwnerMap($this->get('hwi_oauth.resource_ownermap.main'));

        return $instance;
    }

    /*
     * Gets the 'hwi_oauth.templating.helper.oauth' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HWI\Bundle\OAuthBundle\Templating\Helper\OAuthHelper A HWI\Bundle\OAuthBundle\Templating\Helper\OAuthHelper instance
     */
    protected function getHwiOauth_Templating_Helper_OauthService()
    {
        $this->services['hwi_oauth.templating.helper.oauth'] = $instance = new \HWI\Bundle\OAuthBundle\Templating\Helper\OAuthHelper($this->get('hwi_oauth.security.oauth_utils'));

        $instance->setRequest($this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        return $instance;
    }

    /*
     * Gets the 'hwi_oauth.user.provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HWI\Bundle\OAuthBundle\Security\Core\User\OAuthUserProvider A HWI\Bundle\OAuthBundle\Security\Core\User\OAuthUserProvider instance
     */
    protected function getHwiOauth_User_ProviderService()
    {
        return $this->services['hwi_oauth.user.provider'] = new \HWI\Bundle\OAuthBundle\Security\Core\User\OAuthUserProvider();
    }

    /*
     * Gets the 'hwi_oauth.user_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\User\UserChecker A Symfony\Component\Security\Core\User\UserChecker instance
     */
    protected function getHwiOauth_UserCheckerService()
    {
        return $this->services['hwi_oauth.user_checker'] = new \Symfony\Component\Security\Core\User\UserChecker();
    }

    /*
     * Gets the 'icap.badge_bundle.converter.slug_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Converter\SlugConverter A Icap\BadgeBundle\Converter\SlugConverter instance
     */
    protected function getIcap_BadgeBundle_Converter_SlugConverterService()
    {
        return $this->services['icap.badge_bundle.converter.slug_converter'] = new \Icap\BadgeBundle\Converter\SlugConverter($this->get('doctrine.orm.default_entity_manager'), $this->get('icap_badge.repository.badge'));
    }

    /*
     * Gets the 'icap.badge_bundle.form.type.badge_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Form\Type\BadgeType A Icap\BadgeBundle\Form\Type\BadgeType instance
     */
    protected function getIcap_BadgeBundle_Form_Type_BadgeTypeService()
    {
        return $this->services['icap.badge_bundle.form.type.badge_type'] = new \Icap\BadgeBundle\Form\Type\BadgeType($this->get('icap_badge.form.badge.rule'), $this->get('claroline.manager.locale_manager'), $this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'icap.badge_bundle.form.type.portfolio.badges_badge_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Form\Type\Portfolio\BadgesBadgeType A Icap\BadgeBundle\Form\Type\Portfolio\BadgesBadgeType instance
     */
    protected function getIcap_BadgeBundle_Form_Type_Portfolio_BadgesBadgeTypeService()
    {
        return $this->services['icap.badge_bundle.form.type.portfolio.badges_badge_type'] = new \Icap\BadgeBundle\Form\Type\Portfolio\BadgesBadgeType();
    }

    /*
     * Gets the 'icap.badge_bundle.form.type.portfolio.badges_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Form\Type\Portfolio\BadgesType A Icap\BadgeBundle\Form\Type\Portfolio\BadgesType instance
     */
    protected function getIcap_BadgeBundle_Form_Type_Portfolio_BadgesTypeService()
    {
        return $this->services['icap.badge_bundle.form.type.portfolio.badges_type'] = new \Icap\BadgeBundle\Form\Type\Portfolio\BadgesType($this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'icap.badge_bundle.form.type.tool.workspace.badge_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Form\Type\Tool\Workspace\BadgeType A Icap\BadgeBundle\Form\Type\Tool\Workspace\BadgeType instance
     */
    protected function getIcap_BadgeBundle_Form_Type_Tool_Workspace_BadgeTypeService()
    {
        return $this->services['icap.badge_bundle.form.type.tool.workspace.badge_type'] = new \Icap\BadgeBundle\Form\Type\Tool\Workspace\BadgeType($this->get('icap_badge.form.badge.workspace.rule'), $this->get('claroline.manager.locale_manager'), $this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'icap.badge_bundle.form.type.widget.badge_usage_config_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Form\Type\Widget\BadgeUsageConfigType A Icap\BadgeBundle\Form\Type\Widget\BadgeUsageConfigType instance
     */
    protected function getIcap_BadgeBundle_Form_Type_Widget_BadgeUsageConfigTypeService()
    {
        return $this->services['icap.badge_bundle.form.type.widget.badge_usage_config_type'] = new \Icap\BadgeBundle\Form\Type\Widget\BadgeUsageConfigType();
    }

    /*
     * Gets the 'icap.badge_bundle.listener.administration_tool_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Listener\AdministrationToolListener A Icap\BadgeBundle\Listener\AdministrationToolListener instance
     */
    protected function getIcap_BadgeBundle_Listener_AdministrationToolListenerService()
    {
        return $this->services['icap.badge_bundle.listener.administration_tool_listener'] = new \Icap\BadgeBundle\Listener\AdministrationToolListener($this->get('request_stack'), $this->get('http_kernel'));
    }

    /*
     * Gets the 'icap.badge_bundle.listener.badge_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Listener\BadgeListener A Icap\BadgeBundle\Listener\BadgeListener instance
     */
    protected function getIcap_BadgeBundle_Listener_BadgeListenerService()
    {
        return $this->services['icap.badge_bundle.listener.badge_listener'] = new \Icap\BadgeBundle\Listener\BadgeListener($this->get('doctrine.orm.default_entity_manager'), $this->get('icap_badge.manager.badge'), $this->get('templating'), $this->get('claroline.rule.validator'), $this->get('claroline.pager.pager_factory'), $this->get('security.token_storage'), $this->get('doctrine'));
    }

    /*
     * Gets the 'icap.badge_bundle.listener.portfolio.widget_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Listener\Portfolio\WidgetListener A Icap\BadgeBundle\Listener\Portfolio\WidgetListener instance
     */
    protected function getIcap_BadgeBundle_Listener_Portfolio_WidgetListenerService()
    {
        return $this->services['icap.badge_bundle.listener.portfolio.widget_listener'] = new \Icap\BadgeBundle\Listener\Portfolio\WidgetListener($this->get('templating'), $this->get('icap_badge.factory.portfolio_widget'), $this->get('form.factory'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'icap.badge_bundle.listener.widget.badge_usage_widget_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Listener\Widget\BadgeUsageWidgetListener A Icap\BadgeBundle\Listener\Widget\BadgeUsageWidgetListener instance
     */
    protected function getIcap_BadgeBundle_Listener_Widget_BadgeUsageWidgetListenerService()
    {
        return $this->services['icap.badge_bundle.listener.widget.badge_usage_widget_listener'] = new \Icap\BadgeBundle\Listener\Widget\BadgeUsageWidgetListener($this->get('templating'), $this->get('icap_badge.widget.form.badge_usage'), $this->get('icap_badge.manager.badge'), $this->get('icap_badge.manager.badge_widget'), $this->get('claroline.config.platform_config_handler'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'icap.badge_bundle.rule.constraints.badge_constraint' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Rule\Constraints\BadgeConstraint A Icap\BadgeBundle\Rule\Constraints\BadgeConstraint instance
     */
    protected function getIcap_BadgeBundle_Rule_Constraints_BadgeConstraintService()
    {
        return $this->services['icap.badge_bundle.rule.constraints.badge_constraint'] = new \Icap\BadgeBundle\Rule\Constraints\BadgeConstraint();
    }

    /*
     * Gets the 'icap.blog.comment_repository' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Repository\CommentRepository A Icap\BlogBundle\Repository\CommentRepository instance
     */
    protected function getIcap_Blog_CommentRepositoryService()
    {
        return $this->services['icap.blog.comment_repository'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Icap\\BlogBundle\\Entity\\Comment');
    }

    /*
     * Gets the 'icap.blog.form.type.listwidgetblog' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Form\ListWidgetBlogType A Icap\BlogBundle\Form\ListWidgetBlogType instance
     */
    protected function getIcap_Blog_Form_Type_ListwidgetblogService()
    {
        return $this->services['icap.blog.form.type.listwidgetblog'] = new \Icap\BlogBundle\Form\ListWidgetBlogType(array(0 => 'search', 1 => 'info_bar', 2 => 'rss_feed', 3 => 'blog_widget_tag_list_blog_form_tag_cloud', 4 => 'editor', 5 => 'calendar', 6 => 'archives'));
    }

    /*
     * Gets the 'icap.blog.manager.post' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Manager\PostManager A Icap\BlogBundle\Manager\PostManager instance
     */
    protected function getIcap_Blog_Manager_PostService()
    {
        return $this->services['icap.blog.manager.post'] = new \Icap\BlogBundle\Manager\PostManager($this->get('claroline.persistence.object_manager'), $this->get('icap.blog.post_repository'));
    }

    /*
     * Gets the 'icap.blog.manager.tag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Manager\TagManager A Icap\BlogBundle\Manager\TagManager instance
     */
    protected function getIcap_Blog_Manager_TagService()
    {
        return $this->services['icap.blog.manager.tag'] = new \Icap\BlogBundle\Manager\TagManager($this->get('icap.blog.tag_repository'));
    }

    /*
     * Gets the 'icap.blog.post_repository' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Repository\PostRepository A Icap\BlogBundle\Repository\PostRepository instance
     */
    protected function getIcap_Blog_PostRepositoryService()
    {
        return $this->services['icap.blog.post_repository'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Icap\\BlogBundle\\Entity\\Post');
    }

    /*
     * Gets the 'icap.blog.tag_repository' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Repository\TagRepository A Icap\BlogBundle\Repository\TagRepository instance
     */
    protected function getIcap_Blog_TagRepositoryService()
    {
        return $this->services['icap.blog.tag_repository'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Icap\\BlogBundle\\Entity\\Tag');
    }

    /*
     * Gets the 'icap.blog.twig.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Twig\IcapBlogExtension A Icap\BlogBundle\Twig\IcapBlogExtension instance
     */
    protected function getIcap_Blog_Twig_ExtensionService()
    {
        return $this->services['icap.blog.twig.extension'] = new \Icap\BlogBundle\Twig\IcapBlogExtension($this->get('icap.blog.manager.tag'), $this->get('icap.blog.post_repository'), ($this->targetDirs[2].'/../web/uploads/blogs'), 'uploads/blogs');
    }

    /*
     * Gets the 'icap.blog.type.tags' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Form\TagsType A Icap\BlogBundle\Form\TagsType instance
     */
    protected function getIcap_Blog_Type_TagsService()
    {
        return $this->services['icap.blog.type.tags'] = new \Icap\BlogBundle\Form\TagsType($this->get('icap.blog.manager.tag'));
    }

    /*
     * Gets the 'icap.blog_bundle.entity_listener.comment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Listener\CommentListener A Icap\BlogBundle\Listener\CommentListener instance
     */
    protected function getIcap_BlogBundle_EntityListener_CommentService()
    {
        return $this->services['icap.blog_bundle.entity_listener.comment'] = new \Icap\BlogBundle\Listener\CommentListener($this->get('icap.notification.manager'));
    }

    /*
     * Gets the 'icap.blog_bundle.entity_listener.post' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Listener\PostListener A Icap\BlogBundle\Listener\PostListener instance
     */
    protected function getIcap_BlogBundle_EntityListener_PostService()
    {
        return $this->services['icap.blog_bundle.entity_listener.post'] = new \Icap\BlogBundle\Listener\PostListener($this->get('icap.notification.manager'));
    }

    /*
     * Gets the 'icap.blog_bundle.listener.notification_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Listener\NotificationListener A Icap\BlogBundle\Listener\NotificationListener instance
     */
    protected function getIcap_BlogBundle_Listener_NotificationListenerService()
    {
        return $this->services['icap.blog_bundle.listener.notification_listener'] = new \Icap\BlogBundle\Listener\NotificationListener($this->get('templating'));
    }

    /*
     * Gets the 'icap.blog_bundle.listener.notification_user_parameters_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Listener\NotificationUserParametersListener A Icap\BlogBundle\Listener\NotificationUserParametersListener instance
     */
    protected function getIcap_BlogBundle_Listener_NotificationUserParametersListenerService()
    {
        return $this->services['icap.blog_bundle.listener.notification_user_parameters_listener'] = new \Icap\BlogBundle\Listener\NotificationUserParametersListener();
    }

    /*
     * Gets the 'icap.blog_bundle.listener.widget_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Listener\WidgetListener A Icap\BlogBundle\Listener\WidgetListener instance
     */
    protected function getIcap_BlogBundle_Listener_WidgetListenerService()
    {
        return $this->services['icap.blog_bundle.listener.widget_listener'] = new \Icap\BlogBundle\Listener\WidgetListener($this->get('icap_blog.manager.widget'), $this->get('form.factory'), $this->get('templating'), $this->get('icap_blog.form.widget_list'), $this->get('icap_blog.form.widget_blog'), $this->get('icap.blog.post_repository'), $this->get('icap.blog.manager.tag'), $this->get('icap_blog.form.widget_tag_list_blog'));
    }

    /*
     * Gets the 'icap.dropzone_bundle.library.security.voter.temporary_access_resource_voter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\DropzoneBundle\Library\Security\Voter\TemporaryAccessResourceVoter A Icap\DropzoneBundle\Library\Security\Voter\TemporaryAccessResourceVoter instance
     */
    protected function getIcap_DropzoneBundle_Library_Security_Voter_TemporaryAccessResourceVoterService()
    {
        return $this->services['icap.dropzone_bundle.library.security.voter.temporary_access_resource_voter'] = new \Icap\DropzoneBundle\Library\Security\Voter\TemporaryAccessResourceVoter($this->get('claroline.temporary_access_resource_manager'));
    }

    /*
     * Gets the 'icap.dropzone_bundle.listener.dropzone_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\DropzoneBundle\Listener\DropzoneListener A Icap\DropzoneBundle\Listener\DropzoneListener instance
     */
    protected function getIcap_DropzoneBundle_Listener_DropzoneListenerService()
    {
        return $this->services['icap.dropzone_bundle.listener.dropzone_listener'] = new \Icap\DropzoneBundle\Listener\DropzoneListener($this, $this->get('http_kernel'), $this->get('request_stack'), $this->get('claroline.manager.resource_manager'));
    }

    /*
     * Gets the 'icap.dropzone_bundle.listener.log.log_drop_evaluate_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\DropzoneBundle\Listener\Log\LogDropEvaluateListener A Icap\DropzoneBundle\Listener\Log\LogDropEvaluateListener instance
     */
    protected function getIcap_DropzoneBundle_Listener_Log_LogDropEvaluateListenerService()
    {
        return $this->services['icap.dropzone_bundle.listener.log.log_drop_evaluate_listener'] = new \Icap\DropzoneBundle\Listener\Log\LogDropEvaluateListener($this->get('doctrine.orm.default_entity_manager'), $this->get('event_dispatcher'));
    }

    /*
     * Gets the 'icap.dropzone_bundle.listener.notification_user_parameters_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\DropzoneBundle\Listener\NotificationUserParametersListener A Icap\DropzoneBundle\Listener\NotificationUserParametersListener instance
     */
    protected function getIcap_DropzoneBundle_Listener_NotificationUserParametersListenerService()
    {
        return $this->services['icap.dropzone_bundle.listener.notification_user_parameters_listener'] = new \Icap\DropzoneBundle\Listener\NotificationUserParametersListener();
    }

    /*
     * Gets the 'icap.formula_plugin_bundle.listener.formula_plugin_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\FormulaPluginBundle\Listener\FormulaPluginListener A Icap\FormulaPluginBundle\Listener\FormulaPluginListener instance
     */
    protected function getIcap_FormulaPluginBundle_Listener_FormulaPluginListenerService()
    {
        return $this->services['icap.formula_plugin_bundle.listener.formula_plugin_listener'] = new \Icap\FormulaPluginBundle\Listener\FormulaPluginListener($this);
    }

    /*
     * Gets the 'icap.lesson.chaptertype' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\LessonBundle\Form\ChapterType A Icap\LessonBundle\Form\ChapterType instance
     */
    protected function getIcap_Lesson_ChaptertypeService()
    {
        return $this->services['icap.lesson.chaptertype'] = new \Icap\LessonBundle\Form\ChapterType($this->get('translator.default'));
    }

    /*
     * Gets the 'icap.lesson.duplicatechaptertype' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\LessonBundle\Form\DuplicateChapterType A Icap\LessonBundle\Form\DuplicateChapterType instance
     */
    protected function getIcap_Lesson_DuplicatechaptertypeService()
    {
        return $this->services['icap.lesson.duplicatechaptertype'] = new \Icap\LessonBundle\Form\DuplicateChapterType($this->get('doctrine.orm.default_entity_manager'), $this->get('translator.default'));
    }

    /*
     * Gets the 'icap.lesson.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\LessonBundle\Manager\LessonManager A Icap\LessonBundle\Manager\LessonManager instance
     */
    protected function getIcap_Lesson_ManagerService()
    {
        return $this->services['icap.lesson.manager'] = new \Icap\LessonBundle\Manager\LessonManager($this->get('claroline.persistence.object_manager'), $this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'icap.lesson.manager.chapter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\LessonBundle\Manager\ChapterManager A Icap\LessonBundle\Manager\ChapterManager instance
     */
    protected function getIcap_Lesson_Manager_ChapterService()
    {
        return $this->services['icap.lesson.manager.chapter'] = new \Icap\LessonBundle\Manager\ChapterManager($this->get('doctrine.orm.default_entity_manager'), $this->get('translator.default'));
    }

    /*
     * Gets the 'icap.lesson.movechaptertype' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\LessonBundle\Form\MoveChapterType A Icap\LessonBundle\Form\MoveChapterType instance
     */
    protected function getIcap_Lesson_MovechaptertypeService()
    {
        return $this->services['icap.lesson.movechaptertype'] = new \Icap\LessonBundle\Form\MoveChapterType($this->get('doctrine.orm.default_entity_manager'), $this->get('translator.default'));
    }

    /*
     * Gets the 'icap.lesson_bundle.entity_listener.chapter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\LessonBundle\Listener\ChapterListener A Icap\LessonBundle\Listener\ChapterListener instance
     */
    protected function getIcap_LessonBundle_EntityListener_ChapterService()
    {
        return $this->services['icap.lesson_bundle.entity_listener.chapter'] = new \Icap\LessonBundle\Listener\ChapterListener($this->get('icap.notification.manager'));
    }

    /*
     * Gets the 'icap.lesson_bundle.listener.notification_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\LessonBundle\Listener\NotificationListener A Icap\LessonBundle\Listener\NotificationListener instance
     */
    protected function getIcap_LessonBundle_Listener_NotificationListenerService()
    {
        return $this->services['icap.lesson_bundle.listener.notification_listener'] = new \Icap\LessonBundle\Listener\NotificationListener($this->get('templating'));
    }

    /*
     * Gets the 'icap.lesson_bundle.listener.notification_user_parameters_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\LessonBundle\Listener\NotificationUserParametersListener A Icap\LessonBundle\Listener\NotificationUserParametersListener instance
     */
    protected function getIcap_LessonBundle_Listener_NotificationUserParametersListenerService()
    {
        return $this->services['icap.lesson_bundle.listener.notification_user_parameters_listener'] = new \Icap\LessonBundle\Listener\NotificationUserParametersListener();
    }

    /*
     * Gets the 'icap.listener.blog.badge_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Listener\BadgeListener A Icap\BlogBundle\Listener\BadgeListener instance
     */
    protected function getIcap_Listener_Blog_BadgeListenerService()
    {
        return $this->services['icap.listener.blog.badge_listener'] = new \Icap\BlogBundle\Listener\BadgeListener($this->get('router'));
    }

    /*
     * Gets the 'icap.listener.blog.log_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Listener\LogListener A Icap\BlogBundle\Listener\LogListener instance
     */
    protected function getIcap_Listener_Blog_LogListenerService()
    {
        $this->services['icap.listener.blog.log_listener'] = $instance = new \Icap\BlogBundle\Listener\LogListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'icap.listener.blog_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Listener\BlogListener A Icap\BlogBundle\Listener\BlogListener instance
     */
    protected function getIcap_Listener_BlogListenerService()
    {
        $this->services['icap.listener.blog_listener'] = $instance = new \Icap\BlogBundle\Listener\BlogListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'icap.listener.document_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\DropzoneBundle\Listener\DeleteListener A Icap\DropzoneBundle\Listener\DeleteListener instance
     */
    protected function getIcap_Listener_DocumentListenerService()
    {
        $this->services['icap.listener.document_listener'] = $instance = new \Icap\DropzoneBundle\Listener\DeleteListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'icap.listener.dropzone.badge_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\DropzoneBundle\Listener\BadgeListener A Icap\DropzoneBundle\Listener\BadgeListener instance
     */
    protected function getIcap_Listener_Dropzone_BadgeListenerService()
    {
        return $this->services['icap.listener.dropzone.badge_listener'] = new \Icap\DropzoneBundle\Listener\BadgeListener($this->get('router'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'icap.listener.dropzone.display_log_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\DropzoneBundle\Listener\Log\DisplayLogListener A Icap\DropzoneBundle\Listener\Log\DisplayLogListener instance
     */
    protected function getIcap_Listener_Dropzone_DisplayLogListenerService()
    {
        $this->services['icap.listener.dropzone.display_log_listener'] = $instance = new \Icap\DropzoneBundle\Listener\Log\DisplayLogListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'icap.listener.dropzone.notification_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\DropzoneBundle\Listener\NotificationListener A Icap\DropzoneBundle\Listener\NotificationListener instance
     */
    protected function getIcap_Listener_Dropzone_NotificationListenerService()
    {
        $this->services['icap.listener.dropzone.notification_listener'] = $instance = new \Icap\DropzoneBundle\Listener\NotificationListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'icap.listener.lesson.badge_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\LessonBundle\Listener\BadgeListener A Icap\LessonBundle\Listener\BadgeListener instance
     */
    protected function getIcap_Listener_Lesson_BadgeListenerService()
    {
        return $this->services['icap.listener.lesson.badge_listener'] = new \Icap\LessonBundle\Listener\BadgeListener($this->get('router'));
    }

    /*
     * Gets the 'icap.listener.lesson_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\LessonBundle\Listener\LessonListener A Icap\LessonBundle\Listener\LessonListener instance
     */
    protected function getIcap_Listener_LessonListenerService()
    {
        $this->services['icap.listener.lesson_listener'] = $instance = new \Icap\LessonBundle\Listener\LessonListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'icap.listener.lesson_log_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\LessonBundle\Listener\LogListener A Icap\LessonBundle\Listener\LogListener instance
     */
    protected function getIcap_Listener_LessonLogListenerService()
    {
        $this->services['icap.listener.lesson_log_listener'] = $instance = new \Icap\LessonBundle\Listener\LogListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'icap.listener.portfolio.log_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Listener\LogListener A Icap\PortfolioBundle\Listener\LogListener instance
     */
    protected function getIcap_Listener_Portfolio_LogListenerService()
    {
        $this->services['icap.listener.portfolio.log_listener'] = $instance = new \Icap\PortfolioBundle\Listener\LogListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'icap.listener.portfolio.notification_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Listener\NotificationListener A Icap\PortfolioBundle\Listener\NotificationListener instance
     */
    protected function getIcap_Listener_Portfolio_NotificationListenerService()
    {
        $this->services['icap.listener.portfolio.notification_listener'] = $instance = new \Icap\PortfolioBundle\Listener\NotificationListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'icap.listener.wiki.badge_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WikiBundle\Listener\BadgeListener A Icap\WikiBundle\Listener\BadgeListener instance
     */
    protected function getIcap_Listener_Wiki_BadgeListenerService()
    {
        return $this->services['icap.listener.wiki.badge_listener'] = new \Icap\WikiBundle\Listener\BadgeListener($this->get('router'));
    }

    /*
     * Gets the 'icap.listener.wiki.log_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WikiBundle\Listener\LogListener A Icap\WikiBundle\Listener\LogListener instance
     */
    protected function getIcap_Listener_Wiki_LogListenerService()
    {
        $this->services['icap.listener.wiki.log_listener'] = $instance = new \Icap\WikiBundle\Listener\LogListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'icap.listener.wiki.notification_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WikiBundle\Listener\NotificationListener A Icap\WikiBundle\Listener\NotificationListener instance
     */
    protected function getIcap_Listener_Wiki_NotificationListenerService()
    {
        $this->services['icap.listener.wiki.notification_listener'] = $instance = new \Icap\WikiBundle\Listener\NotificationListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'icap.manager.correction_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\DropzoneBundle\Manager\CorrectionManager A Icap\DropzoneBundle\Manager\CorrectionManager instance
     */
    protected function getIcap_Manager_CorrectionManagerService()
    {
        return $this->services['icap.manager.correction_manager'] = new \Icap\DropzoneBundle\Manager\CorrectionManager($this, $this->get('claroline.manager.mask_manager'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'icap.manager.drop_voter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\DropzoneBundle\Voter\DropVoter A Icap\DropzoneBundle\Voter\DropVoter instance
     */
    protected function getIcap_Manager_DropVoterService()
    {
        return $this->services['icap.manager.drop_voter'] = new \Icap\DropzoneBundle\Voter\DropVoter($this, $this->get('claroline.manager.mask_manager'));
    }

    /*
     * Gets the 'icap.manager.dropzone_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\DropzoneBundle\Manager\DropzoneManager A Icap\DropzoneBundle\Manager\DropzoneManager instance
     */
    protected function getIcap_Manager_DropzoneManagerService()
    {
        return $this->services['icap.manager.dropzone_manager'] = new \Icap\DropzoneBundle\Manager\DropzoneManager($this, $this->get('claroline.manager.mask_manager'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'icap.manager.dropzone_voter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\DropzoneBundle\Voter\DropzoneVoter A Icap\DropzoneBundle\Voter\DropzoneVoter instance
     */
    protected function getIcap_Manager_DropzoneVoterService()
    {
        return $this->services['icap.manager.dropzone_voter'] = new \Icap\DropzoneBundle\Voter\DropzoneVoter($this, $this->get('claroline.manager.mask_manager'));
    }

    /*
     * Gets the 'icap.notification.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\NotificationBundle\Manager\NotificationManager A Icap\NotificationBundle\Manager\NotificationManager instance
     */
    protected function getIcap_Notification_ManagerService()
    {
        return $this->services['icap.notification.manager'] = new \Icap\NotificationBundle\Manager\NotificationManager($this->get('doctrine.orm.default_entity_manager'), $this->get('security.token_storage'), $this->get('event_dispatcher'), $this->get('claroline.config.platform_config_handler'), $this->get('icap.notification.manager.notification_user_parameters'), $this->get('icap.notification.manager.plugin_configuration'));
    }

    /*
     * Gets the 'icap.notification.manager.notification_user_parameters' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\NotificationBundle\Manager\NotificationUserParametersManager A Icap\NotificationBundle\Manager\NotificationUserParametersManager instance
     */
    protected function getIcap_Notification_Manager_NotificationUserParametersService()
    {
        return $this->services['icap.notification.manager.notification_user_parameters'] = new \Icap\NotificationBundle\Manager\NotificationUserParametersManager($this->get('doctrine.orm.default_entity_manager'), $this->get('event_dispatcher'));
    }

    /*
     * Gets the 'icap.notification.manager.plugin_configuration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\NotificationBundle\Manager\NotificationPluginConfigurationManager A Icap\NotificationBundle\Manager\NotificationPluginConfigurationManager instance
     */
    protected function getIcap_Notification_Manager_PluginConfigurationService()
    {
        return $this->services['icap.notification.manager.plugin_configuration'] = new \Icap\NotificationBundle\Manager\NotificationPluginConfigurationManager($this->get('doctrine.orm.default_entity_manager'), $this->get('form.factory'));
    }

    /*
     * Gets the 'icap.notification_bundle.configuration.default_notification_platform_configuration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\NotificationBundle\Configuration\DefaultNotificationPlatformConfiguration A Icap\NotificationBundle\Configuration\DefaultNotificationPlatformConfiguration instance
     */
    protected function getIcap_NotificationBundle_Configuration_DefaultNotificationPlatformConfigurationService()
    {
        return $this->services['icap.notification_bundle.configuration.default_notification_platform_configuration'] = new \Icap\NotificationBundle\Configuration\DefaultNotificationPlatformConfiguration();
    }

    /*
     * Gets the 'icap.notification_bundle.form.notification_plugin_configuration_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\NotificationBundle\Form\NotificationPluginConfigurationType A Icap\NotificationBundle\Form\NotificationPluginConfigurationType instance
     */
    protected function getIcap_NotificationBundle_Form_NotificationPluginConfigurationTypeService()
    {
        return $this->services['icap.notification_bundle.form.notification_plugin_configuration_type'] = new \Icap\NotificationBundle\Form\NotificationPluginConfigurationType();
    }

    /*
     * Gets the 'icap.notification_bundle.listener.administration_tool_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\NotificationBundle\Listener\AdministrationToolListener A Icap\NotificationBundle\Listener\AdministrationToolListener instance
     */
    protected function getIcap_NotificationBundle_Listener_AdministrationToolListenerService()
    {
        return $this->services['icap.notification_bundle.listener.administration_tool_listener'] = new \Icap\NotificationBundle\Listener\AdministrationToolListener($this->get('request_stack'), $this->get('http_kernel'));
    }

    /*
     * Gets the 'icap.notification_bundle.listener.configure_menu_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\NotificationBundle\Listener\ConfigureMenuListener A Icap\NotificationBundle\Listener\ConfigureMenuListener instance
     */
    protected function getIcap_NotificationBundle_Listener_ConfigureMenuListenerService()
    {
        return $this->services['icap.notification_bundle.listener.configure_menu_listener'] = new \Icap\NotificationBundle\Listener\ConfigureMenuListener($this->get('translator.default'), $this->get('icap.notification.manager'), $this->get('templating'), $this->get('security.token_storage'), $this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'icap.notification_bundle.listener.log_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\NotificationBundle\Listener\LogListener A Icap\NotificationBundle\Listener\LogListener instance
     */
    protected function getIcap_NotificationBundle_Listener_LogListenerService()
    {
        return $this->services['icap.notification_bundle.listener.log_listener'] = new \Icap\NotificationBundle\Listener\LogListener($this->get('icap.notification.manager'), $this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'icap.o_auth_bundle.listener.configure_menu_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\OAuthBundle\Listener\ConfigureMenuListener A Icap\OAuthBundle\Listener\ConfigureMenuListener instance
     */
    protected function getIcap_OAuthBundle_Listener_ConfigureMenuListenerService()
    {
        return $this->services['icap.o_auth_bundle.listener.configure_menu_listener'] = new \Icap\OAuthBundle\Listener\ConfigureMenuListener();
    }

    /*
     * Gets the 'icap.o_auth_bundle.listener.external_authentication_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\OAuthBundle\Listener\ExternalAuthenticationListener A Icap\OAuthBundle\Listener\ExternalAuthenticationListener instance
     */
    protected function getIcap_OAuthBundle_Listener_ExternalAuthenticationListenerService()
    {
        return $this->services['icap.o_auth_bundle.listener.external_authentication_listener'] = new \Icap\OAuthBundle\Listener\ExternalAuthenticationListener($this->get('templating'), $this->get('icap.oauth.manager'));
    }

    /*
     * Gets the 'icap.o_auth_bundle.twig.oauth_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\OAuthBundle\Twig\OauthExtension A Icap\OAuthBundle\Twig\OauthExtension instance
     */
    protected function getIcap_OAuthBundle_Twig_OauthExtensionService()
    {
        return $this->services['icap.o_auth_bundle.twig.oauth_extension'] = new \Icap\OAuthBundle\Twig\OauthExtension($this);
    }

    /*
     * Gets the 'icap.oauth.failure_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\OAuthBundle\Security\FailureHandler A Icap\OAuthBundle\Security\FailureHandler instance
     */
    protected function getIcap_Oauth_FailureHandlerService()
    {
        return $this->services['icap.oauth.failure_handler'] = new \Icap\OAuthBundle\Security\FailureHandler($this->get('router'), $this->get('translator.default'));
    }

    /*
     * Gets the 'icap.oauth.hwi.resource_owner_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\OAuthBundle\Security\Hwi\ResourceOwnerFactory A Icap\OAuthBundle\Security\Hwi\ResourceOwnerFactory instance
     */
    protected function getIcap_Oauth_Hwi_ResourceOwnerFactoryService()
    {
        return $this->services['icap.oauth.hwi.resource_owner_factory'] = new \Icap\OAuthBundle\Security\Hwi\ResourceOwnerFactory($this->get('icap.oauth.manager'), $this->get('security.http_utils'), $this->get('session'));
    }

    /*
     * Gets the 'icap.oauth.logout_success_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\OAuthBundle\Security\LogoutSuccessHandler A Icap\OAuthBundle\Security\LogoutSuccessHandler instance
     */
    protected function getIcap_Oauth_LogoutSuccessHandlerService()
    {
        return $this->services['icap.oauth.logout_success_handler'] = new \Icap\OAuthBundle\Security\LogoutSuccessHandler($this->get('session'), $this->get('router'), $this->get('icap.oauth.hwi.resource_owner_factory'));
    }

    /*
     * Gets the 'icap.oauth.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\OAuthBundle\Manager\OauthManager A Icap\OAuthBundle\Manager\OauthManager instance
     */
    protected function getIcap_Oauth_ManagerService()
    {
        return $this->services['icap.oauth.manager'] = new \Icap\OAuthBundle\Manager\OauthManager($this->get('doctrine.orm.default_entity_manager'), $this->get('claroline.manager.cache_manager'), $this->get('claroline.config.platform_config_handler'), $this->get('claroline.manager.locale_manager'), $this->get('claroline.common.terms_of_service_manager'), $this->get('claroline.manager.facet_manager'), $this->get('form.factory'), $this->get('security.token_storage'), $this->get('claroline.manager.user_manager'), $this->get('claroline.authentication_handler'), $this->get('claroline.authenticator'));
    }

    /*
     * Gets the 'icap.oauth.user_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\OAuthBundle\Security\OauthUserProvider A Icap\OAuthBundle\Security\OauthUserProvider instance
     */
    protected function getIcap_Oauth_UserProviderService()
    {
        return $this->services['icap.oauth.user_provider'] = new \Icap\OAuthBundle\Security\OauthUserProvider($this->get('doctrine.orm.default_entity_manager'), $this->get('session'), $this->get('claroline.utilities.misc'));
    }

    /*
     * Gets the 'icap.portfolio.twig.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Twig\IcapPortfolioExtension A Icap\PortfolioBundle\Twig\IcapPortfolioExtension instance
     */
    protected function getIcap_Portfolio_Twig_ExtensionService()
    {
        return $this->services['icap.portfolio.twig.extension'] = new \Icap\PortfolioBundle\Twig\IcapPortfolioExtension();
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.guides_portfolio_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\GuidesPortfolioType A Icap\PortfolioBundle\Form\Type\GuidesPortfolioType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_GuidesPortfolioTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.guides_portfolio_type'] = new \Icap\PortfolioBundle\Form\Type\GuidesPortfolioType($this->get('translator.default'));
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.portfolio_comment_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\PortfolioCommentType A Icap\PortfolioBundle\Form\Type\PortfolioCommentType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_PortfolioCommentTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.portfolio_comment_type'] = new \Icap\PortfolioBundle\Form\Type\PortfolioCommentType($this->get('security.token_storage'));
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.portfolio_group_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\PortfolioGroupType A Icap\PortfolioBundle\Form\Type\PortfolioGroupType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_PortfolioGroupTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.portfolio_group_type'] = new \Icap\PortfolioBundle\Form\Type\PortfolioGroupType();
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.portfolio_guide_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\PortfolioGuideType A Icap\PortfolioBundle\Form\Type\PortfolioGuideType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_PortfolioGuideTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.portfolio_guide_type'] = new \Icap\PortfolioBundle\Form\Type\PortfolioGuideType();
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.portfolio_import' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\PortfolioImport A Icap\PortfolioBundle\Form\Type\PortfolioImport instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_PortfolioImportService()
    {
        return $this->services['icap.portfolio_bundle.form.type.portfolio_import'] = new \Icap\PortfolioBundle\Form\Type\PortfolioImport();
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.portfolio_team_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\PortfolioTeamType A Icap\PortfolioBundle\Form\Type\PortfolioTeamType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_PortfolioTeamTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.portfolio_team_type'] = new \Icap\PortfolioBundle\Form\Type\PortfolioTeamType();
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.portfolio_title_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\PortfolioTitleType A Icap\PortfolioBundle\Form\Type\PortfolioTitleType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_PortfolioTitleTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.portfolio_title_type'] = new \Icap\PortfolioBundle\Form\Type\PortfolioTitleType();
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.portfolio_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\PortfolioType A Icap\PortfolioBundle\Form\Type\PortfolioType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_PortfolioTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.portfolio_type'] = new \Icap\PortfolioBundle\Form\Type\PortfolioType();
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.portfolio_user_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\PortfolioUserType A Icap\PortfolioBundle\Form\Type\PortfolioUserType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_PortfolioUserTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.portfolio_user_type'] = new \Icap\PortfolioBundle\Form\Type\PortfolioUserType();
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.portfolio_widget_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\PortfolioWidgetType A Icap\PortfolioBundle\Form\Type\PortfolioWidgetType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_PortfolioWidgetTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.portfolio_widget_type'] = new \Icap\PortfolioBundle\Form\Type\PortfolioWidgetType($this->get('security.token_storage'), $this->get('icap_portfolio.manager.widget_type'));
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.rename_portfolio_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\RenamePortfolioType A Icap\PortfolioBundle\Form\Type\RenamePortfolioType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_RenamePortfolioTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.rename_portfolio_type'] = new \Icap\PortfolioBundle\Form\Type\RenamePortfolioType();
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.visibility_portfolio_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\VisibilityPortfolioType A Icap\PortfolioBundle\Form\Type\VisibilityPortfolioType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_VisibilityPortfolioTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.visibility_portfolio_type'] = new \Icap\PortfolioBundle\Form\Type\VisibilityPortfolioType($this->get('translator.default'));
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.widgets.experience_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\Widgets\ExperienceType A Icap\PortfolioBundle\Form\Type\Widgets\ExperienceType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_Widgets_ExperienceTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.widgets.experience_type'] = new \Icap\PortfolioBundle\Form\Type\Widgets\ExperienceType($this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.widgets.formations_formation_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\Widgets\FormationsFormationType A Icap\PortfolioBundle\Form\Type\Widgets\FormationsFormationType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_Widgets_FormationsFormationTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.widgets.formations_formation_type'] = new \Icap\PortfolioBundle\Form\Type\Widgets\FormationsFormationType();
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.widgets.formations_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\Widgets\FormationsType A Icap\PortfolioBundle\Form\Type\Widgets\FormationsType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_Widgets_FormationsTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.widgets.formations_type'] = new \Icap\PortfolioBundle\Form\Type\Widgets\FormationsType($this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.widgets.skills_skill_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\Widgets\SkillsSkillType A Icap\PortfolioBundle\Form\Type\Widgets\SkillsSkillType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_Widgets_SkillsSkillTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.widgets.skills_skill_type'] = new \Icap\PortfolioBundle\Form\Type\Widgets\SkillsSkillType();
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.widgets.skills_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\Widgets\SkillsType A Icap\PortfolioBundle\Form\Type\Widgets\SkillsType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_Widgets_SkillsTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.widgets.skills_type'] = new \Icap\PortfolioBundle\Form\Type\Widgets\SkillsType();
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.widgets.text_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\Widgets\TextType A Icap\PortfolioBundle\Form\Type\Widgets\TextType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_Widgets_TextTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.widgets.text_type'] = new \Icap\PortfolioBundle\Form\Type\Widgets\TextType();
    }

    /*
     * Gets the 'icap.portfolio_bundle.form.type.widgets.user_information_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Type\Widgets\UserInformationType A Icap\PortfolioBundle\Form\Type\Widgets\UserInformationType instance
     */
    protected function getIcap_PortfolioBundle_Form_Type_Widgets_UserInformationTypeService()
    {
        return $this->services['icap.portfolio_bundle.form.type.widgets.user_information_type'] = new \Icap\PortfolioBundle\Form\Type\Widgets\UserInformationType($this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'icap.portfolio_bundle.listener.administration_analytics_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Listener\AdministrationAnalyticsListener A Icap\PortfolioBundle\Listener\AdministrationAnalyticsListener instance
     */
    protected function getIcap_PortfolioBundle_Listener_AdministrationAnalyticsListenerService()
    {
        return $this->services['icap.portfolio_bundle.listener.administration_analytics_listener'] = new \Icap\PortfolioBundle\Listener\AdministrationAnalyticsListener($this->get('templating'), $this->get('translator.default'), $this->get('icap_portfolio.manager.portfolio'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'icap.portfolio_bundle.listener.configure_top_menu_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Listener\ConfigureTopMenuListener A Icap\PortfolioBundle\Listener\ConfigureTopMenuListener instance
     */
    protected function getIcap_PortfolioBundle_Listener_ConfigureTopMenuListenerService()
    {
        return $this->services['icap.portfolio_bundle.listener.configure_top_menu_listener'] = new \Icap\PortfolioBundle\Listener\ConfigureTopMenuListener($this->get('translator.default'), $this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'icap.portfolio_bundle.listener.notification_user_parameters_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Listener\NotificationUserParametersListener A Icap\PortfolioBundle\Listener\NotificationUserParametersListener instance
     */
    protected function getIcap_PortfolioBundle_Listener_NotificationUserParametersListenerService()
    {
        return $this->services['icap.portfolio_bundle.listener.notification_user_parameters_listener'] = new \Icap\PortfolioBundle\Listener\NotificationUserParametersListener();
    }

    /*
     * Gets the 'icap.portfolio_bundle.listener.widget_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Listener\WidgetListener A Icap\PortfolioBundle\Listener\WidgetListener instance
     */
    protected function getIcap_PortfolioBundle_Listener_WidgetListenerService()
    {
        return $this->services['icap.portfolio_bundle.listener.widget_listener'] = new \Icap\PortfolioBundle\Listener\WidgetListener($this->get('templating'), $this->get('icap_portfolio.factory.widget'), $this->get('form.factory'), $this->get('icap_portfolio.manager.widgets'));
    }

    /*
     * Gets the 'icap.socialmedia_bundle.listener.log_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\SocialmediaBundle\Listener\LogListener A Icap\SocialmediaBundle\Listener\LogListener instance
     */
    protected function getIcap_SocialmediaBundle_Listener_LogListenerService()
    {
        return $this->services['icap.socialmedia_bundle.listener.log_listener'] = new \Icap\SocialmediaBundle\Listener\LogListener($this);
    }

    /*
     * Gets the 'icap.socialmedia_bundle.listener.notification_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\SocialmediaBundle\Listener\NotificationListener A Icap\SocialmediaBundle\Listener\NotificationListener instance
     */
    protected function getIcap_SocialmediaBundle_Listener_NotificationListenerService()
    {
        return $this->services['icap.socialmedia_bundle.listener.notification_listener'] = new \Icap\SocialmediaBundle\Listener\NotificationListener($this->get('templating'));
    }

    /*
     * Gets the 'icap.socialmedia_bundle.listener.notification_user_parameters_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\SocialmediaBundle\Listener\NotificationUserParametersListener A Icap\SocialmediaBundle\Listener\NotificationUserParametersListener instance
     */
    protected function getIcap_SocialmediaBundle_Listener_NotificationUserParametersListenerService()
    {
        return $this->services['icap.socialmedia_bundle.listener.notification_user_parameters_listener'] = new \Icap\SocialmediaBundle\Listener\NotificationUserParametersListener();
    }

    /*
     * Gets the 'icap.socialmedia_bundle.listener.profile_link_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\SocialmediaBundle\Listener\ProfileLinkListener A Icap\SocialmediaBundle\Listener\ProfileLinkListener instance
     */
    protected function getIcap_SocialmediaBundle_Listener_ProfileLinkListenerService()
    {
        return $this->services['icap.socialmedia_bundle.listener.profile_link_listener'] = new \Icap\SocialmediaBundle\Listener\ProfileLinkListener($this->get('router'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'icap.socialmedia_bundle.listener.resource_actions_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\SocialmediaBundle\Listener\ResourceActionsListener A Icap\SocialmediaBundle\Listener\ResourceActionsListener instance
     */
    protected function getIcap_SocialmediaBundle_Listener_ResourceActionsListenerService()
    {
        return $this->services['icap.socialmedia_bundle.listener.resource_actions_listener'] = new \Icap\SocialmediaBundle\Listener\ResourceActionsListener($this->get('request_stack'), $this->get('http_kernel'));
    }

    /*
     * Gets the 'icap.socialmedia_bundle.twig.socialmedia_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\SocialmediaBundle\Twig\SocialmediaExtension A Icap\SocialmediaBundle\Twig\SocialmediaExtension instance
     */
    protected function getIcap_SocialmediaBundle_Twig_SocialmediaExtensionService()
    {
        return $this->services['icap.socialmedia_bundle.twig.socialmedia_extension'] = new \Icap\SocialmediaBundle\Twig\SocialmediaExtension();
    }

    /*
     * Gets the 'icap.website.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WebsiteBundle\Manager\WebsiteManager A Icap\WebsiteBundle\Manager\WebsiteManager instance
     */
    protected function getIcap_Website_ManagerService()
    {
        return $this->services['icap.website.manager'] = new \Icap\WebsiteBundle\Manager\WebsiteManager($this->get('claroline.persistence.object_manager'), $this->get('router'), ($this->targetDirs[2].'/../web'));
    }

    /*
     * Gets the 'icap.website.options.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WebsiteBundle\Manager\WebsiteOptionsManager A Icap\WebsiteBundle\Manager\WebsiteOptionsManager instance
     */
    protected function getIcap_Website_Options_ManagerService()
    {
        return $this->services['icap.website.options.manager'] = new \Icap\WebsiteBundle\Manager\WebsiteOptionsManager($this->get('form.factory'), $this->get('claroline.persistence.object_manager'), $this->get('jms_serializer'), ($this->targetDirs[2].'/../web'));
    }

    /*
     * Gets the 'icap.website.page.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WebsiteBundle\Manager\WebsitePageManager A Icap\WebsiteBundle\Manager\WebsitePageManager instance
     */
    protected function getIcap_Website_Page_ManagerService()
    {
        return $this->services['icap.website.page.manager'] = new \Icap\WebsiteBundle\Manager\WebsitePageManager($this->get('icap_website.repository.page'), $this->get('form.factory'), $this->get('claroline.persistence.object_manager'), $this->get('jms_serializer'));
    }

    /*
     * Gets the 'icap.website_bundle.listener.website_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WebsiteBundle\Listener\WebsiteListener A Icap\WebsiteBundle\Listener\WebsiteListener instance
     */
    protected function getIcap_WebsiteBundle_Listener_WebsiteListenerService()
    {
        return $this->services['icap.website_bundle.listener.website_listener'] = new \Icap\WebsiteBundle\Listener\WebsiteListener($this, $this->get('http_kernel'), $this->get('request_stack'));
    }

    /*
     * Gets the 'icap.wiki.contribution_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WikiBundle\Manager\ContributionManager A Icap\WikiBundle\Manager\ContributionManager instance
     */
    protected function getIcap_Wiki_ContributionManagerService()
    {
        return $this->services['icap.wiki.contribution_manager'] = new \Icap\WikiBundle\Manager\ContributionManager($this->get('icap.wiki.contribution_repository'));
    }

    /*
     * Gets the 'icap.wiki.contribution_repository' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WikiBundle\Repository\ContributionRepository A Icap\WikiBundle\Repository\ContributionRepository instance
     */
    protected function getIcap_Wiki_ContributionRepositoryService()
    {
        return $this->services['icap.wiki.contribution_repository'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Icap\\WikiBundle\\Entity\\Contribution');
    }

    /*
     * Gets the 'icap.wiki.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WikiBundle\Manager\WikiManager A Icap\WikiBundle\Manager\WikiManager instance
     */
    protected function getIcap_Wiki_ManagerService()
    {
        return $this->services['icap.wiki.manager'] = new \Icap\WikiBundle\Manager\WikiManager($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'icap.wiki.section_edit_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WikiBundle\Form\EditSectionType A Icap\WikiBundle\Form\EditSectionType instance
     */
    protected function getIcap_Wiki_SectionEditTypeService()
    {
        return $this->services['icap.wiki.section_edit_type'] = new \Icap\WikiBundle\Form\EditSectionType($this->get('icap.wiki.section_manager'));
    }

    /*
     * Gets the 'icap.wiki.section_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WikiBundle\Manager\SectionManager A Icap\WikiBundle\Manager\SectionManager instance
     */
    protected function getIcap_Wiki_SectionManagerService()
    {
        return $this->services['icap.wiki.section_manager'] = new \Icap\WikiBundle\Manager\SectionManager($this->get('icap.wiki.section_repository'), $this->get('icap.wiki.contribution_repository'));
    }

    /*
     * Gets the 'icap.wiki.section_repository' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WikiBundle\Repository\SectionRepository A Icap\WikiBundle\Repository\SectionRepository instance
     */
    protected function getIcap_Wiki_SectionRepositoryService()
    {
        return $this->services['icap.wiki.section_repository'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Icap\\WikiBundle\\Entity\\Section');
    }

    /*
     * Gets the 'icap.wiki_bundle.entity_listener.contribution' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WikiBundle\Listener\ContributionListener A Icap\WikiBundle\Listener\ContributionListener instance
     */
    protected function getIcap_WikiBundle_EntityListener_ContributionService()
    {
        return $this->services['icap.wiki_bundle.entity_listener.contribution'] = new \Icap\WikiBundle\Listener\ContributionListener($this->get('icap.notification.manager'));
    }

    /*
     * Gets the 'icap.wiki_bundle.listener.notification_user_parameters_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WikiBundle\Listener\NotificationUserParametersListener A Icap\WikiBundle\Listener\NotificationUserParametersListener instance
     */
    protected function getIcap_WikiBundle_Listener_NotificationUserParametersListenerService()
    {
        return $this->services['icap.wiki_bundle.listener.notification_user_parameters_listener'] = new \Icap\WikiBundle\Listener\NotificationUserParametersListener();
    }

    /*
     * Gets the 'icap.wiki_bundle.listener.wiki_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WikiBundle\Listener\WikiListener A Icap\WikiBundle\Listener\WikiListener instance
     */
    protected function getIcap_WikiBundle_Listener_WikiListenerService()
    {
        return $this->services['icap.wiki_bundle.listener.wiki_listener'] = new \Icap\WikiBundle\Listener\WikiListener($this, $this->get('http_kernel'), $this->get('request_stack'));
    }

    /*
     * Gets the 'icap_badge.api.badge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Controller\Api\BadgeController A Icap\BadgeBundle\Controller\Api\BadgeController instance
     */
    protected function getIcapBadge_Api_BadgeService()
    {
        return $this->services['icap_badge.api.badge'] = new \Icap\BadgeBundle\Controller\Api\BadgeController($this->get('icap_badge.repository.badge'), $this->get('fos_rest.view_handler'));
    }

    /*
     * Gets the 'icap_badge.entity_listener.badge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Listener\LocaleSetterListener A Icap\BadgeBundle\Listener\LocaleSetterListener instance
     */
    protected function getIcapBadge_EntityListener_BadgeService()
    {
        return $this->services['icap_badge.entity_listener.badge'] = new \Icap\BadgeBundle\Listener\LocaleSetterListener($this->get('claroline.config.platform_config_handler'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'icap_badge.factory.portfolio_widget' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Factory\Portfolio\WidgetFactory A Icap\BadgeBundle\Factory\Portfolio\WidgetFactory instance
     */
    protected function getIcapBadge_Factory_PortfolioWidgetService()
    {
        return $this->services['icap_badge.factory.portfolio_widget'] = new \Icap\BadgeBundle\Factory\Portfolio\WidgetFactory($this->get('translator.default'));
    }

    /*
     * Gets the 'icap_badge.form.badge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance
     */
    protected function getIcapBadge_Form_BadgeService()
    {
        return $this->services['icap_badge.form.badge'] = $this->get('form.factory')->createNamed('badge_form', 'badge_form');
    }

    /*
     * Gets the 'icap_badge.form.badge.award' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Form\Type\BadgeAwardType A Icap\BadgeBundle\Form\Type\BadgeAwardType instance
     */
    protected function getIcapBadge_Form_Badge_AwardService()
    {
        return $this->services['icap_badge.form.badge.award'] = new \Icap\BadgeBundle\Form\Type\BadgeAwardType($this->get('router'), $this->get('translator.default'));
    }

    /*
     * Gets the 'icap_badge.form.badge.collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Form\Type\BadgeCollectionType A Icap\BadgeBundle\Form\Type\BadgeCollectionType instance
     */
    protected function getIcapBadge_Form_Badge_CollectionService()
    {
        return $this->services['icap_badge.form.badge.collection'] = new \Icap\BadgeBundle\Form\Type\BadgeCollectionType($this->get('icap_badge.repository.badge'), $this->get('claroline.config.platform_config_handler'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'icap_badge.form.badge.rule' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Form\Type\BadgeRuleType A Icap\BadgeBundle\Form\Type\BadgeRuleType instance
     */
    protected function getIcapBadge_Form_Badge_RuleService()
    {
        return $this->services['icap_badge.form.badge.rule'] = new \Icap\BadgeBundle\Form\Type\BadgeRuleType($this->get('claroline.event.manager'), $this->get('translator.default'), $this->get('claroline.config.platform_config_handler'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'icap_badge.form.badge.workspace' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance
     */
    protected function getIcapBadge_Form_Badge_WorkspaceService()
    {
        return $this->services['icap_badge.form.badge.workspace'] = $this->get('form.factory')->createNamed('badge_form', 'badge_form_workspace');
    }

    /*
     * Gets the 'icap_badge.form.badge.workspace.rule' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Form\Type\Tool\Workspace\BadgeRuleType A Icap\BadgeBundle\Form\Type\Tool\Workspace\BadgeRuleType instance
     */
    protected function getIcapBadge_Form_Badge_Workspace_RuleService()
    {
        return $this->services['icap_badge.form.badge.workspace.rule'] = new \Icap\BadgeBundle\Form\Type\Tool\Workspace\BadgeRuleType($this->get('claroline.event.manager'), $this->get('translator.default'), $this->get('claroline.config.platform_config_handler'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'icap_badge.form.badgepicker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Form\Field\BadgePickerType A Icap\BadgeBundle\Form\Field\BadgePickerType instance
     */
    protected function getIcapBadge_Form_BadgepickerService()
    {
        return $this->services['icap_badge.form.badgepicker'] = new \Icap\BadgeBundle\Form\Field\BadgePickerType($this->get('icap_badge.transformer.badge_picker'));
    }

    /*
     * Gets the 'icap_badge.form.claimbadge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Form\Type\ClaimBadgeType A Icap\BadgeBundle\Form\Type\ClaimBadgeType instance
     */
    protected function getIcapBadge_Form_ClaimbadgeService()
    {
        return $this->services['icap_badge.form.claimbadge'] = new \Icap\BadgeBundle\Form\Type\ClaimBadgeType($this->get('translator.default'), $this->get('claroline.config.platform_config_handler'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'icap_badge.form.user_badge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Form\Type\UserBadgeType A Icap\BadgeBundle\Form\Type\UserBadgeType instance
     */
    protected function getIcapBadge_Form_UserBadgeService()
    {
        return $this->services['icap_badge.form.user_badge'] = new \Icap\BadgeBundle\Form\Type\UserBadgeType();
    }

    /*
     * Gets the 'icap_badge.form_handler.badge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Form\Handler\BadgeHandler A Icap\BadgeBundle\Form\Handler\BadgeHandler instance
     * 
     * @throws InactiveScopeException when the 'icap_badge.form_handler.badge' service is requested while the 'request' scope is not active
     */
    protected function getIcapBadge_FormHandler_BadgeService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('icap_badge.form_handler.badge', 'request');
        }

        return $this->services['icap_badge.form_handler.badge'] = $this->scopedServices['request']['icap_badge.form_handler.badge'] = new \Icap\BadgeBundle\Form\Handler\BadgeHandler($this->get('icap_badge.form.badge'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'), $this->get('icap_badge.manager.badge'), ($this->targetDirs[2].'/../web'));
    }

    /*
     * Gets the 'icap_badge.form_handler.badge.workspace' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Form\Handler\BadgeHandler A Icap\BadgeBundle\Form\Handler\BadgeHandler instance
     * 
     * @throws InactiveScopeException when the 'icap_badge.form_handler.badge.workspace' service is requested while the 'request' scope is not active
     */
    protected function getIcapBadge_FormHandler_Badge_WorkspaceService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('icap_badge.form_handler.badge.workspace', 'request');
        }

        return $this->services['icap_badge.form_handler.badge.workspace'] = $this->scopedServices['request']['icap_badge.form_handler.badge.workspace'] = new \Icap\BadgeBundle\Form\Handler\BadgeHandler($this->get('icap_badge.form.badge.workspace'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'), $this->get('icap_badge.manager.badge'), ($this->targetDirs[2].'/../web'));
    }

    /*
     * Gets the 'icap_badge.listener.core.notification_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Listener\NotificationListener A Icap\BadgeBundle\Listener\NotificationListener instance
     */
    protected function getIcapBadge_Listener_Core_NotificationListenerService()
    {
        $this->services['icap_badge.listener.core.notification_listener'] = $instance = new \Icap\BadgeBundle\Listener\NotificationListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'icap_badge.manager.badge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Manager\BadgeManager A Icap\BadgeBundle\Manager\BadgeManager instance
     */
    protected function getIcapBadge_Manager_BadgeService()
    {
        return $this->services['icap_badge.manager.badge'] = new \Icap\BadgeBundle\Manager\BadgeManager($this->get('doctrine.orm.default_entity_manager'), $this->get('event_dispatcher'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'icap_badge.manager.badge_claim' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Manager\BadgeClaimManager A Icap\BadgeBundle\Manager\BadgeClaimManager instance
     */
    protected function getIcapBadge_Manager_BadgeClaimService()
    {
        return $this->services['icap_badge.manager.badge_claim'] = new \Icap\BadgeBundle\Manager\BadgeClaimManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'icap_badge.manager.badge_widget' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Manager\BadgeWidgetManager A Icap\BadgeBundle\Manager\BadgeWidgetManager instance
     */
    protected function getIcapBadge_Manager_BadgeWidgetService()
    {
        return $this->services['icap_badge.manager.badge_widget'] = new \Icap\BadgeBundle\Manager\BadgeWidgetManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'icap_badge.repository.badge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Repository\BadgeRepository A Icap\BadgeBundle\Repository\BadgeRepository instance
     */
    protected function getIcapBadge_Repository_BadgeService()
    {
        return $this->services['icap_badge.repository.badge'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Icap\\BadgeBundle\\Entity\\Badge');
    }

    /*
     * Gets the 'icap_badge.transformer.badge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Transformer\BadgeTransformer A Icap\BadgeBundle\Transformer\BadgeTransformer instance
     */
    protected function getIcapBadge_Transformer_BadgeService()
    {
        return $this->services['icap_badge.transformer.badge'] = new \Icap\BadgeBundle\Transformer\BadgeTransformer($this, $this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'icap_badge.transformer.badge_picker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BadgeBundle\Form\DataTransformer\BadgePickerTransformer A Icap\BadgeBundle\Form\DataTransformer\BadgePickerTransformer instance
     */
    protected function getIcapBadge_Transformer_BadgePickerService()
    {
        return $this->services['icap_badge.transformer.badge_picker'] = new \Icap\BadgeBundle\Form\DataTransformer\BadgePickerTransformer($this->get('icap_badge.manager.badge'));
    }

    /*
     * Gets the 'icap_badge.widget.form.badge_usage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance
     */
    protected function getIcapBadge_Widget_Form_BadgeUsageService()
    {
        return $this->services['icap_badge.widget.form.badge_usage'] = $this->get('form.factory')->createNamed('badge_usage_widget_form', 'badge_usage_widget_config');
    }

    /*
     * Gets the 'icap_blog.form.comment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Form\CommentType A Icap\BlogBundle\Form\CommentType instance
     */
    protected function getIcapBlog_Form_CommentService()
    {
        return $this->services['icap_blog.form.comment'] = new \Icap\BlogBundle\Form\CommentType();
    }

    /*
     * Gets the 'icap_blog.form.post' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Form\PostType A Icap\BlogBundle\Form\PostType instance
     */
    protected function getIcapBlog_Form_PostService()
    {
        return $this->services['icap_blog.form.post'] = new \Icap\BlogBundle\Form\PostType($this->get('security.authorization_checker'));
    }

    /*
     * Gets the 'icap_blog.form.widget_blog' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Form\WidgetBlogType A Icap\BlogBundle\Form\WidgetBlogType instance
     */
    protected function getIcapBlog_Form_WidgetBlogService()
    {
        return $this->services['icap_blog.form.widget_blog'] = new \Icap\BlogBundle\Form\WidgetBlogType();
    }

    /*
     * Gets the 'icap_blog.form.widget_list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Form\WidgetListType A Icap\BlogBundle\Form\WidgetListType instance
     */
    protected function getIcapBlog_Form_WidgetListService()
    {
        return $this->services['icap_blog.form.widget_list'] = new \Icap\BlogBundle\Form\WidgetListType($this->get('translator.default'));
    }

    /*
     * Gets the 'icap_blog.form.widget_list_blog' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Form\WidgetListBlogType A Icap\BlogBundle\Form\WidgetListBlogType instance
     */
    protected function getIcapBlog_Form_WidgetListBlogService()
    {
        return $this->services['icap_blog.form.widget_list_blog'] = new \Icap\BlogBundle\Form\WidgetListBlogType($this->get('icap_blog.transformer.int_to_blog'));
    }

    /*
     * Gets the 'icap_blog.form.widget_tag_list_blog' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Form\WidgetTagListBlogType A Icap\BlogBundle\Form\WidgetTagListBlogType instance
     */
    protected function getIcapBlog_Form_WidgetTagListBlogService()
    {
        return $this->services['icap_blog.form.widget_tag_list_blog'] = new \Icap\BlogBundle\Form\WidgetTagListBlogType();
    }

    /*
     * Gets the 'icap_blog.manager.blog' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Manager\BlogManager A Icap\BlogBundle\Manager\BlogManager instance
     */
    protected function getIcapBlog_Manager_BlogService()
    {
        return $this->services['icap_blog.manager.blog'] = new \Icap\BlogBundle\Manager\BlogManager($this->get('claroline.persistence.object_manager'), ($this->targetDirs[2].'/../web/uploads/blogs'));
    }

    /*
     * Gets the 'icap_blog.manager.widget' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Manager\WidgetManager A Icap\BlogBundle\Manager\WidgetManager instance
     */
    protected function getIcapBlog_Manager_WidgetService()
    {
        return $this->services['icap_blog.manager.widget'] = new \Icap\BlogBundle\Manager\WidgetManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'icap_blog.transformer.int_to_blog' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\BlogBundle\Form\DataTransformer\IntToBlogTransformer A Icap\BlogBundle\Form\DataTransformer\IntToBlogTransformer instance
     */
    protected function getIcapBlog_Transformer_IntToBlogService()
    {
        return $this->services['icap_blog.transformer.int_to_blog'] = new \Icap\BlogBundle\Form\DataTransformer\IntToBlogTransformer($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'icap_notification.twig.notification_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\NotificationBundle\Twig\NotificationExtension A Icap\NotificationBundle\Twig\NotificationExtension instance
     */
    protected function getIcapNotification_Twig_NotificationExtensionService()
    {
        return $this->services['icap_notification.twig.notification_extension'] = new \Icap\NotificationBundle\Twig\NotificationExtension($this->get('translator.default'));
    }

    /*
     * Gets the 'icap_portfolio.factory.comment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Factory\CommentFactory A Icap\PortfolioBundle\Factory\CommentFactory instance
     */
    protected function getIcapPortfolio_Factory_CommentService()
    {
        return $this->services['icap_portfolio.factory.comment'] = new \Icap\PortfolioBundle\Factory\CommentFactory();
    }

    /*
     * Gets the 'icap_portfolio.factory.widget' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Factory\WidgetFactory A Icap\PortfolioBundle\Factory\WidgetFactory instance
     */
    protected function getIcapPortfolio_Factory_WidgetService()
    {
        return $this->services['icap_portfolio.factory.widget'] = new \Icap\PortfolioBundle\Factory\WidgetFactory($this->get('icap_portfolio.manager.widget_type'), $this->get('translator.default'), $this->get('event_dispatcher'));
    }

    /*
     * Gets the 'icap_portfolio.form_handler.portfolio' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Form\Handler\PortfolioHandler A Icap\PortfolioBundle\Form\Handler\PortfolioHandler instance
     */
    protected function getIcapPortfolio_FormHandler_PortfolioService()
    {
        return $this->services['icap_portfolio.form_handler.portfolio'] = new \Icap\PortfolioBundle\Form\Handler\PortfolioHandler($this->get('form.factory'), $this->get('request_stack'), $this->get('icap_portfolio.manager.portfolio'));
    }

    /*
     * Gets the 'icap_portfolio.manager.analytics' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Manager\AnalyticsManager A Icap\PortfolioBundle\Manager\AnalyticsManager instance
     */
    protected function getIcapPortfolio_Manager_AnalyticsService()
    {
        return $this->services['icap_portfolio.manager.analytics'] = new \Icap\PortfolioBundle\Manager\AnalyticsManager($this->get('doctrine.orm.default_entity_manager'), $this->get('translator.default'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'icap_portfolio.manager.comments' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Manager\CommentsManager A Icap\PortfolioBundle\Manager\CommentsManager instance
     */
    protected function getIcapPortfolio_Manager_CommentsService()
    {
        return $this->services['icap_portfolio.manager.comments'] = new \Icap\PortfolioBundle\Manager\CommentsManager($this->get('doctrine.orm.default_entity_manager'), $this->get('form.factory'), $this->get('icap_portfolio.factory.comment'), $this->get('icap_portfolio.manager.portfolio_guide'));
    }

    /*
     * Gets the 'icap_portfolio.manager.import' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Manager\ImportManager A Icap\PortfolioBundle\Manager\ImportManager instance
     */
    protected function getIcapPortfolio_Manager_ImportService()
    {
        return $this->services['icap_portfolio.manager.import'] = new \Icap\PortfolioBundle\Manager\ImportManager();
    }

    /*
     * Gets the 'icap_portfolio.manager.portfolio' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Manager\PortfolioManager A Icap\PortfolioBundle\Manager\PortfolioManager instance
     */
    protected function getIcapPortfolio_Manager_PortfolioService()
    {
        return $this->services['icap_portfolio.manager.portfolio'] = new \Icap\PortfolioBundle\Manager\PortfolioManager($this->get('doctrine.orm.default_entity_manager'), $this->get('form.factory'), $this->get('icap_portfolio.manager.widgets'), $this->get('event_dispatcher'), $this->get('claroline.manager.team_manager'));
    }

    /*
     * Gets the 'icap_portfolio.manager.portfolio_guide' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Manager\PortfolioGuideManager A Icap\PortfolioBundle\Manager\PortfolioGuideManager instance
     */
    protected function getIcapPortfolio_Manager_PortfolioGuideService()
    {
        return $this->services['icap_portfolio.manager.portfolio_guide'] = new \Icap\PortfolioBundle\Manager\PortfolioGuideManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'icap_portfolio.manager.widget_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Manager\WidgetTypeManager A Icap\PortfolioBundle\Manager\WidgetTypeManager instance
     */
    protected function getIcapPortfolio_Manager_WidgetTypeService()
    {
        return $this->services['icap_portfolio.manager.widget_type'] = new \Icap\PortfolioBundle\Manager\WidgetTypeManager($this->get('icap_portfolio.repository.widget_type'));
    }

    /*
     * Gets the 'icap_portfolio.manager.widgets' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Manager\WidgetsManager A Icap\PortfolioBundle\Manager\WidgetsManager instance
     */
    protected function getIcapPortfolio_Manager_WidgetsService()
    {
        return $this->services['icap_portfolio.manager.widgets'] = new \Icap\PortfolioBundle\Manager\WidgetsManager($this->get('doctrine.orm.default_entity_manager'), $this->get('templating'), $this->get('form.factory'), $this->get('icap_portfolio.manager.widget_type'), $this->get('icap_portfolio.factory.widget'), $this->get('event_dispatcher'));
    }

    /*
     * Gets the 'icap_portfolio.repository.widget' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Repository\Widget\AbstractWidgetRepository A Icap\PortfolioBundle\Repository\Widget\AbstractWidgetRepository instance
     */
    protected function getIcapPortfolio_Repository_WidgetService()
    {
        return $this->services['icap_portfolio.repository.widget'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('IcapPortfolioBundle:Widget\\AbstractWidget');
    }

    /*
     * Gets the 'icap_portfolio.repository.widget_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\PortfolioBundle\Repository\Widget\WidgetTypeRepository A Icap\PortfolioBundle\Repository\Widget\WidgetTypeRepository instance
     */
    protected function getIcapPortfolio_Repository_WidgetTypeService()
    {
        return $this->services['icap_portfolio.repository.widget_type'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('IcapPortfolioBundle:Widget\\WidgetType');
    }

    /*
     * Gets the 'icap_socialmedia.manager.comment_action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\SocialmediaBundle\Manager\CommentActionManager A Icap\SocialmediaBundle\Manager\CommentActionManager instance
     */
    protected function getIcapSocialmedia_Manager_CommentActionService()
    {
        return $this->services['icap_socialmedia.manager.comment_action'] = new \Icap\SocialmediaBundle\Manager\CommentActionManager($this->get('doctrine.orm.default_entity_manager'), $this->get('icap_socialmedia.manager.wall_item'));
    }

    /*
     * Gets the 'icap_socialmedia.manager.like_action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\SocialmediaBundle\Manager\LikeActionManager A Icap\SocialmediaBundle\Manager\LikeActionManager instance
     */
    protected function getIcapSocialmedia_Manager_LikeActionService()
    {
        return $this->services['icap_socialmedia.manager.like_action'] = new \Icap\SocialmediaBundle\Manager\LikeActionManager($this->get('doctrine.orm.default_entity_manager'), $this->get('icap_socialmedia.manager.wall_item'));
    }

    /*
     * Gets the 'icap_socialmedia.manager.note_action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\SocialmediaBundle\Manager\NoteActionManager A Icap\SocialmediaBundle\Manager\NoteActionManager instance
     */
    protected function getIcapSocialmedia_Manager_NoteActionService()
    {
        return $this->services['icap_socialmedia.manager.note_action'] = new \Icap\SocialmediaBundle\Manager\NoteActionManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'icap_socialmedia.manager.share_action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\SocialmediaBundle\Manager\ShareActionManager A Icap\SocialmediaBundle\Manager\ShareActionManager instance
     */
    protected function getIcapSocialmedia_Manager_ShareActionService()
    {
        return $this->services['icap_socialmedia.manager.share_action'] = new \Icap\SocialmediaBundle\Manager\ShareActionManager($this->get('doctrine.orm.default_entity_manager'), $this->get('icap_socialmedia.manager.wall_item'), $this->get('router'));
    }

    /*
     * Gets the 'icap_socialmedia.manager.wall_item' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\SocialmediaBundle\Manager\WallItemManager A Icap\SocialmediaBundle\Manager\WallItemManager instance
     */
    protected function getIcapSocialmedia_Manager_WallItemService()
    {
        return $this->services['icap_socialmedia.manager.wall_item'] = new \Icap\SocialmediaBundle\Manager\WallItemManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'icap_website.repository.page' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Icap\WebsiteBundle\Repository\WebsitePageRepository A Icap\WebsiteBundle\Repository\WebsitePageRepository instance
     */
    protected function getIcapWebsite_Repository_PageService()
    {
        return $this->services['icap_website.repository.page'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Icap\\WebsiteBundle\\Entity\\WebsitePage');
    }

    /*
     * Gets the 'idci_exporter.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \IDCI\Bundle\ExporterBundle\Service\Manager A IDCI\Bundle\ExporterBundle\Service\Manager instance
     */
    protected function getIdciExporter_ManagerService()
    {
        return $this->services['idci_exporter.manager'] = new \IDCI\Bundle\ExporterBundle\Service\Manager($this);
    }

    /*
     * Gets the 'idci_exporter.transformer_twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \IDCI\Bundle\ExporterBundle\Transformer\TwigTransformer A IDCI\Bundle\ExporterBundle\Transformer\TwigTransformer instance
     */
    protected function getIdciExporter_TransformerTwigService()
    {
        return $this->services['idci_exporter.transformer_twig'] = new \IDCI\Bundle\ExporterBundle\Transformer\TwigTransformer($this);
    }

    /*
     * Gets the 'innova.collecticiel_bundle.library.security.voter.temporary_access_resource_voter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Library\Security\Voter\TemporaryAccessResourceVoter A Innova\CollecticielBundle\Library\Security\Voter\TemporaryAccessResourceVoter instance
     */
    protected function getInnova_CollecticielBundle_Library_Security_Voter_TemporaryAccessResourceVoterService()
    {
        return $this->services['innova.collecticiel_bundle.library.security.voter.temporary_access_resource_voter'] = new \Innova\CollecticielBundle\Library\Security\Voter\TemporaryAccessResourceVoter($this->get('innova.temporary_access_resource_manager'));
    }

    /*
     * Gets the 'innova.collecticiel_bundle.listener.dropzone_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Listener\DropzoneListener A Innova\CollecticielBundle\Listener\DropzoneListener instance
     */
    protected function getInnova_CollecticielBundle_Listener_DropzoneListenerService()
    {
        return $this->services['innova.collecticiel_bundle.listener.dropzone_listener'] = new \Innova\CollecticielBundle\Listener\DropzoneListener($this, $this->get('http_kernel'), $this->get('request_stack'), $this->get('claroline.manager.resource_manager'));
    }

    /*
     * Gets the 'innova.collecticiel_bundle.listener.log.log_drop_evaluate_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Listener\Log\LogDropEvaluateListener A Innova\CollecticielBundle\Listener\Log\LogDropEvaluateListener instance
     */
    protected function getInnova_CollecticielBundle_Listener_Log_LogDropEvaluateListenerService()
    {
        return $this->services['innova.collecticiel_bundle.listener.log.log_drop_evaluate_listener'] = new \Innova\CollecticielBundle\Listener\Log\LogDropEvaluateListener($this->get('doctrine.orm.default_entity_manager'), $this->get('event_dispatcher'));
    }

    /*
     * Gets the 'innova.listener.document_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Listener\DeleteListener A Innova\CollecticielBundle\Listener\DeleteListener instance
     */
    protected function getInnova_Listener_DocumentListenerService()
    {
        $this->services['innova.listener.document_listener'] = $instance = new \Innova\CollecticielBundle\Listener\DeleteListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'innova.listener.dropzone.display_log_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Listener\Log\DisplayLogListener A Innova\CollecticielBundle\Listener\Log\DisplayLogListener instance
     */
    protected function getInnova_Listener_Dropzone_DisplayLogListenerService()
    {
        $this->services['innova.listener.dropzone.display_log_listener'] = $instance = new \Innova\CollecticielBundle\Listener\Log\DisplayLogListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'innova.listener.dropzone.notification_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Listener\NotificationListener A Innova\CollecticielBundle\Listener\NotificationListener instance
     */
    protected function getInnova_Listener_Dropzone_NotificationListenerService()
    {
        $this->services['innova.listener.dropzone.notification_listener'] = $instance = new \Innova\CollecticielBundle\Listener\NotificationListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'innova.manager.collecticiel_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Manager\CollecticielManager A Innova\CollecticielBundle\Manager\CollecticielManager instance
     */
    protected function getInnova_Manager_CollecticielManagerService()
    {
        return $this->services['innova.manager.collecticiel_manager'] = new \Innova\CollecticielBundle\Manager\CollecticielManager($this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'innova.manager.correction_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Manager\CorrectionManager A Innova\CollecticielBundle\Manager\CorrectionManager instance
     */
    protected function getInnova_Manager_CorrectionManagerService()
    {
        return $this->services['innova.manager.correction_manager'] = new \Innova\CollecticielBundle\Manager\CorrectionManager($this, $this->get('claroline.manager.mask_manager'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'innova.manager.drop_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Manager\DropManager A Innova\CollecticielBundle\Manager\DropManager instance
     */
    protected function getInnova_Manager_DropManagerService()
    {
        return $this->services['innova.manager.drop_manager'] = new \Innova\CollecticielBundle\Manager\DropManager($this, $this->get('doctrine.orm.default_entity_manager'), $this->get('event_dispatcher'), $this->get('claroline.manager.role_manager'));
    }

    /*
     * Gets the 'innova.manager.drop_voter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Voter\DropVoter A Innova\CollecticielBundle\Voter\DropVoter instance
     */
    protected function getInnova_Manager_DropVoterService()
    {
        return $this->services['innova.manager.drop_voter'] = new \Innova\CollecticielBundle\Voter\DropVoter($this, $this->get('claroline.manager.mask_manager'));
    }

    /*
     * Gets the 'innova.manager.dropzone_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Manager\DropzoneManager A Innova\CollecticielBundle\Manager\DropzoneManager instance
     */
    protected function getInnova_Manager_DropzoneManagerService()
    {
        return $this->services['innova.manager.dropzone_manager'] = new \Innova\CollecticielBundle\Manager\DropzoneManager($this, $this->get('claroline.manager.mask_manager'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'innova.manager.dropzone_voter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Voter\DropzoneVoter A Innova\CollecticielBundle\Voter\DropzoneVoter instance
     */
    protected function getInnova_Manager_DropzoneVoterService()
    {
        return $this->services['innova.manager.dropzone_voter'] = new \Innova\CollecticielBundle\Voter\DropzoneVoter($this, $this->get('claroline.manager.mask_manager'));
    }

    /*
     * Gets the 'innova.manager.gradingcriteria_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Manager\GradingCriteriaManager A Innova\CollecticielBundle\Manager\GradingCriteriaManager instance
     */
    protected function getInnova_Manager_GradingcriteriaManagerService()
    {
        return $this->services['innova.manager.gradingcriteria_manager'] = new \Innova\CollecticielBundle\Manager\GradingCriteriaManager($this, $this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'innova.manager.gradingnotation_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Manager\GradingNotationManager A Innova\CollecticielBundle\Manager\GradingNotationManager instance
     */
    protected function getInnova_Manager_GradingnotationManagerService()
    {
        return $this->services['innova.manager.gradingnotation_manager'] = new \Innova\CollecticielBundle\Manager\GradingNotationManager($this, $this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'innova.manager.gradingscale_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Manager\GradingScaleManager A Innova\CollecticielBundle\Manager\GradingScaleManager instance
     */
    protected function getInnova_Manager_GradingscaleManagerService()
    {
        return $this->services['innova.manager.gradingscale_manager'] = new \Innova\CollecticielBundle\Manager\GradingScaleManager($this, $this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'innova.manager.returnreceipt_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Manager\ReturnReceiptManager A Innova\CollecticielBundle\Manager\ReturnReceiptManager instance
     */
    protected function getInnova_Manager_ReturnreceiptManagerService()
    {
        return $this->services['innova.manager.returnreceipt_manager'] = new \Innova\CollecticielBundle\Manager\ReturnReceiptManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'innova.path_bundle.event_listener.notifications.notification_user_parameters_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\EventListener\Notifications\NotificationUserParametersListener A Innova\PathBundle\EventListener\Notifications\NotificationUserParametersListener instance
     */
    protected function getInnova_PathBundle_EventListener_Notifications_NotificationUserParametersListenerService()
    {
        return $this->services['innova.path_bundle.event_listener.notifications.notification_user_parameters_listener'] = new \Innova\PathBundle\EventListener\Notifications\NotificationUserParametersListener();
    }

    /*
     * Gets the 'innova.path_bundle.event_listener.resource.path_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\EventListener\Resource\PathListener A Innova\PathBundle\EventListener\Resource\PathListener instance
     */
    protected function getInnova_PathBundle_EventListener_Resource_PathListenerService()
    {
        return $this->services['innova.path_bundle.event_listener.resource.path_listener'] = new \Innova\PathBundle\EventListener\Resource\PathListener($this, $this->get('http_kernel'), $this->get('request_stack'), $this->get('claroline.manager.resource_manager'));
    }

    /*
     * Gets the 'innova.path_bundle.event_listener.rich_text_format_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\EventListener\RichTextFormatListener A Innova\PathBundle\EventListener\RichTextFormatListener instance
     */
    protected function getInnova_PathBundle_EventListener_RichTextFormatListenerService()
    {
        return $this->services['innova.path_bundle.event_listener.rich_text_format_listener'] = new \Innova\PathBundle\EventListener\RichTextFormatListener($this->get('router'), $this->get('claroline.persistence.object_manager'), $this->get('claroline.importer.rich_text_formatter'), $this->get('claroline.manager.resource_manager'));
    }

    /*
     * Gets the 'innova.path_bundle.event_listener.widget.path_widget_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\EventListener\Widget\PathWidgetListener A Innova\PathBundle\EventListener\Widget\PathWidgetListener instance
     */
    protected function getInnova_PathBundle_EventListener_Widget_PathWidgetListenerService()
    {
        return $this->services['innova.path_bundle.event_listener.widget.path_widget_listener'] = new \Innova\PathBundle\EventListener\Widget\PathWidgetListener($this->get('templating'), $this->get('form.factory'), $this->get('innova_path.manager.path'), $this->get('claroline.manager.tag_manager'));
    }

    /*
     * Gets the 'innova.temporary_access_resource_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Manager\TemporaryAccessResourceManager A Innova\CollecticielBundle\Manager\TemporaryAccessResourceManager instance
     */
    protected function getInnova_TemporaryAccessResourceManagerService()
    {
        return $this->services['innova.temporary_access_resource_manager'] = new \Innova\CollecticielBundle\Manager\TemporaryAccessResourceManager($this);
    }

    /*
     * Gets the 'innova_collecticiel.importer.collecticiel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\CollecticielBundle\Transfer\CollecticielImporter A Innova\CollecticielBundle\Transfer\CollecticielImporter instance
     */
    protected function getInnovaCollecticiel_Importer_CollecticielService()
    {
        $this->services['innova_collecticiel.importer.collecticiel'] = $instance = new \Innova\CollecticielBundle\Transfer\CollecticielImporter();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'innova_path.controller.manageresults' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Controller\ManageResultsController A Innova\PathBundle\Controller\ManageResultsController instance
     * 
     * @throws InactiveScopeException when the 'innova_path.controller.manageresults' service is requested while the 'request' scope is not active
     */
    protected function getInnovaPath_Controller_ManageresultsService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('innova_path.controller.manageresults', 'request');
        }

        return $this->services['innova_path.controller.manageresults'] = $this->scopedServices['request']['innova_path.controller.manageresults'] = new \Innova\PathBundle\Controller\ManageResultsController($this->get('innova_path.manager.path'), $this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'innova_path.controller.path' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Controller\PathController A Innova\PathBundle\Controller\PathController instance
     * 
     * @throws InactiveScopeException when the 'innova_path.controller.path' service is requested while the 'request' scope is not active
     */
    protected function getInnovaPath_Controller_PathService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('innova_path.controller.path', 'request');
        }

        return $this->services['innova_path.controller.path'] = $this->scopedServices['request']['innova_path.controller.path'] = new \Innova\PathBundle\Controller\PathController($this->get('session'), $this->get('translator.default'), $this->get('innova_path.manager.path'), $this->get('innova_path.manager.publishing'));
    }

    /*
     * Gets the 'innova_path.controller.path_editor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Controller\Wizard\EditorController A Innova\PathBundle\Controller\Wizard\EditorController instance
     * 
     * @throws InactiveScopeException when the 'innova_path.controller.path_editor' service is requested while the 'request' scope is not active
     */
    protected function getInnovaPath_Controller_PathEditorService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('innova_path.controller.path_editor', 'request');
        }

        return $this->services['innova_path.controller.path_editor'] = $this->scopedServices['request']['innova_path.controller.path_editor'] = new \Innova\PathBundle\Controller\Wizard\EditorController($this->get('doctrine.orm.default_entity_manager'), $this->get('router'), $this->get('form.factory'), $this->get('claroline.manager.resource_manager'), $this->get('innova_path.manager.path'));
    }

    /*
     * Gets the 'innova_path.controller.path_player' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Controller\Wizard\PlayerController A Innova\PathBundle\Controller\Wizard\PlayerController instance
     * 
     * @throws InactiveScopeException when the 'innova_path.controller.path_player' service is requested while the 'request' scope is not active
     */
    protected function getInnovaPath_Controller_PathPlayerService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('innova_path.controller.path_player', 'request');
        }

        return $this->services['innova_path.controller.path_player'] = $this->scopedServices['request']['innova_path.controller.path_player'] = new \Innova\PathBundle\Controller\Wizard\PlayerController($this->get('doctrine.orm.default_entity_manager'), $this->get('innova_path.manager.path'), $this->get('innova_path.manager.user_progression'));
    }

    /*
     * Gets the 'innova_path.controller.path_template' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Controller\PathTemplateController A Innova\PathBundle\Controller\PathTemplateController instance
     * 
     * @throws InactiveScopeException when the 'innova_path.controller.path_template' service is requested while the 'request' scope is not active
     */
    protected function getInnovaPath_Controller_PathTemplateService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('innova_path.controller.path_template', 'request');
        }

        return $this->services['innova_path.controller.path_template'] = $this->scopedServices['request']['innova_path.controller.path_template'] = new \Innova\PathBundle\Controller\PathTemplateController($this->get('form.factory'), $this->get('innova_path.manager.path_template'));
    }

    /*
     * Gets the 'innova_path.controller.path_widget' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Controller\Widget\PathWidgetController A Innova\PathBundle\Controller\Widget\PathWidgetController instance
     * 
     * @throws InactiveScopeException when the 'innova_path.controller.path_widget' service is requested while the 'request' scope is not active
     */
    protected function getInnovaPath_Controller_PathWidgetService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('innova_path.controller.path_widget', 'request');
        }

        return $this->services['innova_path.controller.path_widget'] = $this->scopedServices['request']['innova_path.controller.path_widget'] = new \Innova\PathBundle\Controller\Widget\PathWidgetController($this->get('doctrine.orm.default_entity_manager'), $this->get('form.factory'), $this->get('security.authorization_checker'), $this->get('innova_path.manager.path'), $this->get('claroline.manager.tag_manager'));
    }

    /*
     * Gets the 'innova_path.controller.step_condition' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Controller\StepConditionController A Innova\PathBundle\Controller\StepConditionController instance
     * 
     * @throws InactiveScopeException when the 'innova_path.controller.step_condition' service is requested while the 'request' scope is not active
     */
    protected function getInnovaPath_Controller_StepConditionService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('innova_path.controller.step_condition', 'request');
        }

        return $this->services['innova_path.controller.step_condition'] = $this->scopedServices['request']['innova_path.controller.step_condition'] = new \Innova\PathBundle\Controller\StepConditionController($this->get('claroline.persistence.object_manager'), $this->get('claroline.manager.group_manager'), $this->get('security.token_storage'), $this->get('claroline.manager.team_manager'), $this->get('event_dispatcher'), $this->get('innova_path.manager.user_progression'));
    }

    /*
     * Gets the 'innova_path.controller.user_progression' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Controller\UserProgressionController A Innova\PathBundle\Controller\UserProgressionController instance
     * 
     * @throws InactiveScopeException when the 'innova_path.controller.user_progression' service is requested while the 'request' scope is not active
     */
    protected function getInnovaPath_Controller_UserProgressionService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('innova_path.controller.user_progression', 'request');
        }

        return $this->services['innova_path.controller.user_progression'] = $this->scopedServices['request']['innova_path.controller.user_progression'] = new \Innova\PathBundle\Controller\UserProgressionController($this->get('innova_path.manager.user_progression'));
    }

    /*
     * Gets the 'innova_path.form.type.path' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Form\PathType A Innova\PathBundle\Form\PathType instance
     */
    protected function getInnovaPath_Form_Type_PathService()
    {
        return $this->services['innova_path.form.type.path'] = new \Innova\PathBundle\Form\PathType();
    }

    /*
     * Gets the 'innova_path.form.type.path_template' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Form\PathTemplateType A Innova\PathBundle\Form\PathTemplateType instance
     */
    protected function getInnovaPath_Form_Type_PathTemplateService()
    {
        return $this->services['innova_path.form.type.path_template'] = new \Innova\PathBundle\Form\PathTemplateType();
    }

    /*
     * Gets the 'innova_path.form.type.path_widget_config' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Form\Widget\PathWidgetConfigType A Innova\PathBundle\Form\Widget\PathWidgetConfigType instance
     */
    protected function getInnovaPath_Form_Type_PathWidgetConfigService()
    {
        return $this->services['innova_path.form.type.path_widget_config'] = new \Innova\PathBundle\Form\Widget\PathWidgetConfigType();
    }

    /*
     * Gets the 'innova_path.importer.importer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Transfer\PathImporter A Innova\PathBundle\Transfer\PathImporter instance
     */
    protected function getInnovaPath_Importer_ImporterService()
    {
        $this->services['innova_path.importer.importer'] = $instance = new \Innova\PathBundle\Transfer\PathImporter();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'innova_path.listener.notification_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\EventListener\Notifications\NotificationListener A Innova\PathBundle\EventListener\Notifications\NotificationListener instance
     */
    protected function getInnovaPath_Listener_NotificationListenerService()
    {
        $this->services['innova_path.listener.notification_listener'] = $instance = new \Innova\PathBundle\EventListener\Notifications\NotificationListener();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the 'innova_path.manager.criteria' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Manager\Condition\CriteriaManager A Innova\PathBundle\Manager\Condition\CriteriaManager instance
     */
    protected function getInnovaPath_Manager_CriteriaService()
    {
        return $this->services['innova_path.manager.criteria'] = new \Innova\PathBundle\Manager\Condition\CriteriaManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'innova_path.manager.path' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Manager\PathManager A Innova\PathBundle\Manager\PathManager instance
     */
    protected function getInnovaPath_Manager_PathService()
    {
        return $this->services['innova_path.manager.path'] = new \Innova\PathBundle\Manager\PathManager($this->get('doctrine.orm.default_entity_manager'), $this->get('security.authorization_checker'), $this->get('security.token_storage'), $this->get('claroline.manager.resource_manager'), $this->get('claroline.security.utilities'), $this->get('innova_path.manager.step'), $this->get('claroline.config.platform_config_handler'));
    }

    /*
     * Gets the 'innova_path.manager.path_template' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Manager\PathTemplateManager A Innova\PathBundle\Manager\PathTemplateManager instance
     */
    protected function getInnovaPath_Manager_PathTemplateService()
    {
        return $this->services['innova_path.manager.path_template'] = new \Innova\PathBundle\Manager\PathTemplateManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /*
     * Gets the 'innova_path.manager.publishing' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Manager\PublishingManager A Innova\PathBundle\Manager\PublishingManager instance
     */
    protected function getInnovaPath_Manager_PublishingService()
    {
        return $this->services['innova_path.manager.publishing'] = new \Innova\PathBundle\Manager\PublishingManager($this->get('doctrine.orm.default_entity_manager'), $this->get('innova_path.manager.step'), $this->get('claroline.manager.rights_manager'));
    }

    /*
     * Gets the 'innova_path.manager.step' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Manager\StepManager A Innova\PathBundle\Manager\StepManager instance
     */
    protected function getInnovaPath_Manager_StepService()
    {
        return $this->services['innova_path.manager.step'] = new \Innova\PathBundle\Manager\StepManager($this->get('doctrine.orm.default_entity_manager'), $this->get('session'), $this->get('translator.default'), $this->get('claroline.manager.resource_manager'), $this->get('innova_path.manager.step_condition'));
    }

    /*
     * Gets the 'innova_path.manager.step_condition' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Manager\Condition\StepConditionManager A Innova\PathBundle\Manager\Condition\StepConditionManager instance
     */
    protected function getInnovaPath_Manager_StepConditionService()
    {
        return $this->services['innova_path.manager.step_condition'] = new \Innova\PathBundle\Manager\Condition\StepConditionManager($this->get('doctrine.orm.default_entity_manager'), $this->get('innova_path.manager.criteria'));
    }

    /*
     * Gets the 'innova_path.manager.user_progression' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Innova\PathBundle\Manager\UserProgressionManager A Innova\PathBundle\Manager\UserProgressionManager instance
     */
    protected function getInnovaPath_Manager_UserProgressionService()
    {
        return $this->services['innova_path.manager.user_progression'] = new \Innova\PathBundle\Manager\UserProgressionManager($this->get('doctrine.orm.default_entity_manager'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'jms_aop.interceptor_loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\AopBundle\Aop\InterceptorLoader A JMS\AopBundle\Aop\InterceptorLoader instance
     */
    protected function getJmsAop_InterceptorLoaderService()
    {
        return $this->services['jms_aop.interceptor_loader'] = new \JMS\AopBundle\Aop\InterceptorLoader($this, array());
    }

    /*
     * Gets the 'jms_aop.pointcut_container' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\AopBundle\Aop\PointcutContainer A JMS\AopBundle\Aop\PointcutContainer instance
     */
    protected function getJmsAop_PointcutContainerService()
    {
        return $this->services['jms_aop.pointcut_container'] = new \JMS\AopBundle\Aop\PointcutContainer(array('security.access.method_interceptor' => $this->get('security.access.pointcut')));
    }

    /*
     * Gets the 'jms_di_extra.metadata.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\DiExtraBundle\Metadata\MetadataConverter A JMS\DiExtraBundle\Metadata\MetadataConverter instance
     */
    protected function getJmsDiExtra_Metadata_ConverterService()
    {
        return $this->services['jms_di_extra.metadata.converter'] = new \JMS\DiExtraBundle\Metadata\MetadataConverter();
    }

    /*
     * Gets the 'jms_di_extra.metadata.metadata_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Metadata\MetadataFactory A Metadata\MetadataFactory instance
     */
    protected function getJmsDiExtra_Metadata_MetadataFactoryService()
    {
        $this->services['jms_di_extra.metadata.metadata_factory'] = $instance = new \Metadata\MetadataFactory(new \Metadata\Driver\LazyLoadingDriver($this, 'jms_di_extra.metadata_driver'), 'Metadata\\ClassHierarchyMetadata', false);

        $instance->setCache(new \Metadata\Cache\FileCache((__DIR__.'/jms_diextra/metadata')));

        return $instance;
    }

    /*
     * Gets the 'jms_di_extra.metadata_driver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\DiExtraBundle\Metadata\Driver\AnnotationDriver A JMS\DiExtraBundle\Metadata\Driver\AnnotationDriver instance
     */
    protected function getJmsDiExtra_MetadataDriverService()
    {
        return $this->services['jms_di_extra.metadata_driver'] = new \JMS\DiExtraBundle\Metadata\Driver\AnnotationDriver($this->get('annotation_reader'));
    }

    /*
     * Gets the 'jms_serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Serializer A JMS\Serializer\Serializer instance
     */
    protected function getJmsSerializerService()
    {
        $a = new \Metadata\MetadataFactory(new \Metadata\Driver\LazyLoadingDriver($this, 'jms_serializer.metadata_driver'), 'Metadata\\ClassHierarchyMetadata', false);
        $a->setCache(new \Metadata\Cache\FileCache((__DIR__.'/jms_serializer')));

        $b = new \JMS\Serializer\EventDispatcher\LazyEventDispatcher($this);
        $b->setListeners(array('serializer.pre_serialize' => array(0 => array(0 => array(0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL))));

        return $this->services['jms_serializer'] = new \JMS\Serializer\Serializer($a, $this->get('jms_serializer.handler_registry'), $this->get('jms_serializer.unserialize_object_constructor'), new \JMS\DiExtraBundle\DependencyInjection\Collection\LazyServiceMap($this, array('json' => 'jms_serializer.json_serialization_visitor', 'xml' => 'jms_serializer.xml_serialization_visitor', 'yml' => 'jms_serializer.yaml_serialization_visitor')), new \JMS\DiExtraBundle\DependencyInjection\Collection\LazyServiceMap($this, array('json' => 'jms_serializer.json_deserialization_visitor', 'xml' => 'jms_serializer.xml_deserialization_visitor')), $b);
    }

    /*
     * Gets the 'jms_serializer.array_collection_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\ArrayCollectionHandler A JMS\Serializer\Handler\ArrayCollectionHandler instance
     */
    protected function getJmsSerializer_ArrayCollectionHandlerService()
    {
        return $this->services['jms_serializer.array_collection_handler'] = new \JMS\Serializer\Handler\ArrayCollectionHandler();
    }

    /*
     * Gets the 'jms_serializer.constraint_violation_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\ConstraintViolationHandler A JMS\Serializer\Handler\ConstraintViolationHandler instance
     */
    protected function getJmsSerializer_ConstraintViolationHandlerService()
    {
        return $this->services['jms_serializer.constraint_violation_handler'] = new \JMS\Serializer\Handler\ConstraintViolationHandler();
    }

    /*
     * Gets the 'jms_serializer.datetime_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\DateHandler A JMS\Serializer\Handler\DateHandler instance
     */
    protected function getJmsSerializer_DatetimeHandlerService()
    {
        return $this->services['jms_serializer.datetime_handler'] = new \JMS\Serializer\Handler\DateHandler('Y-m-d\\TH:i:sO', 'Europe/Paris', true);
    }

    /*
     * Gets the 'jms_serializer.doctrine_proxy_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber A JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber instance
     */
    protected function getJmsSerializer_DoctrineProxySubscriberService()
    {
        return $this->services['jms_serializer.doctrine_proxy_subscriber'] = new \JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber();
    }

    /*
     * Gets the 'jms_serializer.form_error_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\FormErrorHandler A JMS\Serializer\Handler\FormErrorHandler instance
     */
    protected function getJmsSerializer_FormErrorHandlerService()
    {
        return $this->services['jms_serializer.form_error_handler'] = new \JMS\Serializer\Handler\FormErrorHandler($this->get('translator.default'));
    }

    /*
     * Gets the 'jms_serializer.handler_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\LazyHandlerRegistry A JMS\Serializer\Handler\LazyHandlerRegistry instance
     */
    protected function getJmsSerializer_HandlerRegistryService()
    {
        return $this->services['jms_serializer.handler_registry'] = new \JMS\Serializer\Handler\LazyHandlerRegistry($this, array(2 => array('DateTime' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromjson'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromxml'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromyml')), 'ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\Common\\Collections\\ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ORM\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ODM\\MongoDB\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ODM\\PHPCR\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'PhpCollection\\Sequence' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence')), 'PhpCollection\\Map' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'))), 1 => array('DateTime' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime')), 'DateInterval' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval')), 'ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\Common\\Collections\\ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ORM\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ODM\\MongoDB\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ODM\\PHPCR\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'PhpCollection\\Sequence' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence')), 'PhpCollection\\Map' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap')), 'Symfony\\Component\\Form\\Form' => array('xml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToxml'), 'json' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormTojson'), 'yml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToyml')), 'Symfony\\Component\\Form\\FormError' => array('xml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorToxml'), 'json' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorTojson'), 'yml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorToyml')), 'Symfony\\Component\\Validator\\ConstraintViolationList' => array('xml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListToxml'), 'json' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListTojson'), 'yml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListToyml')), 'Symfony\\Component\\Validator\\ConstraintViolation' => array('xml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationToxml'), 'json' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationTojson'), 'yml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationToyml')), 'FOS\\RestBundle\\Util\\ExceptionWrapper' => array('json' => array(0 => 'fos_rest.serializer.exception_wrapper_serialize_handler', 1 => 'serializeToJson'), 'xml' => array(0 => 'fos_rest.serializer.exception_wrapper_serialize_handler', 1 => 'serializeToXml')))));
    }

    /*
     * Gets the 'jms_serializer.json_deserialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\JsonDeserializationVisitor A JMS\Serializer\JsonDeserializationVisitor instance
     */
    protected function getJmsSerializer_JsonDeserializationVisitorService()
    {
        return $this->services['jms_serializer.json_deserialization_visitor'] = new \JMS\Serializer\JsonDeserializationVisitor($this->get('jms_serializer.naming_strategy'), $this->get('jms_serializer.unserialize_object_constructor'));
    }

    /*
     * Gets the 'jms_serializer.json_serialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\JsonSerializationVisitor A JMS\Serializer\JsonSerializationVisitor instance
     */
    protected function getJmsSerializer_JsonSerializationVisitorService()
    {
        $this->services['jms_serializer.json_serialization_visitor'] = $instance = new \JMS\Serializer\JsonSerializationVisitor($this->get('jms_serializer.naming_strategy'));

        $instance->setOptions(0);

        return $instance;
    }

    /*
     * Gets the 'jms_serializer.metadata_driver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Metadata\Driver\DoctrineTypeDriver A JMS\Serializer\Metadata\Driver\DoctrineTypeDriver instance
     */
    protected function getJmsSerializer_MetadataDriverService()
    {
        $a = new \Metadata\Driver\FileLocator(array('Claroline\\Bundle\\FrontEndBundle' => ($this->targetDirs[3].'/vendor/claroline/front-end-bundle/Resources/config/serializer'), 'Claroline\\InstallationBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/main/installation/Resources/config/serializer'), 'Claroline\\MigrationBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/main/migration/Resources/config/serializer'), 'Claroline\\CoreBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/config/serializer'), 'Claroline\\AgendaBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/config/serializer'), 'FormaLibre\\ReservationBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/config/serializer'), 'Claroline\\ImagePlayerBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/image-player/Resources/config/serializer'), 'Claroline\\MessageBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/config/serializer'), 'Claroline\\ForumBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/config/serializer'), 'Claroline\\TagBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/config/serializer'), 'FormaLibre\\SupportBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/support/Resources/config/serializer'), 'Claroline\\RssReaderBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/config/serializer'), 'Icap\\NotificationBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/notification/Resources/config/serializer'), 'Claroline\\SurveyBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/survey/Resources/config/serializer'), 'Claroline\\AnnouncementBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/config/serializer'), 'Claroline\\ScormBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/config/serializer'), 'Claroline\\PdfPlayerBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-player/Resources/config/serializer'), 'Claroline\\CursusBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/config/serializer'), 'Claroline\\TeamBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/config/serializer'), 'Claroline\\PdfGeneratorBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-generator/Resources/config/serializer'), 'FormaLibre\\PresenceBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/presence/Resources/config/serializer'), 'Claroline\\VideoPlayerBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/config/serializer'), 'Claroline\\ActivityToolBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/config/serializer'), 'Claroline\\WebResourceBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/web-resource/Resources/config/serializer'), 'Claroline\\TextPlayerBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/text-player/Resources/config/serializer'), 'Innova\\CollecticielBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/config/serializer'), 'HeVinci\\FavouriteBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/favourite/Resources/config/serializer'), 'HeVinci\\CompetencyBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/config/serializer'), 'HeVinci\\UrlBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/url/Resources/config/serializer'), 'Icap\\PortfolioBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/config/serializer'), 'Icap\\BadgeBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/config/serializer'), 'Icap\\BlogBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/config/serializer'), 'Icap\\DropzoneBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/config/serializer'), 'Icap\\SocialmediaBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/config/serializer'), 'Icap\\WikiBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/config/serializer'), 'Icap\\OAuthBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/oauth/Resources/config/serializer'), 'Icap\\FormulaPluginBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/formula/Resources/config/serializer'), 'Claroline\\ResultBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/config/serializer'), 'Innova\\PathBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/config/serializer'), 'Icap\\WebsiteBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/config/serializer'), 'Claroline\\FlashCardBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/flashcard/Resources/config/serializer'), 'UJM\\ExoBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/config/serializer'), 'Icap\\LessonBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/config/serializer'), 'Claroline\\ChatBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/config/serializer'), 'Claroline\\DashboardBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dashboard/Resources/config/serializer'), 'Claroline\\ClacoFormBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/claco-form/Resources/config/serializer'), 'Symfony\\Bundle\\FrameworkBundle' => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/config/serializer'), 'Symfony\\Bundle\\SecurityBundle' => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/Resources/config/serializer'), 'Symfony\\Bundle\\TwigBundle' => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/config/serializer'), 'JMS\\AopBundle' => ($this->targetDirs[3].'/vendor/jms/aop-bundle/JMS/AopBundle/Resources/config/serializer'), 'Zenstruck\\Bundle\\FormBundle' => ($this->targetDirs[3].'/vendor/zenstruck/form-bundle/Zenstruck/Bundle/FormBundle/Resources/config/serializer'), 'Bazinga\\Bundle\\JsTranslationBundle' => ($this->targetDirs[3].'/vendor/willdurand/js-translation-bundle/Bazinga/Bundle/JsTranslationBundle/Resources/config/serializer'), 'WhiteOctober\\PagerfantaBundle' => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/config/serializer'), 'Symfony\\Bundle\\SwiftmailerBundle' => ($this->targetDirs[3].'/vendor/symfony/swiftmailer-bundle/Resources/config/serializer'), 'Symfony\\Bundle\\MonologBundle' => ($this->targetDirs[3].'/vendor/symfony/monolog-bundle/Resources/config/serializer'), 'Symfony\\Bundle\\AsseticBundle' => ($this->targetDirs[3].'/vendor/symfony/assetic-bundle/Resources/config/serializer'), 'Stof\\DoctrineExtensionsBundle' => ($this->targetDirs[3].'/vendor/stof/doctrine-extensions-bundle/Stof/DoctrineExtensionsBundle/Resources/config/serializer'), 'Stfalcon\\Bundle\\TinymceBundle' => ($this->targetDirs[3].'/vendor/stfalcon/tinymce-bundle/Stfalcon/Bundle/TinymceBundle/Resources/config/serializer'), 'Sensio\\Bundle\\FrameworkExtraBundle' => ($this->targetDirs[3].'/vendor/sensio/framework-extra-bundle/Resources/config/serializer'), 'Knp\\Bundle\\SnappyBundle' => ($this->targetDirs[3].'/vendor/knplabs/knp-snappy-bundle/Resources/config/serializer'), 'Knp\\Bundle\\MenuBundle' => ($this->targetDirs[3].'/vendor/knplabs/knp-menu-bundle/Knp/Bundle/MenuBundle/Resources/config/serializer'), 'JMS\\TwigJsBundle' => ($this->targetDirs[3].'/vendor/jms/twig-js-bundle/JMS/TwigJsBundle/Resources/config/serializer'), 'JMS\\SerializerBundle' => ($this->targetDirs[3].'/vendor/jms/serializer-bundle/JMS/SerializerBundle/Resources/config/serializer'), 'JMS\\DiExtraBundle' => ($this->targetDirs[3].'/vendor/jms/di-extra-bundle/JMS/DiExtraBundle/Resources/config/serializer'), 'JMS\\SecurityExtraBundle' => ($this->targetDirs[3].'/vendor/jms/security-extra-bundle/JMS/SecurityExtraBundle/Resources/config/serializer'), 'Innova\\AngularJSBundle' => ($this->targetDirs[3].'/vendor/innova/angular-js-bundle/Innova/AngularJSBundle/Resources/config/serializer'), 'Innova\\AngularUITinyMCEBundle' => ($this->targetDirs[3].'/vendor/innova/angular-ui-tinymce-bundle/Innova/AngularUITinyMCEBundle/Resources/config/serializer'), 'Innova\\AngularUIResourcePickerBundle' => ($this->targetDirs[3].'/vendor/innova/angular-ui-resource-picker-bundle/Innova/AngularUIResourcePickerBundle/Resources/config/serializer'), 'IDCI\\Bundle\\ExporterBundle' => ($this->targetDirs[3].'/vendor/idci/exporter-bundle/IDCI/Bundle/ExporterBundle/Resources/config/serializer'), 'HWI\\Bundle\\OAuthBundle' => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/config/serializer'), 'Gregwar\\CaptchaBundle' => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/config/serializer'), 'FOS\\RestBundle' => ($this->targetDirs[3].'/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle/Resources/config/serializer'), 'FOS\\OAuthServerBundle' => ($this->targetDirs[3].'/vendor/friendsofsymfony/oauth-server-bundle/Resources/config/serializer'), 'FOS\\JsRoutingBundle' => ($this->targetDirs[3].'/vendor/friendsofsymfony/jsrouting-bundle/Resources/config/serializer'), 'Doctrine\\Bundle\\DoctrineBundle' => ($this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/Resources/config/serializer'), 'BeSimple\\SsoAuthBundle' => ($this->targetDirs[3].'/vendor/besimple/sso-auth-bundle/BeSimple/SsoAuthBundle/Resources/config/serializer'), 'Claroline\\KernelBundle' => ($this->targetDirs[3].'/vendor/claroline/distribution/main/kernel/Resources/config/serializer')));

        return $this->services['jms_serializer.metadata_driver'] = new \JMS\Serializer\Metadata\Driver\DoctrineTypeDriver(new \Metadata\Driver\DriverChain(array(0 => new \JMS\Serializer\Metadata\Driver\YamlDriver($a), 1 => new \JMS\Serializer\Metadata\Driver\XmlDriver($a), 2 => new \JMS\Serializer\Metadata\Driver\PhpDriver($a), 3 => new \JMS\Serializer\Metadata\Driver\AnnotationDriver($this->get('annotation_reader')))), $this->get('doctrine'));
    }

    /*
     * Gets the 'jms_serializer.naming_strategy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Naming\CacheNamingStrategy A JMS\Serializer\Naming\CacheNamingStrategy instance
     */
    protected function getJmsSerializer_NamingStrategyService()
    {
        return $this->services['jms_serializer.naming_strategy'] = new \JMS\Serializer\Naming\CacheNamingStrategy(new \JMS\Serializer\Naming\SerializedNameAnnotationStrategy(new \JMS\Serializer\Naming\CamelCaseNamingStrategy('_', true)));
    }

    /*
     * Gets the 'jms_serializer.object_constructor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Construction\DoctrineObjectConstructor A JMS\Serializer\Construction\DoctrineObjectConstructor instance
     */
    protected function getJmsSerializer_ObjectConstructorService()
    {
        return $this->services['jms_serializer.object_constructor'] = new \JMS\Serializer\Construction\DoctrineObjectConstructor($this->get('doctrine'), $this->get('jms_serializer.unserialize_object_constructor'));
    }

    /*
     * Gets the 'jms_serializer.php_collection_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\PhpCollectionHandler A JMS\Serializer\Handler\PhpCollectionHandler instance
     */
    protected function getJmsSerializer_PhpCollectionHandlerService()
    {
        return $this->services['jms_serializer.php_collection_handler'] = new \JMS\Serializer\Handler\PhpCollectionHandler();
    }

    /*
     * Gets the 'jms_serializer.templating.helper.serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SerializerBundle\Templating\SerializerHelper A JMS\SerializerBundle\Templating\SerializerHelper instance
     */
    protected function getJmsSerializer_Templating_Helper_SerializerService()
    {
        return $this->services['jms_serializer.templating.helper.serializer'] = new \JMS\SerializerBundle\Templating\SerializerHelper($this->get('jms_serializer'));
    }

    /*
     * Gets the 'jms_serializer.xml_deserialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\XmlDeserializationVisitor A JMS\Serializer\XmlDeserializationVisitor instance
     */
    protected function getJmsSerializer_XmlDeserializationVisitorService()
    {
        $this->services['jms_serializer.xml_deserialization_visitor'] = $instance = new \JMS\Serializer\XmlDeserializationVisitor($this->get('jms_serializer.naming_strategy'), $this->get('jms_serializer.unserialize_object_constructor'));

        $instance->setDoctypeWhitelist(array());

        return $instance;
    }

    /*
     * Gets the 'jms_serializer.xml_serialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\XmlSerializationVisitor A JMS\Serializer\XmlSerializationVisitor instance
     */
    protected function getJmsSerializer_XmlSerializationVisitorService()
    {
        return $this->services['jms_serializer.xml_serialization_visitor'] = new \JMS\Serializer\XmlSerializationVisitor($this->get('jms_serializer.naming_strategy'));
    }

    /*
     * Gets the 'jms_serializer.yaml_serialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\YamlSerializationVisitor A JMS\Serializer\YamlSerializationVisitor instance
     */
    protected function getJmsSerializer_YamlSerializationVisitorService()
    {
        return $this->services['jms_serializer.yaml_serialization_visitor'] = new \JMS\Serializer\YamlSerializationVisitor($this->get('jms_serializer.naming_strategy'));
    }

    /*
     * Gets the 'kernel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     */
    protected function getKernelService()
    {
        throw new RuntimeException('You have requested a synthetic service ("kernel"). The DIC does not know how to construct this service.');
    }

    /*
     * Gets the 'knp_menu.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\MenuFactory A Knp\Menu\MenuFactory instance
     */
    protected function getKnpMenu_FactoryService()
    {
        $this->services['knp_menu.factory'] = $instance = new \Knp\Menu\MenuFactory();

        $instance->addExtension(new \Knp\Menu\Integration\Symfony\RoutingExtension($this->get('router')), 0);

        return $instance;
    }

    /*
     * Gets the 'knp_menu.listener.voters' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Bundle\MenuBundle\EventListener\VoterInitializerListener A Knp\Bundle\MenuBundle\EventListener\VoterInitializerListener instance
     */
    protected function getKnpMenu_Listener_VotersService()
    {
        $this->services['knp_menu.listener.voters'] = $instance = new \Knp\Bundle\MenuBundle\EventListener\VoterInitializerListener();

        $instance->addVoter($this->get('knp_menu.voter.router'));

        return $instance;
    }

    /*
     * Gets the 'knp_menu.matcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\Matcher\Matcher A Knp\Menu\Matcher\Matcher instance
     */
    protected function getKnpMenu_MatcherService()
    {
        $this->services['knp_menu.matcher'] = $instance = new \Knp\Menu\Matcher\Matcher();

        $instance->addVoter($this->get('knp_menu.voter.router'));

        return $instance;
    }

    /*
     * Gets the 'knp_menu.menu_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\Provider\ChainProvider A Knp\Menu\Provider\ChainProvider instance
     */
    protected function getKnpMenu_MenuProviderService()
    {
        return $this->services['knp_menu.menu_provider'] = new \Knp\Menu\Provider\ChainProvider(array(0 => new \Knp\Bundle\MenuBundle\Provider\ContainerAwareProvider($this, array()), 1 => new \Knp\Bundle\MenuBundle\Provider\BuilderAliasProvider($this->get('kernel'), $this, $this->get('knp_menu.factory'))));
    }

    /*
     * Gets the 'knp_menu.renderer.list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\Renderer\ListRenderer A Knp\Menu\Renderer\ListRenderer instance
     */
    protected function getKnpMenu_Renderer_ListService()
    {
        return $this->services['knp_menu.renderer.list'] = new \Knp\Menu\Renderer\ListRenderer($this->get('knp_menu.matcher'), array(), 'UTF-8');
    }

    /*
     * Gets the 'knp_menu.renderer.twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\Renderer\TwigRenderer A Knp\Menu\Renderer\TwigRenderer instance
     */
    protected function getKnpMenu_Renderer_TwigService()
    {
        return $this->services['knp_menu.renderer.twig'] = new \Knp\Menu\Renderer\TwigRenderer($this->get('twig'), 'knp_menu.html.twig', $this->get('knp_menu.matcher'), array());
    }

    /*
     * Gets the 'knp_menu.renderer_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Bundle\MenuBundle\Renderer\ContainerAwareProvider A Knp\Bundle\MenuBundle\Renderer\ContainerAwareProvider instance
     */
    protected function getKnpMenu_RendererProviderService()
    {
        return $this->services['knp_menu.renderer_provider'] = new \Knp\Bundle\MenuBundle\Renderer\ContainerAwareProvider($this, 'twig', array('list' => 'knp_menu.renderer.list', 'twig' => 'knp_menu.renderer.twig', 'contact_additional_actions' => 'claroline.menu.contact_additional_actions_renderer', 'exception_actions' => 'claroline.menu.exception_actions_renderer', 'external_authentication_renderer' => 'claroline.menu.external_authentication_renderer', 'desktop_parameters' => 'claroline.menu.desktop_parameters_renderer', 'user_additional_actions' => 'claroline.menu.user_additional_actions_renderer', 'top_bar_left' => 'claroline.menu.top_bar_left_renderer', 'workspace_additional_actions' => 'claroline.menu.workspace_additional_actions_renderer', 'top_bar_right' => 'claroline.menu.top_bar_right_renderer', 'group_additional_actions' => 'claroline.menu.group_additional_actions_renderer', 'workspace_users' => 'claroline.menu.workspace_user_renderer'));
    }

    /*
     * Gets the 'knp_menu.voter.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\Matcher\Voter\RouteVoter A Knp\Menu\Matcher\Voter\RouteVoter instance
     */
    protected function getKnpMenu_Voter_RouterService()
    {
        return $this->services['knp_menu.voter.router'] = new \Knp\Menu\Matcher\Voter\RouteVoter();
    }

    /*
     * Gets the 'knp_snappy.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Bundle\SnappyBundle\Snappy\LoggableGenerator A Knp\Bundle\SnappyBundle\Snappy\LoggableGenerator instance
     */
    protected function getKnpSnappy_ImageService()
    {
        return $this->services['knp_snappy.image'] = new \Knp\Bundle\SnappyBundle\Snappy\LoggableGenerator(new \Knp\Snappy\Image('wkhtmltoimage', array(), array()), $this->get('monolog.logger.snappy', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /*
     * Gets the 'knp_snappy.pdf' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Bundle\SnappyBundle\Snappy\LoggableGenerator A Knp\Bundle\SnappyBundle\Snappy\LoggableGenerator instance
     */
    protected function getKnpSnappy_PdfService()
    {
        return $this->services['knp_snappy.pdf'] = new \Knp\Bundle\SnappyBundle\Snappy\LoggableGenerator($this->get('knp_snappy.pdf.internal_generator'), $this->get('monolog.logger.snappy', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /*
     * Gets the 'knp_snappy.pdf.internal_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Snappy\Pdf A Knp\Snappy\Pdf instance
     */
    protected function getKnpSnappy_Pdf_InternalGeneratorService()
    {
        return $this->services['knp_snappy.pdf.internal_generator'] = $this->get('claroline.pdf_generator_factory')->getPdfCreator();
    }

    /*
     * Gets the 'locale_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener A Symfony\Component\HttpKernel\EventListener\LocaleListener instance
     */
    protected function getLocaleListenerService()
    {
        return $this->services['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener('fr', $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('request_stack'));
    }

    /*
     * Gets the 'logger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getLoggerService()
    {
        $this->services['logger'] = $instance = new \Symfony\Bridge\Monolog\Logger('app');

        $instance->useMicrosecondTimestamps(true);
        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /*
     * Gets the 'monolog.handler.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Monolog\Handler\FingersCrossedHandler A Monolog\Handler\FingersCrossedHandler instance
     */
    protected function getMonolog_Handler_MainService()
    {
        $this->services['monolog.handler.main'] = $instance = new \Monolog\Handler\FingersCrossedHandler($this->get('monolog.handler.nested'), $this->get('monolog.handler.main.not_found_strategy'), 0, true, true, NULL);

        $instance->pushProcessor($this->get('monolog.processor.psr_log_message'));

        return $instance;
    }

    /*
     * Gets the 'monolog.handler.main.not_found_strategy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\MonologBundle\NotFoundActivationStrategy A Symfony\Bundle\MonologBundle\NotFoundActivationStrategy instance
     */
    protected function getMonolog_Handler_Main_NotFoundStrategyService()
    {
        $this->services['monolog.handler.main.not_found_strategy'] = $instance = new \Symfony\Bundle\MonologBundle\NotFoundActivationStrategy(array(0 => '^/bundles', 1 => '^/js', 2 => '^/uploads', 3 => '^/vendor', 4 => '^/themes'), 400);

        $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        return $instance;
    }

    /*
     * Gets the 'monolog.handler.nested' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Monolog\Handler\StreamHandler A Monolog\Handler\StreamHandler instance
     */
    protected function getMonolog_Handler_NestedService()
    {
        $this->services['monolog.handler.nested'] = $instance = new \Monolog\Handler\StreamHandler(($this->targetDirs[2].'/logs/prod.log'), 100, true, NULL);

        $instance->pushProcessor($this->get('monolog.processor.psr_log_message'));

        return $instance;
    }

    /*
     * Gets the 'monolog.handler.null_internal' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Monolog\Handler\NullHandler A Monolog\Handler\NullHandler instance
     */
    protected function getMonolog_Handler_NullInternalService()
    {
        return $this->services['monolog.handler.null_internal'] = new \Monolog\Handler\NullHandler();
    }

    /*
     * Gets the 'monolog.logger.assetic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_AsseticService()
    {
        $this->services['monolog.logger.assetic'] = $instance = new \Symfony\Bridge\Monolog\Logger('assetic');

        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /*
     * Gets the 'monolog.logger.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_DoctrineService()
    {
        $this->services['monolog.logger.doctrine'] = $instance = new \Symfony\Bridge\Monolog\Logger('doctrine');

        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /*
     * Gets the 'monolog.logger.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_PhpService()
    {
        $this->services['monolog.logger.php'] = $instance = new \Symfony\Bridge\Monolog\Logger('php');

        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /*
     * Gets the 'monolog.logger.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_RequestService()
    {
        $this->services['monolog.logger.request'] = $instance = new \Symfony\Bridge\Monolog\Logger('request');

        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /*
     * Gets the 'monolog.logger.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_RouterService()
    {
        $this->services['monolog.logger.router'] = $instance = new \Symfony\Bridge\Monolog\Logger('router');

        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /*
     * Gets the 'monolog.logger.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_SecurityService()
    {
        $this->services['monolog.logger.security'] = $instance = new \Symfony\Bridge\Monolog\Logger('security');

        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /*
     * Gets the 'monolog.logger.snappy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_SnappyService()
    {
        $this->services['monolog.logger.snappy'] = $instance = new \Symfony\Bridge\Monolog\Logger('snappy');

        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /*
     * Gets the 'monolog.logger.translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance
     */
    protected function getMonolog_Logger_TranslationService()
    {
        $this->services['monolog.logger.translation'] = $instance = new \Symfony\Bridge\Monolog\Logger('translation');

        $instance->pushHandler($this->get('monolog.handler.main'));

        return $instance;
    }

    /*
     * Gets the 'pagerfanta.convert_not_valid_current_page_to_not_found_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidCurrentPageToNotFoundListener A WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidCurrentPageToNotFoundListener instance
     */
    protected function getPagerfanta_ConvertNotValidCurrentPageToNotFoundListenerService()
    {
        return $this->services['pagerfanta.convert_not_valid_current_page_to_not_found_listener'] = new \WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidCurrentPageToNotFoundListener();
    }

    /*
     * Gets the 'pagerfanta.convert_not_valid_max_per_page_to_not_found_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidMaxPerPageToNotFoundListener A WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidMaxPerPageToNotFoundListener instance
     */
    protected function getPagerfanta_ConvertNotValidMaxPerPageToNotFoundListenerService()
    {
        return $this->services['pagerfanta.convert_not_valid_max_per_page_to_not_found_listener'] = new \WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidMaxPerPageToNotFoundListener();
    }

    /*
     * Gets the 'property_accessor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\PropertyAccess\PropertyAccessor A Symfony\Component\PropertyAccess\PropertyAccessor instance
     */
    protected function getPropertyAccessorService()
    {
        return $this->services['property_accessor'] = new \Symfony\Component\PropertyAccess\PropertyAccessor(false, false);
    }

    /*
     * Gets the 'request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     * @throws InactiveScopeException when the 'request' service is requested while the 'request' scope is not active
     */
    protected function getRequestService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('request', 'request');
        }

        throw new RuntimeException('You have requested a synthetic service ("request"). The DIC does not know how to construct this service.');
    }

    /*
     * Gets the 'request_stack' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack A Symfony\Component\HttpFoundation\RequestStack instance
     */
    protected function getRequestStackService()
    {
        return $this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /*
     * Gets the 'response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ResponseListener A Symfony\Component\HttpKernel\EventListener\ResponseListener instance
     */
    protected function getResponseListenerService()
    {
        return $this->services['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8');
    }

    /*
     * Gets the 'router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Router\ClaroRouter A Claroline\CoreBundle\Router\ClaroRouter instance
     */
    protected function getRouterService()
    {
        return $this->services['router'] = new \Claroline\CoreBundle\Router\ClaroRouter($this, '.', array('cache_dir' => __DIR__, 'debug' => false, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper', 'generator_cache_class' => 'appProdProjectContainerUrlGenerator', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper', 'matcher_cache_class' => 'appProdProjectContainerUrlMatcher', 'strict_requirements' => true, 'resource_type' => 'dynamic'), $this->get('router.request_context', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('monolog.logger.router', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /*
     * Gets the 'router_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener A Symfony\Component\HttpKernel\EventListener\RouterListener instance
     */
    protected function getRouterListenerService()
    {
        return $this->services['router_listener'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener($this->get('router'), $this->get('router.request_context', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('request_stack'));
    }

    /*
     * Gets the 'routing.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader A Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader instance
     */
    protected function getRouting_LoaderService()
    {
        $a = $this->get('file_locator');
        $b = $this->get('annotation_reader');

        $c = new \Sensio\Bundle\FrameworkExtraBundle\Routing\AnnotatedRouteControllerLoader($b);

        $d = new \Symfony\Component\Config\Loader\LoaderResolver();
        $d->addLoader(new \Symfony\Component\Routing\Loader\XmlFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\YamlFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\PhpFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\AnnotationDirectoryLoader($a, $c));
        $d->addLoader(new \Symfony\Component\Routing\Loader\AnnotationFileLoader($a, $c));
        $d->addLoader($c);
        $d->addLoader($this->get('fos_rest.routing.loader.controller'));
        $d->addLoader($this->get('fos_rest.routing.loader.yaml_collection'));
        $d->addLoader($this->get('fos_rest.routing.loader.xml_collection'));
        $d->addLoader($this->get('claroline.installation.loader'));

        return $this->services['routing.loader'] = new \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader($this->get('controller_name_converter'), $this->get('monolog.logger.router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $d);
    }

    /*
     * Gets the 'security.access.decision_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SecurityExtraBundle\Security\Authorization\RememberingAccessDecisionManager A JMS\SecurityExtraBundle\Security\Authorization\RememberingAccessDecisionManager instance
     */
    protected function getSecurity_Access_DecisionManagerService()
    {
        $a = $this->get('security.authentication.trust_resolver');
        $b = $this->get('security.role_hierarchy');

        $c = new \JMS\SecurityExtraBundle\Security\Authorization\Expression\LazyLoadingExpressionVoter($this->get('security.expressions.handler'), $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        $c->setLazyCompiler($this, 'security.expressions.compiler');
        $c->setCacheDir((__DIR__.'/jms_security/expressions'));

        return $this->services['security.access.decision_manager'] = new \JMS\SecurityExtraBundle\Security\Authorization\RememberingAccessDecisionManager(new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(array(0 => $this->get('claroline.core_bundle.library.security.voter.administrator_voter'), 1 => $this->get('innova.collecticiel_bundle.library.security.voter.temporary_access_resource_voter'), 2 => $this->get('icap.dropzone_bundle.library.security.voter.temporary_access_resource_voter'), 3 => $this->get('claroline.core_bundle.library.security.voter.resource_voter'), 4 => $this->get('claroline.core_bundle.library.security.voter.group_voter'), 5 => $this->get('claroline.core_bundle.library.security.voter.workspace_voter'), 6 => $this->get('claroline.core_bundle.library.security.voter.facet_voter'), 7 => $this->get('claroline.core_bundle.library.security.voter.user_voter'), 8 => $this->get('claroline.core_bundle.library.security.voter.administration_tool_voter'), 9 => $this->get('claroline.core_bundle.library.security.voter.i_p_white_list_voter'), 10 => $this->get('claroline.core_bundle.library.security.voter.widget_voter'), 11 => $c, 12 => new \Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter(new \Symfony\Component\Security\Core\Authorization\ExpressionLanguage(), $a, $b), 13 => new \Symfony\Component\Security\Core\Authorization\Voter\RoleHierarchyVoter($b), 14 => new \Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter($a)), 'affirmative', false, true));
    }

    /*
     * Gets the 'security.access.method_interceptor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SecurityExtraBundle\Security\Authorization\Interception\MethodSecurityInterceptor A JMS\SecurityExtraBundle\Security\Authorization\Interception\MethodSecurityInterceptor instance
     */
    protected function getSecurity_Access_MethodInterceptorService()
    {
        return $this->services['security.access.method_interceptor'] = new \JMS\SecurityExtraBundle\Security\Authorization\Interception\MethodSecurityInterceptor($this->get('security.context'), $this->get('security.authentication.manager'), $this->get('security.access.decision_manager'), new \JMS\SecurityExtraBundle\Security\Authorization\AfterInvocation\AfterInvocationManager(array()), new \JMS\SecurityExtraBundle\Security\Authorization\RunAsManager('RunAsToken', 'ROLE_'), $this->get('security.extra.metadata_factory'), $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /*
     * Gets the 'security.access.pointcut' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SecurityExtraBundle\Security\Authorization\Interception\SecurityPointcut A JMS\SecurityExtraBundle\Security\Authorization\Interception\SecurityPointcut instance
     */
    protected function getSecurity_Access_PointcutService()
    {
        $this->services['security.access.pointcut'] = $instance = new \JMS\SecurityExtraBundle\Security\Authorization\Interception\SecurityPointcut($this->get('security.extra.metadata_factory'), false, array());

        $instance->setSecuredClasses(array());

        return $instance;
    }

    /*
     * Gets the 'security.authentication.listener.fos_oauth_server.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Security\Authentication\ClarolineApiListener A Claroline\CoreBundle\Library\Security\Authentication\ClarolineApiListener instance
     */
    protected function getSecurity_Authentication_Listener_FosOauthServer_ApiService()
    {
        return $this->services['security.authentication.listener.fos_oauth_server.api'] = new \Claroline\CoreBundle\Library\Security\Authentication\ClarolineApiListener($this->get('security.context'), $this->get('security.authentication.manager'), $this->get('fos_oauth_server.server'), $this->get('security.user.provider.concrete.user_db'), $this->get('security.encoder_factory'));
    }

    /*
     * Gets the 'security.authentication.sso.authentication_failure_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \BeSimple\SsoAuthBundle\Security\Http\Authentication\SsoAuthenticationFailureHandler A BeSimple\SsoAuthBundle\Security\Http\Authentication\SsoAuthenticationFailureHandler instance
     */
    protected function getSecurity_Authentication_Sso_AuthenticationFailureHandlerService()
    {
        return $this->services['security.authentication.sso.authentication_failure_handler'] = new \BeSimple\SsoAuthBundle\Security\Http\Authentication\SsoAuthenticationFailureHandler($this->get('templating'));
    }

    /*
     * Gets the 'security.authentication.trust_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver A Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver instance
     */
    protected function getSecurity_Authentication_TrustResolverService()
    {
        return $this->services['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver('Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken', 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken');
    }

    /*
     * Gets the 'security.authentication_utils' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\Authentication\AuthenticationUtils A Symfony\Component\Security\Http\Authentication\AuthenticationUtils instance
     */
    protected function getSecurity_AuthenticationUtilsService()
    {
        return $this->services['security.authentication_utils'] = new \Symfony\Component\Security\Http\Authentication\AuthenticationUtils($this->get('request_stack'));
    }

    /*
     * Gets the 'security.authorization_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AuthorizationChecker A Symfony\Component\Security\Core\Authorization\AuthorizationChecker instance
     */
    protected function getSecurity_AuthorizationCheckerService()
    {
        return $this->services['security.authorization_checker'] = new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker($this->get('security.token_storage'), $this->get('security.authentication.manager'), $this->get('security.access.decision_manager'), false);
    }

    /*
     * Gets the 'security.context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\SecurityContext A Symfony\Component\Security\Core\SecurityContext instance
     */
    protected function getSecurity_ContextService()
    {
        return $this->services['security.context'] = new \Symfony\Component\Security\Core\SecurityContext($this->get('security.token_storage'), $this->get('security.authorization_checker'));
    }

    /*
     * Gets the 'security.csrf.token_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Csrf\CsrfTokenManager A Symfony\Component\Security\Csrf\CsrfTokenManager instance
     */
    protected function getSecurity_Csrf_TokenManagerService()
    {
        return $this->services['security.csrf.token_manager'] = new \Symfony\Component\Security\Csrf\CsrfTokenManager(new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator($this->get('security.secure_random')), new \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage($this->get('session')));
    }

    /*
     * Gets the 'security.encoder_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\EncoderFactory A Symfony\Component\Security\Core\Encoder\EncoderFactory instance
     */
    protected function getSecurity_EncoderFactoryService()
    {
        return $this->services['security.encoder_factory'] = new \Symfony\Component\Security\Core\Encoder\EncoderFactory(array('Claroline\\CoreBundle\\Entity\\User' => array('class' => 'Symfony\\Component\\Security\\Core\\Encoder\\MessageDigestPasswordEncoder', 'arguments' => array(0 => 'sha512', 1 => true, 2 => 5000))));
    }

    /*
     * Gets the 'security.expressions.compiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SecurityExtraBundle\Security\Authorization\Expression\ExpressionCompiler A JMS\SecurityExtraBundle\Security\Authorization\Expression\ExpressionCompiler instance
     */
    protected function getSecurity_Expressions_CompilerService()
    {
        $a = new \JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\ContainerAwareVariableCompiler();
        $a->setMaps(array('trust_resolver' => 'security.authentication.trust_resolver', 'role_hierarchy' => 'security.role_hierarchy', 'permission_evaluator' => 'security.acl.permission_evaluator'), array());

        $this->services['security.expressions.compiler'] = $instance = new \JMS\SecurityExtraBundle\Security\Authorization\Expression\ExpressionCompiler();

        $instance->addFunctionCompiler(new \JMS\SecurityExtraBundle\Security\Acl\Expression\HasPermissionFunctionCompiler());
        $instance->addFunctionCompiler($this->get('security.expressions.service_callback_compiler.0'));
        $instance->addFunctionCompiler($this->get('security.expressions.service_callback_compiler.1'));
        $instance->addFunctionCompiler($this->get('security.expressions.service_callback_compiler.2'));
        $instance->addFunctionCompiler($this->get('security.expressions.service_callback_compiler.3'));
        $instance->addFunctionCompiler($this->get('security.expressions.service_callback_compiler.4'));
        $instance->addFunctionCompiler($this->get('security.expressions.service_callback_compiler.5'));
        $instance->addTypeCompiler(new \JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\ParameterExpressionCompiler());
        $instance->addTypeCompiler($a);

        return $instance;
    }

    /*
     * Gets the 'security.expressions.reverse_interpreter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SecurityExtraBundle\Security\Authorization\Expression\ReverseInterpreter A JMS\SecurityExtraBundle\Security\Authorization\Expression\ReverseInterpreter instance
     */
    protected function getSecurity_Expressions_ReverseInterpreterService()
    {
        return $this->services['security.expressions.reverse_interpreter'] = new \JMS\SecurityExtraBundle\Security\Authorization\Expression\ReverseInterpreter($this->get('security.expressions.compiler'), $this->get('security.expressions.handler'));
    }

    /*
     * Gets the 'security.expressions.service_callback_compiler.0' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler A JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler instance
     */
    protected function getSecurity_Expressions_ServiceCallbackCompiler_0Service()
    {
        return $this->services['security.expressions.service_callback_compiler.0'] = new \JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler('canAccessWorkspace', 'claroline.core_bundle.library.security.evaluator.workspace_access_evaluator', 'canAccessWorkspace');
    }

    /*
     * Gets the 'security.expressions.service_callback_compiler.1' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler A JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler instance
     */
    protected function getSecurity_Expressions_ServiceCallbackCompiler_1Service()
    {
        return $this->services['security.expressions.service_callback_compiler.1'] = new \JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler('canAccessWorkspace(attr)', 'claroline.core_bundle.library.security.evaluator.workspace_access_evaluator', 'canAccessWorkspace');
    }

    /*
     * Gets the 'security.expressions.service_callback_compiler.2' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler A JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler instance
     */
    protected function getSecurity_Expressions_ServiceCallbackCompiler_2Service()
    {
        return $this->services['security.expressions.service_callback_compiler.2'] = new \JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler('canOpenAdminTool', 'claroline.core_bundle.library.security.evaluator.admin_tool_access_evaluator', 'canOpenAdminTool');
    }

    /*
     * Gets the 'security.expressions.service_callback_compiler.3' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler A JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler instance
     */
    protected function getSecurity_Expressions_ServiceCallbackCompiler_3Service()
    {
        return $this->services['security.expressions.service_callback_compiler.3'] = new \JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler('canOpenAdminTool(toolName)', 'claroline.core_bundle.library.security.evaluator.admin_tool_access_evaluator', 'canOpenAdminTool');
    }

    /*
     * Gets the 'security.expressions.service_callback_compiler.4' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler A JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler instance
     */
    protected function getSecurity_Expressions_ServiceCallbackCompiler_4Service()
    {
        return $this->services['security.expressions.service_callback_compiler.4'] = new \JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler('canOpenAdminTool', 'he_vinci.competency_bundle.security.admin_tool_access_evaluator', 'canOpenAdminTool');
    }

    /*
     * Gets the 'security.expressions.service_callback_compiler.5' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler A JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler instance
     */
    protected function getSecurity_Expressions_ServiceCallbackCompiler_5Service()
    {
        return $this->services['security.expressions.service_callback_compiler.5'] = new \JMS\SecurityExtraBundle\Security\Authorization\Expression\Compiler\Func\ServiceCallbackFunctionCompiler('canOpenAdminTool(toolName)', 'he_vinci.competency_bundle.security.admin_tool_access_evaluator', 'canOpenAdminTool');
    }

    /*
     * Gets the 'security.extra.metadata_driver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Metadata\Driver\DriverChain A Metadata\Driver\DriverChain instance
     */
    protected function getSecurity_Extra_MetadataDriverService()
    {
        return $this->services['security.extra.metadata_driver'] = new \Metadata\Driver\DriverChain(array(0 => new \JMS\SecurityExtraBundle\Metadata\Driver\AnnotationDriver($this->get('annotation_reader'))));
    }

    /*
     * Gets the 'security.firewall' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\Firewall A Symfony\Component\Security\Http\Firewall instance
     */
    protected function getSecurity_FirewallService()
    {
        return $this->services['security.firewall'] = new \Symfony\Component\Security\Http\Firewall(new \Symfony\Bundle\SecurityBundle\Security\FirewallMap($this, array('security.firewall.map.context.install' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/install'), 'security.firewall.map.context.dev' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/(_(profiler|wdt)|css|images|js)/'), 'security.firewall.map.context.oauth_token' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/oauth/v2/token'), 'security.firewall.map.context.oauth_authorize' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/oauth/v2/auth'), 'security.firewall.map.context.api' => new \Symfony\Component\HttpFoundation\RequestMatcher('/api/'), 'security.firewall.map.context.main' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/'))), $this->get('event_dispatcher'));
    }

    /*
     * Gets the 'security.firewall.map.context.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance
     */
    protected function getSecurity_Firewall_Map_Context_ApiService()
    {
        $a = $this->get('security.token_storage');
        $b = $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        return $this->services['security.firewall.map.context.api'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => $this->get('security.channel_listener'), 1 => new \Symfony\Component\Security\Http\Firewall\ContextListener($a, array(0 => $this->get('security.user.provider.concrete.user_db')), 'api', $b, $this->get('event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)), 2 => $this->get('security.authentication.listener.fos_oauth_server.api'), 3 => $this->get('security.access_listener')), new \Claroline\CoreBundle\Library\Security\Firewall\ExceptionListener($a, $this->get('security.authentication.trust_resolver'), $this->get('security.http_utils'), 'api', new \FOS\OAuthServerBundle\Security\EntryPoint\OAuthEntryPoint($this->get('fos_oauth_server.server')), NULL, NULL, $b, false));
    }

    /*
     * Gets the 'security.firewall.map.context.dev' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance
     */
    protected function getSecurity_Firewall_Map_Context_DevService()
    {
        return $this->services['security.firewall.map.context.dev'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(), NULL);
    }

    /*
     * Gets the 'security.firewall.map.context.install' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance
     */
    protected function getSecurity_Firewall_Map_Context_InstallService()
    {
        return $this->services['security.firewall.map.context.install'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(), NULL);
    }

    /*
     * Gets the 'security.firewall.map.context.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance
     */
    protected function getSecurity_Firewall_Map_Context_MainService()
    {
        $a = $this->get('security.token_storage');
        $b = $this->get('security.user.provider.concrete.user_db');
        $c = $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $d = $this->get('event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $e = $this->get('security.http_utils');
        $f = $this->get('claroline.authentication_handler');
        $g = $this->get('http_kernel');
        $h = $this->get('security.authentication.manager');
        $i = $this->get('security.authentication.session_strategy');
        $j = $this->get('claroline.core_bundle.library.security.external_authenticator');

        $k = new \Symfony\Component\Security\Http\RememberMe\TokenBasedRememberMeServices(array(0 => $b, 1 => $b, 2 => $b), '59cbe0c36869fd6f6a1cf71e8c3e7bb9', 'main', array('lifetime' => 31536000, 'path' => '/', 'domain' => NULL, 'name' => 'REMEMBERME', 'secure' => false, 'httponly' => true, 'always_remember_me' => false, 'remember_me_parameter' => '_remember_me'), $c);

        $l = new \Symfony\Component\Security\Http\Firewall\LogoutListener($a, $e, $this->get('icap.oauth.logout_success_handler'), array('csrf_parameter' => '_csrf_token', 'intention' => 'logout', 'logout_path' => '/logout'));
        $l->addHandler(new \Claroline\CoreBundle\Library\Security\LogoutHandler());
        $l->addHandler($k);

        $m = new \Symfony\Component\Security\Http\Firewall\UsernamePasswordFormAuthenticationListener($a, $h, $i, $e, 'main', new \Symfony\Component\Security\Http\Authentication\CustomAuthenticationSuccessHandler($f, array('always_use_default_target_path' => false, 'default_target_path' => '/', 'login_path' => '/login', 'target_path_parameter' => '_target_path', 'use_referer' => false), 'main'), new \Symfony\Component\Security\Http\Authentication\CustomAuthenticationFailureHandler(new \Claroline\CoreBundle\Listener\AjaxAuthenticationFailureHandler($g, $e, array(), $c), array('login_path' => '/login', 'failure_path' => NULL, 'failure_forward' => false, 'failure_path_parameter' => '_failure_path')), array('check_path' => '/login_check', 'use_forward' => false, 'require_previous_session' => true, 'username_parameter' => '_username', 'password_parameter' => '_password', 'csrf_parameter' => '_csrf_token', 'intention' => 'authenticate', 'post_only' => true), $c, $d, NULL);
        $m->setRememberMeServices($k);

        $n = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationSuccessHandler($e, array());
        $n->setOptions(array('always_use_default_target_path' => false, 'default_target_path' => '/', 'login_path' => '/login', 'target_path_parameter' => '_target_path', 'use_referer' => false));
        $n->setProviderKey('main');

        $o = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler($g, $e, array(), $c);
        $o->setOptions(array('login_path' => '/login', 'failure_path' => NULL, 'failure_forward' => false, 'failure_path_parameter' => '_failure_path'));

        $p = new \Symfony\Component\Security\Http\Authentication\SimpleAuthenticationHandler($j, $n, $o, $c);

        $q = new \Symfony\Component\Security\Http\Firewall\SimpleFormAuthenticationListener($a, $h, $i, $e, 'main', $p, $p, array('authenticator' => 'claroline.core_bundle.library.security.external_authenticator', 'check_path' => '/login_check', 'use_forward' => false, 'require_previous_session' => true, 'username_parameter' => '_username', 'password_parameter' => '_password', 'csrf_parameter' => '_csrf_token', 'intention' => 'authenticate', 'post_only' => true), $c, $d, NULL, $j);
        $q->setRememberMeServices($k);

        $r = new \HWI\Bundle\OAuthBundle\Security\Http\Firewall\OAuthListener($a, $h, $i, $e, 'main', new \Symfony\Component\Security\Http\Authentication\CustomAuthenticationSuccessHandler($f, array('login_path' => '/login', 'always_use_default_target_path' => false, 'default_target_path' => '/', 'target_path_parameter' => '_target_path', 'use_referer' => false), 'main'), new \Symfony\Component\Security\Http\Authentication\CustomAuthenticationFailureHandler($this->get('icap.oauth.failure_handler'), array('login_path' => '/login', 'failure_path' => '/login', 'failure_forward' => false, 'failure_path_parameter' => '_failure_path')), array('use_forward' => false, 'check_path' => '/login_check', 'require_previous_session' => true), $c, $d);
        $r->setResourceOwnerMap($this->get('hwi_oauth.resource_ownermap.main'));
        $r->setCheckPaths(array(0 => '/login/check-facebook', 1 => '/login/check-twitter', 2 => '/login/check-google', 3 => '/login/check-linkedin', 4 => '/login/check-windows', 5 => '/login/check-o365'));
        $r->setRememberMeServices($k);

        return $this->services['security.firewall.map.context.main'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => $this->get('security.channel_listener'), 1 => new \Symfony\Component\Security\Http\Firewall\ContextListener($a, array(0 => $b), 'main', $c, $d), 2 => $l, 3 => $m, 4 => $q, 5 => $r, 6 => new \Symfony\Component\Security\Http\Firewall\RememberMeListener($a, $k, $h, $c, $d, true, $i), 7 => new \Claroline\CoreBundle\Listener\AnonymousAuthenticationListener($a, '591e162d985b03.64780398', $c, $h), 8 => new \Symfony\Component\Security\Http\Firewall\SwitchUserListener($a, $b, $this->get('hwi_oauth.user_checker'), 'main', $this->get('security.access.decision_manager'), $c, '_switch', 'ROLE_ADMIN', $d), 9 => $this->get('security.access_listener')), new \Claroline\CoreBundle\Library\Security\Firewall\ExceptionListener($a, $this->get('security.authentication.trust_resolver'), $e, 'main', new \HWI\Bundle\OAuthBundle\Security\Http\EntryPoint\OAuthEntryPoint($g, $e, '/login', false), NULL, NULL, $c, false));
    }

    /*
     * Gets the 'security.firewall.map.context.oauth_authorize' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance
     */
    protected function getSecurity_Firewall_Map_Context_OauthAuthorizeService()
    {
        $a = $this->get('security.token_storage');
        $b = $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $c = $this->get('event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $d = $this->get('security.http_utils');
        $e = $this->get('http_kernel');
        $f = $this->get('security.authentication.manager');

        $g = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationSuccessHandler($d, array());
        $g->setOptions(array('login_path' => '/oauth/v2/auth_login', 'default_target_path' => '/oauth/v2/auth/form', 'always_use_default_target_path' => false, 'target_path_parameter' => '_target_path', 'use_referer' => false));
        $g->setProviderKey('oauth_authorize');

        $h = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler($e, $d, array(), $b);
        $h->setOptions(array('login_path' => '/oauth/v2/auth_login', 'failure_path' => NULL, 'failure_forward' => false, 'failure_path_parameter' => '_failure_path'));

        return $this->services['security.firewall.map.context.oauth_authorize'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => $this->get('security.channel_listener'), 1 => new \Symfony\Component\Security\Http\Firewall\ContextListener($a, array(0 => $this->get('security.user.provider.concrete.user_db')), 'oauth_authorize', $b, $c), 2 => new \Symfony\Component\Security\Http\Firewall\UsernamePasswordFormAuthenticationListener($a, $f, $this->get('security.authentication.session_strategy'), $d, 'oauth_authorize', $g, $h, array('check_path' => '/oauth/v2/auth_login_check', 'use_forward' => false, 'require_previous_session' => true, 'username_parameter' => '_username', 'password_parameter' => '_password', 'csrf_parameter' => '_csrf_token', 'intention' => 'authenticate', 'post_only' => true), $b, $c, NULL), 3 => new \Claroline\CoreBundle\Listener\AnonymousAuthenticationListener($a, '591e162d985b03.64780398', $b, $f), 4 => $this->get('security.access_listener')), new \Claroline\CoreBundle\Library\Security\Firewall\ExceptionListener($a, $this->get('security.authentication.trust_resolver'), $d, 'oauth_authorize', new \Symfony\Component\Security\Http\EntryPoint\FormAuthenticationEntryPoint($e, $d, '/oauth/v2/auth_login', false), NULL, NULL, $b, false));
    }

    /*
     * Gets the 'security.firewall.map.context.oauth_token' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance
     */
    protected function getSecurity_Firewall_Map_Context_OauthTokenService()
    {
        return $this->services['security.firewall.map.context.oauth_token'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(), NULL);
    }

    /*
     * Gets the 'security.password_encoder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\UserPasswordEncoder A Symfony\Component\Security\Core\Encoder\UserPasswordEncoder instance
     */
    protected function getSecurity_PasswordEncoderService()
    {
        return $this->services['security.password_encoder'] = new \Symfony\Component\Security\Core\Encoder\UserPasswordEncoder($this->get('security.encoder_factory'));
    }

    /*
     * Gets the 'security.rememberme.response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\RememberMe\ResponseListener A Symfony\Component\Security\Http\RememberMe\ResponseListener instance
     */
    protected function getSecurity_Rememberme_ResponseListenerService()
    {
        return $this->services['security.rememberme.response_listener'] = new \Symfony\Component\Security\Http\RememberMe\ResponseListener();
    }

    /*
     * Gets the 'security.role_hierarchy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Role\RoleHierarchy A Symfony\Component\Security\Core\Role\RoleHierarchy instance
     */
    protected function getSecurity_RoleHierarchyService()
    {
        return $this->services['security.role_hierarchy'] = new \Symfony\Component\Security\Core\Role\RoleHierarchy(array());
    }

    /*
     * Gets the 'security.secure_random' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Util\SecureRandom A Symfony\Component\Security\Core\Util\SecureRandom instance
     */
    protected function getSecurity_SecureRandomService()
    {
        return $this->services['security.secure_random'] = new \Symfony\Component\Security\Core\Util\SecureRandom();
    }

    /*
     * Gets the 'security.token_storage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage A Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage instance
     */
    protected function getSecurity_TokenStorageService()
    {
        return $this->services['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage();
    }

    /*
     * Gets the 'security.validator.user_password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator A Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator instance
     */
    protected function getSecurity_Validator_UserPasswordService()
    {
        return $this->services['security.validator.user_password'] = new \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator($this->get('security.token_storage'), $this->get('security.encoder_factory'));
    }

    /*
     * Gets the 'sensio_framework_extra.cache.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener instance
     */
    protected function getSensioFrameworkExtra_Cache_ListenerService()
    {
        return $this->services['sensio_framework_extra.cache.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener();
    }

    /*
     * Gets the 'sensio_framework_extra.controller.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener instance
     */
    protected function getSensioFrameworkExtra_Controller_ListenerService()
    {
        return $this->services['sensio_framework_extra.controller.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener($this->get('annotation_reader'));
    }

    /*
     * Gets the 'sensio_framework_extra.converter.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter instance
     */
    protected function getSensioFrameworkExtra_Converter_DatetimeService()
    {
        return $this->services['sensio_framework_extra.converter.datetime'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter();
    }

    /*
     * Gets the 'sensio_framework_extra.converter.doctrine.orm' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter instance
     */
    protected function getSensioFrameworkExtra_Converter_Doctrine_OrmService()
    {
        return $this->services['sensio_framework_extra.converter.doctrine.orm'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter($this->get('doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /*
     * Gets the 'sensio_framework_extra.converter.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener instance
     */
    protected function getSensioFrameworkExtra_Converter_ListenerService()
    {
        return $this->services['sensio_framework_extra.converter.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener($this->get('sensio_framework_extra.converter.manager'), true);
    }

    /*
     * Gets the 'sensio_framework_extra.converter.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager instance
     */
    protected function getSensioFrameworkExtra_Converter_ManagerService()
    {
        $this->services['sensio_framework_extra.converter.manager'] = $instance = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager();

        $instance->add($this->get('sensio_framework_extra.converter.doctrine.orm'), 0, 'doctrine.orm');
        $instance->add($this->get('sensio_framework_extra.converter.datetime'), 0, 'datetime');
        $instance->add($this->get('fos_rest.converter.request_body'), 0, 'fos_rest.request_body');
        $instance->add($this->get('claroline.core_bundle.converter.current_user_converter'), 0, 'current_user');
        $instance->add($this->get('claroline.core_bundle.converter.multiple_ids_converter'), 500, NULL);
        $instance->add($this->get('claroline.core_bundle.converter.strict_id_converter'), 500, NULL);
        $instance->add($this->get('claroline.core_bundle.converter.orderable_converter'), 500, NULL);
        $instance->add($this->get('claroline.core_bundle.converter.authenticated_user_converter'), 500, NULL);
        $instance->add($this->get('icap.badge_bundle.converter.slug_converter'), 500, 'badge_converter');

        return $instance;
    }

    /*
     * Gets the 'sensio_framework_extra.security.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener instance
     */
    protected function getSensioFrameworkExtra_Security_ListenerService()
    {
        return $this->services['sensio_framework_extra.security.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener(NULL, new \Sensio\Bundle\FrameworkExtraBundle\Security\ExpressionLanguage(), $this->get('security.authentication.trust_resolver', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.role_hierarchy', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /*
     * Gets the 'sensio_framework_extra.view.guesser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser A Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser instance
     */
    protected function getSensioFrameworkExtra_View_GuesserService()
    {
        return $this->services['sensio_framework_extra.view.guesser'] = new \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser($this->get('kernel'));
    }

    /*
     * Gets the 'service_container' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     */
    protected function getServiceContainerService()
    {
        throw new RuntimeException('You have requested a synthetic service ("service_container"). The DIC does not know how to construct this service.');
    }

    /*
     * Gets the 'session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Session A Symfony\Component\HttpFoundation\Session\Session instance
     */
    protected function getSessionService()
    {
        return $this->services['session'] = new \Symfony\Component\HttpFoundation\Session\Session($this->get('session.storage.native'), new \Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag(), new \Symfony\Component\HttpFoundation\Session\Flash\FlashBag());
    }

    /*
     * Gets the 'session.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \SessionHandlerInterface A SessionHandlerInterface instance
     */
    protected function getSession_HandlerService()
    {
        return $this->services['session.handler'] = $this->get('claroline.session.handler_factory')->getHandler();
    }

    /*
     * Gets the 'session.save_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SaveSessionListener A Symfony\Component\HttpKernel\EventListener\SaveSessionListener instance
     */
    protected function getSession_SaveListenerService()
    {
        return $this->services['session.save_listener'] = new \Symfony\Component\HttpKernel\EventListener\SaveSessionListener();
    }

    /*
     * Gets the 'session.storage.filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage instance
     */
    protected function getSession_Storage_FilesystemService()
    {
        return $this->services['session.storage.filesystem'] = new \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage((__DIR__.'/sessions'), 'MOCKSESSID', $this->get('session.storage.metadata_bag'));
    }

    /*
     * Gets the 'session.storage.native' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage instance
     */
    protected function getSession_Storage_NativeService()
    {
        $this->services['session.storage.native'] = $instance = new \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage(array('gc_probability' => 1), $this->get('session.handler'), $this->get('session.storage.metadata_bag'));

        $instance->setOptions($this->get('claroline.session.storage_options'));

        return $instance;
    }

    /*
     * Gets the 'session.storage.php_bridge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage instance
     */
    protected function getSession_Storage_PhpBridgeService()
    {
        return $this->services['session.storage.php_bridge'] = new \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage($this->get('session.handler'), $this->get('session.storage.metadata_bag'));
    }

    /*
     * Gets the 'session_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\EventListener\SessionListener A Symfony\Bundle\FrameworkBundle\EventListener\SessionListener instance
     */
    protected function getSessionListenerService()
    {
        return $this->services['session_listener'] = new \Symfony\Bundle\FrameworkBundle\EventListener\SessionListener($this);
    }

    /*
     * Gets the 'stof_doctrine_extensions.event_listener.blame' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Stof\DoctrineExtensionsBundle\EventListener\BlameListener A Stof\DoctrineExtensionsBundle\EventListener\BlameListener instance
     */
    protected function getStofDoctrineExtensions_EventListener_BlameService()
    {
        return $this->services['stof_doctrine_extensions.event_listener.blame'] = new \Stof\DoctrineExtensionsBundle\EventListener\BlameListener($this->get('stof_doctrine_extensions.listener.blameable'), $this->get('security.context', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /*
     * Gets the 'stof_doctrine_extensions.event_listener.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Stof\DoctrineExtensionsBundle\EventListener\LocaleListener A Stof\DoctrineExtensionsBundle\EventListener\LocaleListener instance
     */
    protected function getStofDoctrineExtensions_EventListener_LocaleService()
    {
        return $this->services['stof_doctrine_extensions.event_listener.locale'] = new \Stof\DoctrineExtensionsBundle\EventListener\LocaleListener($this->get('stof_doctrine_extensions.listener.translatable'));
    }

    /*
     * Gets the 'stof_doctrine_extensions.uploadable.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Stof\DoctrineExtensionsBundle\Uploadable\UploadableManager A Stof\DoctrineExtensionsBundle\Uploadable\UploadableManager instance
     */
    protected function getStofDoctrineExtensions_Uploadable_ManagerService()
    {
        $a = new \Gedmo\Uploadable\UploadableListener(new \Stof\DoctrineExtensionsBundle\Uploadable\MimeTypeGuesserAdapter());
        $a->setAnnotationReader($this->get('annotation_reader'));
        $a->setDefaultFileInfoClass('Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadedFileInfo');

        return $this->services['stof_doctrine_extensions.uploadable.manager'] = new \Stof\DoctrineExtensionsBundle\Uploadable\UploadableManager($a, 'Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadedFileInfo');
    }

    /*
     * Gets the 'streamed_response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener A Symfony\Component\HttpKernel\EventListener\StreamedResponseListener instance
     */
    protected function getStreamedResponseListenerService()
    {
        return $this->services['streamed_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener();
    }

    /*
     * Gets the 'swiftmailer.email_sender.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener A Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener instance
     */
    protected function getSwiftmailer_EmailSender_ListenerService()
    {
        return $this->services['swiftmailer.email_sender.listener'] = new \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener($this, $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /*
     * Gets the 'swiftmailer.mailer.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Mailer A Swift_Mailer instance
     */
    protected function getSwiftmailer_Mailer_DefaultService()
    {
        return $this->services['swiftmailer.mailer.default'] = new \Swift_Mailer($this->get('swiftmailer.mailer.default.transport'));
    }

    /*
     * Gets the 'swiftmailer.mailer.default.transport' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Transport A Swift_Transport instance
     */
    protected function getSwiftmailer_Mailer_Default_TransportService()
    {
        return $this->services['swiftmailer.mailer.default.transport'] = $this->get('claroline.mailing.transport_factory')->getTransport();
    }

    /*
     * Gets the 'templating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\TwigEngine A Symfony\Bundle\TwigBundle\TwigEngine instance
     */
    protected function getTemplatingService()
    {
        return $this->services['templating'] = new \Symfony\Bundle\TwigBundle\TwigEngine($this->get('twig'), $this->get('templating.name_parser'), $this->get('templating.locator'));
    }

    /*
     * Gets the 'templating.filename_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser A Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser instance
     */
    protected function getTemplating_FilenameParserService()
    {
        return $this->services['templating.filename_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser();
    }

    /*
     * Gets the 'templating.helper.assets' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\AssetsHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\AssetsHelper instance
     */
    protected function getTemplating_Helper_AssetsService()
    {
        return $this->services['templating.helper.assets'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\AssetsHelper($this->get('assets.packages'), array());
    }

    /*
     * Gets the 'templating.helper.logout_url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper A Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper instance
     */
    protected function getTemplating_Helper_LogoutUrlService()
    {
        return $this->services['templating.helper.logout_url'] = new \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper($this->get('security.logout_url_generator'));
    }

    /*
     * Gets the 'templating.helper.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper instance
     */
    protected function getTemplating_Helper_RouterService()
    {
        return $this->services['templating.helper.router'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper($this->get('router'));
    }

    /*
     * Gets the 'templating.helper.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper A Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper instance
     */
    protected function getTemplating_Helper_SecurityService()
    {
        return $this->services['templating.helper.security'] = new \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper($this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /*
     * Gets the 'templating.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader A Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader instance
     */
    protected function getTemplating_LoaderService()
    {
        return $this->services['templating.loader'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader($this->get('templating.locator'));
    }

    /*
     * Gets the 'templating.locator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Library\Templating\Loader\TemplateLocator A Claroline\CoreBundle\Library\Templating\Loader\TemplateLocator instance
     */
    protected function getTemplating_LocatorService()
    {
        return $this->services['templating.locator'] = new \Claroline\CoreBundle\Library\Templating\Loader\TemplateLocator($this->get('file_locator'), $this->get('claroline.manager.theme_manager'), ($this->targetDirs[2].'/Resources'));
    }

    /*
     * Gets the 'templating.name_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser A Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser instance
     */
    protected function getTemplating_NameParserService()
    {
        return $this->services['templating.name_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser($this->get('kernel'));
    }

    /*
     * Gets the 'test.client' service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Client A Symfony\Bundle\FrameworkBundle\Client instance
     */
    protected function getTest_ClientService()
    {
        return new \Symfony\Bundle\FrameworkBundle\Client($this->get('kernel'), array(), new \Symfony\Component\BrowserKit\History(), new \Symfony\Component\BrowserKit\CookieJar());
    }

    /*
     * Gets the 'test.client.cookiejar' service.
     *
     * @return \Symfony\Component\BrowserKit\CookieJar A Symfony\Component\BrowserKit\CookieJar instance
     */
    protected function getTest_Client_CookiejarService()
    {
        return new \Symfony\Component\BrowserKit\CookieJar();
    }

    /*
     * Gets the 'test.client.history' service.
     *
     * @return \Symfony\Component\BrowserKit\History A Symfony\Component\BrowserKit\History instance
     */
    protected function getTest_Client_HistoryService()
    {
        return new \Symfony\Component\BrowserKit\History();
    }

    /*
     * Gets the 'test.session.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\EventListener\TestSessionListener A Symfony\Bundle\FrameworkBundle\EventListener\TestSessionListener instance
     */
    protected function getTest_Session_ListenerService()
    {
        return $this->services['test.session.listener'] = new \Symfony\Bundle\FrameworkBundle\EventListener\TestSessionListener($this);
    }

    /*
     * Gets the 'translation.dumper.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\CsvFileDumper A Symfony\Component\Translation\Dumper\CsvFileDumper instance
     */
    protected function getTranslation_Dumper_CsvService()
    {
        return $this->services['translation.dumper.csv'] = new \Symfony\Component\Translation\Dumper\CsvFileDumper();
    }

    /*
     * Gets the 'translation.dumper.ini' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\IniFileDumper A Symfony\Component\Translation\Dumper\IniFileDumper instance
     */
    protected function getTranslation_Dumper_IniService()
    {
        return $this->services['translation.dumper.ini'] = new \Symfony\Component\Translation\Dumper\IniFileDumper();
    }

    /*
     * Gets the 'translation.dumper.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\JsonFileDumper A Symfony\Component\Translation\Dumper\JsonFileDumper instance
     */
    protected function getTranslation_Dumper_JsonService()
    {
        return $this->services['translation.dumper.json'] = new \Symfony\Component\Translation\Dumper\JsonFileDumper();
    }

    /*
     * Gets the 'translation.dumper.mo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\MoFileDumper A Symfony\Component\Translation\Dumper\MoFileDumper instance
     */
    protected function getTranslation_Dumper_MoService()
    {
        return $this->services['translation.dumper.mo'] = new \Symfony\Component\Translation\Dumper\MoFileDumper();
    }

    /*
     * Gets the 'translation.dumper.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\PhpFileDumper A Symfony\Component\Translation\Dumper\PhpFileDumper instance
     */
    protected function getTranslation_Dumper_PhpService()
    {
        return $this->services['translation.dumper.php'] = new \Symfony\Component\Translation\Dumper\PhpFileDumper();
    }

    /*
     * Gets the 'translation.dumper.po' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\PoFileDumper A Symfony\Component\Translation\Dumper\PoFileDumper instance
     */
    protected function getTranslation_Dumper_PoService()
    {
        return $this->services['translation.dumper.po'] = new \Symfony\Component\Translation\Dumper\PoFileDumper();
    }

    /*
     * Gets the 'translation.dumper.qt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\QtFileDumper A Symfony\Component\Translation\Dumper\QtFileDumper instance
     */
    protected function getTranslation_Dumper_QtService()
    {
        return $this->services['translation.dumper.qt'] = new \Symfony\Component\Translation\Dumper\QtFileDumper();
    }

    /*
     * Gets the 'translation.dumper.res' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\IcuResFileDumper A Symfony\Component\Translation\Dumper\IcuResFileDumper instance
     */
    protected function getTranslation_Dumper_ResService()
    {
        return $this->services['translation.dumper.res'] = new \Symfony\Component\Translation\Dumper\IcuResFileDumper();
    }

    /*
     * Gets the 'translation.dumper.xliff' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\XliffFileDumper A Symfony\Component\Translation\Dumper\XliffFileDumper instance
     */
    protected function getTranslation_Dumper_XliffService()
    {
        return $this->services['translation.dumper.xliff'] = new \Symfony\Component\Translation\Dumper\XliffFileDumper();
    }

    /*
     * Gets the 'translation.dumper.yml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\YamlFileDumper A Symfony\Component\Translation\Dumper\YamlFileDumper instance
     */
    protected function getTranslation_Dumper_YmlService()
    {
        return $this->services['translation.dumper.yml'] = new \Symfony\Component\Translation\Dumper\YamlFileDumper();
    }

    /*
     * Gets the 'translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Extractor\ChainExtractor A Symfony\Component\Translation\Extractor\ChainExtractor instance
     */
    protected function getTranslation_ExtractorService()
    {
        $this->services['translation.extractor'] = $instance = new \Symfony\Component\Translation\Extractor\ChainExtractor();

        $instance->addExtractor('php', $this->get('translation.extractor.php'));
        $instance->addExtractor('twig', $this->get('twig.translation.extractor'));

        return $instance;
    }

    /*
     * Gets the 'translation.extractor.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor A Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor instance
     */
    protected function getTranslation_Extractor_PhpService()
    {
        return $this->services['translation.extractor.php'] = new \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor();
    }

    /*
     * Gets the 'translation.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader A Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader instance
     */
    protected function getTranslation_LoaderService()
    {
        $a = $this->get('translation.loader.xliff');

        $this->services['translation.loader'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader();

        $instance->addLoader('php', $this->get('translation.loader.php'));
        $instance->addLoader('yml', $this->get('translation.loader.yml'));
        $instance->addLoader('xlf', $a);
        $instance->addLoader('xliff', $a);
        $instance->addLoader('po', $this->get('translation.loader.po'));
        $instance->addLoader('mo', $this->get('translation.loader.mo'));
        $instance->addLoader('ts', $this->get('translation.loader.qt'));
        $instance->addLoader('csv', $this->get('translation.loader.csv'));
        $instance->addLoader('res', $this->get('translation.loader.res'));
        $instance->addLoader('dat', $this->get('translation.loader.dat'));
        $instance->addLoader('ini', $this->get('translation.loader.ini'));
        $instance->addLoader('json', $this->get('translation.loader.json'));

        return $instance;
    }

    /*
     * Gets the 'translation.loader.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\CsvFileLoader A Symfony\Component\Translation\Loader\CsvFileLoader instance
     */
    protected function getTranslation_Loader_CsvService()
    {
        return $this->services['translation.loader.csv'] = new \Symfony\Component\Translation\Loader\CsvFileLoader();
    }

    /*
     * Gets the 'translation.loader.dat' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuDatFileLoader A Symfony\Component\Translation\Loader\IcuDatFileLoader instance
     */
    protected function getTranslation_Loader_DatService()
    {
        return $this->services['translation.loader.dat'] = new \Symfony\Component\Translation\Loader\IcuDatFileLoader();
    }

    /*
     * Gets the 'translation.loader.ini' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IniFileLoader A Symfony\Component\Translation\Loader\IniFileLoader instance
     */
    protected function getTranslation_Loader_IniService()
    {
        return $this->services['translation.loader.ini'] = new \Symfony\Component\Translation\Loader\IniFileLoader();
    }

    /*
     * Gets the 'translation.loader.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\JsonFileLoader A Symfony\Component\Translation\Loader\JsonFileLoader instance
     */
    protected function getTranslation_Loader_JsonService()
    {
        return $this->services['translation.loader.json'] = new \Symfony\Component\Translation\Loader\JsonFileLoader();
    }

    /*
     * Gets the 'translation.loader.mo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\MoFileLoader A Symfony\Component\Translation\Loader\MoFileLoader instance
     */
    protected function getTranslation_Loader_MoService()
    {
        return $this->services['translation.loader.mo'] = new \Symfony\Component\Translation\Loader\MoFileLoader();
    }

    /*
     * Gets the 'translation.loader.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\PhpFileLoader A Symfony\Component\Translation\Loader\PhpFileLoader instance
     */
    protected function getTranslation_Loader_PhpService()
    {
        return $this->services['translation.loader.php'] = new \Symfony\Component\Translation\Loader\PhpFileLoader();
    }

    /*
     * Gets the 'translation.loader.po' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\PoFileLoader A Symfony\Component\Translation\Loader\PoFileLoader instance
     */
    protected function getTranslation_Loader_PoService()
    {
        return $this->services['translation.loader.po'] = new \Symfony\Component\Translation\Loader\PoFileLoader();
    }

    /*
     * Gets the 'translation.loader.qt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\QtFileLoader A Symfony\Component\Translation\Loader\QtFileLoader instance
     */
    protected function getTranslation_Loader_QtService()
    {
        return $this->services['translation.loader.qt'] = new \Symfony\Component\Translation\Loader\QtFileLoader();
    }

    /*
     * Gets the 'translation.loader.res' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuResFileLoader A Symfony\Component\Translation\Loader\IcuResFileLoader instance
     */
    protected function getTranslation_Loader_ResService()
    {
        return $this->services['translation.loader.res'] = new \Symfony\Component\Translation\Loader\IcuResFileLoader();
    }

    /*
     * Gets the 'translation.loader.xliff' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\XliffFileLoader A Symfony\Component\Translation\Loader\XliffFileLoader instance
     */
    protected function getTranslation_Loader_XliffService()
    {
        return $this->services['translation.loader.xliff'] = new \Symfony\Component\Translation\Loader\XliffFileLoader();
    }

    /*
     * Gets the 'translation.loader.yml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\YamlFileLoader A Symfony\Component\Translation\Loader\YamlFileLoader instance
     */
    protected function getTranslation_Loader_YmlService()
    {
        return $this->services['translation.loader.yml'] = new \Symfony\Component\Translation\Loader\YamlFileLoader();
    }

    /*
     * Gets the 'translation.writer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Writer\TranslationWriter A Symfony\Component\Translation\Writer\TranslationWriter instance
     */
    protected function getTranslation_WriterService()
    {
        $this->services['translation.writer'] = $instance = new \Symfony\Component\Translation\Writer\TranslationWriter();

        $instance->addDumper('php', $this->get('translation.dumper.php'));
        $instance->addDumper('xlf', $this->get('translation.dumper.xliff'));
        $instance->addDumper('po', $this->get('translation.dumper.po'));
        $instance->addDumper('mo', $this->get('translation.dumper.mo'));
        $instance->addDumper('yml', $this->get('translation.dumper.yml'));
        $instance->addDumper('ts', $this->get('translation.dumper.qt'));
        $instance->addDumper('csv', $this->get('translation.dumper.csv'));
        $instance->addDumper('ini', $this->get('translation.dumper.ini'));
        $instance->addDumper('json', $this->get('translation.dumper.json'));
        $instance->addDumper('res', $this->get('translation.dumper.res'));

        return $instance;
    }

    /*
     * Gets the 'translator.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\Translator A Symfony\Bundle\FrameworkBundle\Translation\Translator instance
     */
    protected function getTranslator_DefaultService()
    {
        $this->services['translator.default'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\Translator($this, new \Symfony\Component\Translation\MessageSelector(), array('translation.loader.php' => array(0 => 'php'), 'translation.loader.yml' => array(0 => 'yml'), 'translation.loader.xliff' => array(0 => 'xlf', 1 => 'xliff'), 'translation.loader.po' => array(0 => 'po'), 'translation.loader.mo' => array(0 => 'mo'), 'translation.loader.qt' => array(0 => 'ts'), 'translation.loader.csv' => array(0 => 'csv'), 'translation.loader.res' => array(0 => 'res'), 'translation.loader.dat' => array(0 => 'dat'), 'translation.loader.ini' => array(0 => 'ini'), 'translation.loader.json' => array(0 => 'json')), array('cache_dir' => (__DIR__.'/translations'), 'debug' => false, 'resource_files' => array('cs' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cs.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.cs.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.cs.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.cs.xliff'), 4 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.cs.yml'), 5 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.cs.yml')), 'sq' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sq.xlf')), 'ar' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ar.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ar.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ar.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.ar.xliff')), 'pt' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt.xlf'), 2 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.pt.xliff')), 'hr' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hr.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hr.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.hr.xlf')), 'ro' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ro.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ro.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ro.xlf'), 3 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.ro.yml'), 4 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.ro.yml')), 'lb' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lb.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lb.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.lb.xlf')), 'lt' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lt.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lt.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.lt.xlf')), 'sr_Cyrl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Cyrl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Cyrl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sr_Cyrl.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.sr_Cyrl.xliff')), 'de' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.de.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.de.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.de.xlf'), 3 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/error.de.yml'), 4 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/validators.de.yml'), 5 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/tools.de.yml'), 6 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/platform.de.yml'), 7 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/theme.de.yml'), 8 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/notification.de.yml'), 9 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/home.de.yml'), 10 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/api.de.yml'), 11 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/resource.de.yml'), 12 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/widget.de.yml'), 13 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/log.de.yml'), 14 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/agenda.de.yml'), 15 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/notification.de.yml'), 16 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.de.xliff'), 17 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.de.yml'), 18 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.de.yml'), 19 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.de.yml'), 20 => ($this->targetDirs[3].'/vendor/friendsofsymfony/oauth-server-bundle/Resources/translations/FOSOAuthServerBundle.de.yml')), 'hu' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hu.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hu.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.hu.xlf'), 3 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.hu.yml')), 'gl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.gl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.gl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.gl.xlf')), 'pl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.pl.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.pl.xliff'), 4 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.pl.yml'), 5 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.pl.yml'), 6 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.pl.yml')), 'id' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.id.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.id.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.id.xlf')), 'eu' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.eu.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.eu.xlf')), 'da' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.da.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.da.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.da.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.da.xliff')), 'tr' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.tr.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.tr.xlf'), 2 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.tr.xliff'), 3 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.tr.yml')), 'zh_TW' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.zh_TW.xlf')), 'sk' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sk.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sk.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sk.xlf')), 'es' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.es.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.es.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.es.xlf'), 3 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/platform.es.yml'), 4 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/log.es.yml'), 5 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/home.es.yml'), 6 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/widget.es.yml'), 7 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/resource.es.yml'), 8 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/api.es.yml'), 9 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/theme.es.yml'), 10 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/tools.es.yml'), 11 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/error.es.yml'), 12 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/validators.es.yml'), 13 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/notification.es.yml'), 14 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/widget.es.yml'), 15 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/tools.es.yml'), 16 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/agenda.es.yml'), 17 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/tools.es.yml'), 18 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/image-player/Resources/translations/plugin_description.es.yml'), 19 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/translations/tools.es.yml'), 20 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/translations/message.es.yml'), 21 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/log.es.yml'), 22 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/widget.es.yml'), 23 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/resource.es.yml'), 24 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/forum.es.yml'), 25 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/plugin_description.es.yml'), 26 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/notification.es.yml'), 27 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/widget.es.yml'), 28 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/validators.es.yml'), 29 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/plugin_description.es.yml'), 30 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/rss_reader.es.yml'), 31 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/log.es.yml'), 32 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/announcement.es.yml'), 33 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/widget.es.yml'), 34 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/resource.es.yml'), 35 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/plugin_description.es.yml'), 36 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-player/Resources/translations/widget.es.yml'), 37 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-player/Resources/translations/plugin_description.es.yml'), 38 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/team.es.yml'), 39 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/resource.es.yml'), 40 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/tools.es.yml'), 41 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/plugin_description.es.yml'), 42 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/translations/tools.es.yml'), 43 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/translations/plugin_description.es.yml'), 44 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/web-resource/Resources/translations/resource.es.yml'), 45 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/log.es.yml'), 46 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/tools.es.yml'), 47 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/icap_badge.es.yml'), 48 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/validators.es.yml'), 49 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/oauth/Resources/translations/icap_oauth.es.yml'), 50 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.es.xliff'), 51 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.es.yml'), 52 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.es.yml'), 53 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.es.yml')), 'az' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.az.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.az.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.az.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.az.xliff')), 'en' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.en.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.en.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.en.xlf'), 3 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/log.en.yml'), 4 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/validators.en.yml'), 5 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/resource.en.yml'), 6 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/notification.en.yml'), 7 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/platform.en.yml'), 8 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/api.en.yml'), 9 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/tools.en.yml'), 10 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/widget.en.yml'), 11 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/home.en.yml'), 12 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/error.en.yml'), 13 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/theme.en.yml'), 14 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/validators.en.yml'), 15 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/agenda.en.yml'), 16 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/tools.en.yml'), 17 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/widget.en.yml'), 18 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/validators.en.yml'), 19 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/reservation.en.yml'), 20 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/tools.en.yml'), 21 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/image-player/Resources/translations/resource.en.yml'), 22 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/image-player/Resources/translations/plugin_description.en.yml'), 23 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/image-player/Resources/translations/widget.en.yml'), 24 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/translations/message.en.yml'), 25 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/translations/tools.en.yml'), 26 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/log.en.yml'), 27 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/forum.en.yml'), 28 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/resource.en.yml'), 29 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/notification.en.yml'), 30 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/plugin_description.en.yml'), 31 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/widget.en.yml'), 32 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/tag.en.yml'), 33 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/resource.en.yml'), 34 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/tools.en.yml'), 35 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/widget.en.yml'), 36 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/support/Resources/translations/support.en.yml'), 37 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/support/Resources/translations/tools.en.yml'), 38 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/validators.en.yml'), 39 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/plugin_description.en.yml'), 40 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/rss_reader.en.yml'), 41 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/widget.en.yml'), 42 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/notification/Resources/translations/notification.en.yml'), 43 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/notification/Resources/translations/tools.en.yml'), 44 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/survey/Resources/translations/log.en.yml'), 45 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/survey/Resources/translations/resource.en.yml'), 46 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/survey/Resources/translations/survey.en.yml'), 47 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/log.en.yml'), 48 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/resource.en.yml'), 49 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/plugin_description.en.yml'), 50 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/widget.en.yml'), 51 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/announcement.en.yml'), 52 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/translations/log.en.yml'), 53 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/translations/resource.en.yml'), 54 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/translations/plugin_description.en.yml'), 55 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/translations/scorm.en.yml'), 56 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-player/Resources/translations/resource.en.yml'), 57 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-player/Resources/translations/plugin_description.en.yml'), 58 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-player/Resources/translations/widget.en.yml'), 59 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/translations/platform.en.yml'), 60 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/translations/tools.en.yml'), 61 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/translations/widget.en.yml'), 62 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/translations/cursus.en.yml'), 63 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/resource.en.yml'), 64 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/team.en.yml'), 65 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/tools.en.yml'), 66 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/presence/Resources/translations/tools.en.yml'), 67 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/presence/Resources/translations/presences.en.yml'), 68 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/resource.en.yml'), 69 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/plugin_description.en.yml'), 70 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/platform.en.yml'), 71 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/videojs.en.yml'), 72 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/widget.en.yml'), 73 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/translations/plugin_description.en.yml'), 74 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/translations/tools.en.yml'), 75 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/web-resource/Resources/translations/resource.en.yml'), 76 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/collecticiel.en.yml'), 77 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/log.en.yml'), 78 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/innova_collecticiel.en.yml'), 79 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/resource.en.yml'), 80 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/notification.en.yml'), 81 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/icap_dropzone.en.yml'), 82 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/favourite/Resources/translations/resource.en.yml'), 83 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/favourite/Resources/translations/widget.en.yml'), 84 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/validators.en.yml'), 85 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/resource.en.yml'), 86 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/platform.en.yml'), 87 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/tools.en.yml'), 88 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/widget.en.yml'), 89 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/competency.en.yml'), 90 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/url/Resources/translations/validators.en.yml'), 91 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/url/Resources/translations/resource.en.yml'), 92 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/log.en.yml'), 93 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/notification.en.yml'), 94 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/tools.en.yml'), 95 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/icap_portfolio.en.yml'), 96 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/analytics.en.yml'), 97 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/log.en.yml'), 98 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/validators.en.yml'), 99 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/notification.en.yml'), 100 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/tools.en.yml'), 101 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/icap_portfolio.en.yml'), 102 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/widget.en.yml'), 103 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/icap_badge.en.yml'), 104 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/log.en.yml'), 105 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/validators.en.yml'), 106 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/resource.en.yml'), 107 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/notification.en.yml'), 108 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/plugin_description.en.yml'), 109 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/icap_blog.en.yml'), 110 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/widget.en.yml'), 111 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/log.en.yml'), 112 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/resource.en.yml'), 113 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/notification.en.yml'), 114 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/icap_dropzone.en.yml'), 115 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/log.en.yml'), 116 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/resource.en.yml'), 117 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/plugin_description.en.yml'), 118 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/icap_socialmedia.en.yml'), 119 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/log.en.yml'), 120 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/resource.en.yml'), 121 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/notification.en.yml'), 122 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/plugin_description.en.yml'), 123 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/messages.en.yml'), 124 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/icap_wiki.en.yml'), 125 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/oauth/Resources/translations/icap_oauth.en.yml'), 126 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/translations/log.en.yml'), 127 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/translations/resource.en.yml'), 128 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/translations/results.en.yml'), 129 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/translations/widget.en.yml'), 130 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/resource.en.yml'), 131 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/notification.en.yml'), 132 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/plugin_description.en.yml'), 133 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/tools.en.yml'), 134 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/messages.en.yml'), 135 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/innova_tools.en.yml'), 136 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/widget.en.yml'), 137 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/path_wizards.en.yml'), 138 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/resource.en.yml'), 139 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/plugin_description.en.yml'), 140 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/icap_website.en.yml'), 141 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/messages.en.yml'), 142 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/flashcard/Resources/translations/resource.en.yml'), 143 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/flashcard/Resources/translations/flashcard.en.yml'), 144 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/log.en.yml'), 145 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/resource.en.yml'), 146 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/plugin_description.en.yml'), 147 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/ujm_exo.en.yml'), 148 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/tools.en.yml'), 149 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/question_types.en.yml'), 150 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/log.en.yml'), 151 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/resource.en.yml'), 152 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/notification.en.yml'), 153 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/icap_lesson.en.yml'), 154 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/resource.en.yml'), 155 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/tools.en.yml'), 156 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/chat.en.yml'), 157 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dashboard/Resources/translations/dashboard.en.yml'), 158 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dashboard/Resources/translations/tools.en.yml'), 159 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/claco-form/Resources/translations/resource.en.yml'), 160 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/claco-form/Resources/translations/clacoform.en.yml'), 161 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/claco-form/Resources/translations/widget.en.yml'), 162 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.en.xliff'), 163 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.en.yml'), 164 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.en.yml'), 165 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.en.yml'), 166 => ($this->targetDirs[3].'/vendor/friendsofsymfony/oauth-server-bundle/Resources/translations/FOSOAuthServerBundle.en.yml')), 'ja' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ja.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ja.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ja.xlf')), 'no' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.no.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.no.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.no.xlf')), 'he' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.he.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.he.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.he.xlf')), 'fi' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fi.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fi.xlf')), 'ru' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ru.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ru.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ru.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.ru.xliff'), 4 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.ru.yml'), 5 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.ru.yml'), 6 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.ru.yml')), 'sl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sl.xlf'), 3 => ($this->targetDirs[3].'/vendor/friendsofsymfony/oauth-server-bundle/Resources/translations/FOSOAuthServerBundle.sl.yml')), 'fr' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fr.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fr.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.fr.xlf'), 3 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/home.fr.yml'), 4 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/notification.fr.yml'), 5 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/resource.fr.yml'), 6 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/error.fr.yml'), 7 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/validators.fr.yml'), 8 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/log.fr.yml'), 9 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/platform.fr.yml'), 10 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/tools.fr.yml'), 11 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/theme.fr.yml'), 12 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/widget.fr.yml'), 13 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/api.fr.yml'), 14 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/validators.fr.yml'), 15 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/agenda.fr.yml'), 16 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/tools.fr.yml'), 17 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/widget.fr.yml'), 18 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/validators.fr.yml'), 19 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/tools.fr.yml'), 20 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/reservation.fr.yml'), 21 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/image-player/Resources/translations/plugin_description.fr.yml'), 22 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/translations/tools.fr.yml'), 23 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/translations/message.fr.yml'), 24 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/notification.fr.yml'), 25 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/resource.fr.yml'), 26 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/log.fr.yml'), 27 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/plugin_description.fr.yml'), 28 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/forum.fr.yml'), 29 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/widget.fr.yml'), 30 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/resource.fr.yml'), 31 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/tools.fr.yml'), 32 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/widget.fr.yml'), 33 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/tag.fr.yml'), 34 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/support/Resources/translations/support.fr.yml'), 35 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/support/Resources/translations/tools.fr.yml'), 36 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/rss_reader.fr.yml'), 37 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/validators.fr.yml'), 38 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/plugin_description.fr.yml'), 39 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/translations/widget.fr.yml'), 40 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/notification/Resources/translations/notification.fr.yml'), 41 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/notification/Resources/translations/tools.fr.yml'), 42 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/survey/Resources/translations/survey.fr.yml'), 43 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/survey/Resources/translations/resource.fr.yml'), 44 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/survey/Resources/translations/log.fr.yml'), 45 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/announcement.fr.yml'), 46 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/resource.fr.yml'), 47 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/log.fr.yml'), 48 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/plugin_description.fr.yml'), 49 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/widget.fr.yml'), 50 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/translations/resource.fr.yml'), 51 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/translations/log.fr.yml'), 52 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/translations/plugin_description.fr.yml'), 53 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/translations/scorm.fr.yml'), 54 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-player/Resources/translations/plugin_description.fr.yml'), 55 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-player/Resources/translations/widget.fr.yml'), 56 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/translations/platform.fr.yml'), 57 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/translations/tools.fr.yml'), 58 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/translations/cursus.fr.yml'), 59 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/translations/widget.fr.yml'), 60 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/resource.fr.yml'), 61 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/tools.fr.yml'), 62 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/team.fr.yml'), 63 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/presence/Resources/translations/presences.fr.yml'), 64 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/presence/Resources/translations/tools.fr.yml'), 65 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/plugin_description.fr.yml'), 66 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/platform.fr.yml'), 67 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/translations/videojs.fr.yml'), 68 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/translations/plugin_description.fr.yml'), 69 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/translations/tools.fr.yml'), 70 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/web-resource/Resources/translations/resource.fr.yml'), 71 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/notification.fr.yml'), 72 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/resource.fr.yml'), 73 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/innova_collecticiel.fr.yml'), 74 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/log.fr.yml'), 75 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/collecticiel.fr.yml'), 76 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/translations/icap_dropzone.fr.yml'), 77 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/favourite/Resources/translations/resource.fr.yml'), 78 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/favourite/Resources/translations/widget.fr.yml'), 79 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/competency.fr.yml'), 80 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/resource.fr.yml'), 81 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/validators.fr.yml'), 82 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/platform.fr.yml'), 83 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/tools.fr.yml'), 84 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/widget.fr.yml'), 85 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/url/Resources/translations/resource.fr.yml'), 86 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/url/Resources/translations/validators.fr.yml'), 87 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/notification.fr.yml'), 88 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/log.fr.yml'), 89 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/analytics.fr.yml'), 90 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/tools.fr.yml'), 91 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/translations/icap_portfolio.fr.yml'), 92 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/notification.fr.yml'), 93 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/validators.fr.yml'), 94 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/log.fr.yml'), 95 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/icap_badge.fr.yml'), 96 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/tools.fr.yml'), 97 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/widget.fr.yml'), 98 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/icap_portfolio.fr.yml'), 99 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/notification.fr.yml'), 100 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/resource.fr.yml'), 101 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/validators.fr.yml'), 102 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/log.fr.yml'), 103 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/icap_blog.fr.yml'), 104 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/plugin_description.fr.yml'), 105 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/widget.fr.yml'), 106 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/notification.fr.yml'), 107 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/resource.fr.yml'), 108 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/log.fr.yml'), 109 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/icap_dropzone.fr.yml'), 110 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/resource.fr.yml'), 111 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/log.fr.yml'), 112 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/plugin_description.fr.yml'), 113 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/icap_socialmedia.fr.yml'), 114 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/messages.fr.yml'), 115 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/icap_wiki.fr.yml'), 116 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/plugin_descrpition.fr.yml'), 117 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/notification.fr.yml'), 118 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/resource.fr.yml'), 119 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/log.fr.yml'), 120 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/oauth/Resources/translations/icap_oauth.fr.yml'), 121 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/translations/resource.fr.yml'), 122 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/translations/log.fr.yml'), 123 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/translations/results.fr.yml'), 124 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/translations/widget.fr.yml'), 125 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/messages.fr.yml'), 126 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/notification.fr.yml'), 127 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/innova_tools.fr.yml'), 128 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/resource.fr.yml'), 129 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/plugin_description.fr.yml'), 130 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/tools.fr.yml'), 131 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/path_wizards.fr.yml'), 132 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/widget.fr.yml'), 133 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/messages.fr.yml'), 134 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/icap_website.fr.yml'), 135 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/resource.fr.yml'), 136 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/plugin_description.fr.yml'), 137 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/flashcard/Resources/translations/resource.fr.yml'), 138 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/flashcard/Resources/translations/flashcard.fr.yml'), 139 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/question_types.fr.yml'), 140 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/resource.fr.yml'), 141 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/ujm_exo.fr.yml'), 142 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/log.fr.yml'), 143 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/plugin_description.fr.yml'), 144 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/tools.fr.yml'), 145 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/icap_lesson.fr.yml'), 146 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/notification.fr.yml'), 147 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/resource.fr.yml'), 148 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/log.fr.yml'), 149 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/resource.fr.yml'), 150 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/tools.fr.yml'), 151 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/chat.fr.yml'), 152 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dashboard/Resources/translations/dashboard.fr.yml'), 153 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dashboard/Resources/translations/tools.fr.yml'), 154 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/claco-form/Resources/translations/resource.fr.yml'), 155 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/claco-form/Resources/translations/clacoform.fr.yml'), 156 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/claco-form/Resources/translations/widget.fr.yml'), 157 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.fr.xliff'), 158 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.fr.yml'), 159 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.fr.yml'), 160 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.fr.yml'), 161 => ($this->targetDirs[3].'/vendor/friendsofsymfony/oauth-server-bundle/Resources/translations/FOSOAuthServerBundle.fr.yml')), 'el' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.el.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.el.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.el.xlf')), 'bg' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.bg.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.bg.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.bg.xlf'), 3 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.bg.yml'), 4 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.bg.yml')), 'et' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.et.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.et.xlf')), 'hy' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hy.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hy.xlf')), 'sr_Latn' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Latn.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Latn.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sr_Latn.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.sr_Latn.xliff')), 'vi' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.vi.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.vi.xlf')), 'ca' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ca.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ca.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ca.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.ca.xliff')), 'pt_BR' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt_BR.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt_BR.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.pt_BR.xlf'), 3 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.pt_BR.yml'), 4 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.pt_BR.yml')), 'it' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.it.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.it.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.it.xlf'), 3 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/widget.it.yml'), 4 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/plugin_description.it.yml'), 5 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.it.xliff'), 6 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.it.yml'), 7 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.it.yml'), 8 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.it.yml')), 'af' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.af.xlf')), 'lv' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lv.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lv.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.lv.xlf')), 'zh_CN' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.zh_CN.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.zh_CN.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.zh_CN.xlf'), 3 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.zh_CN.xliff'), 4 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.zh_CN.yml'), 5 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.zh_CN.yml')), 'nl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.nl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.nl.xlf'), 3 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/tools.nl.yml'), 4 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/widget.nl.yml'), 5 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/log.nl.yml'), 6 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/notification.nl.yml'), 7 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/error.nl.yml'), 8 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/api.nl.yml'), 9 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/resource.nl.yml'), 10 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/validators.nl.yml'), 11 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/home.nl.yml'), 12 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/platform.nl.yml'), 13 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/translations/theme.nl.yml'), 14 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/tools.nl.yml'), 15 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/widget.nl.yml'), 16 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/agenda.nl.yml'), 17 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/translations/validators.nl.yml'), 18 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/tools.nl.yml'), 19 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/reservation.nl.yml'), 20 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/translations/validators.nl.yml'), 21 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/image-player/Resources/translations/plugin_description.nl.yml'), 22 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/translations/tools.nl.yml'), 23 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/translations/message.nl.yml'), 24 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/plugin_description.nl.yml'), 25 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/widget.nl.yml'), 26 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/forum.nl.yml'), 27 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/log.nl.yml'), 28 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/notification.nl.yml'), 29 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/translations/resource.nl.yml'), 30 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/tools.nl.yml'), 31 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/widget.nl.yml'), 32 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/translations/resource.nl.yml'), 33 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/support/Resources/translations/tools.nl.yml'), 34 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/support/Resources/translations/support.nl.yml'), 35 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/notification/Resources/translations/tools.nl.yml'), 36 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/notification/Resources/translations/notification.nl.yml'), 37 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/plugin_description.nl.yml'), 38 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/widget.nl.yml'), 39 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/announcement.nl.yml'), 40 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/log.nl.yml'), 41 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/translations/resource.nl.yml'), 42 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/tools.nl.yml'), 43 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/team.nl.yml'), 44 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/translations/resource.nl.yml'), 45 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/translations/tools.nl.yml'), 46 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/translations/plugin_description.nl.yml'), 47 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/web-resource/Resources/translations/resource.nl.yml'), 48 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/favourite/Resources/translations/widget.nl.yml'), 49 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/favourite/Resources/translations/resource.nl.yml'), 50 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/translations/competency.nl.yml'), 51 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/url/Resources/translations/resource.nl.yml'), 52 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/url/Resources/translations/validators.nl.yml'), 53 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/tools.nl.yml'), 54 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/widget.nl.yml'), 55 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/log.nl.yml'), 56 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/notification.nl.yml'), 57 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/icap_portfolio.nl.yml'), 58 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/translations/icap_badge.nl.yml'), 59 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/widget.nl.yml'), 60 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/resource.nl.yml'), 61 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/translations/validators.nl.yml'), 62 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/translations/resource.nl.yml'), 63 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/plugin_description.nl.yml'), 64 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/log.nl.yml'), 65 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/resource.nl.yml'), 66 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/translations/icap_socialmedia.nl.yml'), 67 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/log.nl.yml'), 68 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/notification.nl.yml'), 69 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/plugin_descrpition.nl.yml'), 70 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/icap_wiki.nl.yml'), 71 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/translations/resource.nl.yml'), 72 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/oauth/Resources/translations/icap_oauth.nl.yml'), 73 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/translations/plugin_description.nl.yml'), 74 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/plugin_description.nl.yml'), 75 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/resource.nl.yml'), 76 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/translations/icap_website.nl.yml'), 77 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/tools.nl.yml'), 78 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/plugin_description.nl.yml'), 79 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/log.nl.yml'), 80 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/translations/resource.nl.yml'), 81 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/notification.nl.yml'), 82 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/translations/resource.nl.yml'), 83 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/tools.nl.yml'), 84 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/resource.nl.yml'), 85 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/translations/chat.nl.yml'), 86 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dashboard/Resources/translations/tools.nl.yml'), 87 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dashboard/Resources/translations/dashboard.nl.yml'), 88 => ($this->targetDirs[3].'/vendor/white-october/pagerfanta-bundle/WhiteOctober/PagerfantaBundle/Resources/translations/pagerfanta.nl.xliff'), 89 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.nl.yml'), 90 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.nl.yml'), 91 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.nl.yml')), 'fa' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fa.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fa.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.fa.xlf'), 3 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.fa.yml')), 'mn' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.mn.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.mn.xlf')), 'sv' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sv.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sv.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sv.xlf')), 'th' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.th.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.th.xlf')), 'nn' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nn.xlf')), 'uk' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.uk.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.uk.xlf'), 2 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.uk.yml'), 3 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/gregwar_captcha.uk.yml'), 4 => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/translations/validators.uk.yml')), 'cy' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cy.xlf')), 'pt_PT' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.pt_PT.xlf')), 'ua' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ua.xlf')), 'zh' => array(0 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.zh.yml')))), array());

        $instance->setFallbackLocales(array(0 => 'en'));

        return $instance;
    }

    /*
     * Gets the 'translator_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\TranslatorListener A Symfony\Component\HttpKernel\EventListener\TranslatorListener instance
     */
    protected function getTranslatorListenerService()
    {
        return $this->services['translator_listener'] = new \Symfony\Component\HttpKernel\EventListener\TranslatorListener($this->get('translator.default'), $this->get('request_stack'));
    }

    /*
     * Gets the 'twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Environment A Twig_Environment instance
     */
    protected function getTwigService()
    {
        $a = $this->get('fragment.handler');

        $b = new \Symfony\Bridge\Twig\AppVariable();
        $b->setEnvironment('prod');
        $b->setDebug(false);
        if ($this->has('security.token_storage')) {
            $b->setTokenStorage($this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        if ($this->has('request_stack')) {
            $b->setRequestStack($this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        $b->setContainer($this);

        $this->services['twig'] = $instance = new \Twig_Environment($this->get('twig.loader'), array('debug' => false, 'strict_variables' => false, 'exception_controller' => 'twig.controller.exception:showAction', 'form_themes' => array(0 => 'form_div_layout.html.twig', 1 => 'IcapBadgeBundle:Form:badge_picker.html.twig', 2 => 'IcapBlogBundle:Form:fields.html.twig', 3 => 'ClarolineCoreBundle:Form:date_range.html.twig', 4 => 'ClarolineCoreBundle:Form:date_time_picker.html.twig', 5 => 'ClarolineCoreBundle:Form:date_picker.html.twig', 6 => 'ClarolineCoreBundle:Form:two_level_select.html.twig', 7 => 'ClarolineCoreBundle:Form:select2.html.twig', 8 => 'ClarolineCoreBundle:Form:simple_auto_complete.html.twig', 9 => 'ClarolineCoreBundle:Form:button_group_select.html.twig', 10 => 'ClarolineCoreBundle:Form:user_picker.html.twig', 11 => 'ClarolineCoreBundle:Form:resource_picker.html.twig', 12 => 'ClarolineCoreBundle::form_theme.html.twig'), 'autoescape' => 'name', 'cache' => (__DIR__.'/twig'), 'charset' => 'UTF-8', 'paths' => array(), 'date' => array('format' => 'F j, Y H:i', 'interval_format' => '%d days', 'timezone' => NULL), 'number_format' => array('decimals' => 0, 'decimal_point' => '.', 'thousands_separator' => ',')));

        $instance->addExtension($this->get('twig.extension.text'));
        $instance->addExtension($this->get('icap_notification.twig.notification_extension'));
        $instance->addExtension($this->get('icap.blog.twig.extension'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\LogoutUrlExtension($this->get('security.logout_url_generator')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\SecurityExtension($this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension($this->get('translator.default')));
        $instance->addExtension($this->get('twig.extension.assets'));
        $instance->addExtension(new \Symfony\Bundle\TwigBundle\Extension\ActionsExtension($a));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension(NULL, $this->targetDirs[2], 'UTF-8'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\RoutingExtension($this->get('router')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\StopwatchExtension($this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE), false));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ExpressionExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension($a));
        $instance->addExtension($this->get('twig.extension.httpfoundation'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\FormExtension(new \Symfony\Bridge\Twig\Form\TwigRenderer(new \Symfony\Bridge\Twig\Form\TwigRendererEngine(array(0 => 'GregwarCaptchaBundle::captcha.html.twig', 1 => 'form_div_layout.html.twig', 2 => 'IcapBadgeBundle:Form:badge_picker.html.twig', 3 => 'IcapBlogBundle:Form:fields.html.twig', 4 => 'ClarolineCoreBundle:Form:date_range.html.twig', 5 => 'ClarolineCoreBundle:Form:date_time_picker.html.twig', 6 => 'ClarolineCoreBundle:Form:date_picker.html.twig', 7 => 'ClarolineCoreBundle:Form:two_level_select.html.twig', 8 => 'ClarolineCoreBundle:Form:select2.html.twig', 9 => 'ClarolineCoreBundle:Form:simple_auto_complete.html.twig', 10 => 'ClarolineCoreBundle:Form:button_group_select.html.twig', 11 => 'ClarolineCoreBundle:Form:user_picker.html.twig', 12 => 'ClarolineCoreBundle:Form:resource_picker.html.twig', 13 => 'ClarolineCoreBundle::form_theme.html.twig')), $this->get('security.csrf.token_manager', ContainerInterface::NULL_ON_INVALID_REFERENCE))));
        $instance->addExtension(new \WhiteOctober\PagerfantaBundle\Twig\PagerfantaExtension($this));
        $instance->addExtension(new \Symfony\Bundle\AsseticBundle\Twig\AsseticExtension($this->get('assetic.asset_factory'), $this->get('templating.name_parser'), false, array(), array(0 => 'FrontEndBundle', 1 => 'ClarolineInstallationBundle', 2 => 'ClarolineMigrationBundle', 3 => 'ClarolineCoreBundle', 4 => 'ClarolineAgendaBundle', 5 => 'FormaLibreReservationBundle', 6 => 'ClarolineImagePlayerBundle', 7 => 'ClarolineMessageBundle', 8 => 'ClarolineForumBundle', 9 => 'ClarolineTagBundle', 10 => 'FormaLibreSupportBundle', 11 => 'ClarolineRssReaderBundle', 12 => 'IcapNotificationBundle', 13 => 'ClarolineSurveyBundle', 14 => 'ClarolineAnnouncementBundle', 15 => 'ClarolineScormBundle', 16 => 'ClarolinePdfPlayerBundle', 17 => 'ClarolineCursusBundle', 18 => 'ClarolineTeamBundle', 19 => 'ClarolinePdfGeneratorBundle', 20 => 'FormaLibrePresenceBundle', 21 => 'ClarolineVideoPlayerBundle', 22 => 'ClarolineActivityToolBundle', 23 => 'ClarolineWebResourceBundle', 24 => 'ClarolineTextPlayerBundle', 25 => 'InnovaCollecticielBundle', 26 => 'HeVinciFavouriteBundle', 27 => 'HeVinciCompetencyBundle', 28 => 'HeVinciUrlBundle', 29 => 'IcapPortfolioBundle', 30 => 'IcapBadgeBundle', 31 => 'IcapBlogBundle', 32 => 'IcapDropzoneBundle', 33 => 'IcapSocialmediaBundle', 34 => 'IcapWikiBundle', 35 => 'IcapOAuthBundle', 36 => 'IcapFormulaPluginBundle', 37 => 'ClarolineResultBundle', 38 => 'InnovaPathBundle', 39 => 'IcapWebsiteBundle', 40 => 'ClarolineFlashCardBundle', 41 => 'UJMExoBundle', 42 => 'IcapLessonBundle', 43 => 'ClarolineChatBundle', 44 => 'ClarolineDashboardBundle', 45 => 'ClarolineClacoFormBundle', 46 => 'FrameworkBundle', 47 => 'SecurityBundle', 48 => 'TwigBundle', 49 => 'JMSAopBundle', 50 => 'ZenstruckFormBundle', 51 => 'BazingaJsTranslationBundle', 52 => 'WhiteOctoberPagerfantaBundle', 53 => 'SwiftmailerBundle', 54 => 'MonologBundle', 55 => 'AsseticBundle', 56 => 'StofDoctrineExtensionsBundle', 57 => 'StfalconTinymceBundle', 58 => 'SensioFrameworkExtraBundle', 59 => 'KnpSnappyBundle', 60 => 'KnpMenuBundle', 61 => 'JMSTwigJsBundle', 62 => 'JMSSerializerBundle', 63 => 'JMSDiExtraBundle', 64 => 'JMSSecurityExtraBundle', 65 => 'InnovaAngularJSBundle', 66 => 'InnovaAngularUITinyMCEBundle', 67 => 'InnovaAngularUIResourcePickerBundle', 68 => 'IDCIExporterBundle', 69 => 'HWIOAuthBundle', 70 => 'GregwarCaptchaBundle', 71 => 'FOSRestBundle', 72 => 'FOSOAuthServerBundle', 73 => 'FOSJsRoutingBundle', 74 => 'DoctrineBundle', 75 => 'BeSimpleSsoAuthBundle', 76 => 'ClarolineKernelBundle'), new \Symfony\Bundle\AsseticBundle\DefaultValueSupplier($this)));
        $instance->addExtension($this->get('twig.extension.stfalcon_tinymce'));
        $instance->addExtension(new \Knp\Menu\Twig\MenuExtension(new \Knp\Menu\Twig\Helper($this->get('knp_menu.renderer_provider'), $this->get('knp_menu.menu_provider'))));
        $instance->addExtension(new \TwigJs\Twig\TwigJsExtension());
        $instance->addExtension(new \JMS\Serializer\Twig\SerializerExtension($this->get('jms_serializer')));
        $instance->addExtension(new \JMS\SecurityExtraBundle\Twig\SecurityExtension($this->get('security.context')));
        $instance->addExtension(new \HWI\Bundle\OAuthBundle\Twig\Extension\OAuthExtension($this->get('hwi_oauth.templating.helper.oauth')));
        $instance->addExtension(new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension());
        $instance->addExtension(new \Claroline\CoreBundle\Twig\PagerfantaExtension($this, $this));
        $instance->addExtension($this->get('claroline.core_bundle.twig.version_compare_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.router_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.url_auto_detector_twig_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.content_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.workspace_access_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.platform_configuration_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.pcre_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.file_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.resource_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.base_uri_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.listener_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.escaper_extension'));
        $instance->addExtension($this->get('claroline.twig.home_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.has_role_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.maintenance_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.send_datas_confirm_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.serializer_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.date_formatter_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.composer_extension'));
        $instance->addExtension($this->get('claroline.extension.webpack'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.theme_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.var_type_extension'));
        $instance->addExtension($this->get('claroline.core_bundle.twig.mailer_extension'));
        $instance->addExtension($this->get('claroline.video_player_bundle.twig.video_extension'));
        $instance->addExtension($this->get('he_vinci.favourite_bundle.twig.resource_path_extension'));
        $instance->addExtension($this->get('he_vinci.competency_bundle.twig.extension'));
        $instance->addExtension($this->get('icap.portfolio.twig.extension'));
        $instance->addExtension($this->get('icap.socialmedia_bundle.twig.socialmedia_extension'));
        $instance->addExtension($this->get('icap.o_auth_bundle.twig.oauth_extension'));
        $instance->addGlobal('app', $b);
        $instance->addGlobal('chosenRangeKeys', '[\'yesterday\', \'last_seven_days\', \'last_thirty_days\', \'this_month\', \'last_month\', \'this_school_year\', \'last_school_year\']');
        $instance->addGlobal('uploadsDir', ($this->targetDirs[2].'/../web/uploads'));
        call_user_func(array(new \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator('F j, Y H:i', '%d days', NULL, 0, '.', ','), 'configure'), $instance);

        return $instance;
    }

    /*
     * Gets the 'twig.controller.exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Controller\CustomExceptionController A Claroline\CoreBundle\Controller\CustomExceptionController instance
     */
    protected function getTwig_Controller_ExceptionService()
    {
        return $this->services['twig.controller.exception'] = new \Claroline\CoreBundle\Controller\CustomExceptionController($this->get('twig'), false);
    }

    /*
     * Gets the 'twig.controller.preview_error' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Controller\PreviewErrorController A Symfony\Bundle\TwigBundle\Controller\PreviewErrorController instance
     */
    protected function getTwig_Controller_PreviewErrorService()
    {
        return $this->services['twig.controller.preview_error'] = new \Symfony\Bundle\TwigBundle\Controller\PreviewErrorController($this->get('http_kernel'), 'twig.controller.exception:showAction');
    }

    /*
     * Gets the 'twig.exception_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ExceptionListener A Symfony\Component\HttpKernel\EventListener\ExceptionListener instance
     */
    protected function getTwig_ExceptionListenerService()
    {
        return $this->services['twig.exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ExceptionListener('twig.controller.exception:showAction', $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /*
     * Gets the 'twig.extension.stfalcon_tinymce' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Stfalcon\Bundle\TinymceBundle\Twig\Extension\StfalconTinymceExtension A Stfalcon\Bundle\TinymceBundle\Twig\Extension\StfalconTinymceExtension instance
     */
    protected function getTwig_Extension_StfalconTinymceService()
    {
        return $this->services['twig.extension.stfalcon_tinymce'] = new \Stfalcon\Bundle\TinymceBundle\Twig\Extension\StfalconTinymceExtension($this);
    }

    /*
     * Gets the 'twig.extension.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Extensions_Extension_Text A Twig_Extensions_Extension_Text instance
     */
    protected function getTwig_Extension_TextService()
    {
        return $this->services['twig.extension.text'] = new \Twig_Extensions_Extension_Text();
    }

    /*
     * Gets the 'twig.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader A Symfony\Bundle\TwigBundle\Loader\FilesystemLoader instance
     */
    protected function getTwig_LoaderService()
    {
        $this->services['twig.loader'] = $instance = new \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader($this->get('templating.locator'), $this->get('templating.name_parser'));

        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/main/migration/Resources/views'), 'ClarolineMigration');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Resources/views'), 'ClarolineCore');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Resources/views'), 'ClarolineAgenda');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Resources/views'), 'FormaLibreReservation');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/image-player/Resources/views'), 'ClarolineImagePlayer');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Resources/views'), 'ClarolineMessage');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Resources/views'), 'ClarolineForum');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Resources/views'), 'ClarolineTag');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/support/Resources/views'), 'FormaLibreSupport');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Resources/views'), 'ClarolineRssReader');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/notification/Resources/views'), 'IcapNotification');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/survey/Resources/views'), 'ClarolineSurvey');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Resources/views'), 'ClarolineAnnouncement');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Resources/views'), 'ClarolineScorm');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-player/Resources/views'), 'ClarolinePdfPlayer');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Resources/views'), 'ClarolineCursus');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Resources/views'), 'ClarolineTeam');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/presence/Resources/views'), 'FormaLibrePresence');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Resources/views'), 'ClarolineVideoPlayer');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/activity-tool/Resources/views'), 'ClarolineActivityTool');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/web-resource/Resources/views'), 'ClarolineWebResource');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/text-player/Resources/views'), 'ClarolineTextPlayer');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Resources/views'), 'InnovaCollecticiel');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/favourite/Resources/views'), 'HeVinciFavourite');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Resources/views'), 'HeVinciCompetency');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/url/Resources/views'), 'HeVinciUrl');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Resources/views'), 'IcapPortfolio');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Resources/views'), 'IcapBadge');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Resources/views'), 'IcapBlog');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Resources/views'), 'IcapDropzone');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Resources/views'), 'IcapSocialmedia');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Resources/views'), 'IcapWiki');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/oauth/Resources/views'), 'IcapOAuth');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/formula/Resources/views'), 'IcapFormulaPlugin');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Resources/views'), 'ClarolineResult');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Resources/views'), 'InnovaPath');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Resources/views'), 'IcapWebsite');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/flashcard/Resources/views'), 'ClarolineFlashCard');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Resources/views'), 'UJMExo');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Resources/views'), 'IcapLesson');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Resources/views'), 'ClarolineChat');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dashboard/Resources/views'), 'ClarolineDashboard');
        $instance->addPath(($this->targetDirs[3].'/vendor/claroline/distribution/plugin/claco-form/Resources/views'), 'ClarolineClacoForm');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/views'), 'Framework');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/Resources/views'), 'Security');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/views'), 'Twig');
        $instance->addPath(($this->targetDirs[3].'/vendor/zenstruck/form-bundle/Zenstruck/Bundle/FormBundle/Resources/views'), 'ZenstruckForm');
        $instance->addPath(($this->targetDirs[3].'/vendor/willdurand/js-translation-bundle/Bazinga/Bundle/JsTranslationBundle/Resources/views'), 'BazingaJsTranslation');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/swiftmailer-bundle/Resources/views'), 'Swiftmailer');
        $instance->addPath(($this->targetDirs[3].'/vendor/stfalcon/tinymce-bundle/Stfalcon/Bundle/TinymceBundle/Resources/views'), 'StfalconTinymce');
        $instance->addPath(($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/views'), 'HWIOAuth');
        $instance->addPath(($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/Resources/views'), 'GregwarCaptcha');
        $instance->addPath(($this->targetDirs[3].'/vendor/friendsofsymfony/oauth-server-bundle/Resources/views'), 'FOSOAuthServer');
        $instance->addPath(($this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/Resources/views'), 'Doctrine');
        $instance->addPath(($this->targetDirs[3].'/vendor/besimple/sso-auth-bundle/BeSimple/SsoAuthBundle/Resources/views'), 'BeSimpleSsoAuth');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bridge/Twig/Resources/views/Form'));
        $instance->addPath(($this->targetDirs[3].'/vendor/knplabs/knp-menu/src/Knp/Menu/Resources/views'));

        return $instance;
    }

    /*
     * Gets the 'twig.profile' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Profiler_Profile A Twig_Profiler_Profile instance
     */
    protected function getTwig_ProfileService()
    {
        return $this->services['twig.profile'] = new \Twig_Profiler_Profile();
    }

    /*
     * Gets the 'twig.translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Twig\Translation\TwigExtractor A Symfony\Bridge\Twig\Translation\TwigExtractor instance
     */
    protected function getTwig_Translation_ExtractorService()
    {
        return $this->services['twig.translation.extractor'] = new \Symfony\Bridge\Twig\Translation\TwigExtractor($this->get('twig'));
    }

    /*
     * Gets the 'twig_js.assetic_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \TwigJs\Assetic\TwigJsFilter A TwigJs\Assetic\TwigJsFilter instance
     */
    protected function getTwigJs_AsseticFilterService()
    {
        return $this->services['twig_js.assetic_filter'] = new \TwigJs\Assetic\TwigJsFilter($this->get('twig_js.compile_request_handler'));
    }

    /*
     * Gets the 'twig_js.compile_request_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \TwigJs\CompileRequestHandler A TwigJs\CompileRequestHandler instance
     */
    protected function getTwigJs_CompileRequestHandlerService()
    {
        $a = $this->get('twig');

        $b = new \TwigJs\JsCompiler($a);
        $b->addFilterCompiler(new \JMS\TwigJsBundle\TwigJs\Compiler\TransFilterCompiler($this->get('translator.default')));

        return $this->services['twig_js.compile_request_handler'] = new \TwigJs\CompileRequestHandler($a, $b);
    }

    /*
     * Gets the 'u_j_m.exo_bundle.listener.log.display_log_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Listener\Log\DisplayLogListener A UJM\ExoBundle\Listener\Log\DisplayLogListener instance
     */
    protected function getUJM_ExoBundle_Listener_Log_DisplayLogListenerService()
    {
        return $this->services['u_j_m.exo_bundle.listener.log.display_log_listener'] = new \UJM\ExoBundle\Listener\Log\DisplayLogListener();
    }

    /*
     * Gets the 'ujm_exo.collection.question_definitions' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Library\Question\QuestionDefinitionsCollection A UJM\ExoBundle\Library\Question\QuestionDefinitionsCollection instance
     */
    protected function getUjmExo_Collection_QuestionDefinitionsService()
    {
        $this->services['ujm_exo.collection.question_definitions'] = $instance = new \UJM\ExoBundle\Library\Question\QuestionDefinitionsCollection();

        $instance->addDefinition($this->get('ujm_exo.definition.question_choice'));
        $instance->addDefinition($this->get('ujm_exo.definition.question_open'));
        $instance->addDefinition($this->get('ujm_exo.definition.question_cloze'));
        $instance->addDefinition($this->get('ujm_exo.definition.question_graphic'));
        $instance->addDefinition($this->get('ujm_exo.definition.question_words'));
        $instance->addDefinition($this->get('ujm_exo.definition.question_set'));
        $instance->addDefinition($this->get('ujm_exo.definition.question_pair'));
        $instance->addDefinition($this->get('ujm_exo.definition.question_match'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.definition.question_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Library\Question\Definition\ChoiceDefinition A UJM\ExoBundle\Library\Question\Definition\ChoiceDefinition instance
     */
    protected function getUjmExo_Definition_QuestionChoiceService()
    {
        return $this->services['ujm_exo.definition.question_choice'] = new \UJM\ExoBundle\Library\Question\Definition\ChoiceDefinition($this->get('ujm_exo.validator.question_choice'), $this->get('ujm_exo.validator.answer_choice'), $this->get('ujm_exo.serializer.question_choice'));
    }

    /*
     * Gets the 'ujm_exo.definition.question_cloze' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Library\Question\Definition\ClozeDefinition A UJM\ExoBundle\Library\Question\Definition\ClozeDefinition instance
     */
    protected function getUjmExo_Definition_QuestionClozeService()
    {
        return $this->services['ujm_exo.definition.question_cloze'] = new \UJM\ExoBundle\Library\Question\Definition\ClozeDefinition($this->get('ujm_exo.validator.question_cloze'), $this->get('ujm_exo.validator.answer_cloze'), $this->get('ujm_exo.serializer.question_cloze'));
    }

    /*
     * Gets the 'ujm_exo.definition.question_graphic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Library\Question\Definition\GraphicDefinition A UJM\ExoBundle\Library\Question\Definition\GraphicDefinition instance
     */
    protected function getUjmExo_Definition_QuestionGraphicService()
    {
        return $this->services['ujm_exo.definition.question_graphic'] = new \UJM\ExoBundle\Library\Question\Definition\GraphicDefinition($this->get('ujm_exo.validator.question_graphic'), $this->get('ujm_exo.validator.answer_graphic'), $this->get('ujm_exo.serializer.question_graphic'));
    }

    /*
     * Gets the 'ujm_exo.definition.question_match' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Library\Question\Definition\MatchDefinition A UJM\ExoBundle\Library\Question\Definition\MatchDefinition instance
     */
    protected function getUjmExo_Definition_QuestionMatchService()
    {
        return $this->services['ujm_exo.definition.question_match'] = new \UJM\ExoBundle\Library\Question\Definition\MatchDefinition($this->get('ujm_exo.validator.question_match'), $this->get('ujm_exo.validator.answer_match'), $this->get('ujm_exo.serializer.question_match'));
    }

    /*
     * Gets the 'ujm_exo.definition.question_open' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Library\Question\Definition\OpenDefinition A UJM\ExoBundle\Library\Question\Definition\OpenDefinition instance
     */
    protected function getUjmExo_Definition_QuestionOpenService()
    {
        return $this->services['ujm_exo.definition.question_open'] = new \UJM\ExoBundle\Library\Question\Definition\OpenDefinition($this->get('ujm_exo.validator.question_open'), $this->get('ujm_exo.validator.answer_open'), $this->get('ujm_exo.serializer.question_open'));
    }

    /*
     * Gets the 'ujm_exo.definition.question_pair' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Library\Question\Definition\PairDefinition A UJM\ExoBundle\Library\Question\Definition\PairDefinition instance
     */
    protected function getUjmExo_Definition_QuestionPairService()
    {
        return $this->services['ujm_exo.definition.question_pair'] = new \UJM\ExoBundle\Library\Question\Definition\PairDefinition($this->get('ujm_exo.validator.question_pair'), $this->get('ujm_exo.validator.answer_pair'), $this->get('ujm_exo.serializer.question_pair'));
    }

    /*
     * Gets the 'ujm_exo.definition.question_set' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Library\Question\Definition\SetDefinition A UJM\ExoBundle\Library\Question\Definition\SetDefinition instance
     */
    protected function getUjmExo_Definition_QuestionSetService()
    {
        return $this->services['ujm_exo.definition.question_set'] = new \UJM\ExoBundle\Library\Question\Definition\SetDefinition($this->get('ujm_exo.validator.question_set'), $this->get('ujm_exo.validator.answer_set'), $this->get('ujm_exo.serializer.question_set'));
    }

    /*
     * Gets the 'ujm_exo.definition.question_words' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Library\Question\Definition\WordsDefinition A UJM\ExoBundle\Library\Question\Definition\WordsDefinition instance
     */
    protected function getUjmExo_Definition_QuestionWordsService()
    {
        return $this->services['ujm_exo.definition.question_words'] = new \UJM\ExoBundle\Library\Question\Definition\WordsDefinition($this->get('ujm_exo.validator.question_words'), $this->get('ujm_exo.validator.answer_words'), $this->get('ujm_exo.serializer.question_words'));
    }

    /*
     * Gets the 'ujm_exo.generator.paper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Library\Attempt\PaperGenerator A UJM\ExoBundle\Library\Attempt\PaperGenerator instance
     */
    protected function getUjmExo_Generator_PaperService()
    {
        return $this->services['ujm_exo.generator.paper'] = new \UJM\ExoBundle\Library\Attempt\PaperGenerator($this->get('ujm_exo.serializer.exercise'), $this->get('ujm_exo.serializer.step'), $this->get('ujm_exo.serializer.question'));
    }

    /*
     * Gets the 'ujm_exo.importer.exercise' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Transfer\ExerciseImporter A UJM\ExoBundle\Transfer\ExerciseImporter instance
     */
    protected function getUjmExo_Importer_ExerciseService()
    {
        return $this->services['ujm_exo.importer.exercise'] = new \UJM\ExoBundle\Transfer\ExerciseImporter($this->get('claroline.config.platform_config_handler'), $this->get('claroline.persistence.object_manager'), $this->get('ujm_exo.validator.exercise'), $this->get('ujm_exo.serializer.exercise'));
    }

    /*
     * Gets the 'ujm_exo.library.json_schema' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Library\Json\JsonSchema A UJM\ExoBundle\Library\Json\JsonSchema instance
     */
    protected function getUjmExo_Library_JsonSchemaService()
    {
        return $this->services['ujm_exo.library.json_schema'] = new \UJM\ExoBundle\Library\Json\JsonSchema($this->targetDirs[2]);
    }

    /*
     * Gets the 'ujm_exo.listener.entity_question' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Listener\Entity\QuestionListener A UJM\ExoBundle\Listener\Entity\QuestionListener instance
     */
    protected function getUjmExo_Listener_EntityQuestionService()
    {
        return $this->services['ujm_exo.listener.entity_question'] = new \UJM\ExoBundle\Listener\Entity\QuestionListener($this);
    }

    /*
     * Gets the 'ujm_exo.listener.exercise' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Listener\Resource\ExerciseListener A UJM\ExoBundle\Listener\Resource\ExerciseListener instance
     */
    protected function getUjmExo_Listener_ExerciseService()
    {
        return $this->services['ujm_exo.listener.exercise'] = new \UJM\ExoBundle\Listener\Resource\ExerciseListener($this);
    }

    /*
     * Gets the 'ujm_exo.listener.question_bank' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Listener\Tool\QuestionBankListener A UJM\ExoBundle\Listener\Tool\QuestionBankListener instance
     */
    protected function getUjmExo_Listener_QuestionBankService()
    {
        return $this->services['ujm_exo.listener.question_bank'] = new \UJM\ExoBundle\Listener\Tool\QuestionBankListener($this);
    }

    /*
     * Gets the 'ujm_exo.manager.answer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Manager\Attempt\AnswerManager A UJM\ExoBundle\Manager\Attempt\AnswerManager instance
     */
    protected function getUjmExo_Manager_AnswerService()
    {
        return $this->services['ujm_exo.manager.answer'] = new \UJM\ExoBundle\Manager\Attempt\AnswerManager($this->get('claroline.persistence.object_manager'), $this->get('ujm_exo.validator.answer'), $this->get('ujm_exo.serializer.answer'));
    }

    /*
     * Gets the 'ujm_exo.manager.attempt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Manager\AttemptManager A UJM\ExoBundle\Manager\AttemptManager instance
     */
    protected function getUjmExo_Manager_AttemptService()
    {
        return $this->services['ujm_exo.manager.attempt'] = new \UJM\ExoBundle\Manager\AttemptManager($this->get('claroline.persistence.object_manager'), $this->get('ujm_exo.generator.paper'), $this->get('ujm_exo.manager.paper'), $this->get('ujm_exo.manager.answer'), $this->get('ujm_exo.manager.question'));
    }

    /*
     * Gets the 'ujm_exo.manager.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Manager\Question\CategoryManager A UJM\ExoBundle\Manager\Question\CategoryManager instance
     */
    protected function getUjmExo_Manager_CategoryService()
    {
        return $this->services['ujm_exo.manager.category'] = new \UJM\ExoBundle\Manager\Question\CategoryManager($this->get('claroline.persistence.object_manager'), $this->get('ujm_exo.validator.category'), $this->get('ujm_exo.serializer.category'));
    }

    /*
     * Gets the 'ujm_exo.manager.correction' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Manager\CorrectionManager A UJM\ExoBundle\Manager\CorrectionManager instance
     */
    protected function getUjmExo_Manager_CorrectionService()
    {
        return $this->services['ujm_exo.manager.correction'] = new \UJM\ExoBundle\Manager\CorrectionManager($this->get('claroline.persistence.object_manager'), $this->get('ujm_exo.manager.answer'), $this->get('ujm_exo.manager.paper'));
    }

    /*
     * Gets the 'ujm_exo.manager.exercise' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Manager\ExerciseManager A UJM\ExoBundle\Manager\ExerciseManager instance
     */
    protected function getUjmExo_Manager_ExerciseService()
    {
        return $this->services['ujm_exo.manager.exercise'] = new \UJM\ExoBundle\Manager\ExerciseManager($this->get('claroline.persistence.object_manager'), $this->get('ujm_exo.validator.exercise'), $this->get('ujm_exo.serializer.exercise'), $this->get('ujm_exo.manager.paper'));
    }

    /*
     * Gets the 'ujm_exo.manager.hint' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Manager\HintManager A UJM\ExoBundle\Manager\HintManager instance
     */
    protected function getUjmExo_Manager_HintService()
    {
        return $this->services['ujm_exo.manager.hint'] = new \UJM\ExoBundle\Manager\HintManager($this->get('claroline.persistence.object_manager'), $this->get('ujm_exo.serializer.hint'));
    }

    /*
     * Gets the 'ujm_exo.manager.paper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Manager\Attempt\PaperManager A UJM\ExoBundle\Manager\Attempt\PaperManager instance
     */
    protected function getUjmExo_Manager_PaperService()
    {
        return $this->services['ujm_exo.manager.paper'] = new \UJM\ExoBundle\Manager\Attempt\PaperManager($this->get('claroline.persistence.object_manager'), $this->get('event_dispatcher'), $this->get('ujm_exo.serializer.paper'), $this->get('ujm_exo.manager.question'));
    }

    /*
     * Gets the 'ujm_exo.manager.qti' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Manager\QTIManager A UJM\ExoBundle\Manager\QTIManager instance
     */
    protected function getUjmExo_Manager_QtiService()
    {
        return $this->services['ujm_exo.manager.qti'] = new \UJM\ExoBundle\Manager\QTIManager();
    }

    /*
     * Gets the 'ujm_exo.manager.question' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Manager\Question\QuestionManager A UJM\ExoBundle\Manager\Question\QuestionManager instance
     */
    protected function getUjmExo_Manager_QuestionService()
    {
        return $this->services['ujm_exo.manager.question'] = new \UJM\ExoBundle\Manager\Question\QuestionManager($this->get('claroline.persistence.object_manager'), $this->get('ujm_exo.manager.score'), $this->get('ujm_exo.validator.question'), $this->get('ujm_exo.serializer.question'), $this->get('ujm_exo.collection.question_definitions'), $this->get('ujm_exo.serializer.hint'));
    }

    /*
     * Gets the 'ujm_exo.manager.score' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Manager\Attempt\ScoreManager A UJM\ExoBundle\Manager\Attempt\ScoreManager instance
     */
    protected function getUjmExo_Manager_ScoreService()
    {
        return $this->services['ujm_exo.manager.score'] = new \UJM\ExoBundle\Manager\Attempt\ScoreManager();
    }

    /*
     * Gets the 'ujm_exo.manager.share' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Manager\Question\ShareManager A UJM\ExoBundle\Manager\Question\ShareManager instance
     */
    protected function getUjmExo_Manager_ShareService()
    {
        return $this->services['ujm_exo.manager.share'] = new \UJM\ExoBundle\Manager\Question\ShareManager($this->get('claroline.persistence.object_manager'), $this->get('ujm_exo.manager.question'));
    }

    /*
     * Gets the 'ujm_exo.serializer.answer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\Attempt\AnswerSerializer A UJM\ExoBundle\Serializer\Attempt\AnswerSerializer instance
     */
    protected function getUjmExo_Serializer_AnswerService()
    {
        return $this->services['ujm_exo.serializer.answer'] = new \UJM\ExoBundle\Serializer\Attempt\AnswerSerializer();
    }

    /*
     * Gets the 'ujm_exo.serializer.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\Question\CategorySerializer A UJM\ExoBundle\Serializer\Question\CategorySerializer instance
     */
    protected function getUjmExo_Serializer_CategoryService()
    {
        return $this->services['ujm_exo.serializer.category'] = new \UJM\ExoBundle\Serializer\Question\CategorySerializer($this->get('claroline.persistence.object_manager'), $this->get('security.token_storage'));
    }

    /*
     * Gets the 'ujm_exo.serializer.content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\Content\ContentSerializer A UJM\ExoBundle\Serializer\Content\ContentSerializer instance
     */
    protected function getUjmExo_Serializer_ContentService()
    {
        return $this->services['ujm_exo.serializer.content'] = new \UJM\ExoBundle\Serializer\Content\ContentSerializer($this->get('ujm_exo.serializer.resource_content'));
    }

    /*
     * Gets the 'ujm_exo.serializer.exercise' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\ExerciseSerializer A UJM\ExoBundle\Serializer\ExerciseSerializer instance
     */
    protected function getUjmExo_Serializer_ExerciseService()
    {
        return $this->services['ujm_exo.serializer.exercise'] = new \UJM\ExoBundle\Serializer\ExerciseSerializer($this->get('ujm_exo.serializer.user'), $this->get('ujm_exo.serializer.step'));
    }

    /*
     * Gets the 'ujm_exo.serializer.hint' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\Question\HintSerializer A UJM\ExoBundle\Serializer\Question\HintSerializer instance
     */
    protected function getUjmExo_Serializer_HintService()
    {
        return $this->services['ujm_exo.serializer.hint'] = new \UJM\ExoBundle\Serializer\Question\HintSerializer();
    }

    /*
     * Gets the 'ujm_exo.serializer.keyword' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\Misc\KeywordSerializer A UJM\ExoBundle\Serializer\Misc\KeywordSerializer instance
     */
    protected function getUjmExo_Serializer_KeywordService()
    {
        return $this->services['ujm_exo.serializer.keyword'] = new \UJM\ExoBundle\Serializer\Misc\KeywordSerializer();
    }

    /*
     * Gets the 'ujm_exo.serializer.paper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\Attempt\PaperSerializer A UJM\ExoBundle\Serializer\Attempt\PaperSerializer instance
     */
    protected function getUjmExo_Serializer_PaperService()
    {
        return $this->services['ujm_exo.serializer.paper'] = new \UJM\ExoBundle\Serializer\Attempt\PaperSerializer($this->get('ujm_exo.serializer.user'), $this->get('ujm_exo.serializer.answer'));
    }

    /*
     * Gets the 'ujm_exo.serializer.question' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\Question\QuestionSerializer A UJM\ExoBundle\Serializer\Question\QuestionSerializer instance
     */
    protected function getUjmExo_Serializer_QuestionService()
    {
        return $this->services['ujm_exo.serializer.question'] = new \UJM\ExoBundle\Serializer\Question\QuestionSerializer($this->get('claroline.persistence.object_manager'), $this->get('security.token_storage'), $this->get('ujm_exo.collection.question_definitions'), $this->get('ujm_exo.serializer.user'), $this->get('ujm_exo.serializer.category'), $this->get('ujm_exo.serializer.hint'), $this->get('ujm_exo.serializer.resource_content'));
    }

    /*
     * Gets the 'ujm_exo.serializer.question_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\Question\Type\ChoiceQuestionSerializer A UJM\ExoBundle\Serializer\Question\Type\ChoiceQuestionSerializer instance
     */
    protected function getUjmExo_Serializer_QuestionChoiceService()
    {
        return $this->services['ujm_exo.serializer.question_choice'] = new \UJM\ExoBundle\Serializer\Question\Type\ChoiceQuestionSerializer($this->get('ujm_exo.serializer.content'));
    }

    /*
     * Gets the 'ujm_exo.serializer.question_cloze' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\Question\Type\ClozeQuestionSerializer A UJM\ExoBundle\Serializer\Question\Type\ClozeQuestionSerializer instance
     */
    protected function getUjmExo_Serializer_QuestionClozeService()
    {
        return $this->services['ujm_exo.serializer.question_cloze'] = new \UJM\ExoBundle\Serializer\Question\Type\ClozeQuestionSerializer($this->get('ujm_exo.serializer.keyword'));
    }

    /*
     * Gets the 'ujm_exo.serializer.question_graphic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\Question\Type\GraphicQuestionSerializer A UJM\ExoBundle\Serializer\Question\Type\GraphicQuestionSerializer instance
     */
    protected function getUjmExo_Serializer_QuestionGraphicService()
    {
        return $this->services['ujm_exo.serializer.question_graphic'] = new \UJM\ExoBundle\Serializer\Question\Type\GraphicQuestionSerializer();
    }

    /*
     * Gets the 'ujm_exo.serializer.question_match' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\Question\Type\MatchQuestionSerializer A UJM\ExoBundle\Serializer\Question\Type\MatchQuestionSerializer instance
     */
    protected function getUjmExo_Serializer_QuestionMatchService()
    {
        return $this->services['ujm_exo.serializer.question_match'] = new \UJM\ExoBundle\Serializer\Question\Type\MatchQuestionSerializer($this->get('ujm_exo.serializer.content'));
    }

    /*
     * Gets the 'ujm_exo.serializer.question_open' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\Question\Type\OpenQuestionSerializer A UJM\ExoBundle\Serializer\Question\Type\OpenQuestionSerializer instance
     */
    protected function getUjmExo_Serializer_QuestionOpenService()
    {
        return $this->services['ujm_exo.serializer.question_open'] = new \UJM\ExoBundle\Serializer\Question\Type\OpenQuestionSerializer();
    }

    /*
     * Gets the 'ujm_exo.serializer.question_pair' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\Question\Type\PairQuestionSerializer A UJM\ExoBundle\Serializer\Question\Type\PairQuestionSerializer instance
     */
    protected function getUjmExo_Serializer_QuestionPairService()
    {
        return $this->services['ujm_exo.serializer.question_pair'] = new \UJM\ExoBundle\Serializer\Question\Type\PairQuestionSerializer($this->get('ujm_exo.serializer.content'));
    }

    /*
     * Gets the 'ujm_exo.serializer.question_set' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\Question\Type\SetQuestionSerializer A UJM\ExoBundle\Serializer\Question\Type\SetQuestionSerializer instance
     */
    protected function getUjmExo_Serializer_QuestionSetService()
    {
        return $this->services['ujm_exo.serializer.question_set'] = new \UJM\ExoBundle\Serializer\Question\Type\SetQuestionSerializer($this->get('ujm_exo.serializer.content'));
    }

    /*
     * Gets the 'ujm_exo.serializer.question_words' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\Question\Type\WordsQuestionSerializer A UJM\ExoBundle\Serializer\Question\Type\WordsQuestionSerializer instance
     */
    protected function getUjmExo_Serializer_QuestionWordsService()
    {
        return $this->services['ujm_exo.serializer.question_words'] = new \UJM\ExoBundle\Serializer\Question\Type\WordsQuestionSerializer($this->get('ujm_exo.serializer.keyword'));
    }

    /*
     * Gets the 'ujm_exo.serializer.resource_content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\Content\ResourceContentSerializer A UJM\ExoBundle\Serializer\Content\ResourceContentSerializer instance
     */
    protected function getUjmExo_Serializer_ResourceContentService()
    {
        return $this->services['ujm_exo.serializer.resource_content'] = new \UJM\ExoBundle\Serializer\Content\ResourceContentSerializer($this->get('claroline.persistence.object_manager'), ($this->targetDirs[2].'/../files'), $this->get('router'), $this->get('claroline.manager.resource_manager'));
    }

    /*
     * Gets the 'ujm_exo.serializer.step' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\StepSerializer A UJM\ExoBundle\Serializer\StepSerializer instance
     */
    protected function getUjmExo_Serializer_StepService()
    {
        return $this->services['ujm_exo.serializer.step'] = new \UJM\ExoBundle\Serializer\StepSerializer($this->get('ujm_exo.serializer.question'));
    }

    /*
     * Gets the 'ujm_exo.serializer.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Serializer\UserSerializer A UJM\ExoBundle\Serializer\UserSerializer instance
     */
    protected function getUjmExo_Serializer_UserService()
    {
        return $this->services['ujm_exo.serializer.user'] = new \UJM\ExoBundle\Serializer\UserSerializer($this->get('claroline.persistence.object_manager'));
    }

    /*
     * Gets the 'ujm_exo.validator.answer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerValidator A UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerValidator instance
     */
    protected function getUjmExo_Validator_AnswerService()
    {
        $this->services['ujm_exo.validator.answer'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerValidator($this->get('claroline.persistence.object_manager'), $this->get('ujm_exo.collection.question_definitions'));

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.answer_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\ChoiceAnswerValidator A UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\ChoiceAnswerValidator instance
     */
    protected function getUjmExo_Validator_AnswerChoiceService()
    {
        $this->services['ujm_exo.validator.answer_choice'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\ChoiceAnswerValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.answer_cloze' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\ClozeAnswerValidator A UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\ClozeAnswerValidator instance
     */
    protected function getUjmExo_Validator_AnswerClozeService()
    {
        $this->services['ujm_exo.validator.answer_cloze'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\ClozeAnswerValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.answer_graphic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\GraphicAnswerValidator A UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\GraphicAnswerValidator instance
     */
    protected function getUjmExo_Validator_AnswerGraphicService()
    {
        $this->services['ujm_exo.validator.answer_graphic'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\GraphicAnswerValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.answer_match' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\MatchAnswerValidator A UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\MatchAnswerValidator instance
     */
    protected function getUjmExo_Validator_AnswerMatchService()
    {
        $this->services['ujm_exo.validator.answer_match'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\MatchAnswerValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.answer_open' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\OpenAnswerValidator A UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\OpenAnswerValidator instance
     */
    protected function getUjmExo_Validator_AnswerOpenService()
    {
        $this->services['ujm_exo.validator.answer_open'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\OpenAnswerValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.answer_pair' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\PairAnswerValidator A UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\PairAnswerValidator instance
     */
    protected function getUjmExo_Validator_AnswerPairService()
    {
        $this->services['ujm_exo.validator.answer_pair'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\PairAnswerValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.answer_set' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\SetAnswerValidator A UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\SetAnswerValidator instance
     */
    protected function getUjmExo_Validator_AnswerSetService()
    {
        $this->services['ujm_exo.validator.answer_set'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\SetAnswerValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.answer_words' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\WordsAnswerValidator A UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\WordsAnswerValidator instance
     */
    protected function getUjmExo_Validator_AnswerWordsService()
    {
        $this->services['ujm_exo.validator.answer_words'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Attempt\AnswerData\WordsAnswerValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Question\CategoryValidator A UJM\ExoBundle\Validator\JsonSchema\Question\CategoryValidator instance
     */
    protected function getUjmExo_Validator_CategoryService()
    {
        $this->services['ujm_exo.validator.category'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Question\CategoryValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Content\ContentValidator A UJM\ExoBundle\Validator\JsonSchema\Content\ContentValidator instance
     */
    protected function getUjmExo_Validator_ContentService()
    {
        $this->services['ujm_exo.validator.content'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Content\ContentValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.exercise' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\ExerciseValidator A UJM\ExoBundle\Validator\JsonSchema\ExerciseValidator instance
     */
    protected function getUjmExo_Validator_ExerciseService()
    {
        $this->services['ujm_exo.validator.exercise'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\ExerciseValidator($this->get('ujm_exo.validator.step'));

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.hint' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Question\HintValidator A UJM\ExoBundle\Validator\JsonSchema\Question\HintValidator instance
     */
    protected function getUjmExo_Validator_HintService()
    {
        $this->services['ujm_exo.validator.hint'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Question\HintValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.keyword' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Misc\KeywordValidator A UJM\ExoBundle\Validator\JsonSchema\Misc\KeywordValidator instance
     */
    protected function getUjmExo_Validator_KeywordService()
    {
        $this->services['ujm_exo.validator.keyword'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Misc\KeywordValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.question' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Question\QuestionValidator A UJM\ExoBundle\Validator\JsonSchema\Question\QuestionValidator instance
     */
    protected function getUjmExo_Validator_QuestionService()
    {
        $this->services['ujm_exo.validator.question'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Question\QuestionValidator($this->get('ujm_exo.collection.question_definitions'), $this->get('ujm_exo.validator.category'), $this->get('ujm_exo.validator.hint'));

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.question_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Question\Type\ChoiceQuestionValidator A UJM\ExoBundle\Validator\JsonSchema\Question\Type\ChoiceQuestionValidator instance
     */
    protected function getUjmExo_Validator_QuestionChoiceService()
    {
        $this->services['ujm_exo.validator.question_choice'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Question\Type\ChoiceQuestionValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.question_cloze' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Question\Type\ClozeQuestionValidator A UJM\ExoBundle\Validator\JsonSchema\Question\Type\ClozeQuestionValidator instance
     */
    protected function getUjmExo_Validator_QuestionClozeService()
    {
        $this->services['ujm_exo.validator.question_cloze'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Question\Type\ClozeQuestionValidator($this->get('ujm_exo.validator.keyword'));

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.question_graphic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Question\Type\GraphicQuestionValidator A UJM\ExoBundle\Validator\JsonSchema\Question\Type\GraphicQuestionValidator instance
     */
    protected function getUjmExo_Validator_QuestionGraphicService()
    {
        $this->services['ujm_exo.validator.question_graphic'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Question\Type\GraphicQuestionValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.question_match' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Question\Type\MatchQuestionValidator A UJM\ExoBundle\Validator\JsonSchema\Question\Type\MatchQuestionValidator instance
     */
    protected function getUjmExo_Validator_QuestionMatchService()
    {
        $this->services['ujm_exo.validator.question_match'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Question\Type\MatchQuestionValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.question_open' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Question\Type\OpenQuestionValidator A UJM\ExoBundle\Validator\JsonSchema\Question\Type\OpenQuestionValidator instance
     */
    protected function getUjmExo_Validator_QuestionOpenService()
    {
        $this->services['ujm_exo.validator.question_open'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Question\Type\OpenQuestionValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.question_pair' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Question\Type\PairQuestionValidator A UJM\ExoBundle\Validator\JsonSchema\Question\Type\PairQuestionValidator instance
     */
    protected function getUjmExo_Validator_QuestionPairService()
    {
        $this->services['ujm_exo.validator.question_pair'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Question\Type\PairQuestionValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.question_set' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Question\Type\SetQuestionValidator A UJM\ExoBundle\Validator\JsonSchema\Question\Type\SetQuestionValidator instance
     */
    protected function getUjmExo_Validator_QuestionSetService()
    {
        $this->services['ujm_exo.validator.question_set'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Question\Type\SetQuestionValidator();

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.question_words' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\Question\Type\WordsQuestionValidator A UJM\ExoBundle\Validator\JsonSchema\Question\Type\WordsQuestionValidator instance
     */
    protected function getUjmExo_Validator_QuestionWordsService()
    {
        $this->services['ujm_exo.validator.question_words'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\Question\Type\WordsQuestionValidator($this->get('ujm_exo.validator.keyword'));

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'ujm_exo.validator.step' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \UJM\ExoBundle\Validator\JsonSchema\StepValidator A UJM\ExoBundle\Validator\JsonSchema\StepValidator instance
     */
    protected function getUjmExo_Validator_StepService()
    {
        $this->services['ujm_exo.validator.step'] = $instance = new \UJM\ExoBundle\Validator\JsonSchema\StepValidator($this->get('ujm_exo.validator.question'), $this->get('ujm_exo.validator.content'));

        $instance->setJsonSchema($this->get('ujm_exo.library.json_schema'));

        return $instance;
    }

    /*
     * Gets the 'uri_signer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\UriSigner A Symfony\Component\HttpKernel\UriSigner instance
     */
    protected function getUriSignerService()
    {
        return $this->services['uri_signer'] = new \Symfony\Component\HttpKernel\UriSigner('59cbe0c36869fd6f6a1cf71e8c3e7bb9');
    }

    /*
     * Gets the 'validate_request_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener A Symfony\Component\HttpKernel\EventListener\ValidateRequestListener instance
     */
    protected function getValidateRequestListenerService()
    {
        return $this->services['validate_request_listener'] = new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener();
    }

    /*
     * Gets the 'validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Validator\ValidatorInterface A Symfony\Component\Validator\Validator\ValidatorInterface instance
     */
    protected function getValidatorService()
    {
        return $this->services['validator'] = $this->get('validator.builder')->getValidator();
    }

    /*
     * Gets the 'validator.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilderInterface A Symfony\Component\Validator\ValidatorBuilderInterface instance
     */
    protected function getValidator_BuilderService()
    {
        $this->services['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

        $instance->setConstraintValidatorFactory(new \Symfony\Bundle\FrameworkBundle\Validator\ConstraintValidatorFactory($this, array('validator.expression' => 'validator.expression', 'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => 'validator.expression', 'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => 'validator.email', 'security.validator.user_password' => 'security.validator.user_password', 'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator' => 'security.validator.user_password', 'doctrine.orm.validator.unique' => 'doctrine.orm.validator.unique', 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => 'doctrine.orm.validator.unique', 'role_name_validator' => 'claroline.core_bundle.validator.constraints.role_name_validator', 'Claroline\\CoreBundle\\Validator\\Constraints\\RoleNameValidator' => 'claroline.core_bundle.validator.constraints.role_name_validator', 'profile_pics_file_validator' => 'claroline.core_bundle.validator.constraints.profile_pics_file_validator', 'Claroline\\CoreBundle\\Validator\\Constraints\\ProfilePicsFileValidator' => 'claroline.core_bundle.validator.constraints.profile_pics_file_validator', 'csv_user_validator' => 'claroline.core_bundle.validator.constraints.csv_user_validator', 'Claroline\\CoreBundle\\Validator\\Constraints\\CsvUserValidator' => 'claroline.core_bundle.validator.constraints.csv_user_validator', 'domain_name_validator' => 'claroline.core_bundle.validator.constraints.domain_name_validator', 'Claroline\\CoreBundle\\Validator\\Constraints\\DomainNameValidator' => 'claroline.core_bundle.validator.constraints.domain_name_validator', 'csv_home_text_widget_import_validator' => 'claroline.core_bundle.validator.constraints.csv_home_text_widget_validator', 'Claroline\\CoreBundle\\Validator\\Constraints\\CsvHomeTextWidgetValidator' => 'claroline.core_bundle.validator.constraints.csv_home_text_widget_validator', 'csv_workspace_user_import_validator' => 'claroline.core_bundle.validator.constraints.csv_workspace_user_import_validator', 'Claroline\\CoreBundle\\Validator\\Constraints\\CsvWorkspaceUserImportValidator' => 'claroline.core_bundle.validator.constraints.csv_workspace_user_import_validator', 'username_validator' => 'claroline.core_bundle.validator.constraints.username_validator', 'Claroline\\CoreBundle\\Validator\\Constraints\\UsernameValidator' => 'claroline.core_bundle.validator.constraints.username_validator', 'admin_workspace_tag_unique_name_validator' => 'claroline.core_bundle.validator.constraints.admin_workspace_tag_unique_name_validator', 'Claroline\\CoreBundle\\Validator\\Constraints\\AdminWorkspaceTagUniqueNameValidator' => 'claroline.core_bundle.validator.constraints.admin_workspace_tag_unique_name_validator', 'filesize_validator' => 'claroline.core_bundle.validator.constraints.file_size_validator', 'Claroline\\CoreBundle\\Validator\\Constraints\\FileSizeValidator' => 'claroline.core_bundle.validator.constraints.file_size_validator', 'csv_workspace_validator' => 'claroline.core_bundle.validator.constraints.csv_workspace_validator', 'Claroline\\CoreBundle\\Validator\\Constraints\\CsvWorkspaceValidator' => 'claroline.core_bundle.validator.constraints.csv_workspace_validator', 'csv_home_tab_import_validator' => 'claroline.core_bundle.validator.constraints.csv_home_tab_validator', 'Claroline\\CoreBundle\\Validator\\Constraints\\CsvHomeTabValidator' => 'claroline.core_bundle.validator.constraints.csv_home_tab_validator', 'csv_directory_import_validator' => 'claroline.core_bundle.validator.constraints.csv_directory_validator', 'Claroline\\CoreBundle\\Validator\\Constraints\\CsvDirectoryValidator' => 'claroline.core_bundle.validator.constraints.csv_directory_validator', 'import_user_in_group_validator' => 'claroline.core_bundle.validator.constraints.import_users_in_group_validator', 'Claroline\\CoreBundle\\Validator\\Constraints\\ImportUsersInGroupValidator' => 'claroline.core_bundle.validator.constraints.import_users_in_group_validator', 'workspace_unique_code_validator' => 'claroline.core_bundle.validator.constraints.workspace_unique_code_validator', 'Claroline\\CoreBundle\\Validator\\Constraints\\WorkspaceUniqueCodeValidator' => 'claroline.core_bundle.validator.constraints.workspace_unique_code_validator', 'user_administrative_code_validator' => 'claroline.core_bundle.validator.constraints.user_administrative_code_validator', 'Claroline\\CoreBundle\\Validator\\Constraints\\UserAdministrativeCodeValidator' => 'claroline.core_bundle.validator.constraints.user_administrative_code_validator', 'ics_file_validator' => 'claroline.core_bundle.validator.constraints.ics_file_validator', 'Claroline\\CoreBundle\\Validator\\Constraints\\IcsFileValidator' => 'claroline.core_bundle.validator.constraints.ics_file_validator', 'claroline_daterange_validator' => 'claroline.agenda_bundle.validator.constraints.date_range_validator', 'Claroline\\AgendaBundle\\Validator\\Constraints\\DateRangeValidator' => 'claroline.agenda_bundle.validator.constraints.date_range_validator', 'reservation_validator' => 'forma_libre.reservation_bundle.validator.constraints.reservation_validator', 'FormaLibre\\ReservationBundle\\Validator\\Constraints\\ReservationValidator' => 'forma_libre.reservation_bundle.validator.constraints.reservation_validator', 'csv_resource_validator' => 'forma_libre.reservation_bundle.validator.constraints.csv_resource_validator', 'FormaLibre\\ReservationBundle\\Validator\\Constraints\\CsvResourceValidator' => 'forma_libre.reservation_bundle.validator.constraints.csv_resource_validator', 'reservation_modify_validator' => 'forma_libre.reservation_bundle.validator.constraints.reservation_modify_validator', 'FormaLibre\\ReservationBundle\\Validator\\Constraints\\ReservationModifyValidator' => 'forma_libre.reservation_bundle.validator.constraints.reservation_modify_validator', 'formalibre_duration_validator' => 'forma_libre.reservation_bundle.validator.constraints.duration_validator', 'FormaLibre\\ReservationBundle\\Validator\\Constraints\\DurationValidator' => 'forma_libre.reservation_bundle.validator.constraints.duration_validator', 'formalibre_daterange_validator' => 'forma_libre.reservation_bundle.validator.constraints.date_range_validator', 'FormaLibre\\ReservationBundle\\Validator\\Constraints\\DateRangeValidator' => 'forma_libre.reservation_bundle.validator.constraints.date_range_validator', 'send_to_name_validator' => 'claroline.message_bundle.validator.constraints.send_to_names_validator', 'Claroline\\MessageBundle\\Validator\\Constraints\\SendToNamesValidator' => 'claroline.message_bundle.validator.constraints.send_to_names_validator', 'importable_framework_validator' => 'he_vinci.competency_bundle.validator.importable_framework_validator', 'HeVinci\\CompetencyBundle\\Validator\\ImportableFrameworkValidator' => 'he_vinci.competency_bundle.validator.importable_framework_validator', 'existing_ability_validator' => 'he_vinci.competency_bundle.validator.existing_ability_validator', 'HeVinci\\CompetencyBundle\\Validator\\ExistingAbilityValidator' => 'he_vinci.competency_bundle.validator.existing_ability_validator', 'competency_name_validator' => 'he_vinci.competency_bundle.validator.unique_competency_validator', 'HeVinci\\CompetencyBundle\\Validator\\UniqueCompetencyValidator' => 'he_vinci.competency_bundle.validator.unique_competency_validator', 'url_validator' => 'he_vinci.url_bundle.validator.constraints.reachable_url_validator', 'HeVinci\\UrlBundle\\Validator\\Constraints\\ReachableUrlValidator' => 'he_vinci.url_bundle.validator.constraints.reachable_url_validator')));
        $instance->setTranslator($this->get('translator.default'));
        $instance->setTranslationDomain('validators');
        $instance->addXmlMappings(array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/config/validation.xml'), 1 => ($this->targetDirs[3].'/vendor/friendsofsymfony/oauth-server-bundle/Resources/config/validation.xml')));
        $instance->enableAnnotationMapping($this->get('annotation_reader'));
        $instance->addMethodMapping('loadValidatorMetadata');
        $instance->addObjectInitializers(array(0 => $this->get('doctrine.orm.validator_initializer')));

        return $instance;
    }

    /*
     * Gets the 'validator.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Constraints\EmailValidator A Symfony\Component\Validator\Constraints\EmailValidator instance
     */
    protected function getValidator_EmailService()
    {
        return $this->services['validator.email'] = new \Symfony\Component\Validator\Constraints\EmailValidator(false);
    }

    /*
     * Gets the 'validator.expression' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Constraints\ExpressionValidator A Symfony\Component\Validator\Constraints\ExpressionValidator instance
     */
    protected function getValidator_ExpressionService()
    {
        return $this->services['validator.expression'] = new \Symfony\Component\Validator\Constraints\ExpressionValidator($this->get('property_accessor'));
    }

    /*
     * Gets the 'white_october_pagerfanta.view_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pagerfanta\View\ViewFactory A Pagerfanta\View\ViewFactory instance
     */
    protected function getWhiteOctoberPagerfanta_ViewFactoryService()
    {
        $a = $this->get('translator.default');

        $b = new \Pagerfanta\View\DefaultView();

        $c = new \Pagerfanta\View\TwitterBootstrapView();

        $d = new \Pagerfanta\View\TwitterBootstrap3View();

        $this->services['white_october_pagerfanta.view_factory'] = $instance = new \Pagerfanta\View\ViewFactory(array());

        $instance->add(array('default' => $b, 'default_translated' => new \WhiteOctober\PagerfantaBundle\View\DefaultTranslatedView($b, $a), 'twitter_bootstrap' => $c, 'twitter_bootstrap3' => $d, 'twitter_bootstrap3_translated' => new \WhiteOctober\PagerfantaBundle\View\TwitterBootstrap3TranslatedView($d, $a), 'twitter_bootstrap_translated' => new \WhiteOctober\PagerfantaBundle\View\TwitterBootstrapTranslatedView($c, $a)));

        return $instance;
    }

    /*
     * Gets the 'workspace_role_tool_config_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Claroline\CoreBundle\Listener\Tool\UserListener A Claroline\CoreBundle\Listener\Tool\UserListener instance
     */
    protected function getWorkspaceRoleToolConfigListenerService()
    {
        return $this->services['workspace_role_tool_config_listener'] = new \Claroline\CoreBundle\Listener\Tool\UserListener($this->get('request_stack'), $this->get('http_kernel'));
    }

    /*
     * Gets the 'zenstruck_form.ajax_entity_controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Zenstruck\Bundle\FormBundle\Controller\AjaxEntityController A Zenstruck\Bundle\FormBundle\Controller\AjaxEntityController instance
     */
    protected function getZenstruckForm_AjaxEntityControllerService()
    {
        return $this->services['zenstruck_form.ajax_entity_controller'] = new \Zenstruck\Bundle\FormBundle\Controller\AjaxEntityController($this->get('zenstruck_form.ajax_entity_manager'));
    }

    /*
     * Gets the 'zenstruck_form.ajax_entity_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Zenstruck\Bundle\FormBundle\Form\AjaxEntityManager A Zenstruck\Bundle\FormBundle\Form\AjaxEntityManager instance
     */
    protected function getZenstruckForm_AjaxEntityManagerService()
    {
        return $this->services['zenstruck_form.ajax_entity_manager'] = new \Zenstruck\Bundle\FormBundle\Form\AjaxEntityManager($this->get('doctrine'), '59cbe0c36869fd6f6a1cf71e8c3e7bb9');
    }

    /*
     * Gets the 'zenstruck_form.ajax_entity_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Zenstruck\Bundle\FormBundle\Form\Type\AjaxEntityType A Zenstruck\Bundle\FormBundle\Form\Type\AjaxEntityType instance
     */
    protected function getZenstruckForm_AjaxEntityTypeService()
    {
        return $this->services['zenstruck_form.ajax_entity_type'] = new \Zenstruck\Bundle\FormBundle\Form\Type\AjaxEntityType($this->get('doctrine'), $this->get('router'), $this->get('zenstruck_form.ajax_entity_manager', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /*
     * Gets the 'zenstruck_form.theme_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Zenstruck\Bundle\FormBundle\Form\Extension\ThemeTypeExtension A Zenstruck\Bundle\FormBundle\Form\Extension\ThemeTypeExtension instance
     */
    protected function getZenstruckForm_ThemeTypeService()
    {
        return $this->services['zenstruck_form.theme_type'] = new \Zenstruck\Bundle\FormBundle\Form\Extension\ThemeTypeExtension(array('label_width' => 'col-md-3', 'control_width' => 'col-md-9'));
    }

    /*
     * Updates the 'request' service.
     */
    protected function synchronizeRequestService()
    {
        if ($this->initialized('monolog.handler.main.not_found_strategy')) {
            $this->get('monolog.handler.main.not_found_strategy')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
    }

    /*
     * Gets the 'assetic.asset_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\AsseticBundle\Factory\AssetFactory A Symfony\Bundle\AsseticBundle\Factory\AssetFactory instance
     */
    protected function getAssetic_AssetFactoryService()
    {
        $this->services['assetic.asset_factory'] = $instance = new \Symfony\Bundle\AsseticBundle\Factory\AssetFactory($this->get('kernel'), $this, $this->getParameterBag(), ($this->targetDirs[2].'/../web'), false);

        $instance->addWorker(new \Assetic\Factory\Worker\EnsureFilterWorker('/\\.css$|\\.less$/', $this->get('assetic.filter.cssmin')));
        $instance->addWorker(new \Assetic\Factory\Worker\EnsureFilterWorker('/\\.js$|\\.twigjs$/', $this->get('assetic.filter.jsmin')));

        return $instance;
    }

    /*
     * Gets the 'claroline.symfony_yaml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Yaml\Parser A Symfony\Component\Yaml\Parser instance
     */
    protected function getClaroline_SymfonyYamlService()
    {
        return $this->services['claroline.symfony_yaml'] = new \Symfony\Component\Yaml\Parser();
    }

    /*
     * Gets the 'controller_name_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser A Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser instance
     */
    protected function getControllerNameConverterService()
    {
        return $this->services['controller_name_converter'] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser($this->get('kernel'));
    }

    /*
     * Gets the 'doctrine.orm.default_entity_manager.delegate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Doctrine\ORM\EntityManager A Doctrine\ORM\EntityManager instance
     */
    public function getDoctrine_Orm_DefaultEntityManager_DelegateService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['doctrine.orm.default_entity_manager.delegate'] = new DoctrineORMEntityManager_0000000033fa95a800007fa9d9c5b13af7de70189aa1810cbaa903f964bacb71(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getDoctrine_Orm_DefaultEntityManager_DelegateService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        $a = $this->get('annotation_reader');

        $b = new \Doctrine\ORM\Mapping\Driver\AnnotationDriver($a, array(0 => ($this->targetDirs[3].'/vendor/claroline/distribution/main/core/Entity'), 1 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/agenda/Entity'), 2 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/reservation/Entity'), 3 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/message/Entity'), 4 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/forum/Entity'), 5 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/tag/Entity'), 6 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/support/Entity'), 7 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/rss-reader/Entity'), 8 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/notification/Entity'), 9 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/survey/Entity'), 10 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/announcement/Entity'), 11 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/scorm/Entity'), 12 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/cursus/Entity'), 13 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/team/Entity'), 14 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/pdf-generator/Entity'), 15 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/presence/Entity'), 16 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/video-player/Entity'), 17 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/collecticiel/Entity'), 18 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/favourite/Entity'), 19 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/competency/Entity'), 20 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/url/Entity'), 21 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/portfolio/Entity'), 22 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/badge/Entity'), 23 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/blog/Entity'), 24 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dropzone/Entity'), 25 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/social-media/Entity'), 26 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/wiki/Entity'), 27 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/oauth/Entity'), 28 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/result/Entity'), 29 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/path/Entity'), 30 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/website/Entity'), 31 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/flashcard/Entity'), 32 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/exo/Entity'), 33 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/lesson/Entity'), 34 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/chat/Entity'), 35 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/dashboard/Entity'), 36 => ($this->targetDirs[3].'/vendor/claroline/distribution/plugin/claco-form/Entity')));

        $c = new \Doctrine\ORM\Mapping\Driver\SimplifiedXmlDriver(array(($this->targetDirs[3].'/vendor/friendsofsymfony/oauth-server-bundle/Resources/config/doctrine') => 'FOS\\OAuthServerBundle\\Entity'));
        $c->setGlobalBasename('mapping');

        $d = new \Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain();
        $d->addDriver($b, 'Claroline\\CoreBundle\\Entity');
        $d->addDriver($b, 'Claroline\\AgendaBundle\\Entity');
        $d->addDriver($b, 'FormaLibre\\ReservationBundle\\Entity');
        $d->addDriver($b, 'Claroline\\MessageBundle\\Entity');
        $d->addDriver($b, 'Claroline\\ForumBundle\\Entity');
        $d->addDriver($b, 'Claroline\\TagBundle\\Entity');
        $d->addDriver($b, 'FormaLibre\\SupportBundle\\Entity');
        $d->addDriver($b, 'Claroline\\RssReaderBundle\\Entity');
        $d->addDriver($b, 'Icap\\NotificationBundle\\Entity');
        $d->addDriver($b, 'Claroline\\SurveyBundle\\Entity');
        $d->addDriver($b, 'Claroline\\AnnouncementBundle\\Entity');
        $d->addDriver($b, 'Claroline\\ScormBundle\\Entity');
        $d->addDriver($b, 'Claroline\\CursusBundle\\Entity');
        $d->addDriver($b, 'Claroline\\TeamBundle\\Entity');
        $d->addDriver($b, 'Claroline\\PdfGeneratorBundle\\Entity');
        $d->addDriver($b, 'FormaLibre\\PresenceBundle\\Entity');
        $d->addDriver($b, 'Claroline\\VideoPlayerBundle\\Entity');
        $d->addDriver($b, 'Innova\\CollecticielBundle\\Entity');
        $d->addDriver($b, 'HeVinci\\FavouriteBundle\\Entity');
        $d->addDriver($b, 'HeVinci\\CompetencyBundle\\Entity');
        $d->addDriver($b, 'HeVinci\\UrlBundle\\Entity');
        $d->addDriver($b, 'Icap\\PortfolioBundle\\Entity');
        $d->addDriver($b, 'Icap\\BadgeBundle\\Entity');
        $d->addDriver($b, 'Icap\\BlogBundle\\Entity');
        $d->addDriver($b, 'Icap\\DropzoneBundle\\Entity');
        $d->addDriver($b, 'Icap\\SocialmediaBundle\\Entity');
        $d->addDriver($b, 'Icap\\WikiBundle\\Entity');
        $d->addDriver($b, 'Icap\\OAuthBundle\\Entity');
        $d->addDriver($b, 'Claroline\\ResultBundle\\Entity');
        $d->addDriver($b, 'Innova\\PathBundle\\Entity');
        $d->addDriver($b, 'Icap\\WebsiteBundle\\Entity');
        $d->addDriver($b, 'Claroline\\FlashCardBundle\\Entity');
        $d->addDriver($b, 'UJM\\ExoBundle\\Entity');
        $d->addDriver($b, 'Icap\\LessonBundle\\Entity');
        $d->addDriver($b, 'Claroline\\ChatBundle\\Entity');
        $d->addDriver($b, 'Claroline\\DashboardBundle\\Entity');
        $d->addDriver($b, 'Claroline\\ClacoFormBundle\\Entity');
        $d->addDriver($c, 'FOS\\OAuthServerBundle\\Entity');

        $e = new \Doctrine\ORM\Configuration();
        $e->setEntityNamespaces(array('ClarolineCoreBundle' => 'Claroline\\CoreBundle\\Entity', 'ClarolineAgendaBundle' => 'Claroline\\AgendaBundle\\Entity', 'FormaLibreReservationBundle' => 'FormaLibre\\ReservationBundle\\Entity', 'ClarolineMessageBundle' => 'Claroline\\MessageBundle\\Entity', 'ClarolineForumBundle' => 'Claroline\\ForumBundle\\Entity', 'ClarolineTagBundle' => 'Claroline\\TagBundle\\Entity', 'FormaLibreSupportBundle' => 'FormaLibre\\SupportBundle\\Entity', 'ClarolineRssReaderBundle' => 'Claroline\\RssReaderBundle\\Entity', 'IcapNotificationBundle' => 'Icap\\NotificationBundle\\Entity', 'ClarolineSurveyBundle' => 'Claroline\\SurveyBundle\\Entity', 'ClarolineAnnouncementBundle' => 'Claroline\\AnnouncementBundle\\Entity', 'ClarolineScormBundle' => 'Claroline\\ScormBundle\\Entity', 'ClarolineCursusBundle' => 'Claroline\\CursusBundle\\Entity', 'ClarolineTeamBundle' => 'Claroline\\TeamBundle\\Entity', 'ClarolinePdfGeneratorBundle' => 'Claroline\\PdfGeneratorBundle\\Entity', 'FormaLibrePresenceBundle' => 'FormaLibre\\PresenceBundle\\Entity', 'ClarolineVideoPlayerBundle' => 'Claroline\\VideoPlayerBundle\\Entity', 'InnovaCollecticielBundle' => 'Innova\\CollecticielBundle\\Entity', 'HeVinciFavouriteBundle' => 'HeVinci\\FavouriteBundle\\Entity', 'HeVinciCompetencyBundle' => 'HeVinci\\CompetencyBundle\\Entity', 'HeVinciUrlBundle' => 'HeVinci\\UrlBundle\\Entity', 'IcapPortfolioBundle' => 'Icap\\PortfolioBundle\\Entity', 'IcapBadgeBundle' => 'Icap\\BadgeBundle\\Entity', 'IcapBlogBundle' => 'Icap\\BlogBundle\\Entity', 'IcapDropzoneBundle' => 'Icap\\DropzoneBundle\\Entity', 'IcapSocialmediaBundle' => 'Icap\\SocialmediaBundle\\Entity', 'IcapWikiBundle' => 'Icap\\WikiBundle\\Entity', 'IcapOAuthBundle' => 'Icap\\OAuthBundle\\Entity', 'ClarolineResultBundle' => 'Claroline\\ResultBundle\\Entity', 'InnovaPathBundle' => 'Innova\\PathBundle\\Entity', 'IcapWebsiteBundle' => 'Icap\\WebsiteBundle\\Entity', 'ClarolineFlashCardBundle' => 'Claroline\\FlashCardBundle\\Entity', 'UJMExoBundle' => 'UJM\\ExoBundle\\Entity', 'IcapLessonBundle' => 'Icap\\LessonBundle\\Entity', 'ClarolineChatBundle' => 'Claroline\\ChatBundle\\Entity', 'ClarolineDashboardBundle' => 'Claroline\\DashboardBundle\\Entity', 'ClarolineClacoFormBundle' => 'Claroline\\ClacoFormBundle\\Entity', 'FOSOAuthServerBundle' => 'FOS\\OAuthServerBundle\\Entity'));
        $e->setMetadataCacheImpl($this->get('doctrine_cache.providers.doctrine.orm.default_metadata_cache'));
        $e->setQueryCacheImpl($this->get('doctrine_cache.providers.doctrine.orm.default_query_cache'));
        $e->setResultCacheImpl($this->get('doctrine_cache.providers.doctrine.orm.default_result_cache'));
        $e->setMetadataDriverImpl($d);
        $e->setProxyDir((__DIR__.'/doctrine/orm/Proxies'));
        $e->setProxyNamespace('Proxies');
        $e->setAutoGenerateProxyClasses(false);
        $e->setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
        $e->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $e->setNamingStrategy(new \Doctrine\ORM\Mapping\DefaultNamingStrategy());
        $e->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $e->setEntityListenerResolver($this->get('doctrine.orm.default_entity_listener_resolver'));
        $e->addCustomHydrationMode('PairHydrator', 'Icap\\BadgeBundle\\Hydrators\\PairHydrator');
        $e->addCustomStringFunction('if', 'Claroline\\CoreBundle\\Doctrine\\Query\\IfElse');
        $e->addCustomStringFunction('regexp', 'Claroline\\CoreBundle\\Doctrine\\Query\\Regexp');
        $e->addFilter('softdeleteable', 'Gedmo\\SoftDeleteable\\Filter\\SoftDeleteableFilter');
        $e->setEntityListenerResolver($this->get('claroline.doctrine.entity_listener_resolver'));

        $instance = \Doctrine\ORM\EntityManager::create($this->get('doctrine.dbal.default_connection'), $e);

        $this->get('doctrine.orm.default_manager_configurator')->configure($instance);

        return $instance;
    }

    /*
     * Gets the 'form.server_params' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Form\Util\ServerParams A Symfony\Component\Form\Util\ServerParams instance
     */
    protected function getForm_ServerParamsService()
    {
        return $this->services['form.server_params'] = new \Symfony\Component\Form\Util\ServerParams($this->get('request_stack'));
    }

    /*
     * Gets the 'fos_oauth_server.entity_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Doctrine\ORM\EntityManager A Doctrine\ORM\EntityManager instance
     */
    protected function getFosOauthServer_EntityManagerService()
    {
        return $this->services['fos_oauth_server.entity_manager'] = $this->get('doctrine')->getManager(NULL);
    }

    /*
     * Gets the 'jms_di_extra.controller_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \JMS\DiExtraBundle\HttpKernel\ControllerResolver A JMS\DiExtraBundle\HttpKernel\ControllerResolver instance
     */
    protected function getJmsDiExtra_ControllerResolverService()
    {
        return $this->services['jms_di_extra.controller_resolver'] = new \JMS\DiExtraBundle\HttpKernel\ControllerResolver($this, $this->get('controller_name_converter'), $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /*
     * Gets the 'jms_serializer.unserialize_object_constructor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \JMS\Serializer\Construction\UnserializeObjectConstructor A JMS\Serializer\Construction\UnserializeObjectConstructor instance
     */
    protected function getJmsSerializer_UnserializeObjectConstructorService()
    {
        return $this->services['jms_serializer.unserialize_object_constructor'] = new \JMS\Serializer\Construction\UnserializeObjectConstructor();
    }

    /*
     * Gets the 'monolog.processor.psr_log_message' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Monolog\Processor\PsrLogMessageProcessor A Monolog\Processor\PsrLogMessageProcessor instance
     */
    protected function getMonolog_Processor_PsrLogMessageService()
    {
        return $this->services['monolog.processor.psr_log_message'] = new \Monolog\Processor\PsrLogMessageProcessor();
    }

    /*
     * Gets the 'router.request_context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Routing\RequestContext A Symfony\Component\Routing\RequestContext instance
     */
    protected function getRouter_RequestContextService()
    {
        return $this->services['router.request_context'] = new \Symfony\Component\Routing\RequestContext('', 'GET', 'localhost', 'http', 80, 443);
    }

    /*
     * Gets the 'security.access_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Firewall\AccessListener A Symfony\Component\Security\Http\Firewall\AccessListener instance
     */
    protected function getSecurity_AccessListenerService()
    {
        return $this->services['security.access_listener'] = new \Symfony\Component\Security\Http\Firewall\AccessListener($this->get('security.token_storage'), $this->get('security.access.decision_manager'), $this->get('security.access_map'), $this->get('security.authentication.manager'));
    }

    /*
     * Gets the 'security.access_map' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\AccessMap A Symfony\Component\Security\Http\AccessMap instance
     */
    protected function getSecurity_AccessMapService()
    {
        $this->services['security.access_map'] = $instance = new \Symfony\Component\Security\Http\AccessMap();

        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/oauth/v2/auth_login$'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/api'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/login'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/connect'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);

        return $instance;
    }

    /*
     * Gets the 'security.authentication.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager A Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager instance
     */
    protected function getSecurity_Authentication_ManagerService()
    {
        $a = $this->get('security.user.provider.concrete.user_db');
        $b = $this->get('hwi_oauth.user_checker');
        $c = $this->get('security.encoder_factory');

        $this->services['security.authentication.manager'] = $instance = new \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager(array(0 => new \Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider($a, $b, 'oauth_authorize', $c, false), 1 => new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('591e162d985b03.64780398'), 2 => new \Claroline\CoreBundle\Library\Security\Provider\OAuthProvider($a, $this->get('fos_oauth_server.server'), $b), 3 => new \Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider($a, $b, 'main', $c, false), 4 => new \Symfony\Component\Security\Core\Authentication\Provider\SimpleAuthenticationProvider($this->get('claroline.core_bundle.library.security.external_authenticator'), $a, 'main'), 5 => new \HWI\Bundle\OAuthBundle\Security\Core\Authentication\Provider\OAuthProvider($this->get('icap.oauth.user_provider'), $this->get('hwi_oauth.resource_ownermap.main'), $b), 6 => new \Symfony\Component\Security\Core\Authentication\Provider\RememberMeAuthenticationProvider($b, '59cbe0c36869fd6f6a1cf71e8c3e7bb9', 'main'), 7 => new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('591e162d985b03.64780398')), true);

        $instance->setEventDispatcher($this->get('event_dispatcher'));

        return $instance;
    }

    /*
     * Gets the 'security.authentication.session_strategy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy A Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy instance
     */
    protected function getSecurity_Authentication_SessionStrategyService()
    {
        return $this->services['security.authentication.session_strategy'] = new \Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy('migrate');
    }

    /*
     * Gets the 'security.channel_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Firewall\ChannelListener A Symfony\Component\Security\Http\Firewall\ChannelListener instance
     */
    protected function getSecurity_ChannelListenerService()
    {
        return $this->services['security.channel_listener'] = new \Symfony\Component\Security\Http\Firewall\ChannelListener($this->get('security.access_map'), new \Symfony\Component\Security\Http\EntryPoint\RetryAuthenticationEntryPoint(80, 443), $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /*
     * Gets the 'security.expressions.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \JMS\SecurityExtraBundle\Security\Authorization\Expression\ContainerAwareExpressionHandler A JMS\SecurityExtraBundle\Security\Authorization\Expression\ContainerAwareExpressionHandler instance
     */
    protected function getSecurity_Expressions_HandlerService()
    {
        return $this->services['security.expressions.handler'] = new \JMS\SecurityExtraBundle\Security\Authorization\Expression\ContainerAwareExpressionHandler($this);
    }

    /*
     * Gets the 'security.extra.metadata_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Metadata\MetadataFactory A Metadata\MetadataFactory instance
     */
    protected function getSecurity_Extra_MetadataFactoryService()
    {
        $this->services['security.extra.metadata_factory'] = $instance = new \Metadata\MetadataFactory(new \Metadata\Driver\LazyLoadingDriver($this, 'security.extra.metadata_driver'), new \Metadata\Cache\FileCache((__DIR__.'/jms_security'), false));

        $instance->setIncludeInterfaces(true);

        return $instance;
    }

    /*
     * Gets the 'security.http_utils' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\HttpUtils A Symfony\Component\Security\Http\HttpUtils instance
     */
    protected function getSecurity_HttpUtilsService()
    {
        $a = $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        return $this->services['security.http_utils'] = new \Symfony\Component\Security\Http\HttpUtils($a, $a);
    }

    /*
     * Gets the 'security.logout_url_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator A Symfony\Component\Security\Http\Logout\LogoutUrlGenerator instance
     */
    protected function getSecurity_LogoutUrlGeneratorService()
    {
        $this->services['security.logout_url_generator'] = $instance = new \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator($this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->registerListener('main', '/logout', 'logout', '_csrf_token', NULL);

        return $instance;
    }

    /*
     * Gets the 'security.user.provider.concrete.user_db' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bridge\Doctrine\Security\User\EntityUserProvider A Symfony\Bridge\Doctrine\Security\User\EntityUserProvider instance
     */
    protected function getSecurity_User_Provider_Concrete_UserDbService()
    {
        return $this->services['security.user.provider.concrete.user_db'] = new \Symfony\Bridge\Doctrine\Security\User\EntityUserProvider($this->get('doctrine'), 'Claroline\\CoreBundle\\Entity\\User', NULL, NULL);
    }

    /*
     * Gets the 'session.storage.metadata_bag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag A Symfony\Component\HttpFoundation\Session\Storage\MetadataBag instance
     */
    protected function getSession_Storage_MetadataBagService()
    {
        return $this->services['session.storage.metadata_bag'] = new \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag('_sf2_meta', '0');
    }

    /*
     * Gets the 'stof_doctrine_extensions.listener.blameable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Gedmo\Blameable\BlameableListener A Gedmo\Blameable\BlameableListener instance
     */
    protected function getStofDoctrineExtensions_Listener_BlameableService()
    {
        $this->services['stof_doctrine_extensions.listener.blameable'] = $instance = new \Gedmo\Blameable\BlameableListener();

        $instance->setAnnotationReader($this->get('annotation_reader'));

        return $instance;
    }

    /*
     * Gets the 'stof_doctrine_extensions.listener.translatable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Claroline\CoreBundle\Listener\LocaleListener A Claroline\CoreBundle\Listener\LocaleListener instance
     */
    protected function getStofDoctrineExtensions_Listener_TranslatableService()
    {
        $this->services['stof_doctrine_extensions.listener.translatable'] = $instance = new \Claroline\CoreBundle\Listener\LocaleListener();

        $instance->setAnnotationReader($this->get('annotation_reader'));
        $instance->setDefaultLocale('en');
        $instance->setTranslatableLocale('en');
        $instance->setTranslationFallback(false);
        $instance->setPersistDefaultLocaleTranslation(false);
        $instance->setSkipOnLoad(false);

        return $instance;
    }

    /*
     * Gets the 'twig.extension.assets' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bridge\Twig\Extension\AssetExtension A Symfony\Bridge\Twig\Extension\AssetExtension instance
     */
    protected function getTwig_Extension_AssetsService()
    {
        return $this->services['twig.extension.assets'] = new \Symfony\Bridge\Twig\Extension\AssetExtension($this->get('assets.packages'), $this->get('twig.extension.httpfoundation'));
    }

    /*
     * Gets the 'twig.extension.httpfoundation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bridge\Twig\Extension\HttpFoundationExtension A Symfony\Bridge\Twig\Extension\HttpFoundationExtension instance
     */
    protected function getTwig_Extension_HttpfoundationService()
    {
        return $this->services['twig.extension.httpfoundation'] = new \Symfony\Bridge\Twig\Extension\HttpFoundationExtension($this->get('request_stack'), $this->get('router.request_context', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /*
     * {@inheritdoc}
     */
    public function getParameter($name)
    {
        $name = strtolower($name);

        if (!(isset($this->parameters[$name]) || array_key_exists($name, $this->parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }

        return $this->parameters[$name];
    }

    /*
     * {@inheritdoc}
     */
    public function hasParameter($name)
    {
        $name = strtolower($name);

        return isset($this->parameters[$name]) || array_key_exists($name, $this->parameters);
    }

    /*
     * {@inheritdoc}
     */
    public function setParameter($name, $value)
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    /*
     * {@inheritdoc}
     */
    public function getParameterBag()
    {
        if (null === $this->parameterBag) {
            $this->parameterBag = new FrozenParameterBag($this->parameters);
        }

        return $this->parameterBag;
    }

    /*
     * Gets the default parameters.
     *
     * @return array An array of the default parameters
     */
    protected function getDefaultParameters()
    {
        return array(
            'kernel.root_dir' => $this->targetDirs[2],
            'kernel.environment' => 'prod',
            'kernel.debug' => false,
            'kernel.name' => 'app',
            'kernel.cache_dir' => __DIR__,
            'kernel.logs_dir' => ($this->targetDirs[2].'/logs'),
            'kernel.bundles' => array(
                'FrontEndBundle' => 'Claroline\\Bundle\\FrontEndBundle\\FrontEndBundle',
                'ClarolineInstallationBundle' => 'Claroline\\InstallationBundle\\ClarolineInstallationBundle',
                'ClarolineMigrationBundle' => 'Claroline\\MigrationBundle\\ClarolineMigrationBundle',
                'ClarolineCoreBundle' => 'Claroline\\CoreBundle\\ClarolineCoreBundle',
                'ClarolineAgendaBundle' => 'Claroline\\AgendaBundle\\ClarolineAgendaBundle',
                'FormaLibreReservationBundle' => 'FormaLibre\\ReservationBundle\\FormaLibreReservationBundle',
                'ClarolineImagePlayerBundle' => 'Claroline\\ImagePlayerBundle\\ClarolineImagePlayerBundle',
                'ClarolineMessageBundle' => 'Claroline\\MessageBundle\\ClarolineMessageBundle',
                'ClarolineForumBundle' => 'Claroline\\ForumBundle\\ClarolineForumBundle',
                'ClarolineTagBundle' => 'Claroline\\TagBundle\\ClarolineTagBundle',
                'FormaLibreSupportBundle' => 'FormaLibre\\SupportBundle\\FormaLibreSupportBundle',
                'ClarolineRssReaderBundle' => 'Claroline\\RssReaderBundle\\ClarolineRssReaderBundle',
                'IcapNotificationBundle' => 'Icap\\NotificationBundle\\IcapNotificationBundle',
                'ClarolineSurveyBundle' => 'Claroline\\SurveyBundle\\ClarolineSurveyBundle',
                'ClarolineAnnouncementBundle' => 'Claroline\\AnnouncementBundle\\ClarolineAnnouncementBundle',
                'ClarolineScormBundle' => 'Claroline\\ScormBundle\\ClarolineScormBundle',
                'ClarolinePdfPlayerBundle' => 'Claroline\\PdfPlayerBundle\\ClarolinePdfPlayerBundle',
                'ClarolineCursusBundle' => 'Claroline\\CursusBundle\\ClarolineCursusBundle',
                'ClarolineTeamBundle' => 'Claroline\\TeamBundle\\ClarolineTeamBundle',
                'ClarolinePdfGeneratorBundle' => 'Claroline\\PdfGeneratorBundle\\ClarolinePdfGeneratorBundle',
                'FormaLibrePresenceBundle' => 'FormaLibre\\PresenceBundle\\FormaLibrePresenceBundle',
                'ClarolineVideoPlayerBundle' => 'Claroline\\VideoPlayerBundle\\ClarolineVideoPlayerBundle',
                'ClarolineActivityToolBundle' => 'Claroline\\ActivityToolBundle\\ClarolineActivityToolBundle',
                'ClarolineWebResourceBundle' => 'Claroline\\WebResourceBundle\\ClarolineWebResourceBundle',
                'ClarolineTextPlayerBundle' => 'Claroline\\TextPlayerBundle\\ClarolineTextPlayerBundle',
                'InnovaCollecticielBundle' => 'Innova\\CollecticielBundle\\InnovaCollecticielBundle',
                'HeVinciFavouriteBundle' => 'HeVinci\\FavouriteBundle\\HeVinciFavouriteBundle',
                'HeVinciCompetencyBundle' => 'HeVinci\\CompetencyBundle\\HeVinciCompetencyBundle',
                'HeVinciUrlBundle' => 'HeVinci\\UrlBundle\\HeVinciUrlBundle',
                'IcapPortfolioBundle' => 'Icap\\PortfolioBundle\\IcapPortfolioBundle',
                'IcapBadgeBundle' => 'Icap\\BadgeBundle\\IcapBadgeBundle',
                'IcapBlogBundle' => 'Icap\\BlogBundle\\IcapBlogBundle',
                'IcapDropzoneBundle' => 'Icap\\DropzoneBundle\\IcapDropzoneBundle',
                'IcapSocialmediaBundle' => 'Icap\\SocialmediaBundle\\IcapSocialmediaBundle',
                'IcapWikiBundle' => 'Icap\\WikiBundle\\IcapWikiBundle',
                'IcapOAuthBundle' => 'Icap\\OAuthBundle\\IcapOAuthBundle',
                'IcapFormulaPluginBundle' => 'Icap\\FormulaPluginBundle\\IcapFormulaPluginBundle',
                'ClarolineResultBundle' => 'Claroline\\ResultBundle\\ClarolineResultBundle',
                'InnovaPathBundle' => 'Innova\\PathBundle\\InnovaPathBundle',
                'IcapWebsiteBundle' => 'Icap\\WebsiteBundle\\IcapWebsiteBundle',
                'ClarolineFlashCardBundle' => 'Claroline\\FlashCardBundle\\ClarolineFlashCardBundle',
                'UJMExoBundle' => 'UJM\\ExoBundle\\UJMExoBundle',
                'IcapLessonBundle' => 'Icap\\LessonBundle\\IcapLessonBundle',
                'ClarolineChatBundle' => 'Claroline\\ChatBundle\\ClarolineChatBundle',
                'ClarolineDashboardBundle' => 'Claroline\\DashboardBundle\\ClarolineDashboardBundle',
                'ClarolineClacoFormBundle' => 'Claroline\\ClacoFormBundle\\ClarolineClacoFormBundle',
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'JMSAopBundle' => 'JMS\\AopBundle\\JMSAopBundle',
                'ZenstruckFormBundle' => 'Zenstruck\\Bundle\\FormBundle\\ZenstruckFormBundle',
                'BazingaJsTranslationBundle' => 'Bazinga\\Bundle\\JsTranslationBundle\\BazingaJsTranslationBundle',
                'WhiteOctoberPagerfantaBundle' => 'WhiteOctober\\PagerfantaBundle\\WhiteOctoberPagerfantaBundle',
                'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle',
                'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle',
                'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle',
                'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle',
                'StfalconTinymceBundle' => 'Stfalcon\\Bundle\\TinymceBundle\\StfalconTinymceBundle',
                'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle',
                'KnpSnappyBundle' => 'Knp\\Bundle\\SnappyBundle\\KnpSnappyBundle',
                'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle',
                'JMSTwigJsBundle' => 'JMS\\TwigJsBundle\\JMSTwigJsBundle',
                'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle',
                'JMSDiExtraBundle' => 'JMS\\DiExtraBundle\\JMSDiExtraBundle',
                'JMSSecurityExtraBundle' => 'JMS\\SecurityExtraBundle\\JMSSecurityExtraBundle',
                'InnovaAngularJSBundle' => 'Innova\\AngularJSBundle\\InnovaAngularJSBundle',
                'InnovaAngularUITinyMCEBundle' => 'Innova\\AngularUITinyMCEBundle\\InnovaAngularUITinyMCEBundle',
                'InnovaAngularUIResourcePickerBundle' => 'Innova\\AngularUIResourcePickerBundle\\InnovaAngularUIResourcePickerBundle',
                'IDCIExporterBundle' => 'IDCI\\Bundle\\ExporterBundle\\IDCIExporterBundle',
                'HWIOAuthBundle' => 'HWI\\Bundle\\OAuthBundle\\HWIOAuthBundle',
                'GregwarCaptchaBundle' => 'Gregwar\\CaptchaBundle\\GregwarCaptchaBundle',
                'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle',
                'FOSOAuthServerBundle' => 'FOS\\OAuthServerBundle\\FOSOAuthServerBundle',
                'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle',
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'BeSimpleSsoAuthBundle' => 'BeSimple\\SsoAuthBundle\\BeSimpleSsoAuthBundle',
                'ClarolineKernelBundle' => 'Claroline\\KernelBundle\\ClarolineKernelBundle',
            ),
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'appProdProjectContainer',
            'security.authentication.listener.anonymous.class' => 'Claroline\\CoreBundle\\Listener\\AnonymousAuthenticationListener',
            'security.exception_listener.class' => 'Claroline\\CoreBundle\\Library\\Security\\Firewall\\ExceptionListener',
            'security.logout.handler.session.class' => 'Claroline\\CoreBundle\\Library\\Security\\LogoutHandler',
            'templating.locator.class' => 'Claroline\\CoreBundle\\Library\\Templating\\Loader\\TemplateLocator',
            'twig.controller.exception.class' => 'Claroline\\CoreBundle\\Controller\\CustomExceptionController',
            'listwidgetblog' => array(
                0 => 'search',
                1 => 'info_bar',
                2 => 'rss_feed',
                3 => 'blog_widget_tag_list_blog_form_tag_cloud',
                4 => 'editor',
                5 => 'calendar',
                6 => 'archives',
            ),
            'fos_rest.view_handler.default.class' => 'Claroline\\CoreBundle\\Library\\View\\ViewHandler',
            'database_driver' => 'pdo_mysql',
            'database_host' => 'localhost',
            'database_port' => NULL,
            'database_name' => 'claroline',
            'database_user' => 'root',
            'database_password' => 'admin339',
            'test_database_driver' => 'pdo_mysql',
            'test_database_host' => 'localhost',
            'test_database_port' => NULL,
            'test_database_name' => 'claroline_test',
            'test_database_user' => 'root',
            'test_database_password' => 'admin339',
            'mailer_transport' => 'smtp',
            'mailer_encryption' => NULL,
            'mailer_auth_mode' => NULL,
            'mailer_host' => NULL,
            'mailer_port' => NULL,
            'mailer_user' => NULL,
            'mailer_password' => NULL,
            'locale' => 'fr',
            'secret' => '59cbe0c36869fd6f6a1cf71e8c3e7bb9',
            'non_repeatable_log_time_in_seconds' => 600,
            'chosenrangekeys' => '[\'yesterday\', \'last_seven_days\', \'last_thirty_days\', \'this_month\', \'last_month\', \'this_school_year\', \'last_school_year\']',
            'claroline.installation.bundle_file' => ($this->targetDirs[2].'/config/bundles.ini'),
            'claroline.installation_manager.class' => 'Claroline\\InstallationBundle\\Manager\\InstallationManager',
            'claroline.installation_fixture_loader.class' => 'Claroline\\InstallationBundle\\Fixtures\\FixtureLoader',
            'claroline.symfony_fixture_loader.class' => 'Symfony\\Bridge\\Doctrine\\DataFixtures\\ContainerAwareLoader',
            'claroline.doctrine_fixture_executor.class' => 'Doctrine\\Common\\DataFixtures\\Executor\\ORMExecutor',
            'claroline.migration_manager.class' => 'Claroline\\MigrationBundle\\Manager\\Manager',
            'claroline.migration_generator.class' => 'Claroline\\MigrationBundle\\Generator\\Generator',
            'claroline.migration_writer.class' => 'Claroline\\MigrationBundle\\Generator\\Writer',
            'claroline.migration_migrator.class' => 'Claroline\\MigrationBundle\\Migrator\\Migrator',
            'claroline.migration_schema_tool.class' => 'Doctrine\\ORM\\Tools\\SchemaTool',
            'claroline.param.bundle_sources' => ($this->targetDirs[2].'/config/downloaded.json'),
            'claroline.param.authentication_directory' => ($this->targetDirs[2].'/config/Authentication/'),
            'claroline.param.files_directory' => ($this->targetDirs[2].'/../files'),
            'claroline.param.vendor_directory' => ($this->targetDirs[2].'/../vendor'),
            'claroline.param.claroline_log' => ($this->targetDirs[2].'/logs/claroline_debug.log'),
            'claroline.param.root_directory' => ($this->targetDirs[2].'/..'),
            'claroline.param.web_directory' => ($this->targetDirs[2].'/../web'),
            'claroline.param.web_js_directory' => ($this->targetDirs[2].'/../web/js'),
            'claroline.param.web_bundles_directory' => ($this->targetDirs[2].'/../web/bundles'),
            'claroline.param.thumbnails_directory' => ($this->targetDirs[2].'/../web/uploads/thumbnails'),
            'claroline.param.uploads_directory' => ($this->targetDirs[2].'/../web/uploads'),
            'claroline.param.logos_directory' => ($this->targetDirs[2].'/../web/uploads/logos'),
            'claroline.param.relative_thumbnail_base_path' => 'uploads/thumbnails',
            'claroline.param.templates_directory' => ($this->targetDirs[2].'/../files/templates/'),
            'claroline.param.default_template' => ($this->targetDirs[2].'/../vendor/claroline/distribution/main/core/Resources/template/default.zip'),
            'claroline.param.personal_template' => ($this->targetDirs[2].'/../vendor/claroline/distribution/main/core/Resources/template/personal.zip'),
            'claroline.param.platform_config_handler_class' => 'Claroline\\CoreBundle\\Library\\Configuration\\PlatformConfigurationHandler',
            'claroline.param.platform_options_file' => ($this->targetDirs[2].'/config/platform_options.yml'),
            'claroline.param.locked_platform_options_file' => ($this->targetDirs[2].'/config/locked_platform_options.yml'),
            'claroline.param.web_dir' => ($this->targetDirs[2].'/../web'),
            'claroline.param.platform_generated_archive_path' => ($this->targetDirs[2].'/config/tmp_files'),
            'claroline.composer_log_file' => ($this->targetDirs[2].'/logs/composer.log'),
            'claroline.ip_white_list_file' => ($this->targetDirs[2].'/config/ip_white_list.yml'),
            'claroline.cache_dir' => $this->targetDirs[1],
            'claroline.param.home_custom_template_directory' => ($this->targetDirs[2].'/Resources/ClarolineCoreBundle/views/Home/templates/custom'),
            'claroline.ip_range_white_list_file' => ($this->targetDirs[2].'/config/white_list_ip_range.yml'),
            'claroline.param.oauth_master_platforms' => ($this->targetDirs[2].'/config/masters.yml'),
            'claroline.param.pdf_directory' => ($this->targetDirs[2].'/../files/pdf'),
            'icap_portfolio.repository.widget.class' => 'Icap\\PortfolioBundle\\Repository\\Widget\\AbstractWidgetRepository',
            'icap_portfolio.repository.widget_type.class' => 'Icap\\PortfolioBundle\\Repository\\Widget\\WidgetTypeRepository',
            'icap.form_handler.badge.class' => 'Icap\\BadgeBundle\\Form\\Handler\\BadgeHandler',
            'icap.blog.manager.tag.class' => 'Icap\\BlogBundle\\Manager\\TagManager',
            'icap.blog.type.tags.class' => 'Icap\\BlogBundle\\Form\\TagsType',
            'icap.blog.twig.extension.class' => 'Icap\\BlogBundle\\Twig\\IcapBlogExtension',
            'icap.blog.tag.class' => 'Icap\\BlogBundle\\Entity\\Tag',
            'icap.blog.tag_repository.class' => 'Icap\\BlogBundle\\Repository\\TagRepository',
            'icap.blog.post.class' => 'Icap\\BlogBundle\\Entity\\Post',
            'icap.blog.manager.post.class' => 'Icap\\BlogBundle\\Manager\\PostManager',
            'icap.blog.post_repository.class' => 'Icap\\BlogBundle\\Repository\\PostRepository',
            'icap.blog.comment.class' => 'Icap\\BlogBundle\\Entity\\Comment',
            'icap.blog.comment_repository.class' => 'Icap\\BlogBundle\\Repository\\CommentRepository',
            'icap.blog.banner_upload_directory' => 'uploads/blogs',
            'icap.blog.banner_directory' => ($this->targetDirs[2].'/../web/uploads/blogs'),
            'icap.wiki.section.class' => 'Icap\\WikiBundle\\Entity\\Section',
            'icap.wiki.section_repository.class' => 'Icap\\WikiBundle\\Repository\\SectionRepository',
            'icap.wiki.contribution.class' => 'Icap\\WikiBundle\\Entity\\Contribution',
            'icap.wiki.contribution_repository.class' => 'Icap\\WikiBundle\\Repository\\ContributionRepository',
            'icap.wiki.common.functions.class' => 'Icap\\WikiBundle\\Controller\\CommonFunctions',
            'icap_website.page.class' => 'Icap\\WebsiteBundle\\Entity\\WebsitePage',
            'icap_website.repository.page.class' => 'Icap\\WebsiteBundle\\Repository\\WebsitePageRepository',
            'controller_resolver.class' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\ControllerResolver',
            'controller_name_converter.class' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\ControllerNameParser',
            'response_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener',
            'streamed_response_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener',
            'locale_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener',
            'event_dispatcher.class' => 'Symfony\\Component\\EventDispatcher\\ContainerAwareEventDispatcher',
            'http_kernel.class' => 'Symfony\\Component\\HttpKernel\\DependencyInjection\\ContainerAwareHttpKernel',
            'filesystem.class' => 'Symfony\\Component\\Filesystem\\Filesystem',
            'cache_warmer.class' => 'Symfony\\Component\\HttpKernel\\CacheWarmer\\CacheWarmerAggregate',
            'cache_clearer.class' => 'Symfony\\Component\\HttpKernel\\CacheClearer\\ChainCacheClearer',
            'file_locator.class' => 'Symfony\\Component\\HttpKernel\\Config\\FileLocator',
            'uri_signer.class' => 'Symfony\\Component\\HttpKernel\\UriSigner',
            'request_stack.class' => 'Symfony\\Component\\HttpFoundation\\RequestStack',
            'fragment.handler.class' => 'Symfony\\Component\\HttpKernel\\DependencyInjection\\LazyLoadingFragmentHandler',
            'fragment.renderer.inline.class' => 'Symfony\\Component\\HttpKernel\\Fragment\\InlineFragmentRenderer',
            'fragment.renderer.hinclude.class' => 'Symfony\\Component\\HttpKernel\\Fragment\\HIncludeFragmentRenderer',
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.renderer.esi.class' => 'Symfony\\Component\\HttpKernel\\Fragment\\EsiFragmentRenderer',
            'fragment.path' => '/_fragment',
            'translator.class' => 'Symfony\\Bundle\\FrameworkBundle\\Translation\\Translator',
            'translator.identity.class' => 'Symfony\\Component\\Translation\\IdentityTranslator',
            'translator.selector.class' => 'Symfony\\Component\\Translation\\MessageSelector',
            'translation.loader.php.class' => 'Symfony\\Component\\Translation\\Loader\\PhpFileLoader',
            'translation.loader.yml.class' => 'Symfony\\Component\\Translation\\Loader\\YamlFileLoader',
            'translation.loader.xliff.class' => 'Symfony\\Component\\Translation\\Loader\\XliffFileLoader',
            'translation.loader.po.class' => 'Symfony\\Component\\Translation\\Loader\\PoFileLoader',
            'translation.loader.mo.class' => 'Symfony\\Component\\Translation\\Loader\\MoFileLoader',
            'translation.loader.qt.class' => 'Symfony\\Component\\Translation\\Loader\\QtFileLoader',
            'translation.loader.csv.class' => 'Symfony\\Component\\Translation\\Loader\\CsvFileLoader',
            'translation.loader.res.class' => 'Symfony\\Component\\Translation\\Loader\\IcuResFileLoader',
            'translation.loader.dat.class' => 'Symfony\\Component\\Translation\\Loader\\IcuDatFileLoader',
            'translation.loader.ini.class' => 'Symfony\\Component\\Translation\\Loader\\IniFileLoader',
            'translation.loader.json.class' => 'Symfony\\Component\\Translation\\Loader\\JsonFileLoader',
            'translation.dumper.php.class' => 'Symfony\\Component\\Translation\\Dumper\\PhpFileDumper',
            'translation.dumper.xliff.class' => 'Symfony\\Component\\Translation\\Dumper\\XliffFileDumper',
            'translation.dumper.po.class' => 'Symfony\\Component\\Translation\\Dumper\\PoFileDumper',
            'translation.dumper.mo.class' => 'Symfony\\Component\\Translation\\Dumper\\MoFileDumper',
            'translation.dumper.yml.class' => 'Symfony\\Component\\Translation\\Dumper\\YamlFileDumper',
            'translation.dumper.qt.class' => 'Symfony\\Component\\Translation\\Dumper\\QtFileDumper',
            'translation.dumper.csv.class' => 'Symfony\\Component\\Translation\\Dumper\\CsvFileDumper',
            'translation.dumper.ini.class' => 'Symfony\\Component\\Translation\\Dumper\\IniFileDumper',
            'translation.dumper.json.class' => 'Symfony\\Component\\Translation\\Dumper\\JsonFileDumper',
            'translation.dumper.res.class' => 'Symfony\\Component\\Translation\\Dumper\\IcuResFileDumper',
            'translation.extractor.php.class' => 'Symfony\\Bundle\\FrameworkBundle\\Translation\\PhpExtractor',
            'translation.loader.class' => 'Symfony\\Bundle\\FrameworkBundle\\Translation\\TranslationLoader',
            'translation.extractor.class' => 'Symfony\\Component\\Translation\\Extractor\\ChainExtractor',
            'translation.writer.class' => 'Symfony\\Component\\Translation\\Writer\\TranslationWriter',
            'property_accessor.class' => 'Symfony\\Component\\PropertyAccess\\PropertyAccessor',
            'kernel.secret' => '59cbe0c36869fd6f6a1cf71e8c3e7bb9',
            'kernel.http_method_override' => true,
            'kernel.trusted_hosts' => array(

            ),
            'kernel.trusted_proxies' => array(

            ),
            'kernel.default_locale' => 'fr',
            'test.client.class' => 'Symfony\\Bundle\\FrameworkBundle\\Client',
            'test.client.parameters' => array(

            ),
            'test.client.history.class' => 'Symfony\\Component\\BrowserKit\\History',
            'test.client.cookiejar.class' => 'Symfony\\Component\\BrowserKit\\CookieJar',
            'test.session.listener.class' => 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\TestSessionListener',
            'session.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Session',
            'session.flashbag.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Flash\\FlashBag',
            'session.attribute_bag.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag',
            'session.storage.metadata_bag.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\MetadataBag',
            'session.metadata.storage_key' => '_sf2_meta',
            'session.storage.native.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\NativeSessionStorage',
            'session.storage.php_bridge.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\PhpBridgeSessionStorage',
            'session.storage.mock_file.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\MockFileSessionStorage',
            'session.handler.native_file.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\NativeFileSessionHandler',
            'session.handler.write_check.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\WriteCheckSessionHandler',
            'session_listener.class' => 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SessionListener',
            'session.storage.options' => array(
                'gc_probability' => 1,
            ),
            'session.save_path' => ($this->targetDirs[2].'/sessions'),
            'session.metadata.update_threshold' => '0',
            'security.secure_random.class' => 'Symfony\\Component\\Security\\Core\\Util\\SecureRandom',
            'form.resolved_type_factory.class' => 'Symfony\\Component\\Form\\ResolvedFormTypeFactory',
            'form.registry.class' => 'Symfony\\Component\\Form\\FormRegistry',
            'form.factory.class' => 'Symfony\\Component\\Form\\FormFactory',
            'form.extension.class' => 'Symfony\\Component\\Form\\Extension\\DependencyInjection\\DependencyInjectionExtension',
            'form.type_guesser.validator.class' => 'Symfony\\Component\\Form\\Extension\\Validator\\ValidatorTypeGuesser',
            'form.type_extension.form.request_handler.class' => 'Symfony\\Component\\Form\\Extension\\HttpFoundation\\HttpFoundationRequestHandler',
            'form.type_extension.csrf.enabled' => true,
            'form.type_extension.csrf.field_name' => '_token',
            'security.csrf.token_generator.class' => 'Symfony\\Component\\Security\\Csrf\\TokenGenerator\\UriSafeTokenGenerator',
            'security.csrf.token_storage.class' => 'Symfony\\Component\\Security\\Csrf\\TokenStorage\\SessionTokenStorage',
            'security.csrf.token_manager.class' => 'Symfony\\Component\\Security\\Csrf\\CsrfTokenManager',
            'templating.engine.delegating.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\DelegatingEngine',
            'templating.name_parser.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\TemplateNameParser',
            'templating.filename_parser.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\TemplateFilenameParser',
            'templating.cache_warmer.template_paths.class' => 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\TemplatePathsCacheWarmer',
            'templating.loader.filesystem.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Loader\\FilesystemLoader',
            'templating.loader.cache.class' => 'Symfony\\Component\\Templating\\Loader\\CacheLoader',
            'templating.loader.chain.class' => 'Symfony\\Component\\Templating\\Loader\\ChainLoader',
            'templating.finder.class' => 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\TemplateFinder',
            'templating.helper.assets.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\AssetsHelper',
            'templating.helper.router.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\RouterHelper',
            'templating.helper.code.file_link_format' => NULL,
            'templating.loader.cache.path' => NULL,
            'templating.engines' => array(
                0 => 'twig',
            ),
            'validator.class' => 'Symfony\\Component\\Validator\\Validator\\ValidatorInterface',
            'validator.builder.class' => 'Symfony\\Component\\Validator\\ValidatorBuilderInterface',
            'validator.builder.factory.class' => 'Symfony\\Component\\Validator\\Validation',
            'validator.mapping.cache.apc.class' => 'Symfony\\Component\\Validator\\Mapping\\Cache\\ApcCache',
            'validator.mapping.cache.prefix' => '',
            'validator.validator_factory.class' => 'Symfony\\Bundle\\FrameworkBundle\\Validator\\ConstraintValidatorFactory',
            'validator.expression.class' => 'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator',
            'validator.email.class' => 'Symfony\\Component\\Validator\\Constraints\\EmailValidator',
            'validator.translation_domain' => 'validators',
            'validator.api' => '2.5-bc',
            'translator.logging' => false,
            'data_collector.templates' => array(

            ),
            'router.class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\Router',
            'router.request_context.class' => 'Symfony\\Component\\Routing\\RequestContext',
            'routing.loader.class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\DelegatingLoader',
            'routing.resolver.class' => 'Symfony\\Component\\Config\\Loader\\LoaderResolver',
            'routing.loader.xml.class' => 'Symfony\\Component\\Routing\\Loader\\XmlFileLoader',
            'routing.loader.yml.class' => 'Symfony\\Component\\Routing\\Loader\\YamlFileLoader',
            'routing.loader.php.class' => 'Symfony\\Component\\Routing\\Loader\\PhpFileLoader',
            'router.options.generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper',
            'router.options.matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper',
            'router.cache_warmer.class' => 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\RouterCacheWarmer',
            'router.options.matcher.cache_class' => 'appProdProjectContainerUrlMatcher',
            'router.options.generator.cache_class' => 'appProdProjectContainerUrlGenerator',
            'router_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener',
            'router.request_context.host' => 'localhost',
            'router.request_context.scheme' => 'http',
            'router.request_context.base_url' => '',
            'router.resource' => '.',
            'router.cache_class_prefix' => 'appProdProjectContainer',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'annotations.reader.class' => 'Doctrine\\Common\\Annotations\\AnnotationReader',
            'annotations.cached_reader.class' => 'Doctrine\\Common\\Annotations\\CachedReader',
            'annotations.file_cache_reader.class' => 'Doctrine\\Common\\Annotations\\FileCacheReader',
            'debug.debug_handlers_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener',
            'debug.stopwatch.class' => 'Symfony\\Component\\Stopwatch\\Stopwatch',
            'debug.error_handler.throw_at' => 0,
            'security.context.class' => 'Symfony\\Component\\Security\\Core\\SecurityContext',
            'security.user_checker.class' => 'Symfony\\Component\\Security\\Core\\User\\UserChecker',
            'security.encoder_factory.generic.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactory',
            'security.encoder.digest.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\MessageDigestPasswordEncoder',
            'security.encoder.plain.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\PlaintextPasswordEncoder',
            'security.encoder.pbkdf2.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\Pbkdf2PasswordEncoder',
            'security.encoder.bcrypt.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\BCryptPasswordEncoder',
            'security.user.provider.in_memory.class' => 'Symfony\\Component\\Security\\Core\\User\\InMemoryUserProvider',
            'security.user.provider.in_memory.user.class' => 'Symfony\\Component\\Security\\Core\\User\\User',
            'security.user.provider.chain.class' => 'Symfony\\Component\\Security\\Core\\User\\ChainUserProvider',
            'security.authentication.trust_resolver.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationTrustResolver',
            'security.authentication.trust_resolver.anonymous_class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken',
            'security.authentication.trust_resolver.rememberme_class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken',
            'security.authentication.manager.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationProviderManager',
            'security.authentication.session_strategy.class' => 'Symfony\\Component\\Security\\Http\\Session\\SessionAuthenticationStrategy',
            'security.access.decision_manager.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\AccessDecisionManager',
            'security.access.simple_role_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleVoter',
            'security.access.authenticated_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\AuthenticatedVoter',
            'security.access.role_hierarchy_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleHierarchyVoter',
            'security.access.expression_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\ExpressionVoter',
            'security.firewall.class' => 'Symfony\\Component\\Security\\Http\\Firewall',
            'security.firewall.map.class' => 'Symfony\\Bundle\\SecurityBundle\\Security\\FirewallMap',
            'security.firewall.context.class' => 'Symfony\\Bundle\\SecurityBundle\\Security\\FirewallContext',
            'security.matcher.class' => 'Symfony\\Component\\HttpFoundation\\RequestMatcher',
            'security.expression_matcher.class' => 'Symfony\\Component\\HttpFoundation\\ExpressionRequestMatcher',
            'security.role_hierarchy.class' => 'Symfony\\Component\\Security\\Core\\Role\\RoleHierarchy',
            'security.http_utils.class' => 'Symfony\\Component\\Security\\Http\\HttpUtils',
            'security.validator.user_password.class' => 'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator',
            'security.expression_language.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\ExpressionLanguage',
            'security.authentication.retry_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\RetryAuthenticationEntryPoint',
            'security.channel_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\ChannelListener',
            'security.authentication.form_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\FormAuthenticationEntryPoint',
            'security.authentication.listener.form.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\UsernamePasswordFormAuthenticationListener',
            'security.authentication.listener.simple_form.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\SimpleFormAuthenticationListener',
            'security.authentication.listener.simple_preauth.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\SimplePreAuthenticationListener',
            'security.authentication.listener.basic.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\BasicAuthenticationListener',
            'security.authentication.basic_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\BasicAuthenticationEntryPoint',
            'security.authentication.listener.digest.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\DigestAuthenticationListener',
            'security.authentication.digest_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\DigestAuthenticationEntryPoint',
            'security.authentication.listener.x509.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\X509AuthenticationListener',
            'security.authentication.switchuser_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\SwitchUserListener',
            'security.logout_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\LogoutListener',
            'security.logout.handler.cookie_clearing.class' => 'Symfony\\Component\\Security\\Http\\Logout\\CookieClearingLogoutHandler',
            'security.logout.success_handler.class' => 'Symfony\\Component\\Security\\Http\\Logout\\DefaultLogoutSuccessHandler',
            'security.access_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\AccessListener',
            'security.access_map.class' => 'Symfony\\Component\\Security\\Http\\AccessMap',
            'security.context_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\ContextListener',
            'security.authentication.provider.dao.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\DaoAuthenticationProvider',
            'security.authentication.provider.simple.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\SimpleAuthenticationProvider',
            'security.authentication.provider.pre_authenticated.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\PreAuthenticatedAuthenticationProvider',
            'security.authentication.provider.anonymous.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\AnonymousAuthenticationProvider',
            'security.authentication.success_handler.class' => 'Symfony\\Component\\Security\\Http\\Authentication\\DefaultAuthenticationSuccessHandler',
            'security.authentication.failure_handler.class' => 'Symfony\\Component\\Security\\Http\\Authentication\\DefaultAuthenticationFailureHandler',
            'security.authentication.simple_success_failure_handler.class' => 'Symfony\\Component\\Security\\Http\\Authentication\\SimpleAuthenticationHandler',
            'security.authentication.provider.rememberme.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\RememberMeAuthenticationProvider',
            'security.authentication.listener.rememberme.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\RememberMeListener',
            'security.rememberme.token.provider.in_memory.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\RememberMe\\InMemoryTokenProvider',
            'security.authentication.rememberme.services.persistent.class' => 'Symfony\\Component\\Security\\Http\\RememberMe\\PersistentTokenBasedRememberMeServices',
            'security.authentication.rememberme.services.simplehash.class' => 'Symfony\\Component\\Security\\Http\\RememberMe\\TokenBasedRememberMeServices',
            'security.rememberme.response_listener.class' => 'Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener',
            'templating.helper.logout_url.class' => 'Symfony\\Bundle\\SecurityBundle\\Templating\\Helper\\LogoutUrlHelper',
            'templating.helper.security.class' => 'Symfony\\Bundle\\SecurityBundle\\Templating\\Helper\\SecurityHelper',
            'twig.extension.logout_url.class' => 'Symfony\\Bridge\\Twig\\Extension\\LogoutUrlExtension',
            'twig.extension.security.class' => 'Symfony\\Bridge\\Twig\\Extension\\SecurityExtension',
            'data_collector.security.class' => 'Symfony\\Bundle\\SecurityBundle\\DataCollector\\SecurityDataCollector',
            'security.access.denied_url' => NULL,
            'security.authentication.manager.erase_credentials' => true,
            'security.authentication.session_strategy.strategy' => 'migrate',
            'security.access.always_authenticate_before_granting' => false,
            'security.authentication.hide_user_not_found' => false,
            'hwi_oauth.resource_ownermap.configured.main' => array(
                'facebook' => '/login/check-facebook',
                'twitter' => '/login/check-twitter',
                'google' => '/login/check-google',
                'linkedin' => '/login/check-linkedin',
                'windows_live' => '/login/check-windows',
                'office_365' => '/login/check-o365',
            ),
            'security.role_hierarchy.roles' => array(

            ),
            'twig.class' => 'Twig_Environment',
            'twig.loader.filesystem.class' => 'Symfony\\Bundle\\TwigBundle\\Loader\\FilesystemLoader',
            'twig.loader.chain.class' => 'Twig_Loader_Chain',
            'templating.engine.twig.class' => 'Symfony\\Bundle\\TwigBundle\\TwigEngine',
            'twig.cache_warmer.class' => 'Symfony\\Bundle\\TwigBundle\\CacheWarmer\\TemplateCacheCacheWarmer',
            'twig.extension.trans.class' => 'Symfony\\Bridge\\Twig\\Extension\\TranslationExtension',
            'twig.extension.actions.class' => 'Symfony\\Bundle\\TwigBundle\\Extension\\ActionsExtension',
            'twig.extension.code.class' => 'Symfony\\Bridge\\Twig\\Extension\\CodeExtension',
            'twig.extension.routing.class' => 'Symfony\\Bridge\\Twig\\Extension\\RoutingExtension',
            'twig.extension.yaml.class' => 'Symfony\\Bridge\\Twig\\Extension\\YamlExtension',
            'twig.extension.form.class' => 'Symfony\\Bridge\\Twig\\Extension\\FormExtension',
            'twig.extension.httpkernel.class' => 'Symfony\\Bridge\\Twig\\Extension\\HttpKernelExtension',
            'twig.extension.debug.stopwatch.class' => 'Symfony\\Bridge\\Twig\\Extension\\StopwatchExtension',
            'twig.extension.expression.class' => 'Symfony\\Bridge\\Twig\\Extension\\ExpressionExtension',
            'twig.form.engine.class' => 'Symfony\\Bridge\\Twig\\Form\\TwigRendererEngine',
            'twig.form.renderer.class' => 'Symfony\\Bridge\\Twig\\Form\\TwigRenderer',
            'twig.translation.extractor.class' => 'Symfony\\Bridge\\Twig\\Translation\\TwigExtractor',
            'twig.exception_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener',
            'twig.controller.preview_error.class' => 'Symfony\\Bundle\\TwigBundle\\Controller\\PreviewErrorController',
            'twig.exception_listener.controller' => 'twig.controller.exception:showAction',
            'twig.form.resources' => array(
                0 => 'GregwarCaptchaBundle::captcha.html.twig',
                1 => 'form_div_layout.html.twig',
                2 => 'IcapBadgeBundle:Form:badge_picker.html.twig',
                3 => 'IcapBlogBundle:Form:fields.html.twig',
                4 => 'ClarolineCoreBundle:Form:date_range.html.twig',
                5 => 'ClarolineCoreBundle:Form:date_time_picker.html.twig',
                6 => 'ClarolineCoreBundle:Form:date_picker.html.twig',
                7 => 'ClarolineCoreBundle:Form:two_level_select.html.twig',
                8 => 'ClarolineCoreBundle:Form:select2.html.twig',
                9 => 'ClarolineCoreBundle:Form:simple_auto_complete.html.twig',
                10 => 'ClarolineCoreBundle:Form:button_group_select.html.twig',
                11 => 'ClarolineCoreBundle:Form:user_picker.html.twig',
                12 => 'ClarolineCoreBundle:Form:resource_picker.html.twig',
                13 => 'ClarolineCoreBundle::form_theme.html.twig',
            ),
            'jms_aop.cache_dir' => (__DIR__.'/jms_aop'),
            'jms_aop.interceptor_loader.class' => 'JMS\\AopBundle\\Aop\\InterceptorLoader',
            'zenstruck_form.theme_options' => array(
                'label_width' => 'col-md-3',
                'control_width' => 'col-md-9',
            ),
            'zenstruck_form.theme_type.class' => 'Zenstruck\\Bundle\\FormBundle\\Form\\Extension\\ThemeTypeExtension',
            'zenstruck_form.ajax_entity_type.class' => 'Zenstruck\\Bundle\\FormBundle\\Form\\Type\\AjaxEntityType',
            'zenstruck_form.ajax_entity_manager.class' => 'Zenstruck\\Bundle\\FormBundle\\Form\\AjaxEntityManager',
            'zenstruck_form.ajax_entity_controller.class' => 'Zenstruck\\Bundle\\FormBundle\\Controller\\AjaxEntityController',
            'bazinga.jstranslation.translation_finder.class' => 'Bazinga\\Bundle\\JsTranslationBundle\\Finder\\TranslationFinder',
            'bazinga.jstranslation.translation_dumper.class' => 'Bazinga\\Bundle\\JsTranslationBundle\\Dumper\\TranslationDumper',
            'bazinga.jstranslation.controller.class' => 'Bazinga\\Bundle\\JsTranslationBundle\\Controller\\Controller',
            'white_october_pagerfanta.default_view' => 'default',
            'white_october_pagerfanta.view_factory.class' => 'Pagerfanta\\View\\ViewFactory',
            'swiftmailer.class' => 'Swift_Mailer',
            'swiftmailer.transport.sendmail.class' => 'Swift_Transport_SendmailTransport',
            'swiftmailer.transport.mail.class' => 'Swift_Transport_MailTransport',
            'swiftmailer.transport.failover.class' => 'Swift_Transport_FailoverTransport',
            'swiftmailer.plugin.redirecting.class' => 'Swift_Plugins_RedirectingPlugin',
            'swiftmailer.plugin.impersonate.class' => 'Swift_Plugins_ImpersonatePlugin',
            'swiftmailer.plugin.messagelogger.class' => 'Swift_Plugins_MessageLogger',
            'swiftmailer.plugin.antiflood.class' => 'Swift_Plugins_AntiFloodPlugin',
            'swiftmailer.transport.smtp.class' => 'Swift_Transport_EsmtpTransport',
            'swiftmailer.plugin.blackhole.class' => 'Swift_Plugins_BlackholePlugin',
            'swiftmailer.spool.file.class' => 'Swift_FileSpool',
            'swiftmailer.spool.memory.class' => 'Swift_MemorySpool',
            'swiftmailer.email_sender.listener.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener',
            'swiftmailer.data_collector.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\DataCollector\\MessageDataCollector',
            'swiftmailer.mailer.default.transport.name' => 'smtp',
            'swiftmailer.mailer.default.delivery.enabled' => true,
            'swiftmailer.mailer.default.transport.smtp.encryption' => NULL,
            'swiftmailer.mailer.default.transport.smtp.port' => 25,
            'swiftmailer.mailer.default.transport.smtp.host' => NULL,
            'swiftmailer.mailer.default.transport.smtp.username' => NULL,
            'swiftmailer.mailer.default.transport.smtp.password' => NULL,
            'swiftmailer.mailer.default.transport.smtp.auth_mode' => NULL,
            'swiftmailer.mailer.default.transport.smtp.timeout' => 30,
            'swiftmailer.mailer.default.transport.smtp.source_ip' => NULL,
            'swiftmailer.mailer.default.transport.smtp.local_domain' => NULL,
            'swiftmailer.mailer.default.spool.enabled' => false,
            'swiftmailer.mailer.default.plugin.impersonate' => NULL,
            'swiftmailer.mailer.default.single_address' => NULL,
            'swiftmailer.spool.enabled' => false,
            'swiftmailer.delivery.enabled' => true,
            'swiftmailer.single_address' => NULL,
            'swiftmailer.mailers' => array(
                'default' => 'swiftmailer.mailer.default',
            ),
            'swiftmailer.default_mailer' => 'default',
            'monolog.logger.class' => 'Symfony\\Bridge\\Monolog\\Logger',
            'monolog.gelf.publisher.class' => 'Gelf\\MessagePublisher',
            'monolog.gelfphp.publisher.class' => 'Gelf\\Publisher',
            'monolog.handler.stream.class' => 'Monolog\\Handler\\StreamHandler',
            'monolog.handler.console.class' => 'Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler',
            'monolog.handler.group.class' => 'Monolog\\Handler\\GroupHandler',
            'monolog.handler.buffer.class' => 'Monolog\\Handler\\BufferHandler',
            'monolog.handler.deduplication.class' => 'Monolog\\Handler\\DeduplicationHandler',
            'monolog.handler.rotating_file.class' => 'Monolog\\Handler\\RotatingFileHandler',
            'monolog.handler.syslog.class' => 'Monolog\\Handler\\SyslogHandler',
            'monolog.handler.syslogudp.class' => 'Monolog\\Handler\\SyslogUdpHandler',
            'monolog.handler.null.class' => 'Monolog\\Handler\\NullHandler',
            'monolog.handler.test.class' => 'Monolog\\Handler\\TestHandler',
            'monolog.handler.gelf.class' => 'Monolog\\Handler\\GelfHandler',
            'monolog.handler.rollbar.class' => 'Monolog\\Handler\\RollbarHandler',
            'monolog.handler.flowdock.class' => 'Monolog\\Handler\\FlowdockHandler',
            'monolog.handler.browser_console.class' => 'Monolog\\Handler\\BrowserConsoleHandler',
            'monolog.handler.firephp.class' => 'Symfony\\Bridge\\Monolog\\Handler\\FirePHPHandler',
            'monolog.handler.chromephp.class' => 'Symfony\\Bridge\\Monolog\\Handler\\ChromePhpHandler',
            'monolog.handler.debug.class' => 'Symfony\\Bridge\\Monolog\\Handler\\DebugHandler',
            'monolog.handler.swift_mailer.class' => 'Symfony\\Bridge\\Monolog\\Handler\\SwiftMailerHandler',
            'monolog.handler.native_mailer.class' => 'Monolog\\Handler\\NativeMailerHandler',
            'monolog.handler.socket.class' => 'Monolog\\Handler\\SocketHandler',
            'monolog.handler.pushover.class' => 'Monolog\\Handler\\PushoverHandler',
            'monolog.handler.raven.class' => 'Monolog\\Handler\\RavenHandler',
            'monolog.handler.newrelic.class' => 'Monolog\\Handler\\NewRelicHandler',
            'monolog.handler.hipchat.class' => 'Monolog\\Handler\\HipChatHandler',
            'monolog.handler.slack.class' => 'Monolog\\Handler\\SlackHandler',
            'monolog.handler.cube.class' => 'Monolog\\Handler\\CubeHandler',
            'monolog.handler.amqp.class' => 'Monolog\\Handler\\AmqpHandler',
            'monolog.handler.error_log.class' => 'Monolog\\Handler\\ErrorLogHandler',
            'monolog.handler.loggly.class' => 'Monolog\\Handler\\LogglyHandler',
            'monolog.handler.logentries.class' => 'Monolog\\Handler\\LogEntriesHandler',
            'monolog.handler.whatfailuregroup.class' => 'Monolog\\Handler\\WhatFailureGroupHandler',
            'monolog.activation_strategy.not_found.class' => 'Symfony\\Bundle\\MonologBundle\\NotFoundActivationStrategy',
            'monolog.handler.fingers_crossed.class' => 'Monolog\\Handler\\FingersCrossedHandler',
            'monolog.handler.fingers_crossed.error_level_activation_strategy.class' => 'Monolog\\Handler\\FingersCrossed\\ErrorLevelActivationStrategy',
            'monolog.handler.filter.class' => 'Monolog\\Handler\\FilterHandler',
            'monolog.handler.mongo.class' => 'Monolog\\Handler\\MongoDBHandler',
            'monolog.mongo.client.class' => 'MongoClient',
            'monolog.handler.elasticsearch.class' => 'Monolog\\Handler\\ElasticSearchHandler',
            'monolog.elastica.client.class' => 'Elastica\\Client',
            'monolog.use_microseconds' => true,
            'monolog.swift_mailer.handlers' => array(

            ),
            'monolog.handlers_to_channels' => array(
                'monolog.handler.main' => NULL,
            ),
            'assetic.asset_factory.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\AssetFactory',
            'assetic.asset_manager.class' => 'Assetic\\Factory\\LazyAssetManager',
            'assetic.asset_manager_cache_warmer.class' => 'Symfony\\Bundle\\AsseticBundle\\CacheWarmer\\AssetManagerCacheWarmer',
            'assetic.cached_formula_loader.class' => 'Assetic\\Factory\\Loader\\CachedFormulaLoader',
            'assetic.config_cache.class' => 'Assetic\\Cache\\ConfigCache',
            'assetic.config_loader.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Loader\\ConfigurationLoader',
            'assetic.config_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\ConfigurationResource',
            'assetic.coalescing_directory_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\CoalescingDirectoryResource',
            'assetic.directory_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\DirectoryResource',
            'assetic.filter_manager.class' => 'Symfony\\Bundle\\AsseticBundle\\FilterManager',
            'assetic.worker.ensure_filter.class' => 'Assetic\\Factory\\Worker\\EnsureFilterWorker',
            'assetic.worker.cache_busting.class' => 'Assetic\\Factory\\Worker\\CacheBustingWorker',
            'assetic.value_supplier.class' => 'Symfony\\Bundle\\AsseticBundle\\DefaultValueSupplier',
            'assetic.node.paths' => array(
                0 => ($this->targetDirs[2].'/../node_modules'),
            ),
            'assetic.cache_dir' => (__DIR__.'/assetic'),
            'assetic.bundles' => array(
                0 => 'FrontEndBundle',
                1 => 'ClarolineInstallationBundle',
                2 => 'ClarolineMigrationBundle',
                3 => 'ClarolineCoreBundle',
                4 => 'ClarolineAgendaBundle',
                5 => 'FormaLibreReservationBundle',
                6 => 'ClarolineImagePlayerBundle',
                7 => 'ClarolineMessageBundle',
                8 => 'ClarolineForumBundle',
                9 => 'ClarolineTagBundle',
                10 => 'FormaLibreSupportBundle',
                11 => 'ClarolineRssReaderBundle',
                12 => 'IcapNotificationBundle',
                13 => 'ClarolineSurveyBundle',
                14 => 'ClarolineAnnouncementBundle',
                15 => 'ClarolineScormBundle',
                16 => 'ClarolinePdfPlayerBundle',
                17 => 'ClarolineCursusBundle',
                18 => 'ClarolineTeamBundle',
                19 => 'ClarolinePdfGeneratorBundle',
                20 => 'FormaLibrePresenceBundle',
                21 => 'ClarolineVideoPlayerBundle',
                22 => 'ClarolineActivityToolBundle',
                23 => 'ClarolineWebResourceBundle',
                24 => 'ClarolineTextPlayerBundle',
                25 => 'InnovaCollecticielBundle',
                26 => 'HeVinciFavouriteBundle',
                27 => 'HeVinciCompetencyBundle',
                28 => 'HeVinciUrlBundle',
                29 => 'IcapPortfolioBundle',
                30 => 'IcapBadgeBundle',
                31 => 'IcapBlogBundle',
                32 => 'IcapDropzoneBundle',
                33 => 'IcapSocialmediaBundle',
                34 => 'IcapWikiBundle',
                35 => 'IcapOAuthBundle',
                36 => 'IcapFormulaPluginBundle',
                37 => 'ClarolineResultBundle',
                38 => 'InnovaPathBundle',
                39 => 'IcapWebsiteBundle',
                40 => 'ClarolineFlashCardBundle',
                41 => 'UJMExoBundle',
                42 => 'IcapLessonBundle',
                43 => 'ClarolineChatBundle',
                44 => 'ClarolineDashboardBundle',
                45 => 'ClarolineClacoFormBundle',
                46 => 'FrameworkBundle',
                47 => 'SecurityBundle',
                48 => 'TwigBundle',
                49 => 'JMSAopBundle',
                50 => 'ZenstruckFormBundle',
                51 => 'BazingaJsTranslationBundle',
                52 => 'WhiteOctoberPagerfantaBundle',
                53 => 'SwiftmailerBundle',
                54 => 'MonologBundle',
                55 => 'AsseticBundle',
                56 => 'StofDoctrineExtensionsBundle',
                57 => 'StfalconTinymceBundle',
                58 => 'SensioFrameworkExtraBundle',
                59 => 'KnpSnappyBundle',
                60 => 'KnpMenuBundle',
                61 => 'JMSTwigJsBundle',
                62 => 'JMSSerializerBundle',
                63 => 'JMSDiExtraBundle',
                64 => 'JMSSecurityExtraBundle',
                65 => 'InnovaAngularJSBundle',
                66 => 'InnovaAngularUITinyMCEBundle',
                67 => 'InnovaAngularUIResourcePickerBundle',
                68 => 'IDCIExporterBundle',
                69 => 'HWIOAuthBundle',
                70 => 'GregwarCaptchaBundle',
                71 => 'FOSRestBundle',
                72 => 'FOSOAuthServerBundle',
                73 => 'FOSJsRoutingBundle',
                74 => 'DoctrineBundle',
                75 => 'BeSimpleSsoAuthBundle',
                76 => 'ClarolineKernelBundle',
            ),
            'assetic.twig_extension.class' => 'Symfony\\Bundle\\AsseticBundle\\Twig\\AsseticExtension',
            'assetic.twig_formula_loader.class' => 'Assetic\\Extension\\Twig\\TwigFormulaLoader',
            'assetic.helper.dynamic.class' => 'Symfony\\Bundle\\AsseticBundle\\Templating\\DynamicAsseticHelper',
            'assetic.helper.static.class' => 'Symfony\\Bundle\\AsseticBundle\\Templating\\StaticAsseticHelper',
            'assetic.php_formula_loader.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Loader\\AsseticHelperFormulaLoader',
            'assetic.debug' => false,
            'assetic.use_controller' => false,
            'assetic.enable_profiler' => false,
            'assetic.read_from' => ($this->targetDirs[2].'/../web'),
            'assetic.write_to' => ($this->targetDirs[2].'/../web'),
            'assetic.variables' => array(
                'locale' => array(
                    0 => 'en',
                    1 => 'fr',
                    2 => 'es',
                    3 => 'nl',
                ),
            ),
            'assetic.java.bin' => '/usr/bin/java',
            'assetic.node.bin' => '/usr/bin/node',
            'assetic.ruby.bin' => '/usr/bin/ruby',
            'assetic.sass.bin' => '/usr/bin/sass',
            'assetic.reactjsx.bin' => '/usr/bin/jsx',
            'assetic.filter.cssrewrite.class' => 'Assetic\\Filter\\CssRewriteFilter',
            'assetic.filter.less.class' => 'Assetic\\Filter\\LessFilter',
            'assetic.filter.less.node' => '/usr/bin/node',
            'assetic.filter.less.node_paths' => array(
                0 => ($this->targetDirs[2].'/../node_modules'),
            ),
            'assetic.filter.less.timeout' => NULL,
            'assetic.filter.less.compress' => NULL,
            'assetic.filter.less.load_paths' => array(

            ),
            'assetic.filter.cssmin.class' => 'Assetic\\Filter\\CssMinFilter',
            'assetic.filter.cssmin.filters' => array(

            ),
            'assetic.filter.cssmin.plugins' => array(

            ),
            'assetic.filter.jsmin.class' => 'Assetic\\Filter\\JSMinFilter',
            'assetic.twig_extension.functions' => array(

            ),
            'stof_doctrine_extensions.event_listener.locale.class' => 'Stof\\DoctrineExtensionsBundle\\EventListener\\LocaleListener',
            'stof_doctrine_extensions.event_listener.logger.class' => 'Stof\\DoctrineExtensionsBundle\\EventListener\\LoggerListener',
            'stof_doctrine_extensions.event_listener.blame.class' => 'Stof\\DoctrineExtensionsBundle\\EventListener\\BlameListener',
            'stof_doctrine_extensions.uploadable.manager.class' => 'Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadableManager',
            'stof_doctrine_extensions.uploadable.mime_type_guesser.class' => 'Stof\\DoctrineExtensionsBundle\\Uploadable\\MimeTypeGuesserAdapter',
            'stof_doctrine_extensions.uploadable.default_file_info.class' => 'Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadedFileInfo',
            'stof_doctrine_extensions.default_locale' => 'en',
            'stof_doctrine_extensions.default_file_path' => NULL,
            'stof_doctrine_extensions.translation_fallback' => false,
            'stof_doctrine_extensions.persist_default_translation' => false,
            'stof_doctrine_extensions.skip_translation_on_load' => false,
            'stof_doctrine_extensions.uploadable.validate_writable_directory' => true,
            'stof_doctrine_extensions.listener.translatable.class' => 'Claroline\\CoreBundle\\Listener\\LocaleListener',
            'stof_doctrine_extensions.listener.timestampable.class' => 'Claroline\\CoreBundle\\Listener\\TimestampableListener',
            'stof_doctrine_extensions.listener.blameable.class' => 'Gedmo\\Blameable\\BlameableListener',
            'stof_doctrine_extensions.listener.sluggable.class' => 'Gedmo\\Sluggable\\SluggableListener',
            'stof_doctrine_extensions.listener.tree.class' => 'Gedmo\\Tree\\TreeListener',
            'stof_doctrine_extensions.listener.loggable.class' => 'Gedmo\\Loggable\\LoggableListener',
            'stof_doctrine_extensions.listener.sortable.class' => 'Gedmo\\Sortable\\SortableListener',
            'stof_doctrine_extensions.listener.softdeleteable.class' => 'Gedmo\\SoftDeleteable\\SoftDeleteableListener',
            'stof_doctrine_extensions.listener.uploadable.class' => 'Gedmo\\Uploadable\\UploadableListener',
            'stof_doctrine_extensions.listener.reference_integrity.class' => 'Gedmo\\ReferenceIntegrity\\ReferenceIntegrityListener',
            'stfalcon_tinymce.config' => array(
                'include_jquery' => false,
                'tinymce_jquery' => true,
                'selector' => '.deprecated-tinymce',
                'use_callback_tinymce_init' => true,
                'external_plugins' => array(
                    'imagemanager' => array(
                        'url' => 'asset[bundles/clarolinecore/js/tinymce/config.js]',
                    ),
                ),
                'tinymce_buttons' => array(
                    'ressourceLinker' => array(
                        'title' => 'Resource Linker',
                        'image' => NULL,
                        'text' => NULL,
                        'icon' => NULL,
                    ),
                    'fullscreenToggle' => array(
                        'title' => 'toggle',
                        'image' => NULL,
                        'text' => NULL,
                        'icon' => NULL,
                    ),
                ),
                'theme' => array(
                    'simple' => array(
                        'theme' => 'modern',
                        'invalid_elements' => '@[onclick|onunload|onclick|ondblclick|onmousedown|onmouseup|onmouseover|onmousemove|onmouseout|onfocus|onblur|onkeypress|onkeydown|onkeyup|onsubmit|onreset|onselect|onchange],script',
                        'menubar' => false,
                        'toolbar1' => 'bold italic underline | ressourceLinker | alignleft aligncenter alignright alignjustify | fullscreenToggle',
                    ),
                    'medium' => array(
                        'theme' => 'modern',
                        'invalid_elements' => '@[onclick|onunload|onclick|ondblclick|onmousedown|onmouseup|onmouseover|onmousemove|onmouseout|onfocus|onblur|onkeypress|onkeydown|onkeyup|onsubmit|onreset|onselect|onchange],script',
                        'plugins' => array(
                            0 => ' -ressourceLinker fullscreen, emoticons code autolink lists link image charmap print preview hr anchor pagebreak',
                            1 => 'searchreplace wordcount visualblocks visualchars  fullscreen',
                            2 => 'insertdatetime media nonbreaking save table contextmenu directionality',
                        ),
                        'menubar' => false,
                        'toolbar1' => 'bold,italic,underline,undo,redo,removeformat cleanup code | ressourceLinker | fullscreenToggle ',
                        'toolbar2' => 'alignleft aligncenter alignright alignjustify | emoticons lists link image charmap print preview hr anchor pagebreak ',
                        'relative_urls' => false,
                    ),
                    'advanced' => array(
                        'theme' => 'modern',
                        'invalid_elements' => '@[onclick|onunload|onclick|ondblclick|onmousedown|onmouseup|onmouseover|onmousemove|onmouseout|onfocus|onblur|onkeypress|onkeydown|onkeyup|onsubmit|onreset|onselect|onchange],script',
                        'plugins' => array(
                            0 => '-ressourceLinker -fullscreenToggle advlist autolink lists link image charmap print preview hr anchor pagebreak',
                            1 => 'searchreplace wordcount visualblocks visualchars code fullscreen',
                            2 => 'insertdatetime media nonbreaking save table contextmenu directionality',
                            3 => 'emoticons template paste textcolor',
                        ),
                        'menubar' => false,
                        'toolbar1' => 'alignleft aligncenter alignright alignjustify | bold italic | link ressourceLinker | preview fullscreenToggle ',
                        'toolbar2' => 'styleselect | forecolor backcolor emoticons | stfalcon | media image charmap | table contextmenu directionality ',
                        'toolbar3' => 'undo redo | hr anchor pagebreak nonbreaking | searchreplace wordcount visualblocks visualchars code | print',
                        'image_advtab' => true,
                    ),
                ),
                'language' => NULL,
            ),
            'stfalcon_tinymce.twig.extension.class' => 'Stfalcon\\Bundle\\TinymceBundle\\Twig\\Extension\\StfalconTinymceExtension',
            'sensio_framework_extra.view.guesser.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Templating\\TemplateGuesser',
            'sensio_framework_extra.controller.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener',
            'sensio_framework_extra.routing.loader.annot_dir.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationDirectoryLoader',
            'sensio_framework_extra.routing.loader.annot_file.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationFileLoader',
            'sensio_framework_extra.routing.loader.annot_class.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Routing\\AnnotatedRouteControllerLoader',
            'sensio_framework_extra.converter.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener',
            'sensio_framework_extra.converter.manager.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\ParamConverterManager',
            'sensio_framework_extra.converter.doctrine.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DoctrineParamConverter',
            'sensio_framework_extra.converter.datetime.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DateTimeParamConverter',
            'knp_snappy.pdf.internal_generator.class' => 'Knp\\Snappy\\Pdf',
            'knp_snappy.pdf.class' => 'Knp\\Bundle\\SnappyBundle\\Snappy\\LoggableGenerator',
            'knp_snappy.pdf.binary' => '/usr/bin/wkhtmltopdf.sh',
            'knp_snappy.pdf.options' => array(

            ),
            'knp_snappy.pdf.env' => array(

            ),
            'knp_snappy.image.internal_generator.class' => 'Knp\\Snappy\\Image',
            'knp_snappy.image.class' => 'Knp\\Bundle\\SnappyBundle\\Snappy\\LoggableGenerator',
            'knp_snappy.image.binary' => 'wkhtmltoimage',
            'knp_snappy.image.options' => array(

            ),
            'knp_snappy.image.env' => array(

            ),
            'knp_menu.factory.class' => 'Knp\\Menu\\MenuFactory',
            'knp_menu.factory_extension.routing.class' => 'Knp\\Menu\\Integration\\Symfony\\RoutingExtension',
            'knp_menu.helper.class' => 'Knp\\Menu\\Twig\\Helper',
            'knp_menu.matcher.class' => 'Knp\\Menu\\Matcher\\Matcher',
            'knp_menu.menu_provider.chain.class' => 'Knp\\Menu\\Provider\\ChainProvider',
            'knp_menu.menu_provider.container_aware.class' => 'Knp\\Bundle\\MenuBundle\\Provider\\ContainerAwareProvider',
            'knp_menu.menu_provider.builder_alias.class' => 'Knp\\Bundle\\MenuBundle\\Provider\\BuilderAliasProvider',
            'knp_menu.renderer_provider.class' => 'Knp\\Bundle\\MenuBundle\\Renderer\\ContainerAwareProvider',
            'knp_menu.renderer.list.class' => 'Knp\\Menu\\Renderer\\ListRenderer',
            'knp_menu.renderer.list.options' => array(

            ),
            'knp_menu.listener.voters.class' => 'Knp\\Bundle\\MenuBundle\\EventListener\\VoterInitializerListener',
            'knp_menu.voter.router.class' => 'Knp\\Menu\\Matcher\\Voter\\RouteVoter',
            'knp_menu.twig.extension.class' => 'Knp\\Menu\\Twig\\MenuExtension',
            'knp_menu.renderer.twig.class' => 'Knp\\Menu\\Renderer\\TwigRenderer',
            'knp_menu.renderer.twig.options' => array(

            ),
            'knp_menu.renderer.twig.template' => 'knp_menu.html.twig',
            'knp_menu.default_renderer' => 'twig',
            'twig_js.compile_request_handler.class' => 'TwigJs\\CompileRequestHandler',
            'twig_js.compiler.class' => 'TwigJs\\JsCompiler',
            'twig_js.assetic_filter.class' => 'TwigJs\\Assetic\\TwigJsFilter',
            'twig_js.twig_js_extension.class' => 'TwigJs\\Twig\\TwigJsExtension',
            'twig_js.filters.trans_compiler.class' => 'JMS\\TwigJsBundle\\TwigJs\\Compiler\\TransFilterCompiler',
            'jms_serializer.metadata.file_locator.class' => 'Metadata\\Driver\\FileLocator',
            'jms_serializer.metadata.annotation_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\AnnotationDriver',
            'jms_serializer.metadata.chain_driver.class' => 'Metadata\\Driver\\DriverChain',
            'jms_serializer.metadata.yaml_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\YamlDriver',
            'jms_serializer.metadata.xml_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\XmlDriver',
            'jms_serializer.metadata.php_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\PhpDriver',
            'jms_serializer.metadata.doctrine_type_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\DoctrineTypeDriver',
            'jms_serializer.metadata.doctrine_phpcr_type_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\DoctrinePHPCRTypeDriver',
            'jms_serializer.metadata.lazy_loading_driver.class' => 'Metadata\\Driver\\LazyLoadingDriver',
            'jms_serializer.metadata.metadata_factory.class' => 'Metadata\\MetadataFactory',
            'jms_serializer.metadata.cache.file_cache.class' => 'Metadata\\Cache\\FileCache',
            'jms_serializer.event_dispatcher.class' => 'JMS\\Serializer\\EventDispatcher\\LazyEventDispatcher',
            'jms_serializer.camel_case_naming_strategy.class' => 'JMS\\Serializer\\Naming\\CamelCaseNamingStrategy',
            'jms_serializer.serialized_name_annotation_strategy.class' => 'JMS\\Serializer\\Naming\\SerializedNameAnnotationStrategy',
            'jms_serializer.cache_naming_strategy.class' => 'JMS\\Serializer\\Naming\\CacheNamingStrategy',
            'jms_serializer.doctrine_object_constructor.class' => 'JMS\\Serializer\\Construction\\DoctrineObjectConstructor',
            'jms_serializer.unserialize_object_constructor.class' => 'JMS\\Serializer\\Construction\\UnserializeObjectConstructor',
            'jms_serializer.version_exclusion_strategy.class' => 'JMS\\Serializer\\Exclusion\\VersionExclusionStrategy',
            'jms_serializer.serializer.class' => 'JMS\\Serializer\\Serializer',
            'jms_serializer.twig_extension.class' => 'JMS\\Serializer\\Twig\\SerializerExtension',
            'jms_serializer.templating.helper.class' => 'JMS\\SerializerBundle\\Templating\\SerializerHelper',
            'jms_serializer.json_serialization_visitor.class' => 'JMS\\Serializer\\JsonSerializationVisitor',
            'jms_serializer.json_serialization_visitor.options' => 0,
            'jms_serializer.json_deserialization_visitor.class' => 'JMS\\Serializer\\JsonDeserializationVisitor',
            'jms_serializer.xml_serialization_visitor.class' => 'JMS\\Serializer\\XmlSerializationVisitor',
            'jms_serializer.xml_deserialization_visitor.class' => 'JMS\\Serializer\\XmlDeserializationVisitor',
            'jms_serializer.xml_deserialization_visitor.doctype_whitelist' => array(

            ),
            'jms_serializer.yaml_serialization_visitor.class' => 'JMS\\Serializer\\YamlSerializationVisitor',
            'jms_serializer.handler_registry.class' => 'JMS\\Serializer\\Handler\\LazyHandlerRegistry',
            'jms_serializer.datetime_handler.class' => 'JMS\\Serializer\\Handler\\DateHandler',
            'jms_serializer.array_collection_handler.class' => 'JMS\\Serializer\\Handler\\ArrayCollectionHandler',
            'jms_serializer.php_collection_handler.class' => 'JMS\\Serializer\\Handler\\PhpCollectionHandler',
            'jms_serializer.form_error_handler.class' => 'JMS\\Serializer\\Handler\\FormErrorHandler',
            'jms_serializer.constraint_violation_handler.class' => 'JMS\\Serializer\\Handler\\ConstraintViolationHandler',
            'jms_serializer.doctrine_proxy_subscriber.class' => 'JMS\\Serializer\\EventDispatcher\\Subscriber\\DoctrineProxySubscriber',
            'jms_serializer.stopwatch_subscriber.class' => 'JMS\\SerializerBundle\\Serializer\\StopwatchEventSubscriber',
            'jms_serializer.infer_types_from_doctrine_metadata' => true,
            'jms_di_extra.metadata.driver.annotation_driver.class' => 'JMS\\DiExtraBundle\\Metadata\\Driver\\AnnotationDriver',
            'jms_di_extra.metadata.driver.configured_controller_injections.class' => 'JMS\\DiExtraBundle\\Metadata\\Driver\\ConfiguredControllerInjectionsDriver',
            'jms_di_extra.metadata.driver.lazy_loading_driver.class' => 'Metadata\\Driver\\LazyLoadingDriver',
            'jms_di_extra.metadata.metadata_factory.class' => 'Metadata\\MetadataFactory',
            'jms_di_extra.metadata.cache.file_cache.class' => 'Metadata\\Cache\\FileCache',
            'jms_di_extra.metadata.converter.class' => 'JMS\\DiExtraBundle\\Metadata\\MetadataConverter',
            'jms_di_extra.controller_resolver.class' => 'JMS\\DiExtraBundle\\HttpKernel\\ControllerResolver',
            'jms_di_extra.controller_injectors_warmer.class' => 'JMS\\DiExtraBundle\\HttpKernel\\ControllerInjectorsWarmer',
            'jms_di_extra.all_bundles' => true,
            'jms_di_extra.bundles' => array(

            ),
            'jms_di_extra.directories' => array(

            ),
            'jms_di_extra.cache_dir' => (__DIR__.'/jms_diextra'),
            'jms_di_extra.disable_grep' => false,
            'jms_di_extra.doctrine_integration' => true,
            'jms_di_extra.cache_warmer.controller_file_blacklist' => array(

            ),
            'jms_di_extra.doctrine_integration.entity_manager.file' => (__DIR__.'/jms_diextra/doctrine/EntityManager_591e162dda016.php'),
            'jms_di_extra.doctrine_integration.entity_manager.class' => 'EntityManager591e162dda016_546a8d27f194334ee012bfe64f629947b07e4919\\__CG__\\Doctrine\\ORM\\EntityManager',
            'security.secured_services' => array(

            ),
            'security.access.method_interceptor.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\Interception\\MethodSecurityInterceptor',
            'security.access.method_access_control' => array(

            ),
            'security.access.remembering_access_decision_manager.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\RememberingAccessDecisionManager',
            'security.access.run_as_manager.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\RunAsManager',
            'security.authentication.provider.run_as.class' => 'JMS\\SecurityExtraBundle\\Security\\Authentication\\Provider\\RunAsAuthenticationProvider',
            'security.run_as.key' => 'RunAsToken',
            'security.run_as.role_prefix' => 'ROLE_',
            'security.access.after_invocation_manager.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\AfterInvocation\\AfterInvocationManager',
            'security.access.after_invocation.acl_provider.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\AfterInvocation\\AclAfterInvocationProvider',
            'security.access.iddqd_voter.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\Voter\\IddqdVoter',
            'security.extra.metadata_factory.class' => 'Metadata\\MetadataFactory',
            'security.extra.lazy_loading_driver.class' => 'Metadata\\Driver\\LazyLoadingDriver',
            'security.extra.driver_chain.class' => 'Metadata\\Driver\\DriverChain',
            'security.extra.annotation_driver.class' => 'JMS\\SecurityExtraBundle\\Metadata\\Driver\\AnnotationDriver',
            'security.extra.file_cache.class' => 'Metadata\\Cache\\FileCache',
            'security.access.secure_all_services' => false,
            'security.extra.cache_dir' => (__DIR__.'/jms_security'),
            'security.acl.permission_evaluator.class' => 'JMS\\SecurityExtraBundle\\Security\\Acl\\Expression\\PermissionEvaluator',
            'security.acl.has_permission_compiler.class' => 'JMS\\SecurityExtraBundle\\Security\\Acl\\Expression\\HasPermissionFunctionCompiler',
            'security.expressions.voter.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\Expression\\LazyLoadingExpressionVoter',
            'security.expressions.handler.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\Expression\\ContainerAwareExpressionHandler',
            'security.expressions.compiler.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\Expression\\ExpressionCompiler',
            'security.expressions.expression.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\Expression\\Expression',
            'security.expressions.variable_compiler.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\Expression\\Compiler\\ContainerAwareVariableCompiler',
            'security.expressions.parameter_compiler.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\Expression\\Compiler\\ParameterExpressionCompiler',
            'security.expressions.reverse_interpreter.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\Expression\\ReverseInterpreter',
            'security.extra.config_driver.class' => 'JMS\\SecurityExtraBundle\\Metadata\\Driver\\ConfigDriver',
            'security.extra.twig_extension.class' => 'JMS\\SecurityExtraBundle\\Twig\\SecurityExtension',
            'security.authenticated_voter.disabled' => false,
            'security.role_voter.disabled' => false,
            'security.acl_voter.disabled' => false,
            'security.extra.iddqd_ignore_roles' => array(
                0 => 'ROLE_PREVIOUS_ADMIN',
            ),
            'security.iddqd_aliases' => array(

            ),
            'exporterconfiguration' => array(
                'entities' => array(
                    'badge' => array(
                        'class' => 'Icap\\BadgeBundle\\Entity\\Badge',
                        'formats' => array(
                            'jsonp' => array(
                                'transformer' => array(
                                    'service' => 'icap.transformer.badge',
                                    'options' => array(
                                        'template_name_format' => 'export.json.twig',
                                    ),
                                ),
                            ),
                        ),
                    ),
                    'user' => array(
                        'class' => 'Claroline\\CoreBundle\\Entity\\User',
                        'formats' => array(
                            'jsonp' => array(
                                'transformer' => array(
                                    'options' => array(
                                        'template_name_format' => 'export.json.twig',
                                    ),
                                    'service' => 'idci_exporter.transformer_twig',
                                ),
                            ),
                        ),
                    ),
                    'group' => array(
                        'class' => 'Claroline\\CoreBundle\\Entity\\Group',
                        'formats' => array(
                            'jsonp' => array(
                                'transformer' => array(
                                    'options' => array(
                                        'template_name_format' => 'export.json.twig',
                                    ),
                                    'service' => 'idci_exporter.transformer_twig',
                                ),
                            ),
                        ),
                    ),
                ),
            ),
            'hwi_oauth.authentication.listener.oauth.class' => 'HWI\\Bundle\\OAuthBundle\\Security\\Http\\Firewall\\OAuthListener',
            'hwi_oauth.authentication.provider.oauth.class' => 'HWI\\Bundle\\OAuthBundle\\Security\\Core\\Authentication\\Provider\\OAuthProvider',
            'hwi_oauth.authentication.entry_point.oauth.class' => 'HWI\\Bundle\\OAuthBundle\\Security\\Http\\EntryPoint\\OAuthEntryPoint',
            'hwi_oauth.user.provider.class' => 'HWI\\Bundle\\OAuthBundle\\Security\\Core\\User\\OAuthUserProvider',
            'hwi_oauth.user.provider.entity.class' => 'HWI\\Bundle\\OAuthBundle\\Security\\Core\\User\\EntityUserProvider',
            'hwi_oauth.user.provider.fosub_bridge.class' => 'HWI\\Bundle\\OAuthBundle\\Security\\Core\\User\\FOSUBUserProvider',
            'hwi_oauth.registration.form.handler.fosub_bridge.class' => 'HWI\\Bundle\\OAuthBundle\\Form\\FOSUBRegistrationFormHandler',
            'hwi_oauth.resource_owner.oauth1.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\GenericOAuth1ResourceOwner',
            'hwi_oauth.resource_owner.oauth2.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\GenericOAuth2ResourceOwner',
            'hwi_oauth.resource_owner.amazon.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\AmazonResourceOwner',
            'hwi_oauth.resource_owner.asana.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\AsanaResourceOwner',
            'hwi_oauth.resource_owner.auth0.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\Auth0ResourceOwner',
            'hwi_oauth.resource_owner.azure.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\AzureResourceOwner',
            'hwi_oauth.resource_owner.bitbucket.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\BitbucketResourceOwner',
            'hwi_oauth.resource_owner.bitbucket2.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\Bitbucket2ResourceOwner',
            'hwi_oauth.resource_owner.bitly.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\BitlyResourceOwner',
            'hwi_oauth.resource_owner.box.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\BoxResourceOwner',
            'hwi_oauth.resource_owner.bufferapp.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\BufferAppResourceOwner',
            'hwi_oauth.resource_owner.clever.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\CleverResourceOwner',
            'hwi_oauth.resource_owner.dailymotion.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DailymotionResourceOwner',
            'hwi_oauth.resource_owner.deviantart.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DeviantartResourceOwner',
            'hwi_oauth.resource_owner.deezer.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DeezerResourceOwner',
            'hwi_oauth.resource_owner.discogs.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DiscogsResourceOwner',
            'hwi_oauth.resource_owner.disqus.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DisqusResourceOwner',
            'hwi_oauth.resource_owner.dropbox.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DropboxResourceOwner',
            'hwi_oauth.resource_owner.eve_online.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\EveOnlineResourceOwner',
            'hwi_oauth.resource_owner.eventbrite.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\EventbriteResourceOwner',
            'hwi_oauth.resource_owner.facebook.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\FacebookResourceOwner',
            'hwi_oauth.resource_owner.fiware.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\FiwareResourceOwner',
            'hwi_oauth.resource_owner.flickr.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\FlickrResourceOwner',
            'hwi_oauth.resource_owner.foursquare.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\FoursquareResourceOwner',
            'hwi_oauth.resource_owner.github.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\GitHubResourceOwner',
            'hwi_oauth.resource_owner.google.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\GoogleResourceOwner',
            'hwi_oauth.resource_owner.youtube.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\YoutubeResourceOwner',
            'hwi_oauth.resource_owner.hubic.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\HubicResourceOwner',
            'hwi_oauth.resource_owner.instagram.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\InstagramResourceOwner',
            'hwi_oauth.resource_owner.jawbone.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\JawboneResourceOwner',
            'hwi_oauth.resource_owner.jira.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\JiraResourceOwner',
            'hwi_oauth.resource_owner.linkedin.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\LinkedinResourceOwner',
            'hwi_oauth.resource_owner.mailru.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\MailRuResourceOwner',
            'hwi_oauth.resource_owner.office365.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\Office365ResourceOwner',
            'hwi_oauth.resource_owner.paypal.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\PaypalResourceOwner',
            'hwi_oauth.resource_owner.qq.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\QQResourceOwner',
            'hwi_oauth.resource_owner.reddit.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\RedditResourceOwner',
            'hwi_oauth.resource_owner.runkeeper.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\RunKeeperResourceOwner',
            'hwi_oauth.resource_owner.salesforce.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SalesforceResourceOwner',
            'hwi_oauth.resource_owner.sensio_connect.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SensioConnectResourceOwner',
            'hwi_oauth.resource_owner.sina_weibo.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SinaWeiboResourceOwner',
            'hwi_oauth.resource_owner.slack.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SlackResourceOwner',
            'hwi_oauth.resource_owner.spotify.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SpotifyResourceOwner',
            'hwi_oauth.resource_owner.soundcloud.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SoundcloudResourceOwner',
            'hwi_oauth.resource_owner.stack_exchange.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\StackExchangeResourceOwner',
            'hwi_oauth.resource_owner.stereomood.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\StereomoodResourceOwner',
            'hwi_oauth.resource_owner.strava.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\StravaResourceOwner',
            'hwi_oauth.resource_owner.toshl.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\ToshlResourceOwner',
            'hwi_oauth.resource_owner.trakt.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\TraktResourceOwner',
            'hwi_oauth.resource_owner.trello.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\TrelloResourceOwner',
            'hwi_oauth.resource_owner.twitch.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\TwitchResourceOwner',
            'hwi_oauth.resource_owner.twitter.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\TwitterResourceOwner',
            'hwi_oauth.resource_owner.vkontakte.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\VkontakteResourceOwner',
            'hwi_oauth.resource_owner.wechat.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\WechatResourceOwner',
            'hwi_oauth.resource_owner.windows_live.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\WindowsLiveResourceOwner',
            'hwi_oauth.resource_owner.wordpress.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\WordpressResourceOwner',
            'hwi_oauth.resource_owner.wunderlist.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\WunderlistResourceOwner',
            'hwi_oauth.resource_owner.xing.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\XingResourceOwner',
            'hwi_oauth.resource_owner.yahoo.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\YahooResourceOwner',
            'hwi_oauth.resource_owner.yandex.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\YandexResourceOwner',
            'hwi_oauth.resource_owner.odnoklassniki.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\OdnoklassnikiResourceOwner',
            'hwi_oauth.resource_owner.37signals.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\ThirtySevenSignalsResourceOwner',
            'hwi_oauth.resource_owner.itembase.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\ItembaseResourceOwner',
            'hwi_oauth.resource_ownermap.class' => 'HWI\\Bundle\\OAuthBundle\\Security\\Http\\ResourceOwnerMap',
            'hwi_oauth.security.oauth_utils.class' => 'HWI\\Bundle\\OAuthBundle\\Security\\OAuthUtils',
            'hwi_oauth.storage.session.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\RequestDataStorage\\SessionStorage',
            'hwi_oauth.templating.helper.oauth.class' => 'HWI\\Bundle\\OAuthBundle\\Templating\\Helper\\OAuthHelper',
            'hwi_oauth.twig.extension.oauth.class' => 'HWI\\Bundle\\OAuthBundle\\Twig\\Extension\\OAuthExtension',
            'hwi_oauth.http_client.class' => 'Buzz\\Client\\Curl',
            'hwi_oauth.firewall_names' => array(
                0 => 'main',
            ),
            'hwi_oauth.target_path_parameter' => NULL,
            'hwi_oauth.use_referer' => false,
            'hwi_oauth.failed_auth_path' => 'hwi_oauth_connect',
            'hwi_oauth.resource_owners' => array(
                'facebook' => 'facebook',
                'twitter' => 'twitter',
                'google' => 'google',
                'linkedin' => 'linkedin',
                'windows_live' => 'windows_live',
                'office_365' => 'office_365',
            ),
            'hwi_oauth.fosub_enabled' => false,
            'hwi_oauth.connect' => false,
            'hwi_oauth.templating.engine' => 'twig',
            'gregwar_captcha.captcha_type.class' => 'Gregwar\\CaptchaBundle\\Type\\CaptchaType',
            'gregwar_captcha.captcha_generator.class' => 'Gregwar\\CaptchaBundle\\Generator\\CaptchaGenerator',
            'gregwar_captcha.image_file_handler.class' => 'Gregwar\\CaptchaBundle\\Generator\\ImageFileHandler',
            'gregwar_captcha.captcha_builder.class' => 'Gregwar\\Captcha\\CaptchaBuilder',
            'gregwar_captcha.phrase_builder.class' => 'Gregwar\\Captcha\\PhraseBuilder',
            'gregwar_captcha.config' => array(
                'length' => 5,
                'width' => 130,
                'height' => 50,
                'font' => ($this->targetDirs[3].'/vendor/gregwar/captcha-bundle/Gregwar/CaptchaBundle/DependencyInjection/../Generator/Font/captcha.ttf'),
                'keep_value' => false,
                'charset' => 'abcdefhjkmnprstuvwxyz23456789',
                'as_file' => false,
                'as_url' => false,
                'reload' => false,
                'image_folder' => 'captcha',
                'web_path' => ($this->targetDirs[2].'/../web'),
                'gc_freq' => 100,
                'expiration' => 60,
                'quality' => 30,
                'invalid_message' => 'Bad code value',
                'bypass_code' => NULL,
                'whitelist_key' => 'captcha_whitelist_key',
                'humanity' => 0,
                'distortion' => true,
                'max_front_lines' => NULL,
                'max_behind_lines' => NULL,
                'interpolation' => true,
                'text_color' => array(

                ),
                'background_color' => array(

                ),
                'disabled' => false,
            ),
            'gregwar_captcha.config.image_folder' => 'captcha',
            'gregwar_captcha.config.web_path' => ($this->targetDirs[2].'/../web'),
            'gregwar_captcha.config.gc_freq' => 100,
            'gregwar_captcha.config.expiration' => 60,
            'gregwar_captcha.config.whitelist_key' => 'captcha_whitelist_key',
            'fos_rest.serializer.exclusion_strategy.version' => '',
            'fos_rest.serializer.exclusion_strategy.groups' => array(

            ),
            'fos_rest.view_handler.jsonp.callback_param' => '',
            'fos_rest.view.exception_wrapper_handler' => 'FOS\\RestBundle\\View\\ExceptionWrapperHandler',
            'fos_rest.view_handler.jsonp.class' => 'FOS\\RestBundle\\View\\JsonpHandler',
            'fos_rest.serializer.exception_wrapper_serialize_handler.class' => 'FOS\\RestBundle\\Serializer\\ExceptionWrapperSerializeHandler',
            'fos_rest.routing.loader.controller.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestRouteLoader',
            'fos_rest.routing.loader.yaml_collection.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestYamlCollectionLoader',
            'fos_rest.routing.loader.xml_collection.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestXmlCollectionLoader',
            'fos_rest.routing.loader.processor.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestRouteProcessor',
            'fos_rest.routing.loader.reader.controller.class' => 'FOS\\RestBundle\\Routing\\Loader\\Reader\\RestControllerReader',
            'fos_rest.routing.loader.reader.action.class' => 'FOS\\RestBundle\\Routing\\Loader\\Reader\\RestActionReader',
            'fos_rest.format_negotiator.class' => 'FOS\\RestBundle\\Util\\FormatNegotiator',
            'fos_rest.inflector.class' => 'FOS\\RestBundle\\Util\\Inflector\\DoctrineInflector',
            'fos_rest.request_matcher.class' => 'Symfony\\Component\\HttpFoundation\\RequestMatcher',
            'fos_rest.violation_formatter.class' => 'FOS\\RestBundle\\Util\\ViolationFormatter',
            'fos_rest.request.param_fetcher.class' => 'FOS\\RestBundle\\Request\\ParamFetcher',
            'fos_rest.request.param_fetcher.reader.class' => 'FOS\\RestBundle\\Request\\ParamReader',
            'fos_rest.cache_dir' => (__DIR__.'/fos_rest'),
            'fos_rest.routing.loader.default_format' => NULL,
            'fos_rest.routing.loader.include_format' => true,
            'fos_rest.form.extension.csrf_disable.class' => 'FOS\\RestBundle\\Form\\Extension\\DisableCSRFExtension',
            'fos_rest.disable_csrf_role' => 'ROLE_API',
            'fos_rest.serializer.serialize_null' => false,
            'fos_rest.exception.codes' => array(

            ),
            'fos_rest.exception.messages' => array(

            ),
            'fos_rest.converter.request_body.class' => 'FOS\\RestBundle\\Request\\RequestBodyParamConverter',
            'fos_rest.converter.request_body.validation_errors_argument' => 'validationErrors',
            'fos_rest.mime_type_listener.class' => 'FOS\\RestBundle\\EventListener\\MimeTypeListener',
            'fos_rest.mime_types' => array(
                'enabled' => true,
                'formats' => array(
                    'csv' => array(
                        0 => 'text/plain',
                        1 => 'text/csv',
                    ),
                    'xls' => array(
                        0 => 'text/plain',
                        1 => 'application/excel',
                    ),
                ),
                'service' => NULL,
            ),
            'fos_rest.view_response_listener.class' => 'FOS\\RestBundle\\EventListener\\ViewResponseListener',
            'fos_rest.view_response_listener.force_view' => true,
            'fos_rest.formats' => array(
                'json' => false,
                'xml' => false,
                'csv' => false,
                'xls' => false,
                'html' => true,
            ),
            'fos_rest.force_redirects' => array(
                'html' => 302,
            ),
            'fos_rest.failed_validation' => 400,
            'fos_rest.empty_content' => 204,
            'fos_rest.serialize_null' => false,
            'fos_rest.default_engine' => 'twig',
            'fos_rest.normalizer.camel_keys.class' => 'FOS\\RestBundle\\Normalizer\\CamelKeysNormalizer',
            'fos_rest.decoder.json.class' => 'FOS\\RestBundle\\Decoder\\JsonDecoder',
            'fos_rest.decoder.jsontoform.class' => 'FOS\\RestBundle\\Decoder\\JsonToFormDecoder',
            'fos_rest.decoder.xml.class' => 'FOS\\RestBundle\\Decoder\\XmlDecoder',
            'fos_rest.decoder_provider.class' => 'FOS\\RestBundle\\Decoder\\ContainerDecoderProvider',
            'fos_rest.body_listener.class' => 'FOS\\RestBundle\\EventListener\\BodyListener',
            'fos_rest.throw_exception_on_unsupported_content_type' => false,
            'fos_rest.body_default_format' => NULL,
            'fos_rest.decoders' => array(
                'json' => 'fos_rest.decoder.json',
                'xml' => 'fos_rest.decoder.xml',
            ),
            'fos_rest.param_fetcher_listener.class' => 'FOS\\RestBundle\\EventListener\\ParamFetcherListener',
            'fos_rest.param_fetcher_listener.set_params_as_attributes' => false,
            'fos_oauth_server.server.class' => 'OAuth2\\OAuth2',
            'fos_oauth_server.security.authentication.provider.class' => 'FOS\\OAuthServerBundle\\Security\\Authentication\\Provider\\OAuthProvider',
            'fos_oauth_server.security.authentication.listener.class' => 'FOS\\OAuthServerBundle\\Security\\Firewall\\OAuthListener',
            'fos_oauth_server.security.entry_point.class' => 'FOS\\OAuthServerBundle\\Security\\EntryPoint\\OAuthEntryPoint',
            'fos_oauth_server.server.options' => array(
                'access_token_lifetime' => 3600,
                'refresh_token_lifetime' => 1209600,
                'auth_code_lifetime' => 30,
                'supported_scopes' => 'user admin',
            ),
            'fos_oauth_server.model_manager_name' => NULL,
            'fos_oauth_server.model.client.class' => 'Claroline\\CoreBundle\\Entity\\Oauth\\Client',
            'fos_oauth_server.model.access_token.class' => 'Claroline\\CoreBundle\\Entity\\Oauth\\AccessToken',
            'fos_oauth_server.model.refresh_token.class' => 'Claroline\\CoreBundle\\Entity\\Oauth\\RefreshToken',
            'fos_oauth_server.model.auth_code.class' => 'Claroline\\CoreBundle\\Entity\\Oauth\\AuthCode',
            'fos_oauth_server.template.engine' => 'twig',
            'fos_oauth_server.authorize.form.type' => 'fos_oauth_server_authorize',
            'fos_oauth_server.authorize.form.name' => 'fos_oauth_server_authorize_form',
            'fos_oauth_server.authorize.form.validation_groups' => array(
                0 => 'Authorize',
                1 => 'Default',
            ),
            'fos_js_routing.extractor.class' => 'FOS\\JsRoutingBundle\\Extractor\\ExposedRoutesExtractor',
            'fos_js_routing.controller.class' => 'FOS\\JsRoutingBundle\\Controller\\Controller',
            'fos_js_routing.cache_control' => array(
                'enabled' => false,
            ),
            'doctrine_cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine_cache.apcu.class' => 'Doctrine\\Common\\Cache\\ApcuCache',
            'doctrine_cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine_cache.chain.class' => 'Doctrine\\Common\\Cache\\ChainCache',
            'doctrine_cache.couchbase.class' => 'Doctrine\\Common\\Cache\\CouchbaseCache',
            'doctrine_cache.couchbase.connection.class' => 'Couchbase',
            'doctrine_cache.couchbase.hostnames' => 'localhost:8091',
            'doctrine_cache.file_system.class' => 'Doctrine\\Common\\Cache\\FilesystemCache',
            'doctrine_cache.php_file.class' => 'Doctrine\\Common\\Cache\\PhpFileCache',
            'doctrine_cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine_cache.memcache.connection.class' => 'Memcache',
            'doctrine_cache.memcache.host' => 'localhost',
            'doctrine_cache.memcache.port' => 11211,
            'doctrine_cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine_cache.memcached.connection.class' => 'Memcached',
            'doctrine_cache.memcached.host' => 'localhost',
            'doctrine_cache.memcached.port' => 11211,
            'doctrine_cache.mongodb.class' => 'Doctrine\\Common\\Cache\\MongoDBCache',
            'doctrine_cache.mongodb.collection.class' => 'MongoCollection',
            'doctrine_cache.mongodb.connection.class' => 'MongoClient',
            'doctrine_cache.mongodb.server' => 'localhost:27017',
            'doctrine_cache.predis.client.class' => 'Predis\\Client',
            'doctrine_cache.predis.scheme' => 'tcp',
            'doctrine_cache.predis.host' => 'localhost',
            'doctrine_cache.predis.port' => 6379,
            'doctrine_cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine_cache.redis.connection.class' => 'Redis',
            'doctrine_cache.redis.host' => 'localhost',
            'doctrine_cache.redis.port' => 6379,
            'doctrine_cache.riak.class' => 'Doctrine\\Common\\Cache\\RiakCache',
            'doctrine_cache.riak.bucket.class' => 'Riak\\Bucket',
            'doctrine_cache.riak.connection.class' => 'Riak\\Connection',
            'doctrine_cache.riak.bucket_property_list.class' => 'Riak\\BucketPropertyList',
            'doctrine_cache.riak.host' => 'localhost',
            'doctrine_cache.riak.port' => 8087,
            'doctrine_cache.sqlite3.class' => 'Doctrine\\Common\\Cache\\SQLite3Cache',
            'doctrine_cache.sqlite3.connection.class' => 'SQLite3',
            'doctrine_cache.void.class' => 'Doctrine\\Common\\Cache\\VoidCache',
            'doctrine_cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine_cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine_cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine_cache.security.acl.cache.class' => 'Doctrine\\Bundle\\DoctrineCacheBundle\\Acl\\Model\\AclCache',
            'doctrine.dbal.logger.chain.class' => 'Doctrine\\DBAL\\Logging\\LoggerChain',
            'doctrine.dbal.logger.profiling.class' => 'Doctrine\\DBAL\\Logging\\DebugStack',
            'doctrine.dbal.logger.class' => 'Symfony\\Bridge\\Doctrine\\Logger\\DbalLogger',
            'doctrine.dbal.configuration.class' => 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' => 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' => array(
                'default' => 'doctrine.orm.default_entity_manager',
            ),
            'doctrine.default_entity_manager' => 'default',
            'doctrine.dbal.connection_factory.types' => array(

            ),
            'doctrine.connections' => array(
                'default' => 'doctrine.dbal.default_connection',
            ),
            'doctrine.default_connection' => 'default',
            'doctrine.orm.configuration.class' => 'Doctrine\\ORM\\Configuration',
            'doctrine.orm.entity_manager.class' => 'Doctrine\\ORM\\EntityManager',
            'doctrine.orm.manager_configurator.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ManagerConfigurator',
            'doctrine.orm.cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine.orm.cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine.orm.cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine.orm.cache.memcache_host' => 'localhost',
            'doctrine.orm.cache.memcache_port' => 11211,
            'doctrine.orm.cache.memcache_instance.class' => 'Memcache',
            'doctrine.orm.cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine.orm.cache.memcached_host' => 'localhost',
            'doctrine.orm.cache.memcached_port' => 11211,
            'doctrine.orm.cache.memcached_instance.class' => 'Memcached',
            'doctrine.orm.cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine.orm.cache.redis_host' => 'localhost',
            'doctrine.orm.cache.redis_port' => 6379,
            'doctrine.orm.cache.redis_instance.class' => 'Redis',
            'doctrine.orm.cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine.orm.cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine.orm.cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine.orm.metadata.driver_chain.class' => 'Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain',
            'doctrine.orm.metadata.annotation.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver',
            'doctrine.orm.metadata.xml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver',
            'doctrine.orm.metadata.yml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedYamlDriver',
            'doctrine.orm.metadata.php.class' => 'Doctrine\\ORM\\Mapping\\Driver\\PHPDriver',
            'doctrine.orm.metadata.staticphp.class' => 'Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine.orm.proxy_cache_warmer.class' => 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'form.type_guesser.doctrine.class' => 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser',
            'doctrine.orm.validator.unique.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator',
            'doctrine.orm.validator_initializer.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\DoctrineInitializer',
            'doctrine.orm.security.user.provider.class' => 'Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider',
            'doctrine.orm.listeners.resolve_target_entity.class' => 'Doctrine\\ORM\\Tools\\ResolveTargetEntityListener',
            'doctrine.orm.listeners.attach_entity_listeners.class' => 'Doctrine\\ORM\\Tools\\AttachEntityListenersListener',
            'doctrine.orm.naming_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultNamingStrategy',
            'doctrine.orm.naming_strategy.underscore.class' => 'Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy',
            'doctrine.orm.quote_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy',
            'doctrine.orm.quote_strategy.ansi.class' => 'Doctrine\\ORM\\Mapping\\AnsiQuoteStrategy',
            'doctrine.orm.entity_listener_resolver.class' => 'Doctrine\\ORM\\Mapping\\DefaultEntityListenerResolver',
            'doctrine.orm.second_level_cache.default_cache_factory.class' => 'Doctrine\\ORM\\Cache\\DefaultCacheFactory',
            'doctrine.orm.second_level_cache.default_region.class' => 'Doctrine\\ORM\\Cache\\Region\\DefaultRegion',
            'doctrine.orm.second_level_cache.filelock_region.class' => 'Doctrine\\ORM\\Cache\\Region\\FileLockRegion',
            'doctrine.orm.second_level_cache.logger_chain.class' => 'Doctrine\\ORM\\Cache\\Logging\\CacheLoggerChain',
            'doctrine.orm.second_level_cache.logger_statistics.class' => 'Doctrine\\ORM\\Cache\\Logging\\StatisticsCacheLogger',
            'doctrine.orm.second_level_cache.cache_configuration.class' => 'Doctrine\\ORM\\Cache\\CacheConfiguration',
            'doctrine.orm.second_level_cache.regions_configuration.class' => 'Doctrine\\ORM\\Cache\\RegionsConfiguration',
            'doctrine.orm.auto_generate_proxy_classes' => false,
            'doctrine.orm.proxy_dir' => (__DIR__.'/doctrine/orm/Proxies'),
            'doctrine.orm.proxy_namespace' => 'Proxies',
            'be_simple.sso_auth.manager.admin_sso' => array(
                'protocol' => array(
                    'id' => 'cas',
                    'version' => 2,
                ),
                'server' => array(
                    'id' => 'cas',
                    'login_url' => 'http://cas.server.tld/login',
                    'logout_url' => 'http://cas.server.tld/logout',
                    'validation_url' => 'http://cas.server.tld/serviceValidate',
                ),
            ),
            'security.authentication.trusted_sso_entry_point.class' => 'BeSimple\\SsoAuthBundle\\Security\\Http\\EntryPoint\\TrustedSsoAuthenticationEntryPoint',
            'security.authentication.provider.sso.class' => 'BeSimple\\SsoAuthBundle\\Security\\Core\\Authentication\\Provider\\SsoAuthenticationProvider',
            'security.authentication.listener.trusted_sso.class' => 'BeSimple\\SsoAuthBundle\\Security\\Http\\Firewall\\TrustedSsoAuthenticationListener',
            'security.logout.handler.sso.class' => 'BeSimple\\SsoAuthBundle\\Security\\Http\\Logout\\SsoLogoutHandler',
            'security.logout.sso_success_handler.class' => 'BeSimple\\SsoAuthBundle\\Security\\Http\\Logout\\SsoLogoutSuccessHandler',
            'security.authentication.sso_authentication_failure_handler.class' => 'BeSimple\\SsoAuthBundle\\Security\\Http\\Authentication\\SsoAuthenticationFailureHandler',
            'be_simple.sso_auth.factory.class' => 'BeSimple\\SsoAuthBundle\\Sso\\Factory',
            'be_simple.sso_auth.client.class' => 'BeSimple\\SsoAuthBundle\\Buzz\\AdaptiveClient',
            'be_simple.sso_auth.client.option.curlopt_ssl_verifypeer.key' => 64,
            'be_simple.sso_auth.client.option.curlopt_ssl_verifypeer.value' => true,
            'be_simple.sso_auth.client.option.curlopt_sslversion.key' => 32,
            'be_simple.sso_auth.client.option.curlopt_sslversion.value' => 3,
            'be_simple.sso_auth.client.option.curlopt_proxy.key' => 10004,
            'be_simple.sso_auth.client.option.curlopt_proxy.value' => '',
            'be_simple.sso_auth.protocol.cas.class' => 'BeSimple\\SsoAuthBundle\\Sso\\Cas\\Protocol',
            'be_simple.sso_auth.server.cas.class' => 'BeSimple\\SsoAuthBundle\\Sso\\Cas\\Server',
            'claroline.installation_loader.class' => 'Claroline\\KernelBundle\\Routing\\DynamicLoader',
            'console.command.ids' => array(

            ),
        );
    }
}

class DoctrineORMEntityManager_0000000033fa95a800007fa9d9c5b13af7de70189aa1810cbaa903f964bacb71 extends \Doctrine\ORM\EntityManager implements \ProxyManager\Proxy\VirtualProxyInterface
{
    private $valueHolder591e16395f927959751162 = null;
    private $initializer591e16395f955623208339 = null;
    private static $publicProperties591e16395f8bd373762192 = array(
        
    );
    public function getConnection()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'getConnection', array(), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->getConnection();
    }
    public function getMetadataFactory()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'getMetadataFactory', array(), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->getMetadataFactory();
    }
    public function getExpressionBuilder()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'getExpressionBuilder', array(), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->getExpressionBuilder();
    }
    public function beginTransaction()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'beginTransaction', array(), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->beginTransaction();
    }
    public function getCache()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'getCache', array(), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->getCache();
    }
    public function transactional($func)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'transactional', array('func' => $func), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->transactional($func);
    }
    public function commit()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'commit', array(), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->commit();
    }
    public function rollback()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'rollback', array(), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->rollback();
    }
    public function getClassMetadata($className)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'getClassMetadata', array('className' => $className), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->getClassMetadata($className);
    }
    public function createQuery($dql = '')
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'createQuery', array('dql' => $dql), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->createQuery($dql);
    }
    public function createNamedQuery($name)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'createNamedQuery', array('name' => $name), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->createNamedQuery($name);
    }
    public function createNativeQuery($sql, \Doctrine\ORM\Query\ResultSetMapping $rsm)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'createNativeQuery', array('sql' => $sql, 'rsm' => $rsm), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->createNativeQuery($sql, $rsm);
    }
    public function createNamedNativeQuery($name)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'createNamedNativeQuery', array('name' => $name), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->createNamedNativeQuery($name);
    }
    public function createQueryBuilder()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'createQueryBuilder', array(), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->createQueryBuilder();
    }
    public function flush($entity = null)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'flush', array('entity' => $entity), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->flush($entity);
    }
    public function find($entityName, $id, $lockMode = null, $lockVersion = null)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'find', array('entityName' => $entityName, 'id' => $id, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->find($entityName, $id, $lockMode, $lockVersion);
    }
    public function getReference($entityName, $id)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'getReference', array('entityName' => $entityName, 'id' => $id), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->getReference($entityName, $id);
    }
    public function getPartialReference($entityName, $identifier)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'getPartialReference', array('entityName' => $entityName, 'identifier' => $identifier), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->getPartialReference($entityName, $identifier);
    }
    public function clear($entityName = null)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'clear', array('entityName' => $entityName), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->clear($entityName);
    }
    public function close()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'close', array(), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->close();
    }
    public function persist($entity)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'persist', array('entity' => $entity), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->persist($entity);
    }
    public function remove($entity)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'remove', array('entity' => $entity), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->remove($entity);
    }
    public function refresh($entity)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'refresh', array('entity' => $entity), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->refresh($entity);
    }
    public function detach($entity)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'detach', array('entity' => $entity), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->detach($entity);
    }
    public function merge($entity)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'merge', array('entity' => $entity), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->merge($entity);
    }
    public function copy($entity, $deep = false)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'copy', array('entity' => $entity, 'deep' => $deep), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->copy($entity, $deep);
    }
    public function lock($entity, $lockMode, $lockVersion = null)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'lock', array('entity' => $entity, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->lock($entity, $lockMode, $lockVersion);
    }
    public function getRepository($entityName)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'getRepository', array('entityName' => $entityName), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->getRepository($entityName);
    }
    public function contains($entity)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'contains', array('entity' => $entity), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->contains($entity);
    }
    public function getEventManager()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'getEventManager', array(), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->getEventManager();
    }
    public function getConfiguration()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'getConfiguration', array(), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->getConfiguration();
    }
    public function isOpen()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'isOpen', array(), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->isOpen();
    }
    public function getUnitOfWork()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'getUnitOfWork', array(), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->getUnitOfWork();
    }
    public function getHydrator($hydrationMode)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'getHydrator', array('hydrationMode' => $hydrationMode), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->getHydrator($hydrationMode);
    }
    public function newHydrator($hydrationMode)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'newHydrator', array('hydrationMode' => $hydrationMode), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->newHydrator($hydrationMode);
    }
    public function getProxyFactory()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'getProxyFactory', array(), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->getProxyFactory();
    }
    public function initializeObject($obj)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'initializeObject', array('obj' => $obj), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->initializeObject($obj);
    }
    public function getFilters()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'getFilters', array(), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->getFilters();
    }
    public function isFiltersStateClean()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'isFiltersStateClean', array(), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->isFiltersStateClean();
    }
    public function hasFilters()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'hasFilters', array(), $this->initializer591e16395f955623208339);
        return $this->valueHolder591e16395f927959751162->hasFilters();
    }
    public function __construct($initializer)
    {
        $this->initializer591e16395f955623208339 = $initializer;
    }
    public function & __get($name)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, '__get', array('name' => $name), $this->initializer591e16395f955623208339);
        if (isset(self::$publicProperties591e16395f8bd373762192[$name])) {
            return $this->valueHolder591e16395f927959751162->$name;
        }
        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));
        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder591e16395f927959751162;
            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }
        $targetObject = $this->valueHolder591e16395f927959751162;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();
        return $returnValue;
    }
    public function __set($name, $value)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer591e16395f955623208339);
        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));
        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder591e16395f927959751162;
            return $targetObject->$name = $value;;
            return;
        }
        $targetObject = $this->valueHolder591e16395f927959751162;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();
        return $returnValue;
    }
    public function __isset($name)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, '__isset', array('name' => $name), $this->initializer591e16395f955623208339);
        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));
        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder591e16395f927959751162;
            return isset($targetObject->$name);;
            return;
        }
        $targetObject = $this->valueHolder591e16395f927959751162;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();
        return $returnValue;
    }
    public function __unset($name)
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, '__unset', array('name' => $name), $this->initializer591e16395f955623208339);
        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));
        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder591e16395f927959751162;
            unset($targetObject->$name);;
            return;
        }
        $targetObject = $this->valueHolder591e16395f927959751162;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();
        return $returnValue;
    }
    public function __clone()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, '__clone', array(), $this->initializer591e16395f955623208339);
        $this->valueHolder591e16395f927959751162 = clone $this->valueHolder591e16395f927959751162;
    }
    public function __sleep()
    {
        $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, '__sleep', array(), $this->initializer591e16395f955623208339);
        return array('valueHolder591e16395f927959751162');
    }
    public function __wakeup()
    {
    }
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer591e16395f955623208339 = $initializer;
    }
    public function getProxyInitializer()
    {
        return $this->initializer591e16395f955623208339;
    }
    public function initializeProxy()
    {
        return $this->initializer591e16395f955623208339 && $this->initializer591e16395f955623208339->__invoke($this->valueHolder591e16395f927959751162, $this, 'initializeProxy', array(), $this->initializer591e16395f955623208339);
    }
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder591e16395f927959751162;
    }
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder591e16395f927959751162;
    }
}
