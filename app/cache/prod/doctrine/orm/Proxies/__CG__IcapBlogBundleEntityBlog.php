<?php

namespace Proxies\__CG__\Icap\BlogBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Blog extends \Icap\BlogBundle\Entity\Blog implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'posts', 'options', 'infos', 'id', 'resourceNode', 'name', 'mimeType'];
        }

        return ['__isInitialized__', 'posts', 'options', 'infos', 'id', 'resourceNode', 'name', 'mimeType'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Blog $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setPosts(\Doctrine\Common\Collections\ArrayCollection $posts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPosts', [$posts]);

        return parent::setPosts($posts);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountPublishedPosts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountPublishedPosts', []);

        return parent::getCountPublishedPosts();
    }

    /**
     * {@inheritDoc}
     */
    public function setOptions(\Icap\BlogBundle\Entity\BlogOptions $options)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOptions', [$options]);

        return parent::setOptions($options);
    }

    /**
     * {@inheritDoc}
     */
    public function getOptions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOptions', []);

        return parent::getOptions();
    }

    /**
     * {@inheritDoc}
     */
    public function setLateralbars(\Doctrine\Common\Collections\ArrayCollection $posts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLateralbars', [$posts]);

        return parent::setLateralbars($posts);
    }

    /**
     * {@inheritDoc}
     */
    public function getPosts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPosts', []);

        return parent::getPosts();
    }

    /**
     * {@inheritDoc}
     */
    public function isCommentsAuthorized()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCommentsAuthorized', []);

        return parent::isCommentsAuthorized();
    }

    /**
     * {@inheritDoc}
     */
    public function isAuthorizeAnonymousComment()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAuthorizeAnonymousComment', []);

        return parent::isAuthorizeAnonymousComment();
    }

    /**
     * {@inheritDoc}
     */
    public function isAutoPublishComment()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAutoPublishComment', []);

        return parent::isAutoPublishComment();
    }

    /**
     * {@inheritDoc}
     */
    public function isAutoPublishPost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAutoPublishPost', []);

        return parent::isAutoPublishPost();
    }

    /**
     * {@inheritDoc}
     */
    public function displayPostViewCounter()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'displayPostViewCounter', []);

        return parent::displayPostViewCounter();
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthors()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthors', []);

        return parent::getAuthors();
    }

    /**
     * {@inheritDoc}
     */
    public function setInfos($infos)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInfos', [$infos]);

        return parent::setInfos($infos);
    }

    /**
     * {@inheritDoc}
     */
    public function getInfos()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInfos', []);

        return parent::getInfos();
    }

    /**
     * {@inheritDoc}
     */
    public function postPersist(\Doctrine\ORM\Event\LifecycleEventArgs $args)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'postPersist', [$args]);

        return parent::postPersist($args);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setResourceNode(\Claroline\CoreBundle\Entity\Resource\ResourceNode $resourceNode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResourceNode', [$resourceNode]);

        return parent::setResourceNode($resourceNode);
    }

    /**
     * {@inheritDoc}
     */
    public function getResourceNode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResourceNode', []);

        return parent::getResourceNode();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getMimeType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMimeType', []);

        return parent::getMimeType();
    }

    /**
     * {@inheritDoc}
     */
    public function setMimeType($mimeType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMimeType', [$mimeType]);

        return parent::setMimeType($mimeType);
    }

}
