<?php

namespace Proxies\__CG__\UJM\ExoBundle\Entity\QuestionType;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class PairQuestion extends \UJM\ExoBundle\Entity\QuestionType\PairQuestion implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'UJM\\ExoBundle\\Entity\\QuestionType\\PairQuestion' . "\0" . 'items', '' . "\0" . 'UJM\\ExoBundle\\Entity\\QuestionType\\PairQuestion' . "\0" . 'rows', '' . "\0" . 'UJM\\ExoBundle\\Entity\\QuestionType\\PairQuestion' . "\0" . 'oddItems', 'id', 'question', '' . "\0" . 'UJM\\ExoBundle\\Entity\\QuestionType\\PairQuestion' . "\0" . 'shuffle', '' . "\0" . 'UJM\\ExoBundle\\Entity\\QuestionType\\PairQuestion' . "\0" . 'penalty'];
        }

        return ['__isInitialized__', '' . "\0" . 'UJM\\ExoBundle\\Entity\\QuestionType\\PairQuestion' . "\0" . 'items', '' . "\0" . 'UJM\\ExoBundle\\Entity\\QuestionType\\PairQuestion' . "\0" . 'rows', '' . "\0" . 'UJM\\ExoBundle\\Entity\\QuestionType\\PairQuestion' . "\0" . 'oddItems', 'id', 'question', '' . "\0" . 'UJM\\ExoBundle\\Entity\\QuestionType\\PairQuestion' . "\0" . 'shuffle', '' . "\0" . 'UJM\\ExoBundle\\Entity\\QuestionType\\PairQuestion' . "\0" . 'penalty'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (PairQuestion $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getItems()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getItems', []);

        return parent::getItems();
    }

    /**
     * {@inheritDoc}
     */
    public function getItem($uuid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getItem', [$uuid]);

        return parent::getItem($uuid);
    }

    /**
     * {@inheritDoc}
     */
    public function addItem(\UJM\ExoBundle\Entity\Misc\GridItem $gridItem)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addItem', [$gridItem]);

        return parent::addItem($gridItem);
    }

    /**
     * {@inheritDoc}
     */
    public function removeItem(\UJM\ExoBundle\Entity\Misc\GridItem $gridItem)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeItem', [$gridItem]);

        return parent::removeItem($gridItem);
    }

    /**
     * {@inheritDoc}
     */
    public function getRows()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRows', []);

        return parent::getRows();
    }

    /**
     * {@inheritDoc}
     */
    public function addRow(\UJM\ExoBundle\Entity\Misc\GridRow $row)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRow', [$row]);

        return parent::addRow($row);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRow(\UJM\ExoBundle\Entity\Misc\GridRow $row)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRow', [$row]);

        return parent::removeRow($row);
    }

    /**
     * {@inheritDoc}
     */
    public function getOddItems()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOddItems', []);

        return parent::getOddItems();
    }

    /**
     * {@inheritDoc}
     */
    public function getOddItem($uuid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOddItem', [$uuid]);

        return parent::getOddItem($uuid);
    }

    /**
     * {@inheritDoc}
     */
    public function addOddItem(\UJM\ExoBundle\Entity\Misc\GridOdd $gridOdd)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addOddItem', [$gridOdd]);

        return parent::addOddItem($gridOdd);
    }

    /**
     * {@inheritDoc}
     */
    public function removeOddItem(\UJM\ExoBundle\Entity\Misc\GridOdd $gridOdd)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeOddItem', [$gridOdd]);

        return parent::removeOddItem($gridOdd);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getQuestion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuestion', []);

        return parent::getQuestion();
    }

    /**
     * {@inheritDoc}
     */
    public function setShuffle($shuffle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShuffle', [$shuffle]);

        return parent::setShuffle($shuffle);
    }

    /**
     * {@inheritDoc}
     */
    public function getShuffle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShuffle', []);

        return parent::getShuffle();
    }

    /**
     * {@inheritDoc}
     */
    public function setPenalty($penalty)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPenalty', [$penalty]);

        return parent::setPenalty($penalty);
    }

    /**
     * {@inheritDoc}
     */
    public function getPenalty()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPenalty', []);

        return parent::getPenalty();
    }

}
