<?php

namespace Proxies\__CG__\Icap\PortfolioBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Portfolio extends \Icap\PortfolioBundle\Entity\Portfolio implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'title', 'slug', 'visibility', 'user', 'portfolioUsers', 'portfolioGuides', 'portfolioGroups', 'portfolioTeams', 'portfolioWidgets', 'comments', 'deletedAt', 'commentsViewAt'];
        }

        return ['__isInitialized__', 'id', 'title', 'slug', 'visibility', 'user', 'portfolioUsers', 'portfolioGuides', 'portfolioGroups', 'portfolioTeams', 'portfolioWidgets', 'comments', 'deletedAt', 'commentsViewAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Portfolio $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlug()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlug', []);

        return parent::getSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlug($slug)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlug', [$slug]);

        return parent::setSlug($slug);
    }

    /**
     * {@inheritDoc}
     */
    public function setVisibility($visibility)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVisibility', [$visibility]);

        return parent::setVisibility($visibility);
    }

    /**
     * {@inheritDoc}
     */
    public function getVisibility()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVisibility', []);

        return parent::getVisibility();
    }

    /**
     * {@inheritDoc}
     */
    public function getVisibilityLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVisibilityLabel', []);

        return parent::getVisibilityLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setPortfolioUsers($portfolioUsers)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPortfolioUsers', [$portfolioUsers]);

        return parent::setPortfolioUsers($portfolioUsers);
    }

    /**
     * {@inheritDoc}
     */
    public function getPortfolioUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPortfolioUsers', []);

        return parent::getPortfolioUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function getPortfolioGuides()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPortfolioGuides', []);

        return parent::getPortfolioGuides();
    }

    /**
     * {@inheritDoc}
     */
    public function setPortfolioGuides($portfolioGuides)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPortfolioGuides', [$portfolioGuides]);

        return parent::setPortfolioGuides($portfolioGuides);
    }

    /**
     * {@inheritDoc}
     */
    public function setPortfolioGroups($portfolioGroups)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPortfolioGroups', [$portfolioGroups]);

        return parent::setPortfolioGroups($portfolioGroups);
    }

    /**
     * {@inheritDoc}
     */
    public function getPortfolioGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPortfolioGroups', []);

        return parent::getPortfolioGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function setPortfolioTeams($portfolioTeams)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPortfolioTeams', [$portfolioTeams]);

        return parent::setPortfolioTeams($portfolioTeams);
    }

    /**
     * {@inheritDoc}
     */
    public function getPortfolioTeams()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPortfolioTeams', []);

        return parent::getPortfolioTeams();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setPortfolioWidgets($portfolioWidgets)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPortfolioWidgets', [$portfolioWidgets]);

        return parent::setPortfolioWidgets($portfolioWidgets);
    }

    /**
     * {@inheritDoc}
     */
    public function getPortfolioWidgets()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPortfolioWidgets', []);

        return parent::getPortfolioWidgets();
    }

    /**
     * {@inheritDoc}
     */
    public function getWidgets($widgetType = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWidgets', [$widgetType]);

        return parent::getWidgets($widgetType);
    }

    /**
     * {@inheritDoc}
     */
    public function hasGuide(\Claroline\CoreBundle\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasGuide', [$user]);

        return parent::hasGuide($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getComments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComments', []);

        return parent::getComments();
    }

    /**
     * {@inheritDoc}
     */
    public function setComments($comments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setComments', [$comments]);

        return parent::setComments($comments);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentsViewAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentsViewAt', []);

        return parent::getCommentsViewAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentsViewAt($commentsViewAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentsViewAt', [$commentsViewAt]);

        return parent::setCommentsViewAt($commentsViewAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountUnreadComments(\DateTime $commentsViewAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountUnreadComments', [$commentsViewAt]);

        return parent::getCountUnreadComments($commentsViewAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastUpdateDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastUpdateDate', []);

        return parent::getLastUpdateDate();
    }

}
