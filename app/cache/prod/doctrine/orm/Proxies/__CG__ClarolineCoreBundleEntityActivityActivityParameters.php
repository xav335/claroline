<?php

namespace Proxies\__CG__\Claroline\CoreBundle\Entity\Activity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ActivityParameters extends \Claroline\CoreBundle\Entity\Activity\ActivityParameters implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'activity', 'maxDuration', 'maxAttempts', 'who', 'where', 'withTutor', 'secondaryResources', 'evaluationType', 'rules'];
        }

        return ['__isInitialized__', 'id', 'activity', 'maxDuration', 'maxAttempts', 'who', 'where', 'withTutor', 'secondaryResources', 'evaluationType', 'rules'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ActivityParameters $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getActivity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActivity', []);

        return parent::getActivity();
    }

    /**
     * {@inheritDoc}
     */
    public function setActivity(\Claroline\CoreBundle\Entity\Resource\Activity $activity = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActivity', [$activity]);

        return parent::setActivity($activity);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaxDuration()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaxDuration', []);

        return parent::getMaxDuration();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaxDuration($maxDuration)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaxDuration', [$maxDuration]);

        return parent::setMaxDuration($maxDuration);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaxAttempts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaxAttempts', []);

        return parent::getMaxAttempts();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaxAttempts($maxAttempts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaxAttempts', [$maxAttempts]);

        return parent::setMaxAttempts($maxAttempts);
    }

    /**
     * {@inheritDoc}
     */
    public function getWho()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWho', []);

        return parent::getWho();
    }

    /**
     * {@inheritDoc}
     */
    public function setWho($who)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWho', [$who]);

        return parent::setWho($who);
    }

    /**
     * {@inheritDoc}
     */
    public function getWhere()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWhere', []);

        return parent::getWhere();
    }

    /**
     * {@inheritDoc}
     */
    public function setWhere($where)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWhere', [$where]);

        return parent::setWhere($where);
    }

    /**
     * {@inheritDoc}
     */
    public function isWithTutor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isWithTutor', []);

        return parent::isWithTutor();
    }

    /**
     * {@inheritDoc}
     */
    public function setWithTutor($withTutor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWithTutor', [$withTutor]);

        return parent::setWithTutor($withTutor);
    }

    /**
     * {@inheritDoc}
     */
    public function getSecondaryResources()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSecondaryResources', []);

        return parent::getSecondaryResources();
    }

    /**
     * {@inheritDoc}
     */
    public function addSecondaryResource(\Claroline\CoreBundle\Entity\Resource\ResourceNode $resource)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSecondaryResource', [$resource]);

        return parent::addSecondaryResource($resource);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSecondaryResource(\Claroline\CoreBundle\Entity\Resource\ResourceNode $resource)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSecondaryResource', [$resource]);

        return parent::removeSecondaryResource($resource);
    }

    /**
     * {@inheritDoc}
     */
    public function getEvaluationType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEvaluationType', []);

        return parent::getEvaluationType();
    }

    /**
     * {@inheritDoc}
     */
    public function setEvaluationType($evaluationType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEvaluationType', [$evaluationType]);

        return parent::setEvaluationType($evaluationType);
    }

    /**
     * {@inheritDoc}
     */
    public function setRules($rules)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRules', [$rules]);

        return parent::setRules($rules);
    }

    /**
     * {@inheritDoc}
     */
    public function getRules()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRules', []);

        return parent::getRules();
    }

    /**
     * {@inheritDoc}
     */
    public function hasRules()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRules', []);

        return parent::hasRules();
    }

    /**
     * {@inheritDoc}
     */
    public function getRestriction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRestriction', []);

        return parent::getRestriction();
    }

}
