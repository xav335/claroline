<?php

namespace Proxies\__CG__\Icap\PortfolioBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class PortfolioWidget extends \Icap\PortfolioBundle\Entity\PortfolioWidget implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'portfolio', 'widget', 'col', 'row', 'sizeX', 'sizeY', 'widgetType'];
        }

        return ['__isInitialized__', 'id', 'portfolio', 'widget', 'col', 'row', 'sizeX', 'sizeY', 'widgetType'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (PortfolioWidget $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getPortfolio()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPortfolio', []);

        return parent::getPortfolio();
    }

    /**
     * {@inheritDoc}
     */
    public function setPortfolio($portfolio)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPortfolio', [$portfolio]);

        return parent::setPortfolio($portfolio);
    }

    /**
     * {@inheritDoc}
     */
    public function getWidget()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWidget', []);

        return parent::getWidget();
    }

    /**
     * {@inheritDoc}
     */
    public function setWidget(\Icap\PortfolioBundle\Entity\Widget\AbstractWidget $widget)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWidget', [$widget]);

        return parent::setWidget($widget);
    }

    /**
     * {@inheritDoc}
     */
    public function getCol()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCol', []);

        return parent::getCol();
    }

    /**
     * {@inheritDoc}
     */
    public function setCol($col)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCol', [$col]);

        return parent::setCol($col);
    }

    /**
     * {@inheritDoc}
     */
    public function getRow()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRow', []);

        return parent::getRow();
    }

    /**
     * {@inheritDoc}
     */
    public function setRow($row)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRow', [$row]);

        return parent::setRow($row);
    }

    /**
     * {@inheritDoc}
     */
    public function getSizeX()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSizeX', []);

        return parent::getSizeX();
    }

    /**
     * {@inheritDoc}
     */
    public function setSizeX($sizeX)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSizeX', [$sizeX]);

        return parent::setSizeX($sizeX);
    }

    /**
     * {@inheritDoc}
     */
    public function getSizeY()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSizeY', []);

        return parent::getSizeY();
    }

    /**
     * {@inheritDoc}
     */
    public function setSizeY($sizeY)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSizeY', [$sizeY]);

        return parent::setSizeY($sizeY);
    }

    /**
     * {@inheritDoc}
     */
    public function getWidgetType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWidgetType', []);

        return parent::getWidgetType();
    }

    /**
     * {@inheritDoc}
     */
    public function setWidgetType($widgetType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWidgetType', [$widgetType]);

        return parent::setWidgetType($widgetType);
    }

    /**
     * {@inheritDoc}
     */
    public function setSize(array $position)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSize', [$position]);

        return parent::setSize($position);
    }

    /**
     * {@inheritDoc}
     */
    public function getData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getData', []);

        return parent::getData();
    }

}
