<?php

namespace Proxies\__CG__\Claroline\CoreBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Group extends \Claroline\CoreBundle\Entity\Group implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'name', 'users', 'guid', 'roles', 'models', 'organizations', 'rolesStringAsArray'];
        }

        return ['__isInitialized__', 'id', 'name', 'users', 'guid', 'roles', 'models', 'organizations', 'rolesStringAsArray'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Group $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function addUser(\Claroline\CoreBundle\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUser', [$user]);

        return parent::addUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUser(\Claroline\CoreBundle\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUser', [$user]);

        return parent::removeUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsers', []);

        return parent::getUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function getUserIds()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserIds', []);

        return parent::getUserIds();
    }

    /**
     * {@inheritDoc}
     */
    public function getPlatformRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlatformRoles', []);

        return parent::getPlatformRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function getPlatformRole()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlatformRole', []);

        return parent::getPlatformRole();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlatformRole($platformRole)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlatformRole', [$platformRole]);

        return parent::setPlatformRole($platformRole);
    }

    /**
     * {@inheritDoc}
     */
    public function setPlatformRoles($platformRoles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlatformRoles', [$platformRoles]);

        return parent::setPlatformRoles($platformRoles);
    }

    /**
     * {@inheritDoc}
     */
    public function containsUser(\Claroline\CoreBundle\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'containsUser', [$user]);

        return parent::containsUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrderableFields()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrderableFields', []);

        return parent::getOrderableFields();
    }

    /**
     * {@inheritDoc}
     */
    public function addModel(\Claroline\CoreBundle\Entity\Model\WorkspaceModel $model)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addModel', [$model]);

        return parent::addModel($model);
    }

    /**
     * {@inheritDoc}
     */
    public function removeModel(\Claroline\CoreBundle\Entity\Model\WorkspaceModel $model)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeModel', [$model]);

        return parent::removeModel($model);
    }

    /**
     * {@inheritDoc}
     */
    public function setGuid($guid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGuid', [$guid]);

        return parent::setGuid($guid);
    }

    /**
     * {@inheritDoc}
     */
    public function getGuid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGuid', []);

        return parent::getGuid();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getOrganizations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrganizations', []);

        return parent::getOrganizations();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrganizations(\Doctrine\Common\Collections\ArrayCollection $organizations)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrganizations', [$organizations]);

        return parent::setOrganizations($organizations);
    }

    /**
     * {@inheritDoc}
     */
    public function addOrganization(\Claroline\CoreBundle\Entity\Organization\Organization $organization)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addOrganization', [$organization]);

        return parent::addOrganization($organization);
    }

    /**
     * {@inheritDoc}
     */
    public function addRole(\Claroline\CoreBundle\Entity\Role $role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRole', [$role]);

        return parent::addRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRole(\Claroline\CoreBundle\Entity\Role $role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRole', [$role]);

        return parent::removeRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityRoles', []);

        return parent::getEntityRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function hasRole($roleName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRole', [$roleName]);

        return parent::hasRole($roleName);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', []);

        return parent::getRoles();
    }

}
