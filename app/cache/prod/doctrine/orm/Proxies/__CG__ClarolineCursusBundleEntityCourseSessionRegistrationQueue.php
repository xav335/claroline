<?php

namespace Proxies\__CG__\Claroline\CursusBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class CourseSessionRegistrationQueue extends \Claroline\CursusBundle\Entity\CourseSessionRegistrationQueue implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'user', 'session', 'applicationDate', 'status', 'validationDate', 'userValidationDate', 'validatorValidationDate', 'validator', 'organizationValidationDate', 'organizationAdmin'];
        }

        return ['__isInitialized__', 'id', 'user', 'session', 'applicationDate', 'status', 'validationDate', 'userValidationDate', 'validatorValidationDate', 'validator', 'organizationValidationDate', 'organizationAdmin'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (CourseSessionRegistrationQueue $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\Claroline\CoreBundle\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getSession()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSession', []);

        return parent::getSession();
    }

    /**
     * {@inheritDoc}
     */
    public function setSession(\Claroline\CursusBundle\Entity\CourseSession $session)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSession', [$session]);

        return parent::setSession($session);
    }

    /**
     * {@inheritDoc}
     */
    public function getApplicationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApplicationDate', []);

        return parent::getApplicationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setApplicationDate($applicationDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setApplicationDate', [$applicationDate]);

        return parent::setApplicationDate($applicationDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getValidationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValidationDate', []);

        return parent::getValidationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setValidationDate($validationDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValidationDate', [$validationDate]);

        return parent::setValidationDate($validationDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserValidationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserValidationDate', []);

        return parent::getUserValidationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserValidationDate($userValidationDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserValidationDate', [$userValidationDate]);

        return parent::setUserValidationDate($userValidationDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getValidatorValidationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValidatorValidationDate', []);

        return parent::getValidatorValidationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setValidatorValidationDate($validatorValidationDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValidatorValidationDate', [$validatorValidationDate]);

        return parent::setValidatorValidationDate($validatorValidationDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getValidator()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValidator', []);

        return parent::getValidator();
    }

    /**
     * {@inheritDoc}
     */
    public function setValidator(\Claroline\CoreBundle\Entity\User $validator = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValidator', [$validator]);

        return parent::setValidator($validator);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrganizationValidationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrganizationValidationDate', []);

        return parent::getOrganizationValidationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrganizationValidationDate($organizationValidationDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrganizationValidationDate', [$organizationValidationDate]);

        return parent::setOrganizationValidationDate($organizationValidationDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrganizationAdmin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrganizationAdmin', []);

        return parent::getOrganizationAdmin();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrganizationAdmin(\Claroline\CoreBundle\Entity\User $organizationAdmin = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrganizationAdmin', [$organizationAdmin]);

        return parent::setOrganizationAdmin($organizationAdmin);
    }

}
