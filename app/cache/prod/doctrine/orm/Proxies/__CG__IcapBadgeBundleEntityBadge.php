<?php

namespace Proxies\__CG__\Icap\BadgeBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Badge extends \Icap\BadgeBundle\Entity\Badge implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * {@inheritDoc}
     * @param string $name
     */
    public function __get($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);

        return parent::__get($name);
    }

    /**
     * {@inheritDoc}
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

        return parent::__set($name, $value);
    }



    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'version', 'automaticAward', 'imagePath', 'isExpiring', 'expireDuration', 'expirePeriod', 'file', 'olfFileName', 'userBadges', 'badgeClaims', 'badgeRules', 'workspace', 'translations', 'locale', 'deletedAt'];
        }

        return ['__isInitialized__', 'id', 'version', 'automaticAward', 'imagePath', 'isExpiring', 'expireDuration', 'expirePeriod', 'file', 'olfFileName', 'userBadges', 'badgeClaims', 'badgeRules', 'workspace', 'translations', 'locale', 'deletedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Badge $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsers', []);

        return parent::getUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsers($users)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsers', [$users]);

        return parent::setUsers($users);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserBadges()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserBadges', []);

        return parent::getUserBadges();
    }

    /**
     * {@inheritDoc}
     */
    public function addUserBadge(\Icap\BadgeBundle\Entity\UserBadge $userBadge)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUserBadge', [$userBadge]);

        return parent::addUserBadge($userBadge);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUserBadge(\Icap\BadgeBundle\Entity\UserBadge $userBadge)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUserBadge', [$userBadge]);

        return parent::removeUserBadge($userBadge);
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslations', []);

        return parent::getTranslations();
    }

    /**
     * {@inheritDoc}
     */
    public function setTranslations($translations)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTranslations', [$translations]);

        return parent::setTranslations($translations);
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslationForLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslationForLocale', [$locale]);

        return parent::getTranslationForLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function addTranslation(\Icap\BadgeBundle\Entity\BadgeTranslation $translation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTranslation', [$translation]);

        return parent::addTranslation($translation);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTranslation(\Icap\BadgeBundle\Entity\BadgeTranslation $translation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTranslation', [$translation]);

        return parent::removeTranslation($translation);
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocale', [$locale]);

        return parent::setLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocale', []);

        return parent::getLocale();
    }

    /**
     * {@inheritDoc}
     */
    public function setImagePath($imagePath)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImagePath', [$imagePath]);

        return parent::setImagePath($imagePath);
    }

    /**
     * {@inheritDoc}
     */
    public function getImagePath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImagePath', []);

        return parent::getImagePath();
    }

    /**
     * {@inheritDoc}
     */
    public function setVersion($version)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVersion', [$version]);

        return parent::setVersion($version);
    }

    /**
     * {@inheritDoc}
     */
    public function getVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersion', []);

        return parent::getVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function getName($locale = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', [$locale]);

        return parent::getName($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription($locale = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', [$locale]);

        return parent::getDescription($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlug($locale = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlug', [$locale]);

        return parent::getSlug($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getCriteria($locale = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCriteria', [$locale]);

        return parent::getCriteria($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function setAutomaticAward($automaticAward)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAutomaticAward', [$automaticAward]);

        return parent::setAutomaticAward($automaticAward);
    }

    /**
     * {@inheritDoc}
     */
    public function getAutomaticAward()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAutomaticAward', []);

        return parent::getAutomaticAward();
    }

    /**
     * {@inheritDoc}
     */
    public function setRules($badgeRules)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRules', [$badgeRules]);

        return parent::setRules($badgeRules);
    }

    /**
     * {@inheritDoc}
     */
    public function getRules()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRules', []);

        return parent::getRules();
    }

    /**
     * {@inheritDoc}
     */
    public function setWorkspace(\Claroline\CoreBundle\Entity\Workspace\Workspace $workspace)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWorkspace', [$workspace]);

        return parent::setWorkspace($workspace);
    }

    /**
     * {@inheritDoc}
     */
    public function getWorkspace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWorkspace', []);

        return parent::getWorkspace();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsExpiring($isExpiring)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsExpiring', [$isExpiring]);

        return parent::setIsExpiring($isExpiring);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsExpiring()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsExpiring', []);

        return parent::getIsExpiring();
    }

    /**
     * {@inheritDoc}
     */
    public function isExpiring()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isExpiring', []);

        return parent::isExpiring();
    }

    /**
     * {@inheritDoc}
     */
    public function setExpireDuration($expireDuration)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExpireDuration', [$expireDuration]);

        return parent::setExpireDuration($expireDuration);
    }

    /**
     * {@inheritDoc}
     */
    public function getExpireDuration()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExpireDuration', []);

        return parent::getExpireDuration();
    }

    /**
     * {@inheritDoc}
     */
    public function setExpirePeriod($expirePeriod)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExpirePeriod', [$expirePeriod]);

        return parent::setExpirePeriod($expirePeriod);
    }

    /**
     * {@inheritDoc}
     */
    public function getExpirePeriod()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExpirePeriod', []);

        return parent::getExpirePeriod();
    }

    /**
     * {@inheritDoc}
     */
    public function getExpirePeriodLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExpirePeriodLabel', []);

        return parent::getExpirePeriodLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setFile(\Symfony\Component\HttpFoundation\File\UploadedFile $file)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFile', [$file]);

        return parent::setFile($file);
    }

    /**
     * {@inheritDoc}
     */
    public function getFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFile', []);

        return parent::getFile();
    }

    /**
     * {@inheritDoc}
     */
    public function getWebPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWebPath', []);

        return parent::getWebPath();
    }

    /**
     * {@inheritDoc}
     */
    public function prePersist(\Doctrine\ORM\Event\LifecycleEventArgs $event)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prePersist', [$event]);

        return parent::prePersist($event);
    }

    /**
     * {@inheritDoc}
     */
    public function preUpdate(\Doctrine\ORM\Event\PreUpdateEventArgs $event)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preUpdate', [$event]);

        return parent::preUpdate($event);
    }

    /**
     * {@inheritDoc}
     */
    public function getRestriction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRestriction', []);

        return parent::getRestriction();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function hasRules()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRules', []);

        return parent::hasRules();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeletedAt(\DateTime $deletedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeletedAt', [$deletedAt]);

        return parent::setDeletedAt($deletedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeletedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeletedAt', []);

        return parent::getDeletedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function isDeleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDeleted', []);

        return parent::isDeleted();
    }

}
