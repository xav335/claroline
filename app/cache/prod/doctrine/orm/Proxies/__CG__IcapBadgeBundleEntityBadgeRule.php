<?php

namespace Proxies\__CG__\Icap\BadgeBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class BadgeRule extends \Icap\BadgeBundle\Entity\BadgeRule implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'badge', 'associatedBadge', 'id', 'occurrence', 'action', 'result', 'resultMax', 'resultComparison', 'resource', 'userType', 'user', 'activeFrom', 'activeUntil'];
        }

        return ['__isInitialized__', 'badge', 'associatedBadge', 'id', 'occurrence', 'action', 'result', 'resultMax', 'resultComparison', 'resource', 'userType', 'user', 'activeFrom', 'activeUntil'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (BadgeRule $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setAssociatedBadge($badge)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAssociatedBadge', [$badge]);

        return parent::setAssociatedBadge($badge);
    }

    /**
     * {@inheritDoc}
     */
    public function getAssociatedBadge()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAssociatedBadge', []);

        return parent::getAssociatedBadge();
    }

    /**
     * {@inheritDoc}
     */
    public function setBadge($badge)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBadge', [$badge]);

        return parent::setBadge($badge);
    }

    /**
     * {@inheritDoc}
     */
    public function getBadge()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBadge', []);

        return parent::getBadge();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function setAction($action)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAction', [$action]);

        return parent::setAction($action);
    }

    /**
     * {@inheritDoc}
     */
    public function getAction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAction', []);

        return parent::getAction();
    }

    /**
     * {@inheritDoc}
     */
    public function setOccurrence($occurrence)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOccurrence', [$occurrence]);

        return parent::setOccurrence($occurrence);
    }

    /**
     * {@inheritDoc}
     */
    public function getOccurrence()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOccurrence', []);

        return parent::getOccurrence();
    }

    /**
     * {@inheritDoc}
     */
    public function setResult($result)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResult', [$result]);

        return parent::setResult($result);
    }

    /**
     * {@inheritDoc}
     */
    public function getResult()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResult', []);

        return parent::getResult();
    }

    /**
     * {@inheritDoc}
     */
    public function setResultMax($resultMax)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResultMax', [$resultMax]);

        return parent::setResultMax($resultMax);
    }

    /**
     * {@inheritDoc}
     */
    public function getResultMax()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResultMax', []);

        return parent::getResultMax();
    }

    /**
     * {@inheritDoc}
     */
    public function setResultComparison($resultComparison)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResultComparison', [$resultComparison]);

        return parent::setResultComparison($resultComparison);
    }

    /**
     * {@inheritDoc}
     */
    public function getResultComparison()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResultComparison', []);

        return parent::getResultComparison();
    }

    /**
     * {@inheritDoc}
     */
    public function setResource($resource)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResource', [$resource]);

        return parent::setResource($resource);
    }

    /**
     * {@inheritDoc}
     */
    public function getResource()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResource', []);

        return parent::getResource();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\Claroline\CoreBundle\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserType($userType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserType', [$userType]);

        return parent::setUserType($userType);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserType', []);

        return parent::getUserType();
    }

    /**
     * {@inheritDoc}
     */
    public function getIsUserReceiver()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsUserReceiver', []);

        return parent::getIsUserReceiver();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsUserReceiver($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsUserReceiver', [$value]);

        return parent::setIsUserReceiver($value);
    }

    /**
     * {@inheritDoc}
     */
    public function setActiveFrom($activeFrom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActiveFrom', [$activeFrom]);

        return parent::setActiveFrom($activeFrom);
    }

    /**
     * {@inheritDoc}
     */
    public function getActiveFrom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActiveFrom', []);

        return parent::getActiveFrom();
    }

    /**
     * {@inheritDoc}
     */
    public function setActiveUntil($activeUntil)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActiveUntil', [$activeUntil]);

        return parent::setActiveUntil($activeUntil);
    }

    /**
     * {@inheritDoc}
     */
    public function getActiveUntil()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActiveUntil', []);

        return parent::getActiveUntil();
    }

}
