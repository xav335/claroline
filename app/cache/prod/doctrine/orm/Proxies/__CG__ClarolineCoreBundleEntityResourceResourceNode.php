<?php

namespace Proxies\__CG__\Claroline\CoreBundle\Entity\Resource;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ResourceNode extends \Claroline\CoreBundle\Entity\Resource\ResourceNode implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'license', 'creationDate', 'modificationDate', 'resourceType', 'creator', 'icon', 'name', 'parent', 'lvl', 'children', 'shortcuts', 'workspace', 'path', 'rights', 'index', 'mimeType', 'class', 'accessibleFrom', 'accessibleUntil', '' . "\0" . 'Claroline\\CoreBundle\\Entity\\Resource\\ResourceNode' . "\0" . 'pathForCreationLog', 'published', 'publishedToPortal', 'logs', 'author', 'active', 'guid', 'fields'];
        }

        return ['__isInitialized__', 'id', 'license', 'creationDate', 'modificationDate', 'resourceType', 'creator', 'icon', 'name', 'parent', 'lvl', 'children', 'shortcuts', 'workspace', 'path', 'rights', 'index', 'mimeType', 'class', 'accessibleFrom', 'accessibleUntil', '' . "\0" . 'Claroline\\CoreBundle\\Entity\\Resource\\ResourceNode' . "\0" . 'pathForCreationLog', 'published', 'publishedToPortal', 'logs', 'author', 'active', 'guid', 'fields'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ResourceNode $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getLicense()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLicense', []);

        return parent::getLicense();
    }

    /**
     * {@inheritDoc}
     */
    public function setLicense($license)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLicense', [$license]);

        return parent::setLicense($license);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreationDate', []);

        return parent::getCreationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreationDate(\DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreationDate', [$date]);

        return parent::setCreationDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getModificationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModificationDate', []);

        return parent::getModificationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setModificationDate(\DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModificationDate', [$date]);

        return parent::setModificationDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getResourceType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResourceType', []);

        return parent::getResourceType();
    }

    /**
     * {@inheritDoc}
     */
    public function setResourceType(\Claroline\CoreBundle\Entity\Resource\ResourceType $resourceType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResourceType', [$resourceType]);

        return parent::setResourceType($resourceType);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreator()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreator', []);

        return parent::getCreator();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreator(\Claroline\CoreBundle\Entity\User $creator)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreator', [$creator]);

        return parent::setCreator($creator);
    }

    /**
     * {@inheritDoc}
     */
    public function getChildren()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildren', []);

        return parent::getChildren();
    }

    /**
     * {@inheritDoc}
     */
    public function setWorkspace(\Claroline\CoreBundle\Entity\Workspace\Workspace $workspace)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWorkspace', [$workspace]);

        return parent::setWorkspace($workspace);
    }

    /**
     * {@inheritDoc}
     */
    public function getWorkspace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWorkspace', []);

        return parent::getWorkspace();
    }

    /**
     * {@inheritDoc}
     */
    public function getIcon()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIcon', []);

        return parent::getIcon();
    }

    /**
     * {@inheritDoc}
     */
    public function setIcon(\Claroline\CoreBundle\Entity\Resource\ResourceIcon $icon)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIcon', [$icon]);

        return parent::setIcon($icon);
    }

    /**
     * {@inheritDoc}
     */
    public function setParent(\Claroline\CoreBundle\Entity\Resource\ResourceNode $parent = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function getLvl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLvl', []);

        return parent::getLvl();
    }

    /**
     * {@inheritDoc}
     */
    public function getPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPath', []);

        return parent::getPath();
    }

    /**
     * {@inheritDoc}
     */
    public function getPathForDisplay()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPathForDisplay', []);

        return parent::getPathForDisplay();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getShortcuts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShortcuts', []);

        return parent::getShortcuts();
    }

    /**
     * {@inheritDoc}
     */
    public function getRights()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRights', []);

        return parent::getRights();
    }

    /**
     * {@inheritDoc}
     */
    public function addRight(\Claroline\CoreBundle\Entity\Resource\ResourceRights $right)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRight', [$right]);

        return parent::addRight($right);
    }

    /**
     * {@inheritDoc}
     */
    public function getMimeType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMimeType', []);

        return parent::getMimeType();
    }

    /**
     * {@inheritDoc}
     */
    public function setMimeType($mimeType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMimeType', [$mimeType]);

        return parent::setMimeType($mimeType);
    }

    /**
     * {@inheritDoc}
     */
    public function getClass()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClass', []);

        return parent::getClass();
    }

    /**
     * {@inheritDoc}
     */
    public function setClass($class)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClass', [$class]);

        return parent::setClass($class);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccessibleFrom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccessibleFrom', []);

        return parent::getAccessibleFrom();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccessibleFrom(\DateTime $accessibleFrom = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccessibleFrom', [$accessibleFrom]);

        return parent::setAccessibleFrom($accessibleFrom);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccessibleUntil()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccessibleUntil', []);

        return parent::getAccessibleUntil();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccessibleUntil(\DateTime $accessibleUntil = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccessibleUntil', [$accessibleUntil]);

        return parent::setAccessibleUntil($accessibleUntil);
    }

    /**
     * {@inheritDoc}
     */
    public function setPathForCreationLog($path)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPathForCreationLog', [$path]);

        return parent::setPathForCreationLog($path);
    }

    /**
     * {@inheritDoc}
     */
    public function getPathForCreationLog()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPathForCreationLog', []);

        return parent::getPathForCreationLog();
    }

    /**
     * {@inheritDoc}
     */
    public function addChild(\Claroline\CoreBundle\Entity\Resource\ResourceNode $resourceNode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChild', [$resourceNode]);

        return parent::addChild($resourceNode);
    }

    /**
     * {@inheritDoc}
     */
    public function isPublished()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPublished', []);

        return parent::isPublished();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublished($published)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublished', [$published]);

        return parent::setPublished($published);
    }

    /**
     * {@inheritDoc}
     */
    public function isPublishedToPortal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPublishedToPortal', []);

        return parent::isPublishedToPortal();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublishedToPortal($publishedToPortal)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublishedToPortal', [$publishedToPortal]);

        return parent::setPublishedToPortal($publishedToPortal);
    }

    /**
     * {@inheritDoc}
     */
    public function setIndex($index)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIndex', [$index]);

        return parent::setIndex($index);
    }

    /**
     * {@inheritDoc}
     */
    public function getIndex()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIndex', []);

        return parent::getIndex();
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthor', []);

        return parent::getAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthor($author)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthor', [$author]);

        return parent::setAuthor($author);
    }

    /**
     * {@inheritDoc}
     */
    public function isActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isActive', []);

        return parent::isActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive($active)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', [$active]);

        return parent::setActive($active);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function setGuid($guid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGuid', [$guid]);

        return parent::setGuid($guid);
    }

    /**
     * {@inheritDoc}
     */
    public function getGuid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGuid', []);

        return parent::getGuid();
    }

    /**
     * {@inheritDoc}
     */
    public function getFields()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFields', []);

        return parent::getFields();
    }

    /**
     * {@inheritDoc}
     */
    public function addField(\Claroline\CoreBundle\Entity\Facet\FieldFacet $field)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addField', [$field]);

        return parent::addField($field);
    }

    /**
     * {@inheritDoc}
     */
    public function removeField(\Claroline\CoreBundle\Entity\Facet\FieldFacet $field)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeField', [$field]);

        return parent::removeField($field);
    }

}
