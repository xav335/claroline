<?php

namespace Proxies\__CG__\Claroline\FlashCardBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Deck extends \Claroline\FlashCardBundle\Entity\Deck implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'notes', 'sessions', 'newCardDayDefault', 'sessionDurationDefault', 'theme', 'userPreferences', 'resourceNode', 'name', 'mimeType'];
        }

        return ['__isInitialized__', 'id', 'notes', 'sessions', 'newCardDayDefault', 'sessionDurationDefault', 'theme', 'userPreferences', 'resourceNode', 'name', 'mimeType'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Deck $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotes(\Doctrine\Common\Collections\ArrayCollection $obj)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotes', [$obj]);

        return parent::setNotes($obj);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotes', []);

        return parent::getNotes();
    }

    /**
     * {@inheritDoc}
     */
    public function setSessions(\Doctrine\Common\Collections\ArrayCollection $obj)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSessions', [$obj]);

        return parent::setSessions($obj);
    }

    /**
     * {@inheritDoc}
     */
    public function getSessions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSessions', []);

        return parent::getSessions();
    }

    /**
     * {@inheritDoc}
     */
    public function getSession(\Claroline\CoreBundle\Entity\User $user, \DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSession', [$user, $date]);

        return parent::getSession($user, $date);
    }

    /**
     * {@inheritDoc}
     */
    public function setNewCardDayDefault($newCardDayDefault)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNewCardDayDefault', [$newCardDayDefault]);

        return parent::setNewCardDayDefault($newCardDayDefault);
    }

    /**
     * {@inheritDoc}
     */
    public function getNewCardDayDefault()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNewCardDayDefault', []);

        return parent::getNewCardDayDefault();
    }

    /**
     * {@inheritDoc}
     */
    public function setSessionDurationDefault($sessionDurationDefault)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSessionDurationDefault', [$sessionDurationDefault]);

        return parent::setSessionDurationDefault($sessionDurationDefault);
    }

    /**
     * {@inheritDoc}
     */
    public function getSessionDurationDefault()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSessionDurationDefault', []);

        return parent::getSessionDurationDefault();
    }

    /**
     * {@inheritDoc}
     */
    public function setTheme($theme)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTheme', [$theme]);

        return parent::setTheme($theme);
    }

    /**
     * {@inheritDoc}
     */
    public function getTheme()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTheme', []);

        return parent::getTheme();
    }

    /**
     * {@inheritDoc}
     */
    public function getUserPreferences()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserPreferences', []);

        return parent::getUserPreferences();
    }

    /**
     * {@inheritDoc}
     */
    public function getUserPreference(\Claroline\CoreBundle\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserPreference', [$user]);

        return parent::getUserPreference($user);
    }

    /**
     * {@inheritDoc}
     */
    public function setUserPreference(\Claroline\FlashCardBundle\Entity\UserPreference $newUserPref)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserPreference', [$newUserPref]);

        return parent::setUserPreference($newUserPref);
    }

    /**
     * {@inheritDoc}
     */
    public function setResourceNode(\Claroline\CoreBundle\Entity\Resource\ResourceNode $resourceNode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResourceNode', [$resourceNode]);

        return parent::setResourceNode($resourceNode);
    }

    /**
     * {@inheritDoc}
     */
    public function getResourceNode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResourceNode', []);

        return parent::getResourceNode();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getMimeType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMimeType', []);

        return parent::getMimeType();
    }

    /**
     * {@inheritDoc}
     */
    public function setMimeType($mimeType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMimeType', [$mimeType]);

        return parent::setMimeType($mimeType);
    }

}
