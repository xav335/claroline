<?php

namespace Proxies\__CG__\UJM\ExoBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Exercise extends \UJM\ExoBundle\Entity\Exercise implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'uuid', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'description', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'correctionMode', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'dateCorrection', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'markMode', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'interruptible', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'metadataVisible', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'statistics', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'minimalCorrection', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'wasPublishedOnce', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'anonymizeAttempts', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'type', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'steps', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'showFeedback', 'id', 'resourceNode', 'name', 'mimeType', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'randomOrder', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'randomPick', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'pick', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'duration', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'maxAttempts'];
        }

        return ['__isInitialized__', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'uuid', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'description', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'correctionMode', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'dateCorrection', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'markMode', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'interruptible', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'metadataVisible', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'statistics', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'minimalCorrection', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'wasPublishedOnce', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'anonymizeAttempts', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'type', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'steps', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'showFeedback', 'id', 'resourceNode', 'name', 'mimeType', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'randomOrder', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'randomPick', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'pick', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'duration', '' . "\0" . 'UJM\\ExoBundle\\Entity\\Exercise' . "\0" . 'maxAttempts'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Exercise $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getUuid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUuid', []);

        return parent::getUuid();
    }

    /**
     * {@inheritDoc}
     */
    public function setUuid($uuid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUuid', [$uuid]);

        return parent::setUuid($uuid);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setCorrectionMode($correctionMode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCorrectionMode', [$correctionMode]);

        return parent::setCorrectionMode($correctionMode);
    }

    /**
     * {@inheritDoc}
     */
    public function getCorrectionMode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCorrectionMode', []);

        return parent::getCorrectionMode();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateCorrection(\DateTime $dateCorrection = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateCorrection', [$dateCorrection]);

        return parent::setDateCorrection($dateCorrection);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateCorrection()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateCorrection', []);

        return parent::getDateCorrection();
    }

    /**
     * {@inheritDoc}
     */
    public function setMarkMode($markMode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMarkMode', [$markMode]);

        return parent::setMarkMode($markMode);
    }

    /**
     * {@inheritDoc}
     */
    public function getMarkMode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMarkMode', []);

        return parent::getMarkMode();
    }

    /**
     * {@inheritDoc}
     */
    public function setInterruptible($interruptible)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInterruptible', [$interruptible]);

        return parent::setInterruptible($interruptible);
    }

    /**
     * {@inheritDoc}
     */
    public function isInterruptible()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isInterruptible', []);

        return parent::isInterruptible();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetadataVisible($visible)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetadataVisible', [$visible]);

        return parent::setMetadataVisible($visible);
    }

    /**
     * {@inheritDoc}
     */
    public function isMetadataVisible()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isMetadataVisible', []);

        return parent::isMetadataVisible();
    }

    /**
     * {@inheritDoc}
     */
    public function hasStatistics()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasStatistics', []);

        return parent::hasStatistics();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatistics($statistics)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatistics', [$statistics]);

        return parent::setStatistics($statistics);
    }

    /**
     * {@inheritDoc}
     */
    public function setMinimalCorrection($minimalCorrection)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMinimalCorrection', [$minimalCorrection]);

        return parent::setMinimalCorrection($minimalCorrection);
    }

    /**
     * {@inheritDoc}
     */
    public function isMinimalCorrection()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isMinimalCorrection', []);

        return parent::isMinimalCorrection();
    }

    /**
     * {@inheritDoc}
     */
    public function wasPublishedOnce()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'wasPublishedOnce', []);

        return parent::wasPublishedOnce();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublishedOnce($wasPublishedOnce)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublishedOnce', [$wasPublishedOnce]);

        return parent::setPublishedOnce($wasPublishedOnce);
    }

    /**
     * {@inheritDoc}
     */
    public function setAnonymizeAttempts($anonymizeAttempts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAnonymizeAttempts', [$anonymizeAttempts]);

        return parent::setAnonymizeAttempts($anonymizeAttempts);
    }

    /**
     * {@inheritDoc}
     */
    public function getAnonymizeAttempts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAnonymizeAttempts', []);

        return parent::getAnonymizeAttempts();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function getSteps()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSteps', []);

        return parent::getSteps();
    }

    /**
     * {@inheritDoc}
     */
    public function getStep($uuid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStep', [$uuid]);

        return parent::getStep($uuid);
    }

    /**
     * {@inheritDoc}
     */
    public function addStep(\UJM\ExoBundle\Entity\Step $step)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addStep', [$step]);

        return parent::addStep($step);
    }

    /**
     * {@inheritDoc}
     */
    public function removeStep(\UJM\ExoBundle\Entity\Step $step)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeStep', [$step]);

        return parent::removeStep($step);
    }

    /**
     * {@inheritDoc}
     */
    public function setShowFeedback($showFeedback)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShowFeedback', [$showFeedback]);

        return parent::setShowFeedback($showFeedback);
    }

    /**
     * {@inheritDoc}
     */
    public function getShowFeedback()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShowFeedback', []);

        return parent::getShowFeedback();
    }

    /**
     * {@inheritDoc}
     */
    public function setResourceNode(\Claroline\CoreBundle\Entity\Resource\ResourceNode $resourceNode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResourceNode', [$resourceNode]);

        return parent::setResourceNode($resourceNode);
    }

    /**
     * {@inheritDoc}
     */
    public function getResourceNode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResourceNode', []);

        return parent::getResourceNode();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getMimeType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMimeType', []);

        return parent::getMimeType();
    }

    /**
     * {@inheritDoc}
     */
    public function setMimeType($mimeType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMimeType', [$mimeType]);

        return parent::setMimeType($mimeType);
    }

    /**
     * {@inheritDoc}
     */
    public function setRandomOrder($randomOrder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRandomOrder', [$randomOrder]);

        return parent::setRandomOrder($randomOrder);
    }

    /**
     * {@inheritDoc}
     */
    public function getRandomOrder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRandomOrder', []);

        return parent::getRandomOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function setRandomPick($randomPick)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRandomPick', [$randomPick]);

        return parent::setRandomPick($randomPick);
    }

    /**
     * {@inheritDoc}
     */
    public function getRandomPick()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRandomPick', []);

        return parent::getRandomPick();
    }

    /**
     * {@inheritDoc}
     */
    public function setPick($pick)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPick', [$pick]);

        return parent::setPick($pick);
    }

    /**
     * {@inheritDoc}
     */
    public function getPick()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPick', []);

        return parent::getPick();
    }

    /**
     * {@inheritDoc}
     */
    public function setDuration($duration)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDuration', [$duration]);

        return parent::setDuration($duration);
    }

    /**
     * {@inheritDoc}
     */
    public function getDuration()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDuration', []);

        return parent::getDuration();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaxAttempts($maxAttempts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaxAttempts', [$maxAttempts]);

        return parent::setMaxAttempts($maxAttempts);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaxAttempts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaxAttempts', []);

        return parent::getMaxAttempts();
    }

}
