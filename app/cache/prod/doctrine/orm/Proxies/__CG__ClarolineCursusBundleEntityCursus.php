<?php

namespace Proxies\__CG__\Claroline\CursusBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Cursus extends \Claroline\CursusBundle\Entity\Cursus implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'code', 'title', 'description', 'course', 'blocking', 'details', 'parent', 'children', 'cursusOrder', 'cursusUsers', 'cursusGroups', 'icon', 'workspace', '' . "\0" . 'Claroline\\CursusBundle\\Entity\\Cursus' . "\0" . 'root', '' . "\0" . 'Claroline\\CursusBundle\\Entity\\Cursus' . "\0" . 'lvl', '' . "\0" . 'Claroline\\CursusBundle\\Entity\\Cursus' . "\0" . 'lft', '' . "\0" . 'Claroline\\CursusBundle\\Entity\\Cursus' . "\0" . 'rgt', 'organizations'];
        }

        return ['__isInitialized__', 'id', 'code', 'title', 'description', 'course', 'blocking', 'details', 'parent', 'children', 'cursusOrder', 'cursusUsers', 'cursusGroups', 'icon', 'workspace', '' . "\0" . 'Claroline\\CursusBundle\\Entity\\Cursus' . "\0" . 'root', '' . "\0" . 'Claroline\\CursusBundle\\Entity\\Cursus' . "\0" . 'lvl', '' . "\0" . 'Claroline\\CursusBundle\\Entity\\Cursus' . "\0" . 'lft', '' . "\0" . 'Claroline\\CursusBundle\\Entity\\Cursus' . "\0" . 'rgt', 'organizations'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Cursus $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCode', []);

        return parent::getCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setCode($code)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCode', [$code]);

        return parent::setCode($code);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getCourse()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCourse', []);

        return parent::getCourse();
    }

    /**
     * {@inheritDoc}
     */
    public function setCourse(\Claroline\CursusBundle\Entity\Course $course = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCourse', [$course]);

        return parent::setCourse($course);
    }

    /**
     * {@inheritDoc}
     */
    public function isBlocking()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isBlocking', []);

        return parent::isBlocking();
    }

    /**
     * {@inheritDoc}
     */
    public function setBlocking($blocking)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlocking', [$blocking]);

        return parent::setBlocking($blocking);
    }

    /**
     * {@inheritDoc}
     */
    public function getDetails()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDetails', []);

        return parent::getDetails();
    }

    /**
     * {@inheritDoc}
     */
    public function setDetails($details)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDetails', [$details]);

        return parent::setDetails($details);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent(\Claroline\CursusBundle\Entity\Cursus $parent = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getChildren()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildren', []);

        return parent::getChildren();
    }

    /**
     * {@inheritDoc}
     */
    public function addChild(\Claroline\CursusBundle\Entity\Cursus $cursus)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChild', [$cursus]);

        return parent::addChild($cursus);
    }

    /**
     * {@inheritDoc}
     */
    public function getCursusOrder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCursusOrder', []);

        return parent::getCursusOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function setCursusOrder($cursusOrder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCursusOrder', [$cursusOrder]);

        return parent::setCursusOrder($cursusOrder);
    }

    /**
     * {@inheritDoc}
     */
    public function getCursusUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCursusUsers', []);

        return parent::getCursusUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function getCursusGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCursusGroups', []);

        return parent::getCursusGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function getIcon()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIcon', []);

        return parent::getIcon();
    }

    /**
     * {@inheritDoc}
     */
    public function setIcon($icon)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIcon', [$icon]);

        return parent::setIcon($icon);
    }

    /**
     * {@inheritDoc}
     */
    public function getWorkspace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWorkspace', []);

        return parent::getWorkspace();
    }

    /**
     * {@inheritDoc}
     */
    public function setWorkspace(\Claroline\CoreBundle\Entity\Workspace\Workspace $workspace = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWorkspace', [$workspace]);

        return parent::setWorkspace($workspace);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoot()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoot', []);

        return parent::getRoot();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoot($root)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoot', [$root]);

        return parent::setRoot($root);
    }

    /**
     * {@inheritDoc}
     */
    public function getLvl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLvl', []);

        return parent::getLvl();
    }

    /**
     * {@inheritDoc}
     */
    public function setLvl($lvl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLvl', [$lvl]);

        return parent::setLvl($lvl);
    }

    /**
     * {@inheritDoc}
     */
    public function getLft()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLft', []);

        return parent::getLft();
    }

    /**
     * {@inheritDoc}
     */
    public function setLft($lft)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLft', [$lft]);

        return parent::setLft($lft);
    }

    /**
     * {@inheritDoc}
     */
    public function getRgt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRgt', []);

        return parent::getRgt();
    }

    /**
     * {@inheritDoc}
     */
    public function setRgt($rgt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRgt', [$rgt]);

        return parent::setRgt($rgt);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrganizations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrganizations', []);

        return parent::getOrganizations();
    }

    /**
     * {@inheritDoc}
     */
    public function addOrganization(\Claroline\CoreBundle\Entity\Organization\Organization $organization)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addOrganization', [$organization]);

        return parent::addOrganization($organization);
    }

    /**
     * {@inheritDoc}
     */
    public function removeOrganization(\Claroline\CoreBundle\Entity\Organization\Organization $organization)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeOrganization', [$organization]);

        return parent::removeOrganization($organization);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitleAndCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitleAndCode', []);

        return parent::getTitleAndCode();
    }

    /**
     * {@inheritDoc}
     */
    public function getParentId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentId', []);

        return parent::getParentId();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
