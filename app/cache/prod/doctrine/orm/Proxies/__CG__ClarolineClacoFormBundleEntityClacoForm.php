<?php

namespace Proxies\__CG__\Claroline\ClacoFormBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ClacoForm extends \Claroline\ClacoFormBundle\Entity\ClacoForm implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'template', 'fields', 'categories', 'keywords', 'details', 'resourceNode', 'name', 'mimeType'];
        }

        return ['__isInitialized__', 'id', 'template', 'fields', 'categories', 'keywords', 'details', 'resourceNode', 'name', 'mimeType'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ClacoForm $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getTemplate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTemplate', []);

        return parent::getTemplate();
    }

    /**
     * {@inheritDoc}
     */
    public function setTemplate($template)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTemplate', [$template]);

        return parent::setTemplate($template);
    }

    /**
     * {@inheritDoc}
     */
    public function getFields()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFields', []);

        return parent::getFields();
    }

    /**
     * {@inheritDoc}
     */
    public function getCategories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategories', []);

        return parent::getCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function getKeywords()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getKeywords', []);

        return parent::getKeywords();
    }

    /**
     * {@inheritDoc}
     */
    public function getDetails()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDetails', []);

        return parent::getDetails();
    }

    /**
     * {@inheritDoc}
     */
    public function setDetails($details)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDetails', [$details]);

        return parent::setDetails($details);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaxEntries()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaxEntries', []);

        return parent::getMaxEntries();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaxEntries($maxEntries)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaxEntries', [$maxEntries]);

        return parent::setMaxEntries($maxEntries);
    }

    /**
     * {@inheritDoc}
     */
    public function isCreationEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCreationEnabled', []);

        return parent::isCreationEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreationEnabled($creationEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreationEnabled', [$creationEnabled]);

        return parent::setCreationEnabled($creationEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function isEditionEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEditionEnabled', []);

        return parent::isEditionEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setEditionEnabled($editionEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEditionEnabled', [$editionEnabled]);

        return parent::setEditionEnabled($editionEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function isModerated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isModerated', []);

        return parent::isModerated();
    }

    /**
     * {@inheritDoc}
     */
    public function setModerated($moderated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModerated', [$moderated]);

        return parent::setModerated($moderated);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultHome()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultHome', []);

        return parent::getDefaultHome();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultHome($defaultHome)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultHome', [$defaultHome]);

        return parent::setDefaultHome($defaultHome);
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayNbEntries()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayNbEntries', []);

        return parent::getDisplayNbEntries();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayNbEntries($displayNbEntries)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayNbEntries', [$displayNbEntries]);

        return parent::setDisplayNbEntries($displayNbEntries);
    }

    /**
     * {@inheritDoc}
     */
    public function getMenuPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMenuPosition', []);

        return parent::getMenuPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function setMenuPosition($menuPosition)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMenuPosition', [$menuPosition]);

        return parent::setMenuPosition($menuPosition);
    }

    /**
     * {@inheritDoc}
     */
    public function isRandomEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isRandomEnabled', []);

        return parent::isRandomEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setRandomEnabled($randomEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRandomEnabled', [$randomEnabled]);

        return parent::setRandomEnabled($randomEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getRandomCategories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRandomCategories', []);

        return parent::getRandomCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function setRandomCategories(array $categories)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRandomCategories', [$categories]);

        return parent::setRandomCategories($categories);
    }

    /**
     * {@inheritDoc}
     */
    public function getRandomStartDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRandomStartDate', []);

        return parent::getRandomStartDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setRandomStartDate(\DateTime $startDate = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRandomStartDate', [$startDate]);

        return parent::setRandomStartDate($startDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getRandomEndDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRandomEndDate', []);

        return parent::getRandomEndDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setRandomEndDate(\DateTime $endDate = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRandomEndDate', [$endDate]);

        return parent::setRandomEndDate($endDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getSearchEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSearchEnabled', []);

        return parent::getSearchEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setSearchEnabled($searchEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSearchEnabled', [$searchEnabled]);

        return parent::setSearchEnabled($searchEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function isSearchColumnEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSearchColumnEnabled', []);

        return parent::isSearchColumnEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setSearchColumnEnabled($searchColumnEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSearchColumnEnabled', [$searchColumnEnabled]);

        return parent::setSearchColumnEnabled($searchColumnEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayMetadata()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayMetadata', []);

        return parent::getDisplayMetadata();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayMetadata($displayMetadata)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayMetadata', [$displayMetadata]);

        return parent::setDisplayMetadata($displayMetadata);
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayCategories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayCategories', []);

        return parent::getDisplayCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayCategories($displayCategories)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayCategories', [$displayCategories]);

        return parent::setDisplayCategories($displayCategories);
    }

    /**
     * {@inheritDoc}
     */
    public function getOpenCategories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOpenCategories', []);

        return parent::getOpenCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function setOpenCategories($openCategories)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOpenCategories', [$openCategories]);

        return parent::setOpenCategories($openCategories);
    }

    /**
     * {@inheritDoc}
     */
    public function isCommentsEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCommentsEnabled', []);

        return parent::isCommentsEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentsEnabled($commentsEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentsEnabled', [$commentsEnabled]);

        return parent::setCommentsEnabled($commentsEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function isAnonymousCommentsEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAnonymousCommentsEnabled', []);

        return parent::isAnonymousCommentsEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setAnonymousCommentsEnabled($anonymousCommentsEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAnonymousCommentsEnabled', [$anonymousCommentsEnabled]);

        return parent::setAnonymousCommentsEnabled($anonymousCommentsEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getModerateComments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModerateComments', []);

        return parent::getModerateComments();
    }

    /**
     * {@inheritDoc}
     */
    public function setModerateComments($moderateComments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModerateComments', [$moderateComments]);

        return parent::setModerateComments($moderateComments);
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayComments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayComments', []);

        return parent::getDisplayComments();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayComments($displayComments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayComments', [$displayComments]);

        return parent::setDisplayComments($displayComments);
    }

    /**
     * {@inheritDoc}
     */
    public function getOpenComments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOpenComments', []);

        return parent::getOpenComments();
    }

    /**
     * {@inheritDoc}
     */
    public function setOpenComments($openComments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOpenComments', [$openComments]);

        return parent::setOpenComments($openComments);
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayCommentAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayCommentAuthor', []);

        return parent::getDisplayCommentAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayCommentAuthor($displayCommentAuthor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayCommentAuthor', [$displayCommentAuthor]);

        return parent::setDisplayCommentAuthor($displayCommentAuthor);
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayCommentDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayCommentDate', []);

        return parent::getDisplayCommentDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayCommentDate($displayCommentDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayCommentDate', [$displayCommentDate]);

        return parent::setDisplayCommentDate($displayCommentDate);
    }

    /**
     * {@inheritDoc}
     */
    public function isVotesEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isVotesEnabled', []);

        return parent::isVotesEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setVotesEnabled($votesEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVotesEnabled', [$votesEnabled]);

        return parent::setVotesEnabled($votesEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayVotes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayVotes', []);

        return parent::getDisplayVotes();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayVotes($displayVotes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayVotes', [$displayVotes]);

        return parent::setDisplayVotes($displayVotes);
    }

    /**
     * {@inheritDoc}
     */
    public function getOpenVotes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOpenVotes', []);

        return parent::getOpenVotes();
    }

    /**
     * {@inheritDoc}
     */
    public function setOpenVotes($openVotes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOpenVotes', [$openVotes]);

        return parent::setOpenVotes($openVotes);
    }

    /**
     * {@inheritDoc}
     */
    public function getVotesStartDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVotesStartDate', []);

        return parent::getVotesStartDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setVotesStartDate(\DateTime $startDate = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVotesStartDate', [$startDate]);

        return parent::setVotesStartDate($startDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getVotesEndDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVotesEndDate', []);

        return parent::getVotesEndDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setVotesEndDate(\DateTime $endDate = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVotesEndDate', [$endDate]);

        return parent::setVotesEndDate($endDate);
    }

    /**
     * {@inheritDoc}
     */
    public function isKeywordsEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isKeywordsEnabled', []);

        return parent::isKeywordsEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setKeywordsEnabled($keywordsEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setKeywordsEnabled', [$keywordsEnabled]);

        return parent::setKeywordsEnabled($keywordsEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function isNewKeywordsEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isNewKeywordsEnabled', []);

        return parent::isNewKeywordsEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setNewKeywordsEnabled($newKeywordsEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNewKeywordsEnabled', [$newKeywordsEnabled]);

        return parent::setNewKeywordsEnabled($newKeywordsEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayKeywords()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayKeywords', []);

        return parent::getDisplayKeywords();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayKeywords($displayKeywords)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayKeywords', [$displayKeywords]);

        return parent::setDisplayKeywords($displayKeywords);
    }

    /**
     * {@inheritDoc}
     */
    public function getOpenKeywords()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOpenKeywords', []);

        return parent::getOpenKeywords();
    }

    /**
     * {@inheritDoc}
     */
    public function setOpenKeywords($openKeywords)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOpenKeywords', [$openKeywords]);

        return parent::setOpenKeywords($openKeywords);
    }

    /**
     * {@inheritDoc}
     */
    public function setResourceNode(\Claroline\CoreBundle\Entity\Resource\ResourceNode $resourceNode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResourceNode', [$resourceNode]);

        return parent::setResourceNode($resourceNode);
    }

    /**
     * {@inheritDoc}
     */
    public function getResourceNode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResourceNode', []);

        return parent::getResourceNode();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getMimeType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMimeType', []);

        return parent::getMimeType();
    }

    /**
     * {@inheritDoc}
     */
    public function setMimeType($mimeType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMimeType', [$mimeType]);

        return parent::setMimeType($mimeType);
    }

}
