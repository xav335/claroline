{% macro renderList(array) %}
    {% import _self as self %}
    <ul>
    {% for element in array %}
        {% if element is iterable %}
             {{ self.renderList(element) }}
        {% else %}
        <li> {{ element }} </li>
        {% endif %}
    {% endfor %}
    </ul>
{% endmacro %}


{% macro flashBox() %}
    {% import _self as self %}
    {% set flashBag = app.session.getFlashBag() %}
    {% if flashBag|length > 0 %}
        {% set flashes =
            {
                'info': flashBag.get('info'),
                'success': flashBag.get('success'),
                'warning': flashBag.get('warning'),
                'danger': flashBag.get('error'),
                'alert': flashBag.get('alert')
            }
        %}
        {% for category, msgs in flashes %}
            {% if msgs|length > 0 %}
                <div class="alert alert-{{ category }}">
                    <a class="close" data-dismiss="alert" href="#" aria-hidden="true">&times;</a>
                    {{ self.renderList(msgs) }}
                </div>
            {% endif %}
        {% endfor %}
    {% endif %}
{% endmacro %}

{% macro sectionHeader(text) %}
    <div class="row">
        <div class="col-md-12">
            <h2 class="section-header">{{ text }}</h2>
        </div>
    </div>
{% endmacro %}

{% macro breadcrumbs(elements) %}
    {% spaceless %}
    <ul class="breadcrumb">
        {% for element in elements %}
            <li{% if loop.last %} class="active"{% endif %}>
                {% if not loop.last %}
                    <a href="{{ element['href'] }}">{% if element['icon'] is defined %}<i class="{{ element['icon'] }}"></i> {% endif %}{{ element['name'] }}</a>
                {% else %}<span>{{ element['name'] }}</span>{% endif %}
            </li>
        {% endfor %}
    </ul>
    {% endspaceless %}
{% endmacro %}

{% macro desktopBreadcrumbs(elements) %}
    {% import _self as self %}

    {% set myDesktop = [{
            'icon': 'fa fa-home',
            'name': 'desktop'|trans({}, 'platform'),
            'href': path('claro_desktop_open')
        }]
    %}
    {% set finalElements = myDesktop|merge(elements) %}

    {{ self.breadcrumbs(finalElements) }}
{% endmacro %}

{% macro workspaceBreadcrumbs(workspace, elements) %}
    {% import _self as self %}

    {% if has_role('ROLE_ANONYMOUS') %}
        {% set workspaceElements =
            [
                {
                    'icon': 'fa fa-book',
                    'name': 'workspaces'|trans({}, 'platform'),
                    'href': path('claro_workspace_list')
                },
                {
                    'name': workspace.getName() ~ ' (' ~  workspace.getCode() ~ ') ',
                    'href': path('claro_workspace_open', {'workspaceId': workspace.getId(), 'toolName': 'home'})
                }
            ]
        %}
    {% else %}
        {% set workspaceElements =
            [
                {
                    'icon': 'fa fa-book',
                    'name': 'my_workspaces'|trans({}, 'platform'),
                    'href': path('claro_workspace_by_user')
                },
                {
                    'name': workspace.getName() ~ ' (' ~  workspace.getCode() ~ ') ',
                    'href': path('claro_workspace_open', {'workspaceId': workspace.getId(), 'toolName': 'home'})
                }
            ]
        %}
    {% endif %}
    {% set finalElements = workspaceElements|merge(elements) %}

    {{ self.breadcrumbs(finalElements) }}
{% endmacro %}

{% macro displayUser(user) %}
    {% if user %}
        {% if not user.isRemoved %}
            <a href="{{path('claro_public_profile_view', {'publicUrl': user.getPublicUrl()})}}">
                {{ user.getUsername() }}
            </a>
        {% else %}
            <div>
                {{ 'user_removed'|trans({}, 'platform') }}
            </div>
        {% endif %}
    {% else %}
        claroline-connect
    {% endif %}
{% endmacro %}

{% macro maxResultsSelectBox(currentMax, onChangeHandler, label) %}
    <div class="input-group margin-bottom-md">
        <select class="form-control input-md" id="max-select" onchange="{{ onChangeHandler }}">
            <option{% if currentMax == 20 %} selected{% endif %}>20</option>
            <option{% if currentMax == 50 %} selected{% endif %}>50</option>
            <option{% if currentMax == 100 %} selected{% endif %}>100</option>
            <option{% if currentMax == 200 %} selected{% endif %}>200</option>
            <option{% if currentMax == 500 %} selected{% endif %}>500</option>
        </select>
        {% if label %}
            <span class="input-group-addon">{{ label|trans({}, 'platform') }}</span>
        {% else %}
            <span class="input-group-addon">{{ 'line_per_page'|trans({}, 'platform') }}</span>
        {% endif %}
    </div>
{% endmacro %}

{% macro getTheme(config) %}
    {% spaceless %}
        {% if config.getParameter('theme') is defined and asset_exists('themes/' ~ config.getParameter('theme') ~ '/bootstrap.css') %}
            {# from theme #}
            {% set themeCSS = getAssetPath() ~ '/themes/' ~ config.getParameter('theme') ~ '/bootstrap.css' %}
        {% else %}
            {# default #}
            {% set themeCSS = getAssetPath() ~ '/themes/claroline/bootstrap.css' %}
        {% endif %}

        {{ themeCSS ~ '?commit=' ~ get_current_distribution_commit() }}
    {% endspaceless %}
{% endmacro %}

{% macro getDefaultTheme() %}
    {% spaceless %}
        {{ getAssetPath() ~ '/themes/claroline/bootstrap.css' }}
    {% endspaceless %}
{% endmacro %}
