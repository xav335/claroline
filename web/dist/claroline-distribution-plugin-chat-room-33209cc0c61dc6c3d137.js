webpackJsonp([16],{0:function(module,exports,__webpack_require__){"use strict";var _index=__webpack_require__(1);var _index2=_interopRequireDefault(_index);__webpack_require__(4);__webpack_require__(5);__webpack_require__(6);__webpack_require__(595);__webpack_require__(597);__webpack_require__(599);__webpack_require__(149);var _routing=__webpack_require__(601);var _routing2=_interopRequireDefault(_routing);var _ChatRoomArchiveCtrl=__webpack_require__(607);var _ChatRoomArchiveCtrl2=_interopRequireDefault(_ChatRoomArchiveCtrl);var _ChatRoomInitCtrl=__webpack_require__(612);var _ChatRoomInitCtrl2=_interopRequireDefault(_ChatRoomInitCtrl);var _ChatRoomTextCtrl=__webpack_require__(613);var _ChatRoomTextCtrl2=_interopRequireDefault(_ChatRoomTextCtrl);var _ChatRoomVideoCtrl=__webpack_require__(614);var _ChatRoomVideoCtrl2=_interopRequireDefault(_ChatRoomVideoCtrl);var _ChatRoomAudioCtrl=__webpack_require__(615);var _ChatRoomAudioCtrl2=_interopRequireDefault(_ChatRoomAudioCtrl);var _ChatConfigureCtrl=__webpack_require__(616);var _ChatConfigureCtrl2=_interopRequireDefault(_ChatConfigureCtrl);var _ChatRoomService=__webpack_require__(618);var _ChatRoomService2=_interopRequireDefault(_ChatRoomService);var _RTCService=__webpack_require__(619);var _RTCService2=_interopRequireDefault(_RTCService);var _ChatRoomInputDirective=__webpack_require__(620);var _ChatRoomInputDirective2=_interopRequireDefault(_ChatRoomInputDirective);var _ChatRoomMessagesDirective=__webpack_require__(622);var _ChatRoomMessagesDirective2=_interopRequireDefault(_ChatRoomMessagesDirective);var _ChatRoomUsersDirective=__webpack_require__(624);var _ChatRoomUsersDirective2=_interopRequireDefault(_ChatRoomUsersDirective);var _ChatRoomVideosDirective=__webpack_require__(626);var _ChatRoomVideosDirective2=_interopRequireDefault(_ChatRoomVideosDirective);var _ChatRoomAudiosDirective=__webpack_require__(628);var _ChatRoomAudiosDirective2=_interopRequireDefault(_ChatRoomAudiosDirective);var _interceptorsDefault=__webpack_require__(89);var _interceptorsDefault2=_interopRequireDefault(_interceptorsDefault);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}_index2.default.module("ChatRoomModule",["ui.bootstrap","ui.bootstrap.tpls","ui.translation","ui.scrollbar","ui.router","XmppModule","FormBuilder","UserModule"]).controller("ChatRoomInitCtrl",["$state","ChatRoomService",_ChatRoomInitCtrl2.default]).controller("ChatRoomArchiveCtrl",["$state","$uibModal","$rootScope","ChatRoomService","FormBuilderService",_ChatRoomArchiveCtrl2.default]).controller("ChatRoomTextCtrl",["$state","$uibModal","$rootScope","ChatRoomService","FormBuilderService",_ChatRoomTextCtrl2.default]).controller("ChatRoomAudioCtrl",["$state","$uibModal","$log","$rootScope","ChatRoomService","RTCService","FormBuilderService",_ChatRoomAudioCtrl2.default]).controller("ChatRoomVideoCtrl",["$state","$uibModal","$log","$rootScope","ChatRoomService","RTCService","FormBuilderService",_ChatRoomVideoCtrl2.default]).controller("ChatConfigureCtrl",_ChatConfigureCtrl2.default).service("ChatRoomService",_ChatRoomService2.default).service("RTCService",_RTCService2.default).directive("chatRoomInput",function(){return new _ChatRoomInputDirective2.default}).directive("chatRoomMessages",function(){return new _ChatRoomMessagesDirective2.default}).directive("chatRoomUsers",function(){return new _ChatRoomUsersDirective2.default}).directive("chatRoomVideos",function(){return new _ChatRoomVideosDirective2.default}).directive("chatRoomAudios",function(){return new _ChatRoomAudiosDirective2.default}).config(_routing2.default).config(_interceptorsDefault2.default)},595:function(module,exports,__webpack_require__){"use strict";var _index=__webpack_require__(1);var _index2=_interopRequireDefault(_index);__webpack_require__(5);__webpack_require__(6);var _UserService=__webpack_require__(596);var _UserService2=_interopRequireDefault(_UserService);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}_index2.default.module("UserModule",["ui.bootstrap","ui.bootstrap.tpls","ui.translation"]).service("UserService",_UserService2.default)},596:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=__webpack_require__(14);var _createClass3=_interopRequireDefault(_createClass2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var UserService=function(){function UserService(){(0,_classCallCheck3.default)(this,UserService);this.users=[];this.bannedUsers=[]}(0,_createClass3.default)(UserService,[{key:"getUsers",value:function getUsers(){return this.users}},{key:"getBannedUsers",value:function getBannedUsers(){return this.bannedUsers}},{key:"addUser",value:function addUser(username,name){var color=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var affiliation=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var role=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var index=this.users.findIndex(function(u){return u["username"]===username});var added=false;if(index===-1){this.users.push({username:username,name:name,color:color,affiliation:affiliation,role:role});added=true}else{this.users[index]["affiliation"]=affiliation;this.users[index]["role"]=role}return added}},{key:"removeUser",value:function removeUser(username){var index=this.users.findIndex(function(u){return u["username"]===username});if(index>-1){this.users.splice(index,1)}}},{key:"addBannedUser",value:function addBannedUser(username,name){var color=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var index=this.bannedUsers.findIndex(function(u){return u["username"]===username});if(index===-1){this.bannedUsers.push({username:username,name:name,color:color})}}},{key:"removeBannedUser",value:function removeBannedUser(username){var index=this.bannedUsers.findIndex(function(u){return u["username"]===username});if(index>-1){this.bannedUsers.splice(index,1)}}},{key:"hasUser",value:function hasUser(username){return this.users.findIndex(function(u){return u["username"]===username})>-1}},{key:"hasBannedUser",value:function hasBannedUser(username){return this.bannedUsers.findIndex(function(u){return u["username"]===username})>-1}},{key:"getUserFullName",value:function getUserFullName(username){var index=this.users.findIndex(function(u){return u["username"]===username});return index>-1?this.users[index]["name"]:username}},{key:"getBannedUserFullName",value:function getBannedUserFullName(username){var index=this.bannedUsers.findIndex(function(u){return u["username"]===username});return index>-1?this.bannedUsers[index]["name"]:username}},{key:"getUserDatas",value:function getUserDatas(username){var index=this.users.findIndex(function(u){return u["username"]===username});return index>-1?this.users[index]:null}},{key:"getBannedUserDatas",value:function getBannedUserDatas(username){var index=this.bannedUsers.findIndex(function(u){return u["username"]===username});return index>-1?this.bannedUsers[index]:null}},{key:"getUserIndex",value:function getUserIndex(username){return this.users.findIndex(function(u){return u["username"]===username})}}]);return UserService}();exports.default=UserService},597:function(module,exports,__webpack_require__){"use strict";var _index=__webpack_require__(1);var _index2=_interopRequireDefault(_index);var _XmppService=__webpack_require__(598);var _XmppService2=_interopRequireDefault(_XmppService);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}_index2.default.module("XmppModule",[]).service("XmppService",_XmppService2.default)},598:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=__webpack_require__(14);var _createClass3=_interopRequireDefault(_createClass2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var XmppService=function(){function XmppService($rootScope,$http,$log){(0,_classCallCheck3.default)(this,XmppService);this.protocol=XmppService._getGlobal("xmppSsl")?"https":"http";this.$rootScope=$rootScope;this.$http=$http;this.$log=$log;this.config={adminConnection:null,connection:null,username:null,password:null,firstName:null,lastName:null,fullName:null,color:null,xmppHost:XmppService._getGlobal("xmppHost"),boshPort:XmppService._getGlobal("boshPort"),boshService:this.protocol+"://"+XmppService._getGlobal("xmppHost")+":"+XmppService._getGlobal("boshPort")+"/http-bind",canChat:false,connected:false,busy:false,adminConnected:false};this.adminUsername=XmppService._getGlobal("chatAdminUsername");this.adminPassword=XmppService._getGlobal("chatAdminPassword");this._connectionCallback=this._connectionCallback.bind(this);this._adminConnectionCallback=this._adminConnectionCallback.bind(this);this._connectedCallback=function(){}}(0,_createClass3.default)(XmppService,[{key:"_connectionCallback",value:function _connectionCallback(status){if(status===Strophe.Status.CONNECTED){this.$log.log("Connected");this.config["connection"].send($pres().c("priority").t("-1"));this.config["connected"]=true;this.config["busy"]=false;this.refreshScope();this._connectedCallback()}else if(status===Strophe.Status.CONNFAIL){this.$log.log("Connection failed !");this.config["connected"]=false;this.config["busy"]=false}else if(status===Strophe.Status.DISCONNECTED){this.$log.log("Disconnected");this.config["connected"]=false;this.config["busy"]=false}else if(status===Strophe.Status.CONNECTING){this.config["busy"]=true;this.$log.log("Connecting...")}else if(status===Strophe.Status.DISCONNECTING){this.config["busy"]=false;this.$log.log("Disconnecting...")}}},{key:"_adminConnectionCallback",value:function _adminConnectionCallback(status){if(status===Strophe.Status.CONNECTED){this.$log.log("admin Connected");this.config["adminConnection"].send($pres().c("priority").t("-1"));this.config["adminConnected"]=true;this.refreshScope()}else if(status===Strophe.Status.CONNFAIL){this.$log.log("admin Connection failed !")}else if(status===Strophe.Status.DISCONNECTED){this.$log.log("admin Disconnected")}else if(status===Strophe.Status.CONNECTING){this.$log.log("admin Connecting...")}else if(status===Strophe.Status.DISCONNECTING){this.$log.log("admin Disconnecting...")}}},{key:"getConfig",value:function getConfig(){return this.config}},{key:"setConnectedCallback",value:function setConnectedCallback(callback){this._connectedCallback=callback}},{key:"connect",value:function connect(){var _this=this;if(!this.config["connected"]&&!this.config["busy"]){var route=Routing.generate("api_get_xmpp_options");this.$http.get(route).then(function(datas){if(datas["status"]===200){_this.config["canChat"]=datas["data"]["canChat"];if(datas["data"]["canChat"]){_this.config["username"]=datas["data"]["chatUsername"];_this.config["password"]=datas["data"]["chatPassword"];_this.config["firstName"]=datas["data"]["firstName"];_this.config["lastName"]=datas["data"]["lastName"];_this.config["fullName"]=datas["data"]["firstName"]+" "+datas["data"]["lastName"];_this.config["color"]=datas["data"]["chatColor"];_this.config["connection"]=new Strophe.Connection(_this.config["boshService"]);_this.config["connection"].connect(_this.config["username"]+"@"+_this.config["xmppHost"],_this.config["password"],_this._connectionCallback)}}})}}},{key:"connectWithAdmin",value:function connectWithAdmin(){var _this2=this;if(!this.config["connected"]&&!this.config["busy"]){var route=Routing.generate("api_get_xmpp_options");this.$http.get(route).then(function(datas){if(datas["status"]===200){_this2.config["canChat"]=datas["data"]["canChat"];if(datas["data"]["canChat"]){_this2.config["username"]=datas["data"]["chatUsername"];_this2.config["password"]=datas["data"]["chatPassword"];_this2.config["firstName"]=datas["data"]["firstName"];_this2.config["lastName"]=datas["data"]["lastName"];_this2.config["fullName"]=datas["data"]["firstName"]+" "+datas["data"]["lastName"];_this2.config["color"]=datas["data"]["chatColor"];_this2.config["adminConnection"]=new Strophe.Connection(_this2.config["boshService"]);_this2.config["adminConnection"].connect(_this2.adminUsername+"@"+_this2.config["xmppHost"],_this2.adminPassword,_this2._adminConnectionCallback);_this2.config["connection"]=new Strophe.Connection(_this2.config["boshService"]);_this2.config["connection"].connect(_this2.config["username"]+"@"+_this2.config["xmppHost"],_this2.config["password"],_this2._connectionCallback)}}})}}},{key:"refreshScope",value:function refreshScope(){this.$rootScope.$apply()}}],[{key:"_getGlobal",value:function _getGlobal(name){if(typeof window[name]==="undefined"){throw new Error("Expected "+name+" to be exposed in a window."+name+" variable")}return window[name]}}]);return XmppService}();exports.default=XmppService},599:function(module,exports,__webpack_require__){"use strict";var _index=__webpack_require__(1);var _index2=_interopRequireDefault(_index);var _StickBottomDirective=__webpack_require__(600);var _StickBottomDirective2=_interopRequireDefault(_StickBottomDirective);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}_index2.default.module("ui.scrollbar",[]).directive("scrollBottom",["$parse","$window","$timeout",function($parse,$window,$timeout){return new _StickBottomDirective2.default($parse,$window,$timeout)}])},600:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=__webpack_require__(14);var _createClass3=_interopRequireDefault(_createClass2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var StickBottomDirective=function(){function StickBottomDirective($parse,$window,$timeout){(0,_classCallCheck3.default)(this,StickBottomDirective);this.$parse=$parse;this.$window=$window;this.$timeout=$timeout;this.restrict="A"}(0,_createClass3.default)(StickBottomDirective,[{key:"link",value:function link(scope,$el,$attrs){var _this=this;var options=this.$parse($attrs.scrollBottom)(scope.$parent);var always=options.always?true:false;var el=$el[0];scope.$watch(function(){return $el.html()},function(){_this.scrollIfReady(el,always)},true);this.$timeout(this.scrollBottom(el),0,false)}},{key:"scrollBottom",value:function scrollBottom(el){el.scrollTop=el.scrollHeight}},{key:"isBottom",value:function isBottom(el){return el.scrollTop+el.clientHeight+1>=el.scrollHeight}},{key:"scrollReady",value:function scrollReady(el,always){var ready=this.isBottom(el)||always;return ready}},{key:"scrollIfReady",value:function scrollIfReady(el,always){if(this.scrollReady(el,always))this.scrollBottom(el)}}]);return StickBottomDirective}();exports.default=StickBottomDirective},601:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=function($stateProvider,$urlRouterProvider){$stateProvider.state("main",{url:"/main",template:_main2.default,controller:"ChatRoomInitCtrl",controllerAs:"crmc"}).state("text",{url:"/text",template:_roomText2.default,controller:"ChatRoomTextCtrl",controllerAs:"crc"}).state("video",{url:"/video",template:_roomVideo2.default,controller:"ChatRoomVideoCtrl",controllerAs:"crc"}).state("audio",{url:"/audio",template:_roomAudio2.default,controller:"ChatRoomAudioCtrl",controllerAs:"crc"}).state("archive",{url:"/archive",template:_archive2.default,controller:"ChatRoomArchiveCtrl",controllerAs:"cra"});$urlRouterProvider.otherwise("/main")};var _main=__webpack_require__(602);var _main2=_interopRequireDefault(_main);var _roomText=__webpack_require__(603);var _roomText2=_interopRequireDefault(_roomText);var _roomVideo=__webpack_require__(604);var _roomVideo2=_interopRequireDefault(_roomVideo);var _roomAudio=__webpack_require__(605);var _roomAudio2=_interopRequireDefault(_roomAudio);var _archive=__webpack_require__(606);var _archive2=_interopRequireDefault(_archive);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}},602:function(module,exports){module.exports="<div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n        <h3 class=\"panel-title\">\n            {{ crmc.chatRoomConfig.resourceName }}\n        </h3>\n    </div>\n    <div class=\"panel-body\">\n        <!-- If a chat account has been created -->\n        <div ng-if=\"crmc.chatRoomConfig['canChat']\">\n\n            <!-- Uninitialized room -->\n            <div ng-if=\"crmc.chatRoomConfig['chatRoom']['room_status_text'] === 'uninitialized'\">\n                <div class=\"alert alert-warning\" >\n                    {{ 'chat_room_uninitialized_msg'|trans:{}:'chat' }}\n                </div>\n                <button class=\"btn btn-primary\"\n                    ng-if=\"crmc.chatRoomConfig['canEdit']\"\n                    ng-click=\"crmc.initializeChatRoom()\"\n                >\n                    {{ 'init_room'|trans:{}:'chat' }}\n                </button>\n            </div>\n                <!-- Open room -->\n                <div ng-if=\"crmc.chatRoomConfig['chatRoom']['room_status_text'] === 'open'\">\n                    <button class=\"btn btn-primary\"\n                        ng-click=\"crmc.connectToRoom()\"\n                    >\n                        {{ 'connect_to_chat_room'|trans:{}:'chat' }}\n                    </button>\n                </div>\n                <div class=\"panel panel-body\">\n                    <!-- Unknown status room -->\n                    <div ng-if=\"crmc.chatRoomConfig['chatRoom']['room_status_text'] === 'unknown'\">\n                        <div class=\"alert alert-danger\">\n                            {{ 'chat_room_unknown_status_msg'|trans:{}:'chat' }}\n                        </div>\n                    </div>\n\n                    <div ng-if=\"crmc.chatRoomConfig['busy'] || crmc.xmppConfig['busy']\" class=\"alert alert-warning\">\n                        {{ 'connecting'|trans:{}:'chat' }}\n                    </div>\n                </div>\n        </div>\n\n        <!-- Else -->\n        <div ng-if=\"!crmc.chatRoomConfig['canChat']\">\n            <div class=\"alert alert-danger\">\n                {{ 'chat_account_not_activated_msg'|trans:{}:'chat' }}\n            </div>\n        </div>\n    </div>\n</div>\n"},603:function(module,exports){module.exports='<div class="panel panel-default">\n    <div class="panel-heading clearfix">\n        <h3 class="panel-title">\n            {{ crc.chatRoomConfig.resourceName }}\n            <button ng-if="crc.chatRoomConfig.canEdit" class="btn btn-default pull-right" ng-click="crc.configure()">\n                <i class="fa fa-cog"></i>\n            </button>\n        </h3>\n    </div>\n    <div class="panel-body">\n        <div class="panel">\n            <button class="btn btn-default" ng-click="crc.goBack()">\n                {{ \'back\'|trans:{}:\'platform\' }}\n            </button>\n        </div>\n        <div ng-if="crc.chatRoomConfig[\'chatRoom\'][\'room_type_text\'] === \'text\'" class="panel panel-body">\n            <div ng-if="crc.chatRoomConfig[\'chatRoom\'][\'room_status_text\'] === \'open\'">\n                <div ng-if="crc.chatRoomConfig[\'connected\']">\n                    <div class="row chat-room-row">\n                        <div id="chat-room-content-panel" class="col-md-9">\n                            <chat-room-messages></chat-room-messages>\n                        </div>\n                        <div id="chat-room-users-panel" class="col-md-3">\n                            <chat-room-users></chat-room-users>\n                        </div>\n                    </div>\n                    <div class="row chat-room-row">\n                        <chat-room-input></chat-room-input>\n                    </div>\n                </div>\n                <div ng-if="!crc.chatRoomConfig[\'connected\']">\n                    <div ng-if="crc.chatRoomConfig[\'busy\'] || crc.xmppConfig[\'busy\']" class="alert alert-warning">\n                        {{ \'connecting\'|trans:{}:\'chat\' }}\n                    </div>\n                    <div class="alert alert-{{ crc.chatRoomConfig[\'messageType\'] }}" ng-if="crc.chatRoomConfig[\'message\']">\n                        {{ crc.chatRoomConfig[\'message\'] }}\n                    </div>\n                    <div class="alert alert-danger" ng-if="!(crc.chatRoomConfig[\'busy\'] || crc.xmppConfig[\'busy\'])">\n                        {{ \'not_connected\'|trans:{}:\'chat\' }}\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div ng-if="crc.chatRoomConfig[\'chatRoom\'][\'room_type_text\'] !== \'text\'" class="panel-body">\n            {{ \'invalid_room_type\'|trans:{}:\'chat\' }}\n        </div>\n        <div class="alert alert-danger"  ng-if="crc.chatRoomConfig[\'chatRoom\'][\'room_status_text\'] === \'closed\'" class="panel-body">\n            {{ \'chat_room_closed_msg\'|trans:{}:\'chat\' }}\n        </div>\n    </div>\n</div>\n'},604:function(module,exports){module.exports='<div class="panel panel-default">\n    <div class="panel-heading clearfix">\n        <h3 class="panel-title">\n            {{ crc.chatRoomConfig.resourceName }}\n            <button ng-if="crc.chatRoomConfig.canEdit" class="btn btn-default pull-right" ng-click="crc.configure()">\n                <i class="fa fa-cog"></i>\n            </button>\n        </h3>\n    </div>\n    <div class="panel-body">\n        <div clas="panel">\n            <button class="btn btn-default" ng-click="crc.goBack()">\n                {{ \'back\'|trans:{}:\'platform\' }}\n            </button>\n        </div>\n        <div ng-if="crc.chatRoomConfig[\'chatRoom\'][\'room_type_text\'] === \'video\'" class="panel panel-body">\n            <div ng-if="crc.chatRoomConfig[\'chatRoom\'][\'room_status_text\'] === \'open\'">\n                <div ng-if="crc.chatRoomConfig[\'connected\']">\n                    <div id="chat-room-video-row" class="row">\n                        <div class="col-md-8">\n                            <div id="main-video-container">\n                                <video id="main-video" class="not-video-js mute" autoplay="autoplay" ng-src="{{ crc.rtcConfig[\'sourceStreams\'][crc.rtcConfig[\'mainStreamUsername\']] }}"></video>\n                            </div>\n                        </div>\n                        <div class="col-md-4">\n                            <chat-room-messages></chat-room-messages>\n                            <chat-room-input></chat-room-input>\n                        </div>\n                    </div>\n                    <hr>\n                    <div class="row">\n                        <chat-room-videos></chat-room-videos>\n                    </div>\n                </div>\n                <div ng-if="!crc.chatRoomConfig[\'connected\']">\n                    <div ng-if="crc.chatRoomConfig[\'busy\'] || crc.xmppConfig[\'busy\']" class="alert alert-warning">\n                        {{ \'connecting\'|trans:{}:\'chat\' }}\n                    </div>\n                    <div class="alert alert-{{ crc.chatRoomConfig[\'messageType\'] }}" ng-if="crc.chatRoomConfig[\'message\']">\n                        {{ crc.chatRoomConfig[\'message\'] }}\n                    </div>\n                    <div class="alert alert-danger" ng-if="!(crc.chatRoomConfig[\'busy\'] || crc.xmppConfig[\'busy\'])">\n                        {{ \'not_connected\'|trans:{}:\'chat\' }}\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div ng-if="crc.chatRoomConfig[\'chatRoom\'][\'room_type_text\'] !== \'video\'" class="panel-body">\n            {{ \'invalid_room_type\'|trans:{}:\'chat\' }}\n        </div>\n        <div class="alert alert-danger"  ng-if="crc.chatRoomConfig[\'chatRoom\'][\'room_status_text\'] === \'closed\'" class="panel-body">\n            {{ \'chat_room_closed_msg\'|trans:{}:\'chat\' }}\n        </div>\n    </div>\n</div>\n'},605:function(module,exports){module.exports="<div class=\"panel panel-default\">\n    <div class=\"panel-heading clearfix\">\n        <h3 class=\"panel-title\">\n            {{ crc.chatRoomConfig.resourceName }}\n            <button ng-if=\"crc.chatRoomConfig.canEdit\" class=\"btn btn-default pull-right\" ng-click=\"crc.configure()\">\n                <i class=\"fa fa-cog\"></i>\n            </button>\n        </h3>\n    </div>\n    <div class=\"panel-body\">\n        <div class=\"panel\">\n            <button class=\"btn btn-default\" ng-click=\"crc.goBack()\">\n                {{ 'back'|trans:{}:'platform' }}\n            </button>\n        </div>\n        <div ng-if=\"crc.chatRoomConfig['chatRoom']['room_type_text'] === 'audio'\" class=\"panel panel-body\">\n            <div ng-if=\"crc.chatRoomConfig['chatRoom']['room_status_text'] === 'open'\">\n                <div ng-if=\"crc.chatRoomConfig['connected']\">\n                    <div class=\"panel-body row\">\n                        <div class=\"col-md-2\">\n                            <chat-room-audios></chat-room-audios>\n                        </div>\n                        <div class=\"col-md-10\">\n                            <chat-room-messages></chat-room-messages>\n                            <chat-room-input></chat-room-input>\n                        </div>\n                    </div>\n                </div>\n                <div ng-if=\"!crc.chatRoomConfig['connected']\">\n                    <div ng-if=\"crc.chatRoomConfig['busy'] || crc.xmppConfig['busy']\" class=\"alert alert-warning\">\n                        {{ 'connecting'|trans:{}:'chat' }}\n                    </div>\n                    <div class=\"alert alert-{{ crc.chatRoomConfig['messageType'] }}\" ng-if=\"crc.chatRoomConfig['message']\">\n                        {{ crc.chatRoomConfig['message'] }}\n                    </div>\n                    <div class=\"alert alert-danger\" ng-if=\"!(crc.chatRoomConfig['busy'] || crc.xmppConfig['busy'])\">\n                        {{ 'not_connected'|trans:{}:'chat' }}\n                    </div>\n                </div>\n            </div>\n            <div ng-if=\"crc.chatRoomConfig['chatRoom']['room_status_text'] !== 'open'\" class=\"alert alert-danger\">\n                {{ 'chat_room_status'|trans:{}:'chat' }} : {{ crc.chatRoomConfig['chatRoom']['room_status_text']|trans:{}:'chat' }}\n            </div>\n        </div>\n        <div ng-if=\"crc.chatRoomConfig['chatRoom']['room_type_text'] !== 'audio'\" class=\"panel-body\">\n            {{ 'invalid_room_type'|trans:{}:'chat' }}\n        </div>\n        <div ng-if=\"crc.chatRoomConfig['chatRoom']['room_status_text'] === 'closed'\" class=\"panel-body\">\n            {{ 'chat_room_closed_msg'|trans:{}:'chat' }}\n        </div>\n    </div>\n</div>\n"},606:function(module,exports){module.exports='<div class="panel panel-default">\n    <div class="panel-heading clearfix">\n        <h3 class="panel-title">\n            {{ cra.chatRoomConfig.resourceName }}\n            <button ng-if="cra.chatRoomConfig.canEdit" class="btn btn-default pull-right" ng-click="cra.configure()">\n                <i class="fa fa-cog"></i>\n            </button>\n        </h3>\n    </div>\n    <div class="panel-body">\n        <div id="chat-room-content-archives-panel" class="col-md-9">\n            <div id="chat-content-archives" class="well well-sm" style="overflow: scroll; max-height: 100vh;">\n                <div ng-repeat="oldMessage in cra.oldMessages">\n                    <div ng-switch="oldMessage[\'type\']">\n                        <div ng-switch-when="message">\n                            <b class="received-message" style="color: {{ oldMessage[\'color\'] }}">\n                                {{ oldMessage[\'name\'] }}\n                            </b> :\n                            {{ oldMessage[\'content\'] }}\n                        </div>\n                        <div ng-switch-when="presence">\n                            <b ng-switch="oldMessage[\'content\']">\n                                <span ng-switch-when="kicked">\n                                    {{ oldMessage[\'name\'] }}\n                                    {{ \'has_been_kicked_from_the_chat_room\'|trans:{}:\'chat\' }}\n                                </span>\n                                <span ng-switch-when="banned">\n                                    {{ oldMessage[\'name\'] }}\n                                    {{ \'has_been_banned_from_the_chat_room\'|trans:{}:\'chat\' }}\n                                </span>\n                                <span ng-switch-when="unbanned">\n                                    {{ oldMessage[\'name\'] }}\n                                    {{ \'has_been_unbanned_from_the_chat_room\'|trans:{}:\'chat\' }}\n                                </span>\n                            </b>\n                        </div>\n                        <div ng-switch-when="raw">\n                            <b>\n                                {{ oldMessage[\'content\'] }}\n                            </b>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n'},607:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=__webpack_require__(159);var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _possibleConstructorReturn2=__webpack_require__(163);var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=__webpack_require__(164);var _inherits3=_interopRequireDefault(_inherits2);var _ChatRoomBaseCtrl2=__webpack_require__(608);var _ChatRoomBaseCtrl3=_interopRequireDefault(_ChatRoomBaseCtrl2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var ChatRoomArchiveCtrl=function(_ChatRoomBaseCtrl){(0,_inherits3.default)(ChatRoomArchiveCtrl,_ChatRoomBaseCtrl);function ChatRoomArchiveCtrl($state,$uibModal,$rootScope,ChatRoomService,RTCService,FormBuilderService){(0,_classCallCheck3.default)(this,ChatRoomArchiveCtrl);var _this=(0,_possibleConstructorReturn3.default)(this,(ChatRoomArchiveCtrl.__proto__||(0,_getPrototypeOf2.default)(ChatRoomArchiveCtrl)).call(this,$state,$uibModal,$rootScope,ChatRoomService,RTCService,FormBuilderService));_this.oldMessages=ChatRoomService.getOldMessages();return _this}return ChatRoomArchiveCtrl}(_ChatRoomBaseCtrl3.default);exports.default=ChatRoomArchiveCtrl},608:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=__webpack_require__(14);var _createClass3=_interopRequireDefault(_createClass2);var _jquery=__webpack_require__(123);var _jquery2=_interopRequireDefault(_jquery);var _configure=__webpack_require__(609);var _configure2=_interopRequireDefault(_configure);var _close=__webpack_require__(610);var _close2=_interopRequireDefault(_close);var _ChatRoom=__webpack_require__(611);var _ChatRoom2=_interopRequireDefault(_ChatRoom);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var ChatRoomBaseCtrl=function(){function ChatRoomBaseCtrl($state,$uibModal,$rootScope,ChatRoomService,FormBuilderService){var _this=this;(0,_classCallCheck3.default)(this,ChatRoomBaseCtrl);this.input="";this.$uibModal=$uibModal;this.$state=$state;this.$rootScope=$rootScope;
this.ChatRoomService=ChatRoomService;this.FormBuilderService=FormBuilderService;this.chatRoomConfig=ChatRoomService.getConfig();this.xmppConfig=ChatRoomService.getXmppConfig();this.messages=ChatRoomService.getMessages();this.oldMessages=ChatRoomService.getOldMessages();this.users=ChatRoomService.getUsers();this.bannedUsers=ChatRoomService.getBannedUsers();$rootScope.$on("$stateChangeStart",function(event,toState){if(toState.name==="text"){ChatRoomService.setConnectedCallback(function(){});ChatRoomService.setUserDisconnectedCallback(function(){});ChatRoomService.setManagementCallback(function(){})}});ChatRoomService.setCloseCallback(function(){_this._closeRoomCallback()});ChatRoomService.setChangeRoomTypeCallback(function(type){_this._changeRoomTypeCallback(type)});(0,_jquery2.default)(window).unload(function($event){$event.preventDefault();_this.ChatRoomService.disconnectFromRoom()});if(!this.chatRoomConfig["connected"]&&this.chatRoomConfig["chatRoom"]["room_status_text"]!=="closed"){this.ChatRoomService.connectToRoom()}}(0,_createClass3.default)(ChatRoomBaseCtrl,[{key:"_changeRoomTypeCallback",value:function _changeRoomTypeCallback(){this.goBack()}},{key:"_closeRoomCallback",value:function _closeRoomCallback(){var _this2=this;this.$uibModal.open({template:_close2.default}).result.then(function(){_this2.$state.transitionTo("archive",{},{reload:true,inherit:true,notify:true})})}},{key:"kickUser",value:function kickUser(username){this.ChatRoomService.kickUser(username)}},{key:"muteUser",value:function muteUser(username){this.ChatRoomService.muteUser(username)}},{key:"unmuteUser",value:function unmuteUser(username){this.ChatRoomService.unmuteUser(username)}},{key:"banUser",value:function banUser(username){this.ChatRoomService.banUser(username)}},{key:"unbanUser",value:function unbanUser(username){this.ChatRoomService.unbanUser(username)}},{key:"isAdmin",value:function isAdmin(){return this.ChatRoomService.isAdmin()}},{key:"isModerator",value:function isModerator(){return this.ChatRoomService.isModerator()}},{key:"canParticipate",value:function canParticipate(){return this.ChatRoomService.canParticipate()}},{key:"goBack",value:function goBack(){this.ChatRoomService.disconnectFromRoom();this.$state.transitionTo("main",{},{reload:true,inherit:true,notify:true})}},{key:"sendMessage",value:function sendMessage(){this.ChatRoomService.sendMessage(this.input);this.input=""}},{key:"configure",value:function configure(){var _this3=this;var modalInstance=this.$uibModal.open({template:_configure2.default,controller:"ChatConfigureCtrl",controllerAs:"ccc",resolve:{chat:function chat(){return _this3.chatRoomConfig.chatRoom}}});modalInstance.result.then(function(result){_this3.ChatRoomService.editChatRoom(result).then(function(chatRoom){_this3.redirect(chatRoom)})})}},{key:"redirect",value:function redirect(chatRoom){if(chatRoom["room_status"]===_ChatRoom2.default.CLOSED){this.ChatRoomService.close()}this.ChatRoomService.changeRoomType(chatRoom["room_type_text"])}}]);return ChatRoomBaseCtrl}();exports.default=ChatRoomBaseCtrl},609:function(module,exports){module.exports='<div class="modal-content">\n    <div class="modal-header">\n        <button type="button" class="close" data-dismiss="modal" aria-hidden="true" ng-click="$close()">&times;</button>\n        <h4> {{ \'configure\'|trans:{}:\'platform\' }} </h4>\n    </div>\n    <div class="modal-body">\n        <div>\n            <form class="form-horizontal" name="chatForm" ng-submit="ccc.onSubmit(chatForm)">\n                <formbuilder form="ccc.form" ng-model="ccc.chat" form-ctrl="chatForm"></formbuilder>\n                <input data-ng-disabled="!chatForm.$valid" type="submit" class="btn btn-primary" aria-hidden="true" value="{{ \'edit\'|trans:{}:\'platform\' }}"> </input>\n                <button ng-click="$close()" class="btn btn-default" data-dismiss="modal" aria-hidden="true">\n                    {{ \'cancel\'|trans:{}:\'platform\' }}\n                </button>\n            </form>\n        </div>\n    </div>\n</div>\n'},610:function(module,exports){module.exports='<div class="modal-content">\n    <div class="modal-header">\n        <button type="button" class="close" data-dismiss="modal" aria-hidden="true" ng-click="$close()">&times;</button>\n    </div>\n    <div class="modal-body">\n        <div>\n            <div class="alert alert-warning"> {{ \'chat_room_closed_alert\'|trans:{}:\'chat\' }} </div>\n            <button ng-click="$close()" class="btn btn-default" data-dismiss="modal" aria-hidden="true">\n                {{ \'continue\'|trans:{}:\'chat \'}}\n            </button>\n        </div>\n    </div>\n</div>\n'},611:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=__webpack_require__(14);var _createClass3=_interopRequireDefault(_createClass2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var ChatRoom=function(){function ChatRoom(){(0,_classCallCheck3.default)(this,ChatRoom)}(0,_createClass3.default)(ChatRoom,null,[{key:"CLOSED",get:function get(){return 2}},{key:"OPEN",get:function get(){return 1}},{key:"TEXT",get:function get(){return 0}},{key:"AUDIO",get:function get(){return 1}},{key:"VIDEO",get:function get(){return 2}}]);return ChatRoom}();exports.default=ChatRoom},612:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=__webpack_require__(14);var _createClass3=_interopRequireDefault(_createClass2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var ChatRoomInitCtrl=function(){function ChatRoomInitCtrl($state,ChatRoomService){(0,_classCallCheck3.default)(this,ChatRoomInitCtrl);this.$state=$state;this.ChatRoomService=ChatRoomService;this.chatRoomConfig=ChatRoomService.getConfig();this.xmppConfig=ChatRoomService.getXmppConfig();if(this.chatRoomConfig["chatRoom"]["room_status_text"]==="closed"){this.$state.transitionTo("archive",{},{reload:true,inherit:true,notify:true})}this.initialize()}(0,_createClass3.default)(ChatRoomInitCtrl,[{key:"initialize",value:function initialize(){if(!this.xmppConfig["connected"]){this.ChatRoomService.connect()}}},{key:"initializeChatRoom",value:function initializeChatRoom(){this.initialize();this.ChatRoomService.initializeRoom()}},{key:"connectToRoom",value:function connectToRoom(){this.initialize();this.$state.transitionTo(this.chatRoomConfig["chatRoom"]["room_type_text"],{},{reload:true,inherit:true,notify:true})}}]);return ChatRoomInitCtrl}();exports.default=ChatRoomInitCtrl},613:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=__webpack_require__(159);var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _possibleConstructorReturn2=__webpack_require__(163);var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=__webpack_require__(164);var _inherits3=_interopRequireDefault(_inherits2);var _ChatRoomBaseCtrl2=__webpack_require__(608);var _ChatRoomBaseCtrl3=_interopRequireDefault(_ChatRoomBaseCtrl2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var ChatRoomTextCtrl=function(_ChatRoomBaseCtrl){(0,_inherits3.default)(ChatRoomTextCtrl,_ChatRoomBaseCtrl);function ChatRoomTextCtrl(){(0,_classCallCheck3.default)(this,ChatRoomTextCtrl);return(0,_possibleConstructorReturn3.default)(this,(ChatRoomTextCtrl.__proto__||(0,_getPrototypeOf2.default)(ChatRoomTextCtrl)).apply(this,arguments))}return ChatRoomTextCtrl}(_ChatRoomBaseCtrl3.default);exports.default=ChatRoomTextCtrl},614:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=__webpack_require__(159);var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=__webpack_require__(14);var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=__webpack_require__(163);var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=__webpack_require__(164);var _inherits3=_interopRequireDefault(_inherits2);var _jquery=__webpack_require__(123);var _jquery2=_interopRequireDefault(_jquery);var _ChatRoomBaseCtrl2=__webpack_require__(608);var _ChatRoomBaseCtrl3=_interopRequireDefault(_ChatRoomBaseCtrl2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var ChatRoomVideoCtrl=function(_ChatRoomBaseCtrl){(0,_inherits3.default)(ChatRoomVideoCtrl,_ChatRoomBaseCtrl);function ChatRoomVideoCtrl($state,$uibModal,$log,$rootScope,ChatRoomService,RTCService,FormBuilderService){(0,_classCallCheck3.default)(this,ChatRoomVideoCtrl);var _this=(0,_possibleConstructorReturn3.default)(this,(ChatRoomVideoCtrl.__proto__||(0,_getPrototypeOf2.default)(ChatRoomVideoCtrl)).call(this,$state,$uibModal,$rootScope,ChatRoomService,FormBuilderService));_this.$log=$log;_this.RTCService=RTCService;_this.FormBuilderService=FormBuilderService;_this.rtcConfig=RTCService.getVideoConfig();_this.rtcConfig.myVideoEnabled=true;_this.rtcConfig.myAudioEnabled=true;$rootScope.$on("$stateChangeStart",function(event,toState){if(toState.name==="video"){_this.rtcConfig.myVideoEnabled=true;_this.rtcConfig.myAudioEnabled=true;ChatRoomService.setConnectedCallback(RTCService._startMedias);ChatRoomService.setUserDisconnectedCallback(RTCService._stopUserStream);ChatRoomService.setManagementCallback(RTCService._manageManagementMessage)}});(0,_jquery2.default)(window).unload(function($event){$event.preventDefault();_this.$log.log("Disconnecting...");_this.RTCService.closeAllConnections()});return _this}(0,_createClass3.default)(ChatRoomVideoCtrl,[{key:"goBack",value:function goBack(){this.RTCService.closeAllConnections();this.RTCService.stopMedia();this.$log.log("All connection closed...");this.ChatRoomService.disconnectFromRoom();this.$state.transitionTo("main",{},{reload:true,inherit:true,notify:true})}},{key:"switchAudio",value:function switchAudio(username){this.RTCService.requestUserMicroSwitch(username)}},{key:"switchVideo",value:function switchVideo(){this.RTCService.switchVideo()}},{key:"getMyUsername",value:function getMyUsername(){return this.chatRoomConfig["myUsername"]}},{key:"selectSourceStream",value:function selectSourceStream(username){this.RTCService.selectSourceStream(username)}},{key:"getStreamClass",value:function getStreamClass(username){var selectedClass=this.rtcConfig["selectedUser"]===username?"video-selected":"";var speakingClass=this.rtcConfig["speakingUser"]===username?"video-speaking":"";return selectedClass+" "+speakingClass}}]);return ChatRoomVideoCtrl}(_ChatRoomBaseCtrl3.default);exports.default=ChatRoomVideoCtrl},615:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=__webpack_require__(159);var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _possibleConstructorReturn2=__webpack_require__(163);var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=__webpack_require__(164);var _inherits3=_interopRequireDefault(_inherits2);var _ChatRoomVideoCtrl2=__webpack_require__(614);var _ChatRoomVideoCtrl3=_interopRequireDefault(_ChatRoomVideoCtrl2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var ChatRoomAudioCtrl=function(_ChatRoomVideoCtrl){(0,_inherits3.default)(ChatRoomAudioCtrl,_ChatRoomVideoCtrl);function ChatRoomAudioCtrl($state,$uibModal,$log,$rootScope,ChatRoomService,RTCService,FormBuilderService){(0,_classCallCheck3.default)(this,ChatRoomAudioCtrl);var _this=(0,_possibleConstructorReturn3.default)(this,(ChatRoomAudioCtrl.__proto__||(0,_getPrototypeOf2.default)(ChatRoomAudioCtrl)).call(this,$state,$uibModal,$log,$rootScope,ChatRoomService,RTCService,FormBuilderService));_this.rtcConfig.myVideoEnabled=false;_this.rtcConfig.myAudioEnabled=true;$rootScope.$on("$stateChangeStart",function(event,toState){if(toState.name==="audio"){_this.rtcConfig.myVideoEnabled=false;_this.rtcConfig.myAudioEnabled=true;ChatRoomService.setConnectedCallback(RTCService._startMedias);ChatRoomService.setUserDisconnectedCallback(RTCService._stopUserStream);ChatRoomService.setManagementCallback(RTCService._manageManagementMessage)}});return _this}return ChatRoomAudioCtrl}(_ChatRoomVideoCtrl3.default);exports.default=ChatRoomAudioCtrl},616:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=__webpack_require__(14);var _createClass3=_interopRequireDefault(_createClass2);var _room=__webpack_require__(617);var _room2=_interopRequireDefault(_room);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var ChatConfigureCtrl=function(){function ChatConfigureCtrl(chat,$uibModalInstance){(0,_classCallCheck3.default)(this,ChatConfigureCtrl);this.chat=chat;this.form=_room2.default;this.$uibModalInstance=$uibModalInstance}(0,_createClass3.default)(ChatConfigureCtrl,[{key:"onSubmit",value:function onSubmit(form){if(form.$valid)this.$uibModalInstance.close(this.chat)}}]);return ChatConfigureCtrl}();exports.default=ChatConfigureCtrl},617:function(module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default={fields:[["room_name","text",{label:"name",disabled:true}],["room_type","select",{values:[{value:0,label:"text_only"},{value:1,label:"audio_only"},{value:2,label:"audio_video"}],choice_value:"value",translation_domain:"chat",label:"type"}],["room_status","select",{values:[{value:1,label:"open"},{value:2,label:"closed"}],choice_value:"value",translation_domain:"chat",label:"status"}]]}},618:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=__webpack_require__(14);var _createClass3=_interopRequireDefault(_createClass2);var _jquery=__webpack_require__(123);var _jquery2=_interopRequireDefault(_jquery);var _ChatRoom=__webpack_require__(611);var _ChatRoom2=_interopRequireDefault(_ChatRoom);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var ChatRoomService=function(){function ChatRoomService($rootScope,$http,$log,$httpParamSerializerJQLike,XmppService,UserService){(0,_classCallCheck3.default)(this,ChatRoomService);this.$rootScope=$rootScope;this.$http=$http;this.$log=$log;this.$httpParamSerializerJQLike=$httpParamSerializerJQLike;this.XmppService=XmppService;this.UserService=UserService;this.messages=[];this.xmppConfig=XmppService.getConfig();this.config={connected:false,busy:false,configuring:false,resourceId:ChatRoomService._getGlobal("resourceId"),resourceName:ChatRoomService._getGlobal("resourceName"),chatRoom:ChatRoomService._getGlobal("chatRoom"),room:ChatRoomService._getGlobal("roomName")+"@"+ChatRoomService._getGlobal("xmppMucHost"),roomName:ChatRoomService._getGlobal("roomName"),canChat:ChatRoomService._getGlobal("canChat"),canEdit:ChatRoomService._getGlobal("canEdit"),xmppMucHost:ChatRoomService._getGlobal("xmppMucHost"),iceServers:ChatRoomService._getGlobal("iceServers"),myUsername:null,myRole:"none",myAffiliation:null,adminConnected:false,adminUsername:ChatRoomService._getGlobal("chatAdminUsername"),adminPassword:ChatRoomService._getGlobal("chatAdminPassword"),messageType:null,message:null};this._onRoomAdminPresenceInit=this._onRoomAdminPresenceInit.bind(this);this._onRoomAdminPresence=this._onRoomAdminPresence.bind(this);this._onRoomPresence=this._onRoomPresence.bind(this);this._onRoomMessage=this._onRoomMessage.bind(this);this._onIQStanzaInit=this._onIQStanzaInit.bind(this);this._onIQStanza=this._onIQStanza.bind(this);this._fullConnection=this._fullConnection.bind(this);this._onRoomClose=this._onRoomClose.bind(this);this._onChangeRoomType=this._onChangeRoomType.bind(this);this._connectedCallback=function(){};this._userDisconnectedCallback=function(){};this._managementCallback=function(){};this._closeCallback=function(){};this._changeRoomTypeCallback=function(){}}(0,_createClass3.default)(ChatRoomService,[{key:"getConfig",value:function getConfig(){return this.config}},{key:"getXmppConfig",value:function getXmppConfig(){return this.xmppConfig}},{key:"getUsers",value:function getUsers(){return this.UserService.getUsers()}},{key:"getBannedUsers",value:function getBannedUsers(){return this.UserService.getBannedUsers()}},{key:"getMessages",value:function getMessages(){return this.messages}},{key:"setConnectedCallback",value:function setConnectedCallback(callback){this._connectedCallback=callback}},{key:"setUserDisconnectedCallback",value:function setUserDisconnectedCallback(callback){this._userDisconnectedCallback=callback}},{key:"setCloseCallback",value:function setCloseCallback(callback){this._closeCallback=callback}},{key:"setChangeRoomTypeCallback",value:function setChangeRoomTypeCallback(callback){this._changeRoomTypeCallback=callback}},{key:"setManagementCallback",value:function setManagementCallback(callback){this._managementCallback=callback}},{key:"connect",value:function connect(){this.XmppService.connectWithAdmin()}},{key:"connectToRoom",value:function connectToRoom(){this.$log.log("CONNECT TO ROOM");this.config["busy"]=true;if(this.xmppConfig["connected"]&&this.xmppConfig["adminConnected"]){this.$log.log("Connecting to room...");this.connectAdminToRoom()}else{this.$log.log("Not connected to XMPP");this.XmppService.setConnectedCallback(this._fullConnection);this.XmppService.connectWithAdmin()}}},{key:"connectAdminToRoom",value:function connectAdminToRoom(){if(this.xmppConfig["adminConnected"]){this.config["busy"]=true;this.$log.log("Connecting "+this.config["adminUsername"]+" to room...");this.xmppConfig["adminConnection"].addHandler(this._onRoomAdminPresence,null,"presence");this.xmppConfig["adminConnection"].send($pres({to:this.config["room"]+"/"+this.config["adminUsername"]}))}else{this.$log.log(this.config["adminUsername"]+" is not connected")}}},{key:"connectUserToRoom",value:function connectUserToRoom(){if(this.xmppConfig["connected"]){this.$log.log("Connecting user to room...");this.config["busy"]=true;this.xmppConfig["connection"].addHandler(this._onRoomPresence,null,"presence");this.xmppConfig["connection"].addHandler(this._onRoomMessage,null,"message","groupchat");this.xmppConfig["connection"].addHandler(this._onIQStanza,null,"iq");this.$log.log(this.config["room"]+"/"+this.xmppConfig["username"]);this.xmppConfig["connection"].send($pres({to:this.config["room"]+"/"+this.xmppConfig["username"]}).c("datas",{firstName:this.xmppConfig["firstName"],lastName:this.xmppConfig["lastName"],color:this.xmppConfig["color"]}))}else{this.$log.log("Not connected to XMPP")}}},{key:"disconnectFromRoom",value:function disconnectFromRoom(){this.$log.log("DISCONNECT FROM ROOM");if(this.config["connected"]){var presence=$pres({from:this.xmppConfig["username"]+"@"+this.xmppConfig["xmppHost"]+"/"+this.config["roomName"],to:this.config["room"]+"/"+this.config["myUsername"],type:"unavailable"});this.xmppConfig["connection"].send(presence);this.xmppConfig["connection"].disconnect()}this.config["busy"]=false}},{key:"initializeRoom",value:function initializeRoom(){if(this.xmppConfig["adminConnected"]){this.$log.log(this.config["adminUsername"]+" is connected");this.xmppConfig["adminConnection"].addHandler(this._onRoomAdminPresenceInit,null,"presence");this.xmppConfig["adminConnection"].addHandler(this._onIQStanzaInit,null,"iq");this.xmppConfig["adminConnection"].send($pres({to:this.config["room"]+"/"+this.config["adminUsername"]}))}else{this.$log.log(this.config["adminUsername"]+" is not connected")}}},{key:"configureRoom",value:function configureRoom(){this.$log.log("configure room");var iq=$iq({id:"room-config-submit",from:this.config["adminUsername"]+"@"+this.xmppConfig["xmppHost"]+"/"+this.config["roomName"],to:this.config["room"],type:"set"}).c("query",{xmlns:"http://jabber.org/protocol/muc#owner"}).c("x",{xmlns:"jabber:x:data",type:"submit"}).c("field",{var:"FORM_TYPE"}).c("value").t("http://jabber.org/protocol/muc#roomconfig").up().up().c("field",{var:"muc#roomconfig_persistentroom"}).c("value").t(1).up().up().c("field",{var:"muc#roomconfig_moderatedroom"}).c("value").t(0).up().up().c("field",{var:"muc#roomconfig_whois"}).c("value").t("moderators");this.xmppConfig["adminConnection"].sendIQ(iq)}},{key:"openRoom",value:function openRoom(){this.config["chatRoom"]["room_status"]=1;this.editChatRoom(this.config["chatRoom"])}},{key:"editChatRoom",value:function editChatRoom(chatRoom){var _this=this;return this.$http.put(Routing.generate("api_put_chat_room",{chatRoom:this.config.chatRoom.id}),this.$httpParamSerializerJQLike({chat_room:chatRoom}),{headers:{"Content-Type":"application/x-www-form-urlencoded"}}).then(function(data){_this.config.chatRoom.configuring=true;return _this.config.chatRoom=data.data})}},{key:"isAdmin",value:function isAdmin(){return this.config["myAffiliation"]==="admin"||this.config["myAffiliation"]==="owner"}},{key:"isModerator",value:function isModerator(){return this.config["myRole"]==="moderator"}},{key:"canParticipate",value:function canParticipate(){return this.config["connected"]&&this.config["myRole"]!=="none"&&this.config["myRole"]!=="visitor"}},{key:"sendMessage",value:function sendMessage(message){var _this2=this;if(message!==""){this.messages.push({sender:this.xmppConfig["fullName"],message:message,color:this.xmppConfig["color"],type:"message"});this.registerMessage(message,this.config["myUsername"],this.xmppConfig["fullName"]).then(function(d){if(d==="ok"){_this2.xmppConfig["connection"].send($msg({to:_this2.config["room"],type:"groupchat"}).c("body").t(message).up().c("datas",{firstName:_this2.xmppConfig["firstName"],lastName:_this2.xmppConfig["lastName"],color:_this2.xmppConfig["color"]}))}})}}},{key:"getOldMessages",value:function getOldMessages(){var messages=[];var route=Routing.generate("api_get_registered_messages",{chatRoom:this.config.chatRoom.id});this.$http.get(route).then(function(d){d["data"].forEach(function(m){messages.push({name:m["userFullName"],content:m["content"],color:m["color"],type:m["type"],creationDate:m["creationDate"]})})});return messages}},{key:"initializeRoleAndAffiliation",value:function initializeRoleAndAffiliation(){this.$log.log("initialize role & affiliation...");if(this.config["myAffiliation"]!=="owner"&&this.config["myAffiliation"]!=="outcast"&&this.config["myRole"]!=="visitor"){if(this.config["canEdit"]){if(this.config["myAffiliation"]!=="admin"){this.$log.log("Granting ADMIN affiliation...");var affiliationIq=$iq({id:"role-"+this.config["myUsername"],from:this.config["adminUsername"]+"@"+this.xmppConfig["xmppHost"]+"/"+this.config["roomName"],to:this.config["room"],type:"set"}).c("query",{xmlns:"http://jabber.org/protocol/muc#admin"}).c("item",{jid:this.config["myUsername"]+"@"+this.xmppConfig["xmppHost"],affiliation:"admin"});this.xmppConfig["adminConnection"].sendIQ(affiliationIq)}if(this.config["myRole"]!=="moderator"){this.$log.log("Granting MODERATOR role...");var roleIq=$iq({id:"role-"+this.config["myUsername"],from:this.config["adminUsername"]+"@"+this.xmppConfig["xmppHost"]+"/"+this.config["roomName"],to:this.config["room"],type:"set"}).c("x",{xmlns:"http://jabber.org/protocol/muc#admin"}).c("item",{nick:this.config["myUsername"],role:"moderator"});this.xmppConfig["adminConnection"].sendIQ(roleIq)}}else{if(this.config["myAffiliation"]!=="none"){this.$log.log("Granting NONE affiliation...");var _affiliationIq=$iq({id:"role-"+this.config["myUsername"],from:this.config["adminUsername"]+"@"+this.xmppConfig["xmppHost"]+"/"+this.config["roomName"],to:this.config["room"],type:"set"}).c("query",{xmlns:"http://jabber.org/protocol/muc#admin"}).c("item",{jid:this.config["myUsername"]+"@"+this.xmppConfig["xmppHost"],affiliation:"none"});this.xmppConfig["adminConnection"].sendIQ(_affiliationIq)}if(this.config["myRole"]!=="participant"){this.$log.log("Granting PARTICIPANT role...");var _roleIq=$iq({id:"role-"+this.config["myUsername"],from:this.config["adminUsername"]+"@"+this.xmppConfig["xmppHost"]+"/"+this.config["roomName"],to:this.config["room"],type:"set"}).c("x",{xmlns:"http://jabber.org/protocol/muc#admin"}).c("item",{nick:this.config["myUsername"],role:"participant"});this.xmppConfig["adminConnection"].sendIQ(_roleIq)}}}}},{key:"requestOutcastList",value:function requestOutcastList(){var iq=$iq({id:"room-outcast-list",from:this.xmppConfig["username"]+"@"+this.xmppConfig["xmppHost"]+"/"+this.config["roomName"],to:this.config["room"],type:"get"}).c("query",{xmlns:"http://jabber.org/protocol/muc#admin"}).c("item",{affiliation:"outcast"});this.xmppConfig["connection"].sendIQ(iq)}},{key:"kickUser",value:function kickUser(username){if(this.config["canEdit"]&&this.config["myRole"]==="moderator"){var iq=$iq({id:"kick-"+username,from:this.xmppConfig["username"]+"@"+this.xmppConfig["xmppHost"]+"/"+this.config["roomName"],to:this.config["room"],type:"set"}).c("x",{xmlns:"http://jabber.org/protocol/muc#admin"}).c("item",{nick:username,role:"none"});this.xmppConfig["connection"].sendIQ(iq)}}},{key:"muteUser",value:function muteUser(username){if(this.config["canEdit"]&&this.config["myRole"]==="moderator"){var iq=$iq({id:"mute-"+username,from:this.xmppConfig["username"]+"@"+this.xmppConfig["xmppHost"]+"/"+this.config["roomName"],to:this.config["room"],type:"set"}).c("x",{xmlns:"http://jabber.org/protocol/muc#admin"}).c("item",{nick:username,role:"visitor"});this.xmppConfig["connection"].sendIQ(iq)}}},{key:"unmuteUser",value:function unmuteUser(username){if(this.config["canEdit"]&&this.config["myRole"]==="moderator"){var iq=$iq({id:"unmute-"+username,from:this.xmppConfig["username"]+"@"+this.xmppConfig["xmppHost"]+"/"+this.config["roomName"],to:this.config["room"],type:"set"}).c("x",{xmlns:"http://jabber.org/protocol/muc#admin"}).c("item",{nick:username,role:"participant"});this.xmppConfig["connection"].sendIQ(iq)}}},{key:"banUser",value:function banUser(username){if(this.config["canEdit"]&&this.config["myAffiliation"]==="admin"){var iq=$iq({id:"ban-"+username,from:this.xmppConfig["username"]+"@"+this.xmppConfig["xmppHost"]+"/"+this.config["roomName"],to:this.config["room"],type:"set"}).c("query",{xmlns:"http://jabber.org/protocol/muc#admin"}).c("item",{jid:username+"@"+this.xmppConfig["xmppHost"],affiliation:"outcast"});this.xmppConfig["connection"].sendIQ(iq)}}},{key:"unbanUser",value:function unbanUser(username){if(this.config["canEdit"]&&this.config["myAffiliation"]==="admin"){var iq=$iq({id:"unban-"+username,from:this.xmppConfig["username"]+"@"+this.xmppConfig["xmppHost"]+"/"+this.config["roomName"],to:this.config["room"],type:"set"}).c("query",{xmlns:"http://jabber.org/protocol/muc#admin"}).c("item",{jid:username+"@"+this.xmppConfig["xmppHost"],affiliation:"none"});this.xmppConfig["connection"].sendIQ(iq)}}},{key:"sendUnbanMessage",value:function sendUnbanMessage(username,name){this.xmppConfig["connection"].send($msg({to:this.config["room"],type:"groupchat"}).c("body").t("").up().c("datas",{status:"management",username:username,name:name,type:"unban-user",value:true}))}},{key:"registerPresence",value:function registerPresence(status){var username=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.xmppConfig["username"];var fullName=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this.xmppConfig["fullName"];var route=Routing.generate("api_post_chat_room_presence_register",{chatRoom:this.config.chatRoom.id,username:username,fullName:fullName,status:status});this.$http.post(route)}},{key:"registerMessage",value:function registerMessage(message){var _this3=this;var username=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.xmppConfig["username"];var fullName=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this.xmppConfig["fullName"];var route=Routing.generate("api_post_chat_room_message_register",{chatRoom:this.config.chatRoom.id,username:username,fullName:fullName});return this.$http.post(route,{message:message}).then(function(){return"ok"},function(d){if(d["status"]===403){var _route=Routing.generate("claro_resource_open_short",{node:_this3.config["resourceId"]});window.location=_route}})}},{key:"manageKickedStatus",value:function manageKickedStatus(){this.registerPresence("kicked");this.config["messageType"]="warning";this.config["message"]=Translator.trans("kicked_msg",{},"chat");this.config["myRole"]="none";this.config["myAffiliation"]=null;this.config["adminConnected"]=false;this.config["connected"]=false}},{key:"manageBannedStatus",value:function manageBannedStatus(){this.registerPresence("banned");this.config["messageType"]="danger";this.config["message"]=Translator.trans("banned_msg",{},"chat");this.config["myRole"]="none";this.config["myAffiliation"]="outcast";this.config["adminConnected"]=false;this.config["connected"]=false}},{key:"manageBannedUsers",value:function manageBannedUsers(bannedUsernames){var _this4=this;var route=Routing.generate("api_post_chat_users_infos",{chatRoom:this.config.chatRoom.id});this.$http.post(route,{usernames:bannedUsernames}).then(function(d){var usersDatas=d["data"];bannedUsernames.forEach(function(username){var name=usersDatas[username]?usersDatas[username]["firstName"]+" "+usersDatas[username]["lastName"]:username;var color=usersDatas[username]?usersDatas[username]["color"]:null;_this4.UserService.addBannedUser(username,name,color)})})}},{key:"manageManagementMessage",value:function manageManagementMessage(type,username,name,value){if(type==="unban-user"){this.UserService.removeBannedUser(username);this.messages.push({name:name,status:"unbanned",type:"presence"});this.refreshScope()}else{switch(type){case"close_room":this._onRoomClose();break;case"change_room_type":this._onChangeRoomType(value);break;default:this._managementCallback(type,username,name,value)}}}},{key:"close",value:function close(){this.xmppConfig["connection"].send($msg({to:this.config["room"],type:"groupchat"}).c("body").t("").up().c("datas",{status:"management",type:"close_room",value:true}))}},{key:"changeRoomType",value:function changeRoomType(type){this.xmppConfig["connection"].send($msg({to:this.config["room"],type:"groupchat"}).c("body").t("").up().c("datas",{status:"management",type:"change_room_type",value:type}))}},{key:"_onRoomClose",value:function _onRoomClose(){this.config.chatRoom.room_status=_ChatRoom2.default.CLOSED;this.config.chatRoom.room_status_text="closed";this._closeCallback()}},{key:"_onChangeRoomType",value:function _onChangeRoomType(type){this.config.chatRoom.room_type=_ChatRoom2.default[type.toUpperCase()];this.config.chatRoom.room_type_text=type;this._changeRoomTypeCallback(type)}},{key:"_onRoomAdminPresenceInit",value:function _onRoomAdminPresenceInit(presence){var response=true;var from=(0,_jquery2.default)(presence).attr("from");var roomName=Strophe.getBareJidFromJid(from);var status=(0,_jquery2.default)(presence).find("status");var statusCode=status.attr("code");if(roomName.toLowerCase()===this.config["room"].toLowerCase()){var username=Strophe.getResourceFromJid(from);if(username===this.config["adminUsername"]&&statusCode==="110"){
this.$log.log("admin is connected to chat room");this.configureRoom();response=false}}return response}},{key:"_onRoomAdminPresence",value:function _onRoomAdminPresence(presence){var response=true;var from=(0,_jquery2.default)(presence).attr("from");var roomName=Strophe.getBareJidFromJid(from);var status=(0,_jquery2.default)(presence).find("status");var statusCode=status.attr("code");if(roomName.toLowerCase()===this.config["room"].toLowerCase()){var username=Strophe.getResourceFromJid(from);if(username===this.config["adminUsername"]&&statusCode==="110"){this.$log.log("admin is connected to chat room");this.connectUserToRoom();response=false}}return response}},{key:"_onRoomPresence",value:function _onRoomPresence(presence){var from=(0,_jquery2.default)(presence).attr("from");var username=Strophe.getResourceFromJid(from);var roomName=Strophe.getBareJidFromJid(from);var status=(0,_jquery2.default)(presence).find("status");var statusCode=status.attr("code");var error=(0,_jquery2.default)(presence).find("error");var errorCode=error.attr("code");if(statusCode){this.$log.log("##### STATUS = "+statusCode+" ####")}if(errorCode){this.$log.error("##### ERROR = "+errorCode+" ####")}if(roomName.toLowerCase()===this.config["room"].toLowerCase()&&username!==this.config["adminUsername"]){var type=(0,_jquery2.default)(presence).attr("type");var datas=(0,_jquery2.default)(presence).find("datas");var firstName=datas.attr("firstName");var lastName=datas.attr("lastName");var color=datas.attr("color");var item=(0,_jquery2.default)(presence).find("item");var affiliation=item.attr("affiliation");var role=item.attr("role");color=color===undefined?null:color;var name=firstName!==undefined&&lastName!==undefined?firstName+" "+lastName:username;name=name===username?this.UserService.getUserFullName(name):name;if(errorCode==="403"){this.$log.log("Forbidden");this.config["message"]=Translator.trans("not_authorized_msg",{},"chat");this.config["messageType"]="danger";this.refreshScope()}else{if(username===this.xmppConfig["username"]){this.config["myRole"]=role;this.config["myAffiliation"]=affiliation;if(statusCode==="110"){if(type==="unavailable"){this.$log.error('Something went wrong. OnRoomPresence stanza type = "unavailable"')}else{this.config["connected"]=true;this.config["myUsername"]=username;this.config["messageType"]=null;this.config["message"]=null;this.registerPresence("connection");this.initializeRoleAndAffiliation();if(this.config["canEdit"]&&this.config["myAffiliation"]==="admin"){this.requestOutcastList()}this._connectedCallback();this.refreshScope()}}else if(statusCode==="301"){this.manageBannedStatus()}else if(statusCode==="307"){this.manageKickedStatus()}}else{if(statusCode==="301"){var userDatas=this.UserService.getUserDatas(username);var userDatasName=userDatas["name"]?userDatas["name"]:username;var userDatasColor=userDatas["color"]?userDatas["color"]:null;this.UserService.addBannedUser(username,userDatasName,userDatasColor);this.messages.push({name:name,status:"banned",type:"presence"})}else if(statusCode==="307"){this.messages.push({name:name,status:"kicked",type:"presence"})}}if(type==="unavailable"){this.$log.log("****************** "+username+" => disconnected");this._userDisconnectedCallback(username);this.UserService.removeUser(username,statusCode);this.refreshScope()}else{this.UserService.addUser(username,name,color,affiliation,role);this.refreshScope()}}}this.config["busy"]=false;return true}},{key:"_onRoomMessage",value:function _onRoomMessage(message){var from=(0,_jquery2.default)(message).attr("from");var type=(0,_jquery2.default)(message).attr("type");var roomName=Strophe.getBareJidFromJid(from);var username=Strophe.getResourceFromJid(from);if(type==="groupchat"&&roomName.toLowerCase()===this.config["room"].toLowerCase()){var delayElement=(0,_jquery2.default)(message).find("delay");if(delayElement===undefined||delayElement[0]===undefined){var body=(0,_jquery2.default)(message).find("html > body").html();var statusElement=(0,_jquery2.default)(message).find("status");if(statusElement===undefined||statusElement.attr("code")!=="104"){if(body===undefined){body=(0,_jquery2.default)(message).find("body").text()}var datas=(0,_jquery2.default)(message).find("datas");var status=datas.attr("status");if(status==="management"){var _type=datas.attr("type");var user=datas.attr("username");var userFullName=datas.attr("name");var value=datas.attr("value");this.manageManagementMessage(_type,user,userFullName,value)}else if(username!==this.config["myUsername"]){var firstName=datas.attr("firstName");var lastName=datas.attr("lastName");var color=datas.attr("color");color=color===undefined?null:color;var sender=firstName!==undefined&&lastName!==undefined?firstName+" "+lastName:username;this.messages.push({sender:sender,message:body,color:color,type:"message"});this.refreshScope()}}}}return true}},{key:"_onIQStanzaInit",value:function _onIQStanzaInit(iq){var type=(0,_jquery2.default)(iq).attr("type");var id=(0,_jquery2.default)(iq).attr("id");if(type==="result"){if(id==="room-config-submit"){this.$log.log("Room configured");this.openRoom()}}return true}},{key:"_onIQStanza",value:function _onIQStanza(iq){var type=(0,_jquery2.default)(iq).attr("type");var id=(0,_jquery2.default)(iq).attr("id");if(type==="result"){if(id==="room-outcast-list"){var items=(0,_jquery2.default)(iq).find("item");var bannedUsernames=[];for(var i=0;i<items.length;i++){var jid=(0,_jquery2.default)(items[i]).attr("jid");var username=Strophe.getNodeFromJid(jid);bannedUsernames.push(username)}this.manageBannedUsers(bannedUsernames);this.refreshScope()}else if(id.substring(0,4)==="ban-"){var _username=id.substring(4,id.length);var userDatas=this.UserService.getUserDatas(_username);var userDatasName=userDatas["name"]?userDatas["name"]:_username;var userDatasColor=userDatas["color"]?userDatas["color"]:null;this.UserService.addBannedUser(_username,userDatasName,userDatasColor);this.refreshScope()}else if(id.substring(0,6)==="unban-"){var _username2=id.substring(6,id.length);var name=this.UserService.getBannedUserFullName(_username2);this.registerPresence("unbanned",_username2,name);this.sendUnbanMessage(_username2,name)}}return true}},{key:"_fullConnection",value:function _fullConnection(){this.connectToRoom()}},{key:"refreshScope",value:function refreshScope(){this.$rootScope.$apply()}}],[{key:"_getGlobal",value:function _getGlobal(name){if(typeof window[name]==="undefined"){throw new Error("Expected "+name+" to be exposed in a window."+name+" variable")}return window[name]}}]);return ChatRoomService}();exports.default=ChatRoomService},619:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=__webpack_require__(14);var _createClass3=_interopRequireDefault(_createClass2);var _index=__webpack_require__(1);var _index2=_interopRequireDefault(_index);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var RTCService=function(){function RTCService($http,$sce,$log,ChatRoomService,UserService){(0,_classCallCheck3.default)(this,RTCService);this.$http=$http;this.$sce=$sce;this.$log=$log;this.ChatRoomService=ChatRoomService;this.UserService=UserService;this.chatRoomConfig=this.ChatRoomService.getConfig();this.xmppConfig=this.ChatRoomService.getXmppConfig();this.config={ice_config:{iceServers:this.chatRoomConfig.iceServers},roomjid:null,myUsername:null,users:this.UserService.getUsers(),sids:{},sourceStreams:{},usersMicroStatus:{},lastSpeakingUser:null,localStream:null,myAudioTracks:[],myVideoTracks:[],myAudioEnabled:true,myVideoEnabled:true,mySourceStream:null,mainStreamUsername:null,selectedUser:null,speakingUser:null};this.RTC=null;this.$log.log(this.config.ice_config);this._startMedias=this._startMedias.bind(this);this._stopUserStream=this._stopUserStream.bind(this);this._manageManagementMessage=this._manageManagementMessage.bind(this);this._updateMainStream=this._updateMainStream.bind(this);this._onMediaReady=this._onMediaReady.bind(this);this._onMediaFailure=this._onMediaFailure.bind(this);this._onCallIncoming=this._onCallIncoming.bind(this);this._onCallTerminated=this._onCallTerminated.bind(this);this._onRemoteStreamAdded=this._onRemoteStreamAdded.bind(this);this._onRemoteStreamRemoved=this._onRemoteStreamRemoved.bind(this);this._onIceConnectionStateChanged=this._onIceConnectionStateChanged.bind(this);this._noStunCandidates=this._noStunCandidates.bind(this);this._waitForRemoteStream=this._waitForRemoteStream.bind(this);this.ChatRoomService.setConnectedCallback(this._startMedias);this.ChatRoomService.setUserDisconnectedCallback(this._stopUserStream);this.ChatRoomService.setManagementCallback(this._manageManagementMessage);setInterval(this._updateMainStream,1e3)}(0,_createClass3.default)(RTCService,[{key:"getVideoConfig",value:function getVideoConfig(){return this.getConfig()}},{key:"getConfig",value:function getConfig(){return this.config}},{key:"switchVideo",value:function switchVideo(){if(this.config["myVideoEnabled"]){this.config["myVideoTracks"].forEach(function(t){t.enabled=false});this.config["myVideoEnabled"]=false}else{this.config["myVideoTracks"].forEach(function(t){t.enabled=true});this.config["myVideoEnabled"]=true}var streamURL=window.URL.createObjectURL(this.config["localStream"]);var trustedStreamURL=this.$sce.trustAsResourceUrl(streamURL);this.config["mySourceStream"]=trustedStreamURL;this.config["sourceStreams"][this.chatRoomConfig["myUsername"]]=trustedStreamURL}},{key:"switchAudio",value:function switchAudio(){if(this.config["myAudioEnabled"]){this.config["myAudioTracks"].forEach(function(t){t.enabled=false});this.config["myAudioEnabled"]=false}else{this.config["myAudioTracks"].forEach(function(t){t.enabled=true});this.config["myAudioEnabled"]=true}var streamURL=window.URL.createObjectURL(this.config["localStream"]);var trustedStreamURL=this.$sce.trustAsResourceUrl(streamURL);this.config["mySourceStream"]=trustedStreamURL;this.config["sourceStreams"][this.chatRoomConfig["myUsername"]]=trustedStreamURL;this.sendMicroStatus()}},{key:"requestUserMicroSwitch",value:function requestUserMicroSwitch(username){this.xmppConfig["connection"].send($msg({to:this.chatRoomConfig["room"],type:"groupchat"}).c("body").t("").up().c("datas",{status:"management",username:username,type:"video-micro-switch"}))}},{key:"requestUserMicroStatus",value:function requestUserMicroStatus(username){this.xmppConfig["connection"].send($msg({to:this.chatRoomConfig["room"],type:"groupchat"}).c("body").t("").up().c("datas",{status:"management",username:username,type:"video-micro-status-request"}))}},{key:"sendMicroStatus",value:function sendMicroStatus(){this.xmppConfig["connection"].send($msg({to:this.chatRoomConfig["room"],type:"groupchat"}).c("body").t("").up().c("datas",{status:"management",username:this.chatRoomConfig["myUsername"],type:"video-micro-status",value:this.config["myAudioEnabled"]}))}},{key:"sendSpeakingNotification",value:function sendSpeakingNotification(){this.xmppConfig["connection"].send($msg({to:this.chatRoomConfig["room"],type:"groupchat"}).c("body").t("").up().c("datas",{status:"management",username:this.chatRoomConfig["myUsername"],type:"speaking",value:1}))}},{key:"stopMedia",value:function stopMedia(){this.config["myAudioTracks"].forEach(function(t){t.stop()});this.config["myVideoTracks"].forEach(function(t){t.stop()})}},{key:"selectSourceStream",value:function selectSourceStream(username){this.$log.log(username);if(this.config["selectedUser"]===username){this.config["selectedUser"]=null}else{this.config["selectedUser"]=username}this.$log.log("Selected user: "+this.config["selectedUser"]);this.config["mainStreamUsername"]=username}},{key:"initiateCalls",value:function initiateCalls(){var _this=this;this.$log.log("Initiating calls...");this.config["users"].forEach(function(u){if(u["username"]!==_this.chatRoomConfig["myUsername"]){_this.$log.log(_this.chatRoomConfig["room"]+"/"+u["username"]);_this.$log.log(_this.chatRoomConfig["room"]+"/"+_this.chatRoomConfig["myUsername"]);var session=_this.xmppConfig["connection"].jingle.initiate(_this.chatRoomConfig["room"]+"/"+u["username"],_this.chatRoomConfig["room"]+"/"+_this.chatRoomConfig["myUsername"]);if(_this.RTC.browser==="firefox")session.usetrickle=false;if(session["sid"]){_this.addSid(session["sid"],u["username"])}_this.requestUserMicroStatus(u["username"])}})}},{key:"initiateHark",value:function initiateHark(){var _this2=this;if(typeof hark==="function"){var options={interval:400};var speechEvents=hark(this.config["localStream"],options);speechEvents.on("speaking",function(){if(_this2.config["myAudioEnabled"]){_this2.sendSpeakingNotification()}});speechEvents.on("stopped_speaking",function(){if(_this2.config["myAudioEnabled"]){_this2.$log.log("Stopped speaking.")}});speechEvents.on("volume_change",function(volume){if(_this2.config["myAudioEnabled"]&&_this2.config["speakingUser"]!==_this2.chatRoomConfig["myUsername"]&&volume>-50){_this2.sendSpeakingNotification()}})}}},{key:"addSid",value:function addSid(sid,username){this.config["sids"][sid]=username}},{key:"closeAllConnections",value:function closeAllConnections(){for(var sid in this.config["sids"]){this.$log.log("Try to close "+sid);this.$log.log(this.xmppConfig["connection"].jingle.sessions[sid]);if(this.xmppConfig["connection"].jingle.sessions[sid].state==="active"){this.xmppConfig["connection"].jingle.sessions[sid].terminate("Closing all connections...");this.$log.log(sid+" : closed")}}}},{key:"_updateMainStream",value:function _updateMainStream(){this.$log.log("_updateMainStream");if(this.config["selectedUser"]!==null){if(this.config["mainStreamUsername"]!==this.config["selectedUser"]){this.config["mainStreamUsername"]=this.config["selectedUser"];this.ChatRoomService.refreshScope();this.$log.log("Selected user : "+this.config["mainStreamUsername"])}}else if(this.config["speakingUser"]!==null){if(this.config["mainStreamUsername"]!==this.config["speakingUser"]){this.config["mainStreamUsername"]=this.config["speakingUser"];this.ChatRoomService.refreshScope();this.$log.log("Speaking user : "+this.config["mainStreamUsername"])}}}},{key:"_startMedias",value:function _startMedias(){var _this3=this;this.$log.log("REQUEST MEDIAS");RTC=this.RTC=setupRTC();var constraints=[];if(this.config.myAudioEnabled)constraints.push("audio");if(this.config.myVideoEnabled)constraints.push("video");if(constraints===[])this.$log.error("NO MEDIA REQUEST");getUserMediaWithConstraints(constraints);this.xmppConfig["connection"].jingle.ice_config=this.config["ice_config"];_index2.default.element(document).bind("mediaready.jingle",this._onMediaReady);_index2.default.element(document).bind("mediafailure.jingle",this._onMediaFailure);_index2.default.element(document).bind("callincoming.jingle",this._onCallIncoming);_index2.default.element(document).bind("callterminated.jingle",this._onCallTerminated);_index2.default.element(document).bind("remotestreamadded.jingle",this._onRemoteStreamAdded);_index2.default.element(document).bind("remotestreamremoved.jingle",this._onRemoteStreamRemoved);_index2.default.element(document).bind("iceconnectionstatechange.jingle",this._onIceConnectionStateChanged);_index2.default.element(document).bind("nostuncandidates.jingle",this._noStunCandidates);_index2.default.element(document).bind("ack.jingle",function(event,sid,ack){_this3.$log.log("got stanza ack for "+sid,ack)});_index2.default.element(document).bind("error.jingle",function(event,sid,err){if(sid){_this3.$log.error("got stanza error for "+sid,err)}else{_this3.$log.error("no sid defined for",err)}});_index2.default.element(document).bind("packetloss.jingle",function(event,sid,loss){_this3.$log.warn("packetloss",sid,loss)});if(this.RTC){RTCPeerconnection=this.RTC.peerconnection;this.xmppConfig["connection"].jingle.pc_constraints=this.RTC.pc_constraints;if(this.RTC.browser==="firefox"){this.xmppConfig["connection"].jingle.media_constraints.mandatory.mozDontOfferDataChannel=true;if(this.config.myAudioEnabled)this.xmppConfig["connection"].jingle.media_constraints.offerToReceiveAudio=true;if(this.config.myVideoEnabled)this.xmppConfig["connection"].jingle.media_constraints.offerToReceiveVideo=true}}else{this.$log.log("webrtc capable browser required")}}},{key:"_stopUserStream",value:function _stopUserStream(username){this.$log.log("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");for(var sid in this.config["sids"]){if(this.config["sids"][sid]===username){this.xmppConfig["connection"].jingle.sessions[sid].terminate("disconnected user");delete this.xmppConfig["connection"].jingle.sessions[sid];delete this.config["sids"][sid]}}this.$log.log("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")}},{key:"_manageManagementMessage",value:function _manageManagementMessage(type,username,name,value){if(type==="video-micro-status"){if(username!==this.chatRoomConfig["myUsername"]){this.config["usersMicroStatus"][username]=value=="true";this.ChatRoomService.refreshScope()}}else if(type==="video-micro-status-request"){if(username===this.chatRoomConfig["myUsername"]){this.$log.log("resend micro status request");this.sendMicroStatus()}}else if(type==="video-micro-switch"){if(username===this.chatRoomConfig["myUsername"]){this.switchAudio();this.ChatRoomService.refreshScope()}}else if(type==="speaking"){this.$log.log(username+" is speaking...");this.config["speakingUser"]=username;this.ChatRoomService.refreshScope()}}},{key:"_onMediaReady",value:function _onMediaReady(event,stream){var _this4=this;this.$log.log("Media ready");this.config["localStream"]=stream;this.xmppConfig["connection"].jingle.localStream=stream;this.config["localStream"].getAudioTracks().forEach(function(t){return _this4.config["myAudioTracks"].push(t)});this.config["localStream"].getVideoTracks().forEach(function(t){return _this4.config["myVideoTracks"].push(t)});_index2.default.element(document).find(".mute").each(function(index,el){return el.muted=el.volume=true});var streamURL=window.URL.createObjectURL(this.config["localStream"]);var trustedStreamURL=this.$sce.trustAsResourceUrl(streamURL);this.config["mySourceStream"]=trustedStreamURL;this.config["sourceStreams"][this.chatRoomConfig["myUsername"]]=trustedStreamURL;this.config["mainStreamUsername"]=this.chatRoomConfig["myUsername"];this.initiateCalls();this.sendMicroStatus();this.initiateHark();this.ChatRoomService.refreshScope()}},{key:"_onMediaFailure",value:function _onMediaFailure(){this.$log.log("Media failure")}},{key:"_onCallIncoming",value:function _onCallIncoming(event,sid){this.$log.log("Incoming call : "+sid);var sess=this.xmppConfig["connection"].jingle.sessions[sid];var initiator=Strophe.getResourceFromJid(sess["initiator"]);this.addSid(sid,initiator);sess.sendAnswer();sess.accept()}},{key:"_onCallTerminated",value:function _onCallTerminated(){this.$log.log("Call terminated")}},{key:"_onRemoteStreamAdded",value:function _onRemoteStreamAdded(event,data,sid){this.$log.log("Remote stream for session "+sid+" added.");this._waitForRemoteStream(sid)}},{key:"_onRemoteStreamRemoved",value:function _onRemoteStreamRemoved(event,data,sid){this.$log.log("Remote stream for session "+sid+" removed.")}},{key:"_onIceConnectionStateChanged",value:function _onIceConnectionStateChanged(event,sid,sess){this.$log.log("_onIceConnectionStateChanged");this.$log.log("ice state for",sid,sess.peerconnection.iceConnectionState);this.$log.log("sig state for",sid,sess.peerconnection.signalingState);if(sess.peerconnection.iceConnectionState==="connected"){this.$log.log("add new stream")}else if(sess.peerconnection.iceConnectionState==="disconnected"){this.xmppConfig["connection"].jingle.sessions[sid].terminate("disconnected");this.$log.log("remove stream")}else if(sess.peerconnection.iceConnectionState==="failed"||sess.peerconnection.iceConnectionState==="closed"){this.$log.log("failed/closed stream")}}},{key:"_noStunCandidates",value:function _noStunCandidates(){this.$log.error("webrtc did not encounter stun candidates, NAT traversal will not work")}},{key:"_waitForRemoteStream",value:function _waitForRemoteStream(sid){var _this5=this;this.$log.log("*********** Waiting for remote stream... *******************");var sess=this.xmppConfig["connection"].jingle.sessions[sid];var tracks=sess.remoteStream.getTracks();if(tracks.length>0&&this.config["sids"][sid]){var streamURL=window.URL.createObjectURL(sess.remoteStream);var trustedStreamURL=this.$sce.trustAsResourceUrl(streamURL);this.config["sourceStreams"][this.config["sids"][sid]]=trustedStreamURL;this.$log.log("###################################################################");this.$log.log(this.config["sids"]);this.$log.log(this.xmppConfig["connection"].jingle.sessions);this.$log.log("###################################################################");this.ChatRoomService.refreshScope()}else{setTimeout(function(){_this5._waitForRemoteStream(sid)},500)}}}]);return RTCService}();exports.default=RTCService},620:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _chatRoomInput=__webpack_require__(621);var _chatRoomInput2=_interopRequireDefault(_chatRoomInput);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var ChatRoomInputDirective=function ChatRoomInputDirective(){(0,_classCallCheck3.default)(this,ChatRoomInputDirective);this.restrict="E";this.replace=true;this.template=_chatRoomInput2.default};exports.default=ChatRoomInputDirective},621:function(module,exports){module.exports='<div id="input-box">\n    <div class="input-group">\n        <input type="text"\n           id="msg-input"\n           class="form-control"\n           ng-model="crc.input"\n           ng-disabled="!crc.canParticipate()"\n           ng-keypress="$event.keyCode === 13 && crc.sendMessage()"\n        >\n        <span class="input-group-btn">\n            <button id="send-msg-btn"\n                class="btn btn-default"\n                ng-click="crc.sendMessage()"\n                ng-disabled="!crc.canParticipate()"\n            >\n                <i class="fa fa-comment"></i>\n            </button>\n        </span>\n    </div>\n</div>\n'},622:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _chatRoomMessages=__webpack_require__(623);var _chatRoomMessages2=_interopRequireDefault(_chatRoomMessages);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var ChatRoomMessagesDirective=function ChatRoomMessagesDirective(){(0,_classCallCheck3.default)(this,ChatRoomMessagesDirective);this.restrict="E";this.replace=true;this.template=_chatRoomMessages2.default};exports.default=ChatRoomMessagesDirective},623:function(module,exports){module.exports="<div id=\"chat-messages-panel\" class=\"well well-sm\" scroll-bottom=\"{'always': true}\">\n    <div ng-if=\"crc.oldMessages.length > 0\">\n        <div>****************************************</div>\n            <div ng-repeat=\"oldMessage in crc.oldMessages\">\n                <div ng-switch=\"oldMessage['type']\">\n                    <div ng-switch-when=\"message\">\n                        <b class=\"received-message\" style=\"color: {{ oldMessage['color'] }}\">\n                            {{ oldMessage['name'] }}\n                        </b> :\n                        {{ oldMessage['content'] }}\n                    </div>\n                    <div ng-switch-when=\"presence\">\n                        <b ng-switch=\"oldMessage['content']\">\n                            <span ng-switch-when=\"kicked\">\n                                {{ oldMessage['name'] }}\n                                {{ 'has_been_kicked_from_the_chat_room'|trans:{}:'chat' }}\n                            </span>\n                            <span ng-switch-when=\"banned\">\n                                {{ oldMessage['name'] }}\n                                {{ 'has_been_banned_from_the_chat_room'|trans:{}:'chat' }}\n                            </span>\n                            <span ng-switch-when=\"unbanned\">\n                                {{ oldMessage['name'] }}\n                                {{ 'has_been_unbanned_from_the_chat_room'|trans:{}:'chat' }}\n                            </span>\n                        </b>\n                    </div>\n                    <div ng-switch-when=\"raw\">\n                        <b>\n                            {{ oldMessage['content'] }}\n                        </b>\n                    </div>\n                </div>\n            </div>\n        <div>****************************************</div>\n    </div>\n    <div ng-repeat=\"message in crc.messages\">\n        <div ng-switch=\"message['type']\">\n            <div ng-switch-when=\"message\">\n                <b class=\"received-message\" style=\"color: {{ message['color'] }}\">\n                    {{ message['sender'] }}\n                </b> :\n                {{ message['message'] }}\n            </div>\n            <div ng-switch-when=\"presence\">\n                <b ng-switch=\"message['status']\">\n                    <span ng-switch-when=\"connection\">\n                        {{ message['name'] }}\n                        {{ 'has_joined_the_chat_room'|trans:{}:'chat' }}\n                    </span>\n                    <span ng-switch-when=\"disconnection\">\n                        {{ message['name'] }}\n                        {{ 'has_left_the_chat_room'|trans:{}:'chat' }}\n                    </span>\n                    <span ng-switch-when=\"kicked\">\n                        {{ message['name'] }}\n                        {{ 'has_been_kicked_from_the_chat_room'|trans:{}:'chat' }}\n                    </span>\n                    <span ng-switch-when=\"banned\">\n                        {{ message['name'] }}\n                        {{ 'has_been_banned_from_the_chat_room'|trans:{}:'chat' }}\n                    </span>\n                    <span ng-switch-when=\"unbanned\">\n                        {{ message['name'] }}\n                        {{ 'has_been_unbanned_from_the_chat_room'|trans:{}:'chat' }}\n                    </span>\n                </b>\n            </div>\n            <div ng-switch-when=\"raw\">\n                <b>\n                    {{ message['message'] }}\n                </b>\n            </div>\n        </div>\n    </div>\n</div>\n"},624:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _chatRoomUsers=__webpack_require__(625);var _chatRoomUsers2=_interopRequireDefault(_chatRoomUsers);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var ChatRoomUsersDirective=function ChatRoomUsersDirective(){(0,_classCallCheck3.default)(this,ChatRoomUsersDirective);this.restrict="E";this.replace=true;this.template=_chatRoomUsers2.default};exports.default=ChatRoomUsersDirective},625:function(module,exports){module.exports='<div id="chat-room-users-list" class="well well-sm">\n    <h4 class="text-center">\n        {{ \'users\'|trans:{}:\'platform\' }}\n        <span class="badge">{{ crc.users.length }}</span>\n    </h4>\n    <span ng-repeat="user in crc.users" class="participant">\n        <i class="fa fa-star"\n           data-toggle="tooltip"\n           data-placement="top"\n           title="{{ \'moderator\'|trans:{}:\'chat\' }}"\n           style="color: {{ user[\'color\'] }}"\n           ng-if="user[\'role\'] === \'moderator\'"\n        >\n        </i>\n        <i class="fa fa-user"\n           data-toggle="tooltip"\n           data-placement="top"\n           title="{{ \'participant\'|trans:{}:\'chat\' }}"\n           style="color: {{ user[\'color\'] }}"\n           ng-if="user[\'role\'] === \'participant\'"\n        >\n        </i>\n        <i class="fa fa-eye"\n           data-toggle="tooltip"\n           data-placement="top"\n           title="{{ \'visitor\'|trans:{}:\'chat\' }}"\n           style="color: {{ user[\'color\'] }}"\n           ng-if="user[\'role\'] === \'visitor\'"\n        >\n        </i>\n        {{ user[\'name\'] }}\n\n        <span ng-switch on="user[\'role\']" ng-if="crc.isAdmin() && user[\'affiliation\'] !== \'admin\'">\n            <i ng-switch-when="visitor"\n               class="fa fa-microphone pointer-hand chat-room-mute-btn"\n               data-toggle="tooltip"\n               data-placement="top"\n               title="{{ \'enable_participation\'|trans:{}:\'chat\' }}"\n               ng-click="crc.unmuteUser(user[\'username\'])"\n            >\n            </i>\n            <i ng-switch-default\n               class="fa fa-microphone-slash pointer-hand chat-room-mute-btn"\n               data-toggle="tooltip"\n               data-placement="top"\n               title="{{ \'disable_participation\'|trans:{}:\'chat\' }}"\n               ng-click="crc.muteUser(user[\'username\'])"\n            >\n            </i>\n        </span>\n        <i ng-if="crc.isModerator() && user[\'affiliation\'] !== \'admin\'"\n            class="fa fa-fire pointer-hand chat-room-kick-btn"\n           data-toggle="tooltip"\n           data-placement="top"\n           title="{{ \'kick\'|trans:{}:\'chat\' }}"\n           ng-click="crc.kickUser(user[\'username\'])"\n        >\n        </i>\n        <i ng-if="crc.isAdmin() && user[\'affiliation\'] !== \'admin\'"\n           class="fa fa-ban pointer-hand chat-room-ban-btn"\n           data-toggle="tooltip"\n           data-placement="top"\n           title="{{ \'ban\'|trans:{}:\'chat\' }}"\n           ng-click="crc.banUser(user[\'username\'])"\n        >\n        </i>\n        <br>\n    </span>\n    <div ng-if="crc.isAdmin() && crc.bannedUsers.length > 0">\n        <hr>\n        <h4 class="text-center">\n            {{ \'banned_users\'|trans:{}:\'chat\' }}\n            <span class="badge">{{ crc.bannedUsers.length }}</span>\n        </h4>\n        <span ng-repeat="bannedUser in crc.bannedUsers" class="banned-user">\n            {{ bannedUser[\'name\'] }}\n            <i class="fa fa-thumbs-up pointer-hand chat-room-unban-btn"\n               data-toggle="tooltip"\n               data-placement="top"\n               title="{{ \'cancel_ban\'|trans:{}:\'chat\' }}"\n               ng-click="crc.unbanUser(bannedUser[\'username\'])"\n            >\n            </i>\n            <br>\n        </span>\n    </div>\n</div>\n'},626:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _chatRoomVideos=__webpack_require__(627);var _chatRoomVideos2=_interopRequireDefault(_chatRoomVideos);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var ChatRoomVideosDirective=function ChatRoomVideosDirective(){(0,_classCallCheck3.default)(this,ChatRoomVideosDirective);this.restrict="E";this.replace=true;this.template=_chatRoomVideos2.default};exports.default=ChatRoomVideosDirective},627:function(module,exports){module.exports='<div id=\'participants-video-container\'>\n    <div id=\'my-video-container\' class="participant-stream">\n        <div class="panel panel-default participant-panel" ng-class="crc.getStreamClass(crc.getMyUsername())">\n            <div class="panel-heading">\n                <h3 class="panel-title">\n                    {{ \'me\'|trans:{}:\'chat\' }}\n                    <span class="pull-right">\n                        <button class="button button-sm" ng-click="crc.switchVideo()">\n                            <i class="fa fa-video-camera"></i>\n                        </button>\n                        <button class="button button-sm" ng-click="crc.switchAudio(crc.getMyUsername())">\n                            <i class="fa" ng-class="crc.rtcConfig[\'myAudioEnabled\'] ? \'fa-microphone\' : \'fa-microphone-slash\'"></i>\n                        </button>\n                    </span>\n                </h3>\n            </div>\n            <div class="panel-body participant-video-panel" ng-click="crc.selectSourceStream(crc.getMyUsername())">\n                <video autoplay="autoplay" class="participant-video not-video-js mute" ng-src="{{ crc.rtcConfig[\'mySourceStream\'] }}"></video>\n            </div>\n        </div>\n    </div>\n    <div ng-repeat="user in crc.rtcConfig[\'users\']" class="participant-stream">\n        <div class="panel panel-default participant-panel"\n             ng-class="crc.getStreamClass(user[\'username\'])"\n             ng-if="user[\'username\'] !== crc.chatRoomConfig[\'myUsername\']"\n        >\n            <div class="panel-heading">\n                <h3 class="panel-title">\n                    {{ user[\'name\'] }}\n                    <span class="pull-right">\n                        <button class="button button-sm" ng-click="crc.switchAudio(user[\'username\'])">\n                            <i class="fa" ng-class="crc.rtcConfig[\'usersMicroStatus\'][user[\'username\']] ? \'fa-microphone\' : \'fa-microphone-slash\'"></i>\n                        </button>\n                        <button class="button button-sm" ng-if="crc.isModerator() && user[\'affiliation\'] !== \'admin\'" ng-click="crc.kickUser(user[\'username\'])">\n                            <i class="fa fa-fire pointer-hand chat-room-kick-btn" data-toggle="tooltip" data-placement="top" title="{{ \'kick\'|trans:{}:\'chat\' }}">\n                            </i>\n                        </button>\n                    </span>\n                </h3>\n            </div>\n            <div class="panel-body participant-video-panel" ng-click="crc.selectSourceStream(user[\'username\'])">\n                <video autoplay="autoplay" class="participant-video other-stream not-video-js" ng-src="{{ crc.rtcConfig[\'sourceStreams\'][user[\'username\']] }}"></video>\n            </div>\n        </div>\n    </div>\n</div>\n';
},628:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=__webpack_require__(13);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _chatRoomAudios=__webpack_require__(629);var _chatRoomAudios2=_interopRequireDefault(_chatRoomAudios);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var ChatRoomAudiosDirective=function ChatRoomAudiosDirective(){(0,_classCallCheck3.default)(this,ChatRoomAudiosDirective);this.restrict="E";this.replace=true;this.template=_chatRoomAudios2.default};exports.default=ChatRoomAudiosDirective},629:function(module,exports){module.exports='<div id=\'participants-video-container\'>\n    <ul>\n        <li style="list-style: none;" ng-class="crc.getStreamClass(crc.getMyUsername())">\n            <button class="button button-sm" ng-click="crc.switchAudio(crc.getMyUsername())">\n                <i class="fa" ng-class="crc.rtcConfig[\'myAudioEnabled\'] ? \'fa-microphone\' : \'fa-microphone-slash\'"></i>\n            </button>\n            {{ \'me\'|trans:{}:\'chat\' }}\n        </li>\n        <li  style="list-style: none;" ng-repeat="user in crc.rtcConfig[\'users\']" ng-if="user[\'username\'] !== crc.chatRoomConfig[\'myUsername\']" ng-class="crc.getStreamClass(user[\'username\'])">\n            <button class="button button-sm" ng-click="crc.switchAudio(user[\'username\'])">\n                <i class="fa" ng-class="crc.rtcConfig[\'usersMicroStatus\'][user[\'username\']] ? \'fa-microphone\' : \'fa-microphone-slash\'"></i>\n            </button>\n            <button class="button button-sm" ng-if="crc.isModerator() && user[\'affiliation\'] !== \'admin\'" ng-click="crc.kickUser(user[\'username\'])"  data-toggle="tooltip" data-placement="top" title="{{ \'kick\'|trans:{}:\'chat\' }}">\n                <i class="fa fa-fire pointer-hand chat-room-kick-btn"></i>\n            </button>\n            {{ user[\'username\'] }}\n            <audio autoplay="autoplay" class="participant-video other-stream not-video-js" ng-src="{{ crc.rtcConfig[\'sourceStreams\'][user[\'username\']] }}"></audio>\n        </li>\n    </ul>\n</div>\n'}});